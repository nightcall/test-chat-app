!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=90)}([function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=n(89)},function(e,t,n){e.exports=n(75)()},function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(61)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(i=++o)}),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(62))},function(e,t,n){(function(e){var r,o=n(54),i=n(23),a=n(48),s=n(47),u=n(46);e&&e.ArrayBuffer&&(r=n(44));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),l="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=c||l;t.protocol=3;var p=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},d=o(p),h={type:"error",data:"parser error"},y=n(43);function m(e,t,n){for(var r=new Array(e.length),o=s(e.length,n),i=function(e,n,o){t(n,function(t,n){r[e]=n,o(t,r)})},a=0;a<e.length;a++)i(a,e[a],o)}t.encodePacket=function(n,r,o,i){"function"==typeof r&&(i=r,r=!1),"function"==typeof o&&(i=o,o=null);var a=void 0===n.data?void 0:n.data.buffer||n.data;if(e.ArrayBuffer&&a instanceof ArrayBuffer)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=e.data,i=new Uint8Array(o),a=new Uint8Array(1+o.byteLength);a[0]=p[e.type];for(var s=0;s<i.length;s++)a[s+1]=i[s];return r(a.buffer)}(n,r,i);if(y&&a instanceof e.Blob)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);if(f)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=new FileReader;return o.onload=function(){e.data=o.result,t.encodePacket(e,n,!0,r)},o.readAsArrayBuffer(e.data)}(e,n,r);var o=new Uint8Array(1);o[0]=p[e.type];var i=new y([o.buffer,e.data]);return r(i)}(n,r,i);if(a&&a.base64)return function(e,n){var r="b"+t.packets[e.type]+e.data.data;return n(r)}(n,i);var s=p[n.type];return void 0!==n.data&&(s+=o?u.encode(String(n.data),{strict:!1}):String(n.data)),i(""+s)},t.encodeBase64Packet=function(n,r){var o,i="b"+t.packets[n.type];if(y&&n.data instanceof e.Blob){var a=new FileReader;return a.onload=function(){var e=a.result.split(",")[1];r(i+e)},a.readAsDataURL(n.data)}try{o=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(e){for(var s=new Uint8Array(n.data),u=new Array(s.length),c=0;c<s.length;c++)u[c]=s[c];o=String.fromCharCode.apply(null,u)}return i+=e.btoa(o),r(i)},t.decodePacket=function(e,n,r){if(void 0===e)return h;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(r&&!1===(e=function(e){try{e=u.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return h;var o=e.charAt(0);return Number(o)==o&&d[o]?e.length>1?{type:d[o],data:e.substring(1)}:{type:d[o]}:h}o=new Uint8Array(e)[0];var i=a(e,1);return y&&"blob"===n&&(i=new y([i])),{type:d[o],data:i}},t.decodeBase64Packet=function(e,t){var n=d[e.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:e.substr(1)}};var o=r.decode(e.substr(1));return"blob"===t&&y&&(o=new y([o])),{type:n,data:o}},t.encodePayload=function(e,n,r){"function"==typeof n&&(r=n,n=null);var o=i(e);if(n&&o)return y&&!f?t.encodePayloadAsBlob(e,r):t.encodePayloadAsArrayBuffer(e,r);if(!e.length)return r("0:");m(e,function(e,r){t.encodePacket(e,!!o&&n,!1,function(e){r(null,function(e){return e.length+":"+e}(e))})},function(e,t){return r(t.join(""))})},t.decodePayload=function(e,n,r){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===e)return r(h,0,1);for(var i,a,s="",u=0,c=e.length;u<c;u++){var l=e.charAt(u);if(":"===l){if(""===s||s!=(i=Number(s)))return r(h,0,1);if(s!=(a=e.substr(u+1,i)).length)return r(h,0,1);if(a.length){if(o=t.decodePacket(a,n,!1),h.type===o.type&&h.data===o.data)return r(h,0,1);if(!1===r(o,u+i,c))return}u+=i,s=""}else s+=l}return""!==s?r(h,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){if(!e.length)return n(new ArrayBuffer(0));m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){return n(null,e)})},function(e,t){var r=t.reduce(function(e,t){var n;return e+(n="string"==typeof t?t.length:t.byteLength).toString().length+n+2},0),o=new Uint8Array(r),i=0;return t.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),a=0;a<e.length;a++)r[a]=e.charCodeAt(a);n=r.buffer}o[i++]=t?0:1;var s=n.byteLength.toString();for(a=0;a<s.length;a++)o[i++]=parseInt(s[a]);o[i++]=255;for(r=new Uint8Array(n),a=0;a<r.length;a++)o[i++]=r[a]}),n(o.buffer)})},t.encodePayloadAsBlob=function(e,n){m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);e=r.buffer,t[0]=0}var i=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),a=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)a[o]=parseInt(i[o]);if(a[i.length]=255,y){var s=new y([t.buffer,a.buffer,e]);n(null,s)}})},function(e,t){return n(new y(t))})},t.decodePayloadAsBinary=function(e,n,r){"function"==typeof n&&(r=n,n=null);for(var o=e,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),u=0===s[0],c="",l=1;255!==s[l];l++){if(c.length>310)return r(h,0,1);c+=s[l]}o=a(o,2+c.length),c=parseInt(c);var f=a(o,0,c);if(u)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(e){var p=new Uint8Array(f);f="";for(l=0;l<p.length;l++)f+=String.fromCharCode(p[l])}i.push(f),o=a(o,c)}var d=i.length;i.forEach(function(e,o){r(t.decodePacket(e,n,!0),o,d)})}}).call(this,n(0))},function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t){e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,s],l=0;(u=new Error(t.replace(/%s/g,function(){return c[l++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n(2),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),s=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function u(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return i[t]=n.store,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:s.isRequired,children:i.a.element.isRequired},o.childContextTypes=((e={})[t]=s.isRequired,e[n]=a,e),o}var c=u(),l=n(36),f=n.n(l),p=n(8),d=n.n(p);var h=null,y={notify:function(){}};var m=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=y}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=y)},e}(),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var v=0,b={};function w(){}function C(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,u=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,c=o.methodName,l=void 0===c?"connectAdvanced":c,p=o.renderCountProp,h=void 0===p?void 0:p,y=o.shouldHandleStateChanges,C=void 0===y||y,E=o.storeKey,x=void 0===E?"store":E,k=o.withRef,_=void 0!==k&&k,S=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),T=x+"Subscription",P=v++,O=((t={})[x]=s,t[T]=a,t),R=((n={})[T]=a,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+l+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=u(n),i=g({},S,{getDisplayName:u,methodName:l,renderCountProp:h,shouldHandleStateChanges:C,storeKey:x,withRef:_,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=P,r.state={},r.renderCount=0,r.store=e[x]||t[x],r.propsMode=Boolean(e[x]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+x+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+x+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,n),a.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[T]=t||this.context[T],e},a.prototype.componentDidMount=function(){C&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=w,this.store=null,this.selector.run=w,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return d()(_,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+l+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},a.prototype.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(C){var e=(this.propsMode?this.props:this.context)[T];this.subscription=new m(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(e){if(!(_||h||this.propsMode&&this.subscription))return e;var t=g({},e);return _&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[T]=this.subscription),t},a.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=R,a.contextTypes=O,a.propTypes=O,f()(a,t)}}var E=Object.prototype.hasOwnProperty;function x(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function k(e,t){if(x(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!E.call(t,n[o])||!x(e[n[o]],t[n[o]]))return!1;return!0}var _=n(15),S=n(91),T="object"==typeof self&&self&&self.Object===Object&&self,P=(S.a||T||Function("return this")()).Symbol,O=Object.prototype;O.hasOwnProperty,O.toString,P&&P.toStringTag;Object.prototype.toString;P&&P.toStringTag;Object.getPrototypeOf,Object;var R=Function.prototype,I=Object.prototype,A=R.toString;I.hasOwnProperty,A.call(Object);function N(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function U(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function j(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=U(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=U(o),o=r(t,n)),o},r}}var M=[function(e){return"function"==typeof e?j(e):void 0},function(e){return e?void 0:N(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?N(function(t){return Object(_.bindActionCreators)(e,t)}):void 0}];var D=[function(e){return"function"==typeof e?j(e):void 0},function(e){return e?void 0:N(function(){return{}})}],B=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function F(e,t,n){return B({},n,e,t)}var L=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(t,n,s){var u=e(t,n,s);return i?r&&o(u,a)||(a=u):(i=!0,a=u),a}}}(e):void 0},function(e){return e?void 0:function(){return F}}];function z(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function H(e,t,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,s=o.areStatePropsEqual,u=!1,c=void 0,l=void 0,f=void 0,p=void 0,d=void 0;function h(o,u){var h,y,m=!a(u,l),g=!i(o,c);return c=o,l=u,m&&g?(f=e(c,l),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):m?(e.dependsOnOwnProps&&(f=e(c,l)),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):g?(h=e(c,l),y=!s(h,f),f=h,y&&(d=n(f,p,l)),d):d}return function(o,i){return u?h(o,i):(f=e(c=o,l=i),p=t(r,l),d=n(f,p,l),u=!0,d)}}function q(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),s=r(e,i),u=o(e,i);return(i.pure?H:z)(a,s,u,e,i)}var V=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function W(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Y(e,t){return e===t}var K=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?C:t,r=e.mapStateToPropsFactories,o=void 0===r?D:r,i=e.mapDispatchToPropsFactories,a=void 0===i?M:i,s=e.mergePropsFactories,u=void 0===s?L:s,c=e.selectorFactory,l=void 0===c?q:c;return function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=i.pure,c=void 0===s||s,f=i.areStatesEqual,p=void 0===f?Y:f,d=i.areOwnPropsEqual,h=void 0===d?k:d,y=i.areStatePropsEqual,m=void 0===y?k:y,g=i.areMergedPropsEqual,v=void 0===g?k:g,b=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),w=W(e,o,"mapStateToProps"),C=W(t,a,"mapDispatchToProps"),E=W(r,u,"mergeProps");return n(l,V({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:w,initMapDispatchToProps:C,initMergeProps:E,pure:c,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:m,areMergedPropsEqual:v},b))}}();n.d(t,"Provider",function(){return c}),n.d(t,"createProvider",function(){return u}),n.d(t,"connectAdvanced",function(){return C}),n.d(t,"connect",function(){return K})},function(e,t,n){var r=n(4),o=n(5);function i(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=i,o(i.prototype),i.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},i.prototype.onPacket=function(e){this.emit("packet",e)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t,n){(function(t){var r=n(56);e.exports=function(e){var n=e.xdomain,o=e.xscheme,i=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!n||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(e){}if(!n)try{return new(t[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}}).call(this,n(0))},function(e,t,n){var r=n(3)("socket.io-parser"),o=n(5),i=n(59),a=n(28),s=n(27);function u(){}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=u,t.Decoder=f;var c=t.ERROR+'"encode error"';function l(e){var n=""+e.type;if(t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data){var o=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===o)return c;n+=o}return r("encoded %j as %s",e,n),n}function f(){this.reconstructor=null}function p(e){this.reconPack=e,this.buffers=[]}function d(e){return{type:t.ERROR,data:"parser error: "+e}}u.prototype.encode=function(e,n){(r("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){i.removeBlobs(e,function(e){var n=i.deconstructPacket(e),r=l(n.packet),o=n.buffers;o.unshift(r),t(o)})}(e,n):n([l(e)])},o(f.prototype),f.prototype.add=function(e){var n;if("string"==typeof e)n=function(e){var n=0,o={type:Number(e.charAt(0))};if(null==t.types[o.type])return d("unknown packet type "+o.type);if(t.BINARY_EVENT===o.type||t.BINARY_ACK===o.type){for(var i="";"-"!==e.charAt(++n)&&(i+=e.charAt(n),n!=e.length););if(i!=Number(i)||"-"!==e.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===e.charAt(n+1))for(o.nsp="";++n;){var s=e.charAt(n);if(","===s)break;if(o.nsp+=s,n===e.length)break}else o.nsp="/";var u=e.charAt(n+1);if(""!==u&&Number(u)==u){for(o.id="";++n;){var s=e.charAt(n);if(null==s||Number(s)!=s){--n;break}if(o.id+=e.charAt(n),n===e.length)break}o.id=Number(o.id)}if(e.charAt(++n)){var c=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(n)),l=!1!==c&&(o.type===t.ERROR||a(c));if(!l)return d("invalid payload");o.data=c}return r("decoded %s as %j",e,o),o}(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!s(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,s,u){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,s,u],f=0;(c=new Error(t.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return u}),n.d(t,"combineReducers",function(){return l}),n.d(t,"bindActionCreators",function(){return p}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(16),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function s(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var a;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,l=t,f=[],p=f,d=!1;function h(){p===f&&(p=f.slice())}function y(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return l}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),p.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=p.indexOf(e);p.splice(n,1)}}}function g(e){if(!s(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,l=c(l,e)}finally{d=!1}for(var t=f=p,n=0;n<t.length;n++){(0,t[n])()}return e}return g({type:o.INIT}),(a={dispatch:g,subscribe:m,getState:y,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,g({type:o.REPLACE})}})[r.a]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(y())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},a}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a=Object.keys(n);var s=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){s=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(s)throw s;for(var r=!1,o={},i=0;i<a.length;i++){var u=a[i],l=n[u],f=e[u],p=l(f,t);if(void 0===p){var d=c(u,t);throw new Error(d)}o[u]=p,r=r||p!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":i(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],s=e[a];"function"==typeof s&&(r[a]=f(s,t))}return r}function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=e.apply(void 0,r),s=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},u={getState:i.getState,dispatch:function(){return s.apply(void 0,arguments)}},c=t.map(function(e){return e(u)});return s=d.apply(void 0,c)(i.dispatch),a({},i,{dispatch:s})}}}},function(e,t,n){"use strict";(function(e,r){var o,i=n(35);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(0),n(73)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LOGIN_FAILED=t.LOGIN_REQUEST=t.LOGIN_SUCCESS=t.RECEIVE_USERS_LIST=t.RECEIVE_ROOMS_LIST=t.RETRIEVE_USERS_LIST_PENDING=t.RETRIEVE_ROOMS_LIST_PENDING=void 0,t.retrieveRoomsList=function(){return function(e){e({type:a}),i.default.emit("RETRIEVE_ROOMS_LIST")}},t.retrieveUsersList=function(){return function(e){e({type:s}),i.default.emit("RETRIEVE_USERS_LIST")}},t.receiveRoomsList=function(e){return{type:u,list:e}},t.login=function(e,t){return function(n){n({type:l}),fetch("/login",{headers:{Accept:"application/json","Content-Type":"application/json"},method:"post",credentials:"same-origin",body:JSON.stringify({username:e,password:t})}).then(function(e){return e.json()},function(e){return console.log("An error occured",e)}).then(function(e){e.error?(n({type:f}),console.log(e.error)):(console.log(e),n({type:c,user:e}))})}},t.createRoom=function(){return function(e){}};var r,o=n(30),i=(r=o)&&r.__esModule?r:{default:r};var a=t.RETRIEVE_ROOMS_LIST_PENDING="RETRIEVE_ROOMS_LIST_PENDING",s=t.RETRIEVE_USERS_LIST_PENDING="RETRIEVE_USERS_LIST_PENDING",u=t.RECEIVE_ROOMS_LIST="RECEIVE_ROOMS_LIST",c=(t.RECEIVE_USERS_LIST="RECEIVE_USERS_LIST",t.LOGIN_SUCCESS="LOGIN_SUCCESS"),l=t.LOGIN_REQUEST="LOGIN_REQUEST",f=t.LOGIN_FAILED="LOGIN_FAILED"},function(e,t){var n=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return t.apply(e,r.concat(n.call(arguments)))}}},function(e,t){e.exports=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},function(e,t,n){var r=n(12),o=n(5),i=n(39),a=n(19),s=n(18),u=n(3)("socket.io-client:socket"),c=n(7),l=n(23);e.exports=d;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},p=o.prototype.emit;function d(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}o(d.prototype),d.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[a(e,"open",s(this,"onopen")),a(e,"packet",s(this,"onpacket")),a(e,"close",s(this,"onclose"))]}},d.prototype.open=d.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},d.prototype.send=function(){var e=i(arguments);return e.unshift("message"),this.emit.apply(this,e),this},d.prototype.emit=function(e){if(f.hasOwnProperty(e))return p.apply(this,arguments),this;var t=i(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:l(t))?r.BINARY_EVENT:r.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},d.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},d.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},d.prototype.onclose=function(e){u("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},d.prototype.onpacket=function(e){var t=e.nsp===this.nsp,n=e.type===r.ERROR&&"/"===e.nsp;if(t||n)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},d.prototype.onevent=function(e){var t=e.data||[];u("emitting event %j",t),null!=e.id&&(u("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?p.apply(this,t):this.receiveBuffer.push(t)},d.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);u("sending ack %j",o),t.packet({type:l(o)?r.BINARY_ACK:r.ACK,id:e,data:o})}}},d.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(u("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):u("bad ack %s",e.id)},d.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},d.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)p.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},d.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},d.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},d.prototype.close=d.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},d.prototype.compress=function(e){return this.flags.compress=e,this},d.prototype.binary=function(e){return this.flags.binary=e,this}},function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}},function(e,t,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i=64,a={},s=0,u=0;function c(e){var t="";do{t=o[e%i]+t,e=Math.floor(e/i)}while(e>0);return t}function l(){var e=c(+new Date);return e!==r?(s=0,r=e):e+"."+c(s++)}for(;u<i;u++)a[o[u]]=u;l.encode=c,l.decode=function(e){var t=0;for(u=0;u<e.length;u++)t=t*i+a[e.charAt(u)];return t},e.exports=l},function(e,t,n){(function(t){var r=n(49),o=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);e.exports=function e(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var o=0,s=n.length;o<s;o++)if(e(n[o]))return!0;return!1}if("function"==typeof t&&t.isBuffer&&t.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||i&&n instanceof Blob||a&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return e(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&e(n[u]))return!0;return!1}}).call(this,n(53).Buffer)},function(e,t,n){var r=n(10),o=n(7),i=n(4),a=n(6),s=n(22),u=n(3)("engine.io-client:polling");e.exports=l;var c=null!=new(n(11))({xdomain:!1}).responseType;function l(e){var t=e&&e.forceBase64;c&&!t||(this.supportsBinary=!1),r.call(this,e)}a(l,r),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(e){var t=this;function n(){u("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||n()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||n()}))}else n()},l.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(e){var t=this;u("polling got data %s",e);i.decodePayload(e,this.socket.binaryType,function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var e=this;function t(){u("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t))},l.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};i.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},l.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=s()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},function(e,t,n){(function(e){var r=n(11),o=n(55),i=n(42),a=n(41);t.polling=function(t){var n=!1,a=!1,s=!1!==t.jsonp;if(e.location){var u="https:"===location.protocol,c=location.port;c||(c=u?443:80),n=t.hostname!==location.hostname||c!==t.port,a=t.secure!==u}if(t.xdomain=n,t.xscheme=a,"open"in new r(t)&&!t.forceJSONP)return new o(t);if(!s)throw new Error("JSONP disabled");return new i(t)},t.websocket=a}).call(this,n(0))},function(e,t,n){var r=n(58),o=n(20),i=n(5),a=n(12),s=n(19),u=n(18),c=n(3)("socket.io-client:manager"),l=n(21),f=n(38),p=Object.prototype.hasOwnProperty;function d(e,t){if(!(this instanceof d))return new d(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||a;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=d,d.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)p.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},d.prototype.updateSocketIds=function(){for(var e in this.nsps)p.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},d.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},i(d.prototype),d.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},d.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},d.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},d.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},d.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},d.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},d.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},d.prototype.open=d.prototype.connect=function(e,t){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=s(n,"open",function(){o.onopen(),e&&e()}),a=s(n,"error",function(t){if(c("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else o.maybeReconnectOnOpen()});if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var l=setTimeout(function(){c("connect attempt timed out after %d",u),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",u)},u);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(i),this.subs.push(a),this},d.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(s(e,"data",u(this,"ondata"))),this.subs.push(s(e,"ping",u(this,"onping"))),this.subs.push(s(e,"pong",u(this,"onpong"))),this.subs.push(s(e,"error",u(this,"onerror"))),this.subs.push(s(e,"close",u(this,"onclose"))),this.subs.push(s(this.decoder,"decoded",u(this,"ondecoded")))},d.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},d.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},d.prototype.ondata=function(e){this.decoder.add(e)},d.prototype.ondecoded=function(e){this.emit("packet",e)},d.prototype.onerror=function(e){c("error",e),this.emitAll("error",e)},d.prototype.socket=function(e,t){var n=this.nsps[e];if(!n){n=new o(this,e,t),this.nsps[e]=n;var r=this;n.on("connecting",i),n.on("connect",function(){n.id=r.generateId(e)}),this.autoConnect&&i()}function i(){~l(r.connecting,n)||r.connecting.push(n)}return n},d.prototype.destroy=function(e){var t=l(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},d.prototype.packet=function(e){c("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()}))},d.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},d.prototype.cleanup=function(){c("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},d.prototype.close=d.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},d.prototype.onclose=function(e){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},d.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();c("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(c("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(c("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(c("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},d.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t,n){(function(t){e.exports=function(e){return n&&t.Buffer.isBuffer(e)||r&&(e instanceof t.ArrayBuffer||o(e))};var n="function"==typeof t.Buffer&&"function"==typeof t.Buffer.isBuffer,r="function"==typeof t.ArrayBuffer,o=r&&"function"==typeof t.ArrayBuffer.isView?t.ArrayBuffer.isView:function(e){return e.buffer instanceof t.ArrayBuffer}}).call(this,n(0))},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,o=e.indexOf("["),i=e.indexOf("]");-1!=o&&-1!=i&&(e=e.substring(0,o)+e.substring(o,i).replace(/:/g,";")+e.substring(i,e.length));for(var a=n.exec(e||""),s={},u=14;u--;)s[r[u]]=a[u]||"";return-1!=o&&-1!=i&&(s.source=t,s.host=s.host.substring(1,s.host.length-1).replace(/;/g,":"),s.authority=s.authority.replace("[","").replace("]","").replace(/;/g,":"),s.ipv6uri=!0),s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=n(64)()},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,c=0,l=[],f=n(77);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(v(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function y(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),g(t,e.attrs),h(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=u||(u=m(t)),r=C.bind(null,n,a,!1),o=C.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){y(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var b,w=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function C(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))o.call(n,c)&&(s[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(s[a[l]]=n[a[l]])}}return s}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,s=a&&a(Object);return function u(c,l,f){if("string"!=typeof l){if(s){var p=a(l);p&&p!==s&&u(c,p,f)}var d=r(l);o&&(d=d.concat(o(l)));for(var h=0;h<d.length;++h){var y=d[h];if(!(e[y]||t[y]||f&&f[y])){var m=i(l,y);try{n(c,y,m)}catch(e){}}}return c}return c}}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(15),i=n(17);t.default=(0,o.combineReducers)({user:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{_id:"5b045203ce5cd514f8b1ac1b",name:"Sara",password:"1234",lastDateActive:"45621358"},t=arguments[1];switch(t.type){case i.LOGIN_SUCCESS:return r({},t.user);default:return e}},usersList:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[{name:"Jon"},{name:"Andrew"}],t=arguments[1];switch(t.type){case i.RECEIVE_USERS_LIST:return t.list;default:return e}},rooms:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1];switch(t.type){case i.RECEIVE_ROOMS_LIST:return console.log(t.list),t.list;default:return e}},isLoggedIn:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];switch(arguments[1].type){case i.LOGIN_SUCCESS:return!0;default:return e}},isLoggingIn:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];switch(arguments[1].type){case i.LOGIN_REQUEST:return!0;case i.LOGIN_SUCCESS:case i.LOGIN_FAILED:return!1;default:return e}}})},function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},function(e,t){e.exports=function(e,t){for(var n=[],r=(t=t||0)||0;r<e.length;r++)n[r-t]=e[r];return n}},function(e,t){},function(e,t,n){(function(t){var r,o=n(10),i=n(4),a=n(7),s=n(6),u=n(22),c=n(3)("engine.io-client:websocket"),l=t.WebSocket||t.MozWebSocket;if("undefined"==typeof window)try{r=n(40)}catch(e){}var f=l;function p(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=l&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(f=r),o.call(this,e)}f||"undefined"!=typeof window||(f=r),e.exports=p,s(p,o),p.prototype.name="websocket",p.prototype.supportsBinary=!0,p.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?t?new f(e,t):new f(e):new f(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},p.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},p.prototype.write=function(e){var n=this;this.writable=!1;for(var r=e.length,o=0,a=r;o<a;o++)!function(e){i.encodePacket(e,n.supportsBinary,function(o){if(!n.usingBrowserWebSocket){var i={};if(e.options&&(i.compress=e.options.compress),n.perMessageDeflate)("string"==typeof o?t.Buffer.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(i.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,i)}catch(e){c("websocket closed before onclose event")}--r||s()})}(e[o]);function s(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},p.prototype.onClose=function(){o.prototype.onClose.call(this)},p.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},p.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=u()),this.supportsBinary||(e.b64=1),(e=a.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},p.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===p.prototype.name)}}).call(this,n(0))},function(e,t,n){(function(t){var r=n(24),o=n(6);e.exports=c;var i,a=/\n/g,s=/\\n/g;function u(){}function c(e){r.call(this,e),this.query=this.query||{},i||(t.___eio||(t.___eio=[]),i=t.___eio),this.index=i.length;var n=this;i.push(function(e){n.onData(e)}),this.query.j=this.index,t.document&&t.addEventListener&&t.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=u)},!1)}o(c,r),c.prototype.supportsBinary=!1,c.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},c.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},c.prototype.doWrite=function(e,t){var n=this;if(!this.form){var r,o=document.createElement("form"),i=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=u,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function c(){l(),t()}function l(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),l(),e=e.replace(s,"\\\n"),this.area.value=e.replace(a,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&c()}:this.iframe.onload=c}}).call(this,n(0))},function(e,t,n){(function(t){var n=t.BlobBuilder||t.WebKitBlobBuilder||t.MSBlobBuilder||t.MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),i=n&&n.prototype.append&&n.prototype.getBlob;function a(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}e[t]=r}}}function s(e,t){t=t||{};var r=new n;a(e);for(var o=0;o<e.length;o++)r.append(e[o]);return t.type?r.getBlob(t.type):r.getBlob()}function u(e,t){return a(e),new Blob(e,t||{})}e.exports=r?o?t.Blob:u:i?s:void 0}).call(this,n(0))},function(e,t){!function(){"use strict";for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<e.length;r++)n[e.charCodeAt(r)]=r;t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,i="";for(n=0;n<o;n+=3)i+=e[r[n]>>2],i+=e[(3&r[n])<<4|r[n+1]>>4],i+=e[(15&r[n+1])<<2|r[n+2]>>6],i+=e[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(e){var t,r,o,i,a,s=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var l=new ArrayBuffer(s),f=new Uint8Array(l);for(t=0;t<u;t+=4)r=n[e.charCodeAt(t)],o=n[e.charCodeAt(t+1)],i=n[e.charCodeAt(t+2)],a=n[e.charCodeAt(t+3)],f[c++]=r<<2|o>>4,f[c++]=(15&o)<<4|i>>2,f[c++]=(3&i)<<6|63&a;return l}}()},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){(function(e,r){var o;/*! https://mths.be/utf8js v2.1.2 by @mathias */!function(i){var a="object"==typeof t&&t,s=("object"==typeof e&&e&&e.exports,"object"==typeof r&&r);s.global!==s&&s.window;var u,c,l,f=String.fromCharCode;function p(e){for(var t,n,r=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function d(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function h(e,t){return f(e>>t&63|128)}function y(e,t){if(0==(4294967168&e))return f(e);var n="";return 0==(4294965248&e)?n=f(e>>6&31|192):0==(4294901760&e)?(d(e,t)||(e=65533),n=f(e>>12&15|224),n+=h(e,6)):0==(4292870144&e)&&(n=f(e>>18&7|240),n+=h(e,12),n+=h(e,6)),n+=f(63&e|128)}function m(){if(l>=c)throw Error("Invalid byte index");var e=255&u[l];if(l++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function g(e){var t,n;if(l>c)throw Error("Invalid byte index");if(l==c)return!1;if(t=255&u[l],l++,0==(128&t))return t;if(192==(224&t)){if((n=(31&t)<<6|m())>=128)return n;throw Error("Invalid continuation byte")}if(224==(240&t)){if((n=(15&t)<<12|m()<<6|m())>=2048)return d(n,e)?n:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(n=(7&t)<<18|m()<<12|m()<<6|m())>=65536&&n<=1114111)return n;throw Error("Invalid UTF-8 detected")}var v={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,r=p(e),o=r.length,i=-1,a="";++i<o;)a+=y(r[i],n);return a},decode:function(e,t){var n=!1!==(t=t||{}).strict;u=p(e),c=u.length,l=0;for(var r,o=[];!1!==(r=g(n));)o.push(r);return function(e){for(var t,n=e.length,r=-1,o="";++r<n;)(t=e[r])>65535&&(o+=f((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=f(t);return o}(o)}};void 0===(o=function(){return v}.call(t,n,t,e))||(e.exports=o)}()}).call(this,n(45)(e),n(0))},function(e,t){function n(){}e.exports=function(e,t,r){var o=!1;return r=r||n,i.count=e,0===e?t():i;function i(e,n){if(i.count<=0)throw new Error("after called too many times");--i.count,e?(o=!0,t(e),t=r):0!==i.count||o||t(null,n)}}},function(e,t){e.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(e),i=new Uint8Array(n-t),a=t,s=0;a<n;a++,s++)i[s]=o[a];return i.buffer}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){t.read=function(e,t,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,c=u>>1,l=-7,f=n?o-1:0,p=n?-1:1,d=e[t+f];for(f+=p,i=d&(1<<-l)-1,d>>=-l,l+=s;l>0;i=256*i+e[t+f],f+=p,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+e[t+f],f+=p,l-=8);if(0===i)i=1-c;else{if(i===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=c}return(d?-1:1)*a*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var a,s,u,c=8*i-o-1,l=(1<<c)-1,f=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,h=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=l?(s=0,a=l):a+f>=1?(s=(t*u-1)*Math.pow(2,o),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;e[n+d]=255&s,d+=h,s/=256,o-=8);for(a=a<<o|s,c+=o;c>0;e[n+d]=255&a,d+=h,a/=256,c-=8);e[n+d-h]|=128*y}},function(e,t,n){"use strict";t.byteLength=function(e){var t=c(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=c(e),r=n[0],a=n[1],s=new i(function(e,t,n){return 3*(t+n)/4-n}(0,r,a)),u=0,l=a>0?r-4:r,f=0;f<l;f+=4)t=o[e.charCodeAt(f)]<<18|o[e.charCodeAt(f+1)]<<12|o[e.charCodeAt(f+2)]<<6|o[e.charCodeAt(f+3)],s[u++]=t>>16&255,s[u++]=t>>8&255,s[u++]=255&t;2===a&&(t=o[e.charCodeAt(f)]<<2|o[e.charCodeAt(f+1)]>>4,s[u++]=255&t);1===a&&(t=o[e.charCodeAt(f)]<<10|o[e.charCodeAt(f+1)]<<4|o[e.charCodeAt(f+2)]>>2,s[u++]=t>>8&255,s[u++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],a=0,s=n-o;a<s;a+=16383)i.push(l(e,a,a+16383>s?s:a+16383));1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,n){for(var o,i,a=[],s=t;s<n;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(52),o=n(51),i=n(50);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return c(this,e,t,n)}function c(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),o=(e=s(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|d(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?s(e,0):p(e,t);if("Buffer"===t.type&&i(t.data))return p(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(l(t),e=s(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function p(e,t){var n=t.length<0?0:0|d(t.length);e=s(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function h(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return L(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(e).length;default:if(r)return L(e).length;t=(""+t).toLowerCase(),r=!0}}function y(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function m(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,o){var i,a=1,s=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,n/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var l=-1;for(i=n;i<s;i++)if(c(e,i)===c(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*a}else-1!==l&&(i-=i-l),l=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){for(var f=!0,p=0;p<u;p++)if(c(e,i+p)!==c(t,p)){f=!1;break}if(f)return i}return-1}function v(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function b(e,t,n,r){return H(L(t,e.length-n),e,n,r)}function w(e,t,n,r){return H(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function C(e,t,n,r){return w(e,t,n,r)}function E(e,t,n,r){return H(z(t),e,n,r)}function x(e,t,n,r){return H(function(e,t){for(var n,r,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function k(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function _(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,a,s,u,c=e[o],l=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(u=(15&c)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=e[o+1],a=e[o+2],s=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=f}return function(e){var t=e.length;if(t<=S)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=S));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return c(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?s(e,t):void 0!==n?"string"==typeof r?s(e,t).fill(n,r):s(e,t).fill(n):s(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},u.byteLength=h,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?_(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,n);case"utf8":case"utf-8":return _(this,t,n);case"ascii":return T(this,t,n);case"latin1":case"binary":return P(this,t,n);case"base64":return k(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,o>>>=0,this===e)return 0;for(var i=o-r,a=n-t,s=Math.min(i,a),c=this.slice(r,o),l=e.slice(t,n),f=0;f<s;++f)if(c[f]!==l[f]){i=c[f],a=l[f];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return m(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return m(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return b(this,e,t,n);case"ascii":return w(this,e,t,n);case"latin1":case"binary":return C(this,e,t,n);case"base64":return E(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function T(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function P(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function O(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=F(e[i]);return o}function R(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function I(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function A(e,t,n,r,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function N(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function U(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function j(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function M(e,t,n,r,i){return i||j(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function D(e,t,n,r,i){return i||j(e,0,n,8),o.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if(e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||I(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||I(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},u.prototype.readUInt8=function(e,t){return t||I(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||I(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||I(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||I(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||I(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||I(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||I(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||I(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||I(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||I(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||I(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||I(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||I(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||I(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||I(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||I(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||A(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||A(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):U(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);A(this,e,t,n,o-1,-o)}var i=0,a=1,s=0;for(this[t]=255&e;++i<n&&(a*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);A(this,e,t,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):U(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||A(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return M(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return M(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return D(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return D(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var a=u.isBuffer(e)?e:L(new u(e,r).toString()),s=a.length;for(i=0;i<n-t;++i)this[i+t]=a[i%s]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function L(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function z(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(B,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function H(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(0))},function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},function(e,t,n){(function(t){var r=n(11),o=n(24),i=n(5),a=n(6),s=n(3)("engine.io-client:polling-xhr");function u(){}function c(e){if(o.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,t.location){var n="https:"===location.protocol,r=location.port;r||(r=n?443:80),this.xd=e.hostname!==t.location.hostname||r!==e.port,this.xs=e.secure!==n}}function l(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}function f(){for(var e in l.requests)l.requests.hasOwnProperty(e)&&l.requests[e].abort()}e.exports=c,e.exports.Request=l,a(c,o),c.prototype.supportsBinary=!0,c.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new l(e)},c.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),o=this;r.on("success",t),r.on("error",function(e){o.onError("xhr post error",e)}),this.sendXhr=r},c.prototype.doPoll=function(){s("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},i(l.prototype),l.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new r(e),o=this;try{s("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&n.setRequestHeader(i,this.extraHeaders[i])}catch(e){}if("POST"===this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{n.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){o.onLoad()},n.onerror=function(){o.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState)try{var e=n.getResponseHeader("Content-Type");o.supportsBinary&&"application/octet-stream"===e&&(n.responseType="arraybuffer")}catch(e){}4===n.readyState&&(200===n.status||1223===n.status?o.onLoad():setTimeout(function(){o.onError(n.status)},0))},s("xhr data %s",this.data),n.send(this.data)}catch(e){return void setTimeout(function(){o.onError(e)},0)}t.document&&(this.index=l.requestsCount++,l.requests[this.index]=this)},l.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},l.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},l.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},l.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,e)try{this.xhr.abort()}catch(e){}t.document&&delete l.requests[this.index],this.xhr=null}},l.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},l.prototype.hasXDR=function(){return void 0!==t.XDomainRequest&&!this.xs&&this.enablesXDR},l.prototype.abort=function(){this.cleanup()},l.requestsCount=0,l.requests={},t.document&&(t.attachEvent?t.attachEvent("onunload",f):t.addEventListener&&t.addEventListener("beforeunload",f,!1))}).call(this,n(0))},function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t,n){(function(t){var r=n(25),o=n(5),i=n(3)("engine.io-client:socket"),a=n(21),s=n(4),u=n(29),c=n(7);function l(e,n){if(!(this instanceof l))return new l(e,n);n=n||{},e&&"object"==typeof e&&(n=e,e=null),e?(e=u(e),n.hostname=e.host,n.secure="https"===e.protocol||"wss"===e.protocol,n.port=e.port,e.query&&(n.query=e.query)):n.host&&(n.hostname=u(n.host).host),this.secure=null!=n.secure?n.secure:t.location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.agent=n.agent||!1,this.hostname=n.hostname||(t.location?location.hostname:"localhost"),this.port=n.port||(t.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.transportOptions=n.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var r="object"==typeof t&&t;r.global===r&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=l,l.priorWebsocketSuccess=!1,o(l.prototype),l.protocol=s.protocol,l.Socket=l,l.Transport=n(10),l.transports=n(25),l.parser=n(4),l.prototype.createTransport=function(e){i('creating transport "%s"',e);var t=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.query);t.EIO=s.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new r[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0})},l.prototype.open=function(){var e;if(this.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},l.prototype.setTransport=function(e){i("setting transport %s",e.name);var t=this;this.transport&&(i("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},l.prototype.probe=function(e){i('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(i('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(i('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;l.priorWebsocketSuccess="websocket"===t.name,i('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(i("changing transport and sending upgrade packet"),p(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())})}else{i('probe transport "%s" failed',e);var a=new Error("probe error");a.transport=t.name,r.emit("upgradeError",a)}}))}function a(){n||(n=!0,p(),t.close(),t=null)}function s(n){var o=new Error("probe error: "+n);o.transport=t.name,a(),i('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",o)}function u(){s("transport closed")}function c(){s("socket closed")}function f(e){t&&e.name!==t.name&&(i('"%s" works - aborting "%s"',e.name,t.name),a())}function p(){t.removeListener("open",o),t.removeListener("error",s),t.removeListener("close",u),r.removeListener("close",c),r.removeListener("upgrading",f)}l.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",s),t.once("close",u),this.once("close",c),this.once("upgrading",f),t.open()},l.prototype.onOpen=function(){if(i("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){i("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},l.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(i('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else i('packet received with socket readyState "%s"',this.readyState)},l.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},l.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},l.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){i("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},l.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},l.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},l.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(i("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},l.prototype.write=l.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},l.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},l.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t()}):this.upgrading?r():t()}function t(){e.onClose("forced close"),i("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return this},l.prototype.onError=function(e){i("socket error %j",e),l.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},l.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){i('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},l.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~a(this.transports,e[n])&&t.push(e[n]);return t}}).call(this,n(0))},function(e,t,n){e.exports=n(57),e.exports.parser=n(4)},function(e,t,n){(function(e){var r=n(28),o=n(27),i=Object.prototype.toString,a="function"==typeof e.Blob||"[object BlobConstructor]"===i.call(e.Blob),s="function"==typeof e.File||"[object FileConstructor]"===i.call(e.File);t.deconstructPacket=function(e){var t=[],n=e.data,i=e;return i.data=function e(t,n){if(!t)return t;if(o(t)){var i={_placeholder:!0,num:n.length};return n.push(t),i}if(r(t)){for(var a=new Array(t.length),s=0;s<t.length;s++)a[s]=e(t[s],n);return a}if("object"==typeof t&&!(t instanceof Date)){var a={};for(var u in t)a[u]=e(t[u],n);return a}return t}(n,t),i.attachments=t.length,{packet:i,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(r(t))for(var o=0;o<t.length;o++)t[o]=e(t[o],n);else if("object"==typeof t)for(var i in t)t[i]=e(t[i],n);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var n=0,i=e;!function e(u,c,l){if(!u)return u;if(a&&u instanceof Blob||s&&u instanceof File){n++;var f=new FileReader;f.onload=function(){l?l[c]=this.result:i=this.result,--n||t(i)},f.readAsArrayBuffer(u)}else if(r(u))for(var p=0;p<u.length;p++)e(u[p],p,u);else if("object"==typeof u&&!o(u))for(var d in u)e(u[d],d,u)}(i),n||t(i)}}).call(this,n(0))},function(e,t){var n=1e3,r=60*n,o=60*r,i=24*o,a=365.25*i;function s(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var u,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var s=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*a;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*o;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?s(u=e,i,"day")||s(u,o,"hour")||s(u,r,"minute")||s(u,n,"second")||u+" ms":function(e){if(e>=i)return Math.round(e/i)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var u=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=t.formatters[r];if("function"==typeof o){var i=a[u];n=o.call(e,i),a.splice(u,1),u--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var i=t.instances[n];i.enabled=t.enabled(i.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(60),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var e=s(p);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){(function(t){var r=n(29),o=n(3)("socket.io-client:url");e.exports=function(e,n){var i=e;n=n||t.location,null==e&&(e=n.protocol+"//"+n.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),o("parse %s",e),i=r(e));i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443"));i.path=i.path||"/";var a=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+a+":"+i.port,i.href=i.protocol+"://"+a+(n&&n.port===i.port?"":":"+i.port),i}}).call(this,n(0))},function(e,t,n){var r=n(63),o=n(12),i=n(26),a=n(3)("socket.io-client");e.exports=t=u;var s=t.managers={};function u(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o=r(e),u=o.source,c=o.id,l=o.path,f=s[c]&&l in s[c].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||f?(a("ignoring socket cache for %s",u),n=i(u,t)):(s[c]||(a("new io instance for %s",u),s[c]=i(u,t)),n=s[c]),o.query&&!t.query&&(t.query=o.query),n.socket(o.path,t)}t.protocol=o.protocol,t.connect=u,t.Manager=n(26),t.Socket=n(20)},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}t.__esModule=!0;var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){(e.exports=n(32)(!1)).push([e.i,"@keyframes rotation {\n  from {\n    transform: rotate(0deg); }\n  to {\n    transform: rotate(360deg); } }\n\n.flex-row {\n  display: flex;\n  flex-direction: row; }\n\n.flex-col {\n  display: flex;\n  flex-direction: column; }\n\n#login-container {\n  position: absolute;\n  z-index: 42;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center; }\n  #login-container div {\n    width: 1024px;\n    height: 600px;\n    background-color: #efefef;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center; }\n    #login-container div img {\n      animation: rotation 1s infinite linear; }\n    #login-container div div {\n      width: 512px;\n      padding: 30px; }\n",""])},function(e,t,n){var r=n(66);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(31)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=c(n(1)),a=n(9),s=n(17);n(67);var u=c(n(92));function c(e){return e&&e.__esModule?e:{default:e}}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleFormChange=function(e){return function(t){var o=t.target,i=o.name,a=o.value;n.setState(function(t){return r({},t,l({},e,r({},t[e],l({},i,a))))})}},n.signUp=function(e){e.preventDefault();var t=n.state.signUpForm,r=t.username,o=t.password,i=t.repeatPassword;r.length&&o.length&&o==i?fetch("/signup",{headers:{Accept:"application/json","Content-Type":"application/json"},method:"post",credentials:"same-origin",body:JSON.stringify({username:r,password:o})}).then(function(e){return e.json()},function(e){return console.log("An error occured",e)}).then(function(e){e.error?n.setState({info:r+" is already taken."}):n.setState({info:"Account created successfully !"})}):console.log("Invalid signup form")},n.submitLogin=function(e){e.preventDefault();var t=n.state.loginForm,r=t.username,o=t.password;(0,n.props.handleLogin)(r,o)},n.state={info:"",signUpForm:{username:"",password:"",repeatPassword:""},loginForm:{username:"",password:""}},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"render",value:function(){var e=this.state.loginForm,t=this.state.signUpForm,n=this.props.isLoggingIn,r=this.state.info;return n?i.default.createElement("div",{id:"login-container"},i.default.createElement("div",null,i.default.createElement("img",{src:u.default,alt:"loading"}))):i.default.createElement("div",{id:"login-container"},i.default.createElement("div",null,i.default.createElement("div",null,i.default.createElement("form",{onSubmit:this.signUp},i.default.createElement("input",{name:"username",type:"text",placeholder:"Your username",value:t.username,onChange:this.handleFormChange("signUpForm")}),i.default.createElement("br",null),i.default.createElement("input",{name:"password",type:"password",placeholder:"Your password",value:t.password,onChange:this.handleFormChange("signUpForm")}),i.default.createElement("br",null),i.default.createElement("input",{name:"repeatPassword",type:"password",placeholder:"Repeat your password",value:t.repeatPassword,onChange:this.handleFormChange("signUpForm")}),i.default.createElement("br",null),i.default.createElement("button",null,"Sign up"),i.default.createElement("p",null,r))),i.default.createElement("div",null,i.default.createElement("form",{onSubmit:this.submitLogin},i.default.createElement("input",{name:"username",type:"text",placeholder:"Username",value:e.username,onChange:this.handleFormChange("loginForm")}),i.default.createElement("br",null),i.default.createElement("input",{name:"password",type:"password",placeholder:"Password",value:e.password,onChange:this.handleFormChange("loginForm")}),i.default.createElement("br",null),i.default.createElement("button",null,"Connect")))))}}]),t}();t.default=(0,a.connect)(function(e){return{}},function(e){return{handleLogin:function(t,n){return e((0,s.login)(t,n))}}})(f)},function(e,t,n){e.exports=n.p+"6f6e1855fc0bb88efa7205b418103d50.png"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(1)),i=n(9),a=s(n(69));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this.props.user;return o.default.createElement("div",{id:"profile-component"},o.default.createElement("p",null,"Connected as ",e.name," ",o.default.createElement("img",{src:a.default,alt:"edit"})))}}]),t}();t.default=(0,i.connect)(function(e){return{user:e.user}})(u)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r};var s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"render",value:function(){return a.default.createElement("div",{id:"input-component"},a.default.createElement("p",null,"InputComponent"))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r};var s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"render",value:function(){return a.default.createElement("div",{id:"conversation-component"},a.default.createElement("p",null,"ConversationComponent"))}}]),t}();t.default=s},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(13),o=n(14),i=n(74);e.exports=function(){function e(e,t,n,r,a,s){s!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(1)),i=n(9),a=s(n(93));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){var t=e.name,n=e.lastMessageContent,r=e.lastMessageDate;return o.default.createElement("div",{class:"rooms-list-item"},o.default.createElement("h4",null,t),o.default.createElement("p",null,n),o.default.createElement("p",null,r))},c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.toggleCreateRoom=function(){return n.setState({isCreateRoomComponentOpen:!n.state.isCreateRoomComponentOpen})},n.state={isCreateRoomComponentOpen:!0},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this.props.rooms,t=this.state.isCreateRoomComponentOpen;return o.default.createElement("div",null,t?o.default.createElement(a.default,{closeComponent:this.toggleCreateRoom}):null,o.default.createElement("p",{style:{cursor:"pointer"},onClick:this.toggleCreateRoom},"Create new room"),e.map(function(e){return o.default.createElement(u,e)}))}}]),t}();t.default=(0,i.connect)(function(e){return{rooms:e.rooms}})(c)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(e.exports=n(32)(!1)).push([e.i,"* {\n  font-family: Consolas;\n  margin: 0;\n  padding: 0; }\n\n#app-container {\n  display: flex;\n  flex-direction: row;\n  height: 100vh;\n  width: 100vw; }\n  #app-container #left-container {\n    width: 300px;\n    height: 100vh;\n    border-right: 1px solid #dedede; }\n    #app-container #left-container #profile-component {\n      height: 200px;\n      background-color: #dedede; }\n  #app-container #right-container {\n    flex-grow: 1;\n    height: 100vh;\n    width: 100%;\n    display: flex;\n    flex-direction: column; }\n    #app-container #right-container #input-component {\n      height: 100px;\n      background-color: #dedede; }\n    #app-container #right-container #conversation-component {\n      flex-grow: 1; }\n",""])},function(e,t,n){var r=n(78);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(31)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(1)),i=n(9);n(79);var a=u(n(96)),s=u(n(68));function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this.props,t=e.isLoggedIn,n=e.isLoggingIn;return t?o.default.createElement("div",{id:"app-container"},o.default.createElement(a.default,null)):o.default.createElement("div",{id:"app-container"},o.default.createElement(s.default,{isLoggingIn:n}))}}]),t}();t.default=(0,i.connect)(function(e){return{isLoggedIn:e.isLoggedIn,isLoggingIn:e.isLoggingIn}})(c)},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(81);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(82);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(14),o=n(1),i=n(86),a=n(34),s=n(13),u=n(85),c=n(84),l=n(83),f=n(33);function p(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,s,u){(function(e,t,n,r,o,i,a,s,u){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,s,u){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var c=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var e=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,e}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var e=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,e}p("198")}};var h=null,y={};function m(){if(h)for(var e in y){var t=y[e],n=h.indexOf(e);if(-1<n||p("96",e),!v[n])for(var r in t.extractEvents||p("97",e),v[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,s=r;b.hasOwnProperty(s)&&p("99",s),b[s]=i;var u=i.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&g(u[o],a,s);o=!0}else i.registrationName?(g(i.registrationName,a,s),o=!0):o=!1;o||p("98",r,e)}}}function g(e,t,n){w[e]&&p("100",e),w[e]=t,C[e]=t.eventTypes[n].dependencies}var v=[],b={},w={},C={};function E(e){h&&p("101"),h=Array.prototype.slice.call(e),m()}function x(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];y.hasOwnProperty(t)&&y[t]===r||(y[t]&&p("102",t),y[t]=r,n=!0)}n&&m()}var k=Object.freeze({plugins:v,eventNameDispatchConfigs:b,registrationNameModules:w,registrationNameDependencies:C,possibleRegistrationNames:null,injectEventPluginOrder:E,injectEventPluginsByName:x}),_=null,S=null,T=null;function P(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=T(r),d.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function O(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function R(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var I=null;function A(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)P(e,t,n[o],r[o]);else n&&P(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function N(e){return A(e,!0)}function U(e){return A(e,!1)}var j={injectEventPluginOrder:E,injectEventPluginsByName:x};function M(e,t){var n=e.stateNode;if(!n)return null;var r=_(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function D(e,t){null!==e&&(I=O(I,e)),e=I,I=null,e&&(R(e,t?N:U),I&&p("95"),d.rethrowCaughtError())}function B(e,t,n,r){for(var o=null,i=0;i<v.length;i++){var a=v[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=O(o,a))}D(o,!1)}var F=Object.freeze({injection:j,getListener:M,runEventsInBatch:D,runExtractedEventsInBatch:B}),L=Math.random().toString(36).slice(2),z="__reactInternalInstance$"+L,H="__reactEventHandlers$"+L;function q(e){if(e[z])return e[z];for(;!e[z];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[z]).tag||6===e.tag?e:null}function V(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function W(e){return e[H]||null}var Y=Object.freeze({precacheFiberNode:function(e,t){t[z]=e},getClosestInstanceFromNode:q,getInstanceFromNode:function(e){return!(e=e[z])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:V,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[H]=t}});function K(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var r=[];e;)r.push(e),e=K(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Q(e,t,n){(t=M(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function X(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,Q,e)}function G(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?K(t):null,Q,e)}}function J(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=M(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&J(e._targetInst,null,e)}function ee(e){R(e,X)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,s=o;s;s=K(s))a++;s=0;for(var u=i;u;u=K(u))s++;for(;0<a-s;)o=K(o),a--;for(;0<s-a;)i=K(i),s--;for(;a--;){if(o===i||o===i.alternate)break e;o=K(o),i=K(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=K(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=K(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",e);for(e=n.length;0<e--;)J(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){R(e,G)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){R(e,Z)}}),re=null;function oe(){return!re&&i.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var ie={_root:null,_startText:null,_fallbackText:null};function ae(){if(ie._fallbackText)return ie._fallbackText;var e,t,n=ie._startText,r=n.length,o=se(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ie._fallbackText=o.slice(e,1<t?1-t:void 0),ie._fallbackText}function se(){return"value"in ie._root?ie._root.value:ie._root[oe()]}var ue="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),ce={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function pe(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=fe,e.release=pe}a(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ue.length;t++)this[ue[t]]=null}}),le.Interface=ce,le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,de(n),n},de(le);var he=le.extend({data:null}),ye=le.extend({data:null}),me=[9,13,27,32],ge=i.canUseDOM&&"CompositionEvent"in window,ve=null;i.canUseDOM&&"documentMode"in document&&(ve=document.documentMode);var be=i.canUseDOM&&"TextEvent"in window&&!ve,we=i.canUseDOM&&(!ge||ve&&8<ve&&11>=ve),Ce=String.fromCharCode(32),Ee={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},xe=!1;function ke(e,t){switch(e){case"topKeyUp":return-1!==me.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function _e(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var Te={eventTypes:Ee,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ge)e:{switch(e){case"topCompositionStart":o=Ee.compositionStart;break e;case"topCompositionEnd":o=Ee.compositionEnd;break e;case"topCompositionUpdate":o=Ee.compositionUpdate;break e}o=void 0}else Se?ke(e,n)&&(o=Ee.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=Ee.compositionStart);return o?(we&&(Se||o!==Ee.compositionStart?o===Ee.compositionEnd&&Se&&(i=ae()):(ie._root=r,ie._startText=se(),Se=!0)),o=he.getPooled(o,t,n,r),i?o.data=i:null!==(i=_e(n))&&(o.data=i),ee(o),i=o):i=null,(e=be?function(e,t){switch(e){case"topCompositionEnd":return _e(t);case"topKeyPress":return 32!==t.which?null:(xe=!0,Ce);case"topTextInput":return(e=t.data)===Ce&&xe?null:e;default:return null}}(e,n):function(e,t){if(Se)return"topCompositionEnd"===e||!ge&&ke(e,t)?(e=ae(),ie._root=null,ie._startText=null,ie._fallbackText=null,Se=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return we?null:t.data;default:return null}}(e,n))?((t=ye.getPooled(Ee.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Pe=null,Oe={injectFiberControlledHostComponent:function(e){Pe=e}},Re=null,Ie=null;function Ae(e){if(e=S(e)){Pe&&"function"==typeof Pe.restoreControlledState||p("194");var t=_(e.stateNode);Pe.restoreControlledState(e.stateNode,e.type,t)}}function Ne(e){Re?Ie?Ie.push(e):Ie=[e]:Re=e}function Ue(){return null!==Re||null!==Ie}function je(){if(Re){var e=Re,t=Ie;if(Ie=Re=null,Ae(e),t)for(e=0;e<t.length;e++)Ae(t[e])}}var Me=Object.freeze({injection:Oe,enqueueStateRestore:Ne,needsStateRestore:Ue,restoreStateIfNeeded:je});function De(e,t){return e(t)}function Be(e,t,n){return e(t,n)}function Fe(){}var Le=!1;function ze(e,t){if(Le)return e(t);Le=!0;try{return De(e,t)}finally{Le=!1,Ue()&&(Fe(),je())}}var He={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!He[e.type]:"textarea"===t}function Ve(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function Ye(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ke(e){e._valueTracker||(e._valueTracker=function(e){var t=Ye(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ye(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Qe=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Xe="function"==typeof Symbol&&Symbol.for,Ge=Xe?Symbol.for("react.element"):60103,Je=Xe?Symbol.for("react.call"):60104,Ze=Xe?Symbol.for("react.return"):60105,et=Xe?Symbol.for("react.portal"):60106,tt=Xe?Symbol.for("react.fragment"):60107,nt=Xe?Symbol.for("react.strict_mode"):60108,rt=Xe?Symbol.for("react.provider"):60109,ot=Xe?Symbol.for("react.context"):60110,it=Xe?Symbol.for("react.async_mode"):60111,at=Xe?Symbol.for("react.forward_ref"):60112,st="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||void 0===e?null:"function"==typeof(e=st&&e[st]||e["@@iterator"])?e:null}function ct(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Je:return"ReactCall";case Ze:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function lt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=ct(e),i=null;n&&(i=ct(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt={},dt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var yt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){yt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];yt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){yt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){yt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){yt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){yt[e]=new ht(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){yt[e]=new ht(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){yt[e]=new ht(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){yt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var o=yt.hasOwnProperty(t)?yt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!dt.hasOwnProperty(e)||!pt.hasOwnProperty(e)&&(ft.test(e)?dt[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function wt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=_t(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ct(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function Et(e,t){Ct(e,t);var n=_t(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?kt(e,t.type,n):t.hasOwnProperty("defaultValue")&&kt(e,t.type,_t(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function xt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function kt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function _t(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),yt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Tt(e,t,n){return(e=le.getPooled(St.change,e,t,n)).type="change",Ne(n),ee(e),e}var Pt=null,Ot=null;function Rt(e){D(e,!1)}function It(e){if($e(V(e)))return e}function At(e,t){if("topChange"===e)return t}var Nt=!1;function Ut(){Pt&&(Pt.detachEvent("onpropertychange",jt),Ot=Pt=null)}function jt(e){"value"===e.propertyName&&It(Ot)&&ze(Rt,e=Tt(Ot,e,Ve(e)))}function Mt(e,t,n){"topFocus"===e?(Ut(),Ot=n,(Pt=t).attachEvent("onpropertychange",jt)):"topBlur"===e&&Ut()}function Dt(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return It(Ot)}function Bt(e,t){if("topClick"===e)return It(t)}function Ft(e,t){if("topInput"===e||"topChange"===e)return It(t)}i.canUseDOM&&(Nt=We("input")&&(!document.documentMode||9<document.documentMode));var Lt={eventTypes:St,_isInputEventSupported:Nt,extractEvents:function(e,t,n,r){var o=t?V(t):window,i=void 0,a=void 0,s=o.nodeName&&o.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===o.type?i=At:qe(o)?Nt?i=Ft:(i=Dt,a=Mt):(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Bt),i&&(i=i(e,t)))return Tt(i,n,r);a&&a(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&kt(o,"number",o.value)}},zt=le.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function qt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Vt(){return qt}var Wt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Vt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Kt={eventTypes:Yt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?q(t):null):e=null,e===t)return null;var i=null==e?o:V(e);o=null==t?o:V(t);var a=Wt.getPooled(Yt.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=Wt.getPooled(Yt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,te(a,n,e,t),[a,n]}};function $t(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Qt(e){return!!(e=e._reactInternalFiber)&&2===$t(e)}function Xt(e){2!==$t(e)&&p("188")}function Gt(e){var t=e.alternate;if(!t)return 3===(t=$t(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Xt(o),e;if(a===r)return Xt(o),t;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var s=o.child;s;){if(s===n){a=!0,n=o,r=i;break}if(s===r){a=!0,r=o,n=i;break}s=s.sibling}if(!a){for(s=i.child;s;){if(s===n){a=!0,n=i,r=o;break}if(s===r){a=!0,r=i,n=o;break}s=s.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function Jt(e){if(!(e=Gt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Zt=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=zt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=zt.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Vt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),sn=Wt.extend({dataTransfer:null}),un=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Vt}),cn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ln=Wt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},pn={};function dn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},fn[e]=t,pn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){dn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){dn(e,!1)});var hn={eventTypes:fn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=pn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=pn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Wt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=sn;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=un;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Zt;break;case"topTransitionEnd":e=cn;break;case"topScroll":e=zt;break;case"topWheel":e=ln;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=le}return ee(t=e.getPooled(o,t,n,r)),t}},yn=hn.isInteractiveTopLevelEventType,mn=[];function gn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=q(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],B(e.topLevelType,t,e.nativeEvent,Ve(e.nativeEvent))}var vn=!0;function bn(e){vn=!!e}function wn(e,t,n){if(!n)return null;e=(yn(e)?En:xn).bind(null,e),n.addEventListener(t,e,!1)}function Cn(e,t,n){if(!n)return null;e=(yn(e)?En:xn).bind(null,e),n.addEventListener(t,e,!0)}function En(e,t){Be(xn,e,t)}function xn(e,t){if(vn){var n=Ve(t);if(null!==(n=q(n))&&"number"==typeof n.tag&&2!==$t(n)&&(n=null),mn.length){var r=mn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{ze(gn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>mn.length&&mn.push(e)}}}var kn=Object.freeze({get _enabled(){return vn},setEnabled:bn,isEnabled:function(){return vn},trapBubbledEvent:wn,trapCapturedEvent:Cn,dispatchEvent:xn});function _n(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var Sn={animationend:_n("Animation","AnimationEnd"),animationiteration:_n("Animation","AnimationIteration"),animationstart:_n("Animation","AnimationStart"),transitionend:_n("Transition","TransitionEnd")},Tn={},Pn={};function On(e){if(Tn[e])return Tn[e];if(!Sn[e])return e;var t,n=Sn[e];for(t in n)if(n.hasOwnProperty(t)&&t in Pn)return Tn[e]=n[t];return e}i.canUseDOM&&(Pn=document.createElement("div").style,"AnimationEvent"in window||(delete Sn.animationend.animation,delete Sn.animationiteration.animation,delete Sn.animationstart.animation),"TransitionEvent"in window||delete Sn.transitionend.transition);var Rn={topAnimationEnd:On("animationend"),topAnimationIteration:On("animationiteration"),topAnimationStart:On("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:On("transitionend"),topWheel:"wheel"},In={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},An={},Nn=0,Un="_reactListenersID"+(""+Math.random()).slice(2);function jn(e){return Object.prototype.hasOwnProperty.call(e,Un)||(e[Un]=Nn++,An[e[Un]]={}),An[e[Un]]}function Mn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Dn(e,t){var n,r=Mn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Mn(r)}}function Bn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Fn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Ln={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},zn=null,Hn=null,qn=null,Vn=!1;function Wn(e,t){if(Vn||null==zn||zn!==u())return null;var n=zn;return"selectionStart"in n&&Bn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,qn&&c(qn,n)?null:(qn=n,(e=le.getPooled(Ln.select,Hn,e,t)).type="select",e.target=zn,ee(e),e)}var Yn={eventTypes:Ln,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=jn(i),o=C.onSelect;for(var a=0;a<o.length;a++){var s=o[a];if(!i.hasOwnProperty(s)||!i[s]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?V(t):window,e){case"topFocus":(qe(i)||"true"===i.contentEditable)&&(zn=i,Hn=t,qn=null);break;case"topBlur":qn=Hn=zn=null;break;case"topMouseDown":Vn=!0;break;case"topContextMenu":case"topMouseUp":return Vn=!1,Wn(n,r);case"topSelectionChange":if(Fn)break;case"topKeyDown":case"topKeyUp":return Wn(n,r)}return null}};function Kn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function $n(e,t,n){var r=e.alternate;return null===r?((r=new Kn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Qn(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case tt:return Xn(e.children,t,n,o);case it:i=11,t|=3;break;case nt:i=11,t|=2;break;case Je:i=7;break;case Ze:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:i=13;break;case ot:i=12;break;case at:i=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;p("130",null==r?r:typeof r,"")}else p("130",null==r?r:typeof r,"")}return(t=new Kn(i,e,o,t)).type=r,t.expirationTime=n,t}function Xn(e,t,n,r){return(e=new Kn(10,e,r,t)).expirationTime=n,e}function Gn(e,t,n){return(e=new Kn(6,e,null,t)).expirationTime=n,e}function Jn(e,t,n){return(t=new Kn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}j.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_=Y.getFiberCurrentPropsFromNode,S=Y.getInstanceFromNode,T=Y.getNodeFromInstance,j.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:Kt,ChangeEventPlugin:Lt,SelectEventPlugin:Yn,BeforeInputEventPlugin:Te});var Zn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Zn&&Zn(e)}function rr(e){"function"==typeof er&&er(e)}function or(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ir(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ar=void 0,sr=void 0;function ur(e){ar=sr=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=or(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=or(null)):e=null,ar=n,sr=e!==n?e:null}function cr(e,t){ur(e),e=ar;var n=sr;null===n?ir(e,t):null===e.last||null===n.last?(ir(e,t),ir(n,t)):(ir(e,t),n.last=t)}function lr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function fr(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var s=!0,u=n.first,c=!1;null!==u;){var l=u.expirationTime;if(l>i){var f=n.expirationTime;(0===f||f>l)&&(n.expirationTime=l),c||(c=!0,n.baseState=e)}else c||(n.first=u.next,null===n.first&&(n.last=null)),u.isReplace?(e=lr(u,r,e,o),s=!0):(l=lr(u,r,e,o))&&(e=s?a({},e,l):a(e,l),s=!1),u.isForced&&(n.hasForceUpdate=!0),null!==u.callback&&(null===(l=n.callbackList)&&(l=n.callbackList=[]),l.push(u)),null!==u.capturedValue&&(null===(l=n.capturedValues)?n.capturedValues=[u.capturedValue]:l.push(u.capturedValue));u=u.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),c||(n.baseState=e),e}function pr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&p("191",o),o.call(t)}}var dr=Array.isArray;function hr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function yr(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function mr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=$n(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Gn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function u(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=hr(e,t,n),r.return=e,r):((r=Qn(n,e.mode,r)).ref=hr(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function l(e,t,n,r,i){return null===t||10!==t.tag?((t=Xn(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Gn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ge:return(n=Qn(t,e.mode,n)).ref=hr(e,null,t),n.return=e,n;case et:return(t=Jn(t,e.mode,n)).return=e,t}if(dr(t)||ut(t))return(t=Xn(t,e.mode,n,null)).return=e,t;yr(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ge:return n.key===o?n.type===tt?l(e,t,n.props.children,r,o):u(e,t,n,r):null;case et:return n.key===o?c(e,t,n,r):null}if(dr(n)||ut(n))return null!==o?null:l(e,t,n,r,null);yr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ge:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?l(t,e,r.props.children,o,r.key):u(t,e,r,o);case et:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(dr(r)||ut(r))return l(t,e=e.get(n)||null,r,o,null);yr(t,r)}return null}function y(o,a,s,u){for(var c=null,l=null,p=a,y=a=0,m=null;null!==p&&y<s.length;y++){p.index>y?(m=p,p=null):m=p.sibling;var g=d(o,p,s[y],u);if(null===g){null===p&&(p=m);break}e&&p&&null===g.alternate&&t(o,p),a=i(g,a,y),null===l?c=g:l.sibling=g,l=g,p=m}if(y===s.length)return n(o,p),c;if(null===p){for(;y<s.length;y++)(p=f(o,s[y],u))&&(a=i(p,a,y),null===l?c=p:l.sibling=p,l=p);return c}for(p=r(o,p);y<s.length;y++)(m=h(p,o,y,s[y],u))&&(e&&null!==m.alternate&&p.delete(null===m.key?y:m.key),a=i(m,a,y),null===l?c=m:l.sibling=m,l=m);return e&&p.forEach(function(e){return t(o,e)}),c}function m(o,a,s,u){var c=ut(s);"function"!=typeof c&&p("150"),null==(s=c.call(s))&&p("151");for(var l=c=null,y=a,m=a=0,g=null,v=s.next();null!==y&&!v.done;m++,v=s.next()){y.index>m?(g=y,y=null):g=y.sibling;var b=d(o,y,v.value,u);if(null===b){y||(y=g);break}e&&y&&null===b.alternate&&t(o,y),a=i(b,a,m),null===l?c=b:l.sibling=b,l=b,y=g}if(v.done)return n(o,y),c;if(null===y){for(;!v.done;m++,v=s.next())null!==(v=f(o,v.value,u))&&(a=i(v,a,m),null===l?c=v:l.sibling=v,l=v);return c}for(y=r(o,y);!v.done;m++,v=s.next())null!==(v=h(y,o,m,v.value,u))&&(e&&null!==v.alternate&&y.delete(null===v.key?m:v.key),a=i(v,a,m),null===l?c=v:l.sibling=v,l=v);return e&&y.forEach(function(e){return t(o,e)}),c}return function(e,r,i,s){"object"==typeof i&&null!==i&&i.type===tt&&null===i.key&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case Ge:e:{var c=i.key;for(u=r;null!==u;){if(u.key===c){if(10===u.tag?i.type===tt:u.type===i.type){n(e,u.sibling),(r=o(u,i.type===tt?i.props.children:i.props,s)).ref=hr(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===tt?((r=Xn(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Qn(i,e.mode,s)).ref=hr(e,r,i),s.return=e,e=s)}return a(e);case et:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jn(i,e.mode,s)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,s)).return=e,e=r):(n(e,r),(r=Gn(i,e.mode,s)).return=e,e=r),a(e);if(dr(i))return y(e,r,i,s);if(ut(i))return m(e,r,i,s);if(u&&yr(e,i),void 0===i)switch(e.tag){case 2:case 1:p("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var gr=mr(!0),vr=mr(!1);function br(e,t,n,r,o,i,s){function u(e,t,n){l(e,t,n,t.expirationTime)}function l(e,t,n,r){t.child=null===e?vr(t,null,n,r):gr(t,e.child,n,r)}function d(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,i){if(d(e,t),!n&&!o)return r&&P(t,!1),g(e,t);n=t.stateNode,Qe.current=t;var a=o?null:n.render();return t.effectTag|=1,o&&(l(e,t,null,i),t.child=null),l(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,r&&P(t,!0),t.child}function y(e){var t=e.stateNode;t.pendingContext?T(e,t.pendingContext,t.pendingContext!==t.context):t.context&&T(e,t.context,!1),C(e,t.containerInfo)}function m(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function g(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=$n(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$n(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var v=e.shouldSetTextContent,b=e.shouldDeprioritizeSubtree,w=t.pushHostContext,C=t.pushHostContainer,E=r.pushProvider,x=n.getMaskedContext,k=n.getUnmaskedContext,_=n.hasContextChanged,S=n.pushContextProvider,T=n.pushTopLevelContextObject,P=n.invalidateContextProvider,O=o.enterHydrationState,R=o.resetHydrationState,I=o.tryToClaimNextHydratableInstance,A=(e=function(e,t,n,r,o){function i(e,t,n,r,o,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(e.prototype&&e.prototype.isPureReactComponent&&c(t,n)&&c(r,o))}function s(e,t){t.updater=g,e.stateNode=t,t._reactInternalFiber=e}function u(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&g.enqueueReplaceState(t,t.state,null)}function l(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var p=e.cacheContext,d=e.getMaskedContext,h=e.getUnmaskedContext,y=e.isContextConsumer,m=e.hasContextChanged,g={isMounted:Qt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);cr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);cr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);cr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:s,callGetDerivedStateFromProps:l,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=y(e),i=o?d(e,r):f,u=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return s(e,n),e.memoizedState=u,null!==(t=l(e,0,t,u))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&p(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,i=e.pendingProps,a=h(e);o.props=i,o.state=e.memoizedState,o.refs=f,o.context=d(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&g.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=fr(r,e,n,o,i,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,s=e.stateNode;s.props=e.memoizedProps,s.state=e.memoizedState;var c=e.memoizedProps,f=e.pendingProps,p=s.context,y=h(e);y=d(e,y),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(c!==f||p!==y)&&u(e,s,f,y),p=e.memoizedState,t=null!==e.updateQueue?fr(null,e,e.updateQueue,s,f,t):p;var g=void 0;if(c!==f&&(g=l(e,0,f,t)),null!==g&&void 0!==g){t=null===t||void 0===t?g:a({},t,g);var v=e.updateQueue;null!==v&&(v.baseState=a({},v.baseState,g))}return c!==f||p!==t||m()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((c=i(e,c,f,p,t,y))?(n||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(e.effectTag|=4)):("function"==typeof s.componentDidMount&&(e.effectTag|=4),r(e,f),o(e,t)),s.props=f,s.state=t,s.context=y,c):("function"==typeof s.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var s=t.type,c=t.stateNode;c.props=t.memoizedProps,c.state=t.memoizedState;var f=t.memoizedProps,p=t.pendingProps,y=c.context,g=h(t);g=d(t,g),(s="function"==typeof s.getDerivedStateFromProps||"function"==typeof c.getSnapshotBeforeUpdate)||"function"!=typeof c.UNSAFE_componentWillReceiveProps&&"function"!=typeof c.componentWillReceiveProps||(f!==p||y!==g)&&u(t,c,p,g),y=t.memoizedState,n=null!==t.updateQueue?fr(e,t,t.updateQueue,c,p,n):y;var v=void 0;if(f!==p&&(v=l(t,0,p,n)),null!==v&&void 0!==v){n=null===n||void 0===n?v:a({},n,v);var b=t.updateQueue;null!==b&&(b.baseState=a({},b.baseState,v))}return f!==p||y!==n||m()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((v=i(t,f,p,y,n,g))?(s||"function"!=typeof c.UNSAFE_componentWillUpdate&&"function"!=typeof c.componentWillUpdate||("function"==typeof c.componentWillUpdate&&c.componentWillUpdate(p,n,g),"function"==typeof c.UNSAFE_componentWillUpdate&&c.UNSAFE_componentWillUpdate(p,n,g)),"function"==typeof c.componentDidUpdate&&(t.effectTag|=4),"function"==typeof c.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof c.componentDidUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=2048),r(t,p),o(t,n)),c.props=p,c.state=n,c.context=g,v):("function"!=typeof c.componentDidUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,s,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,N=e.callGetDerivedStateFromProps,U=e.constructClassInstance,j=e.mountClassInstance,M=e.resumeMountClassInstance,D=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:y(t);break;case 2:S(t);break;case 4:C(t,t.stateNode.containerInfo);break;case 13:E(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,i=k(t);return r=r(o,i=x(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=N(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=S(t),A(t,r),j(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,u(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,_()||t.memoizedProps!==n?(r=k(t),o=o(n,r=x(t,r)),t.effectTag|=1,u(e,t,o),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 2:o=S(t),null===e?null===t.stateNode?(U(t,t.pendingProps),j(t,n),r=!0):r=M(t,n):r=D(e,t,n),i=!1;var s=t.updateQueue;return null!==s&&null!==s.capturedValues&&(i=r=!0),h(e,t,r,o,i,n);case 3:e:if(y(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=fr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){R(),e=g(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&O(t)?(t.effectTag|=2,t.child=vr(t,null,r,n)):(R(),u(e,t,r)),t.memoizedState=o,e=t.child}else R(),e=g(e,t);return e;case 5:return w(t),null===e&&I(t),o=t.type,s=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,_()||s!==r||((s=1&t.mode&&b(o,r))&&(t.expirationTime=1073741823),s&&1073741823===n)?(s=r.children,v(o,r)?s=null:i&&v(o,i)&&(t.effectTag|=16),d(e,t),1073741823!==n&&1&t.mode&&b(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(u(e,t,s),t.memoizedProps=r,e=t.child)):e=g(e,t),e;case 6:return null===e&&I(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,_()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?vr(t,t.stateNode,r,n):gr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return C(t,t.stateNode.containerInfo),o=t.pendingProps,_()||t.memoizedProps!==o?(null===e?t.child=gr(t,null,o,n):u(e,t,o),t.memoizedProps=o,e=t.child):e=g(e,t),e;case 14:return u(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,_()||t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 11:return n=t.pendingProps.children,_()||null!==n&&t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps;if(!_()&&i===o)return t.stateNode=0,E(t),g(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return t.stateNode=0,E(t),g(e,t);a=0}else{var s=i.value;if(s===a&&(0!==s||1/s==1/a)||s!=s&&a!=a){if(i.children===o.children)return t.stateNode=0,E(t),g(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823,0==(a|=0)){if(i.children===o.children)return t.stateNode=0,E(t),g(e,t)}else m(t,r,a,n)}return t.stateNode=a,E(t),u(e,t,o.children),t.child}(e,t,n);case 12:e:{r=t.type,i=t.pendingProps,s=t.memoizedProps,o=r._currentValue;var c=r._changedBits;if(_()||0!==c||s!==i){t.memoizedProps=i;var l=i.unstable_observedBits;if(void 0!==l&&null!==l||(l=1073741823),t.stateNode=l,0!=(c&l))m(t,r,c,n);else if(s===i){e=g(e,t);break e}u(e,t,n=(n=i.children)(o)),e=t.child}else e=g(e,t)}return e;default:p("156")}}}}function wr(e,t){var n=t.source;null===t.stack&&lt(n),null!==n&&ct(n),t=t.value,null!==e&&2===e.tag&&ct(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var Cr={};function Er(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)U(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=I(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ie=!0;break}e=n}else{if(null!==(e=N(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=R(e.alternate,e,ne);return null===t&&(t=r(e)),Qe.current=null,t}function i(e,n,i){Z&&p("243"),Z=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=$n((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!k();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){a=!0,_(e);break}var s=(i=ee).return;if(null===s){a=!0,_(e);break}A(s,i,e),ee=r(i)}break}return Z=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void p("262")}function s(e,t,n,r){cr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:lt(e)},next:null}),l(t,r)}function u(e,t){e:{Z&&!oe&&p("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){s(e,r,t,1),e=void 0;break e}break;case 3:s(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&s(e,e,t,1),e=void 0}return e}function c(e){return e=0!==J?J:Z?oe?1:ne:1&e.mode?Ce?10*(1+((d()+15)/10|0)):25*(1+((d()+500)/25|0)):1,Ce&&(0===he||e>he)&&(he=e),e}function l(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!Z&&0!==ne&&n<ne&&t(),Z&&!oe&&te===r||m(r,n),ke>xe&&p("185")}e=e.return}n=void 0}return n}function d(){return X=V()-Q,2+(X/10|0)}function h(e,t,n,r,o){var i=J;J=1;try{return e(t,n,r,o)}finally{J=i}}function y(e){if(0!==ce){if(e>ce)return;Y(le)}var t=V()-Q;ce=e,le=W(v,{timeout:10*(e-2)-t})}function m(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ue?(se=ue=e,e.nextScheduledRoot=e):(ue=ue.nextScheduledRoot=e).nextScheduledRoot=se;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(be?we&&(pe=e,de=1,E(e,1,!1)):1===t?b():y(t))}function g(){var e=0,t=null;if(null!==ue)for(var n=ue,r=se;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ue)&&p("244"),r===r.nextScheduledRoot){se=ue=r.nextScheduledRoot=null;break}if(r===se)se=o=r.nextScheduledRoot,ue.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ue){(ue=n).nextScheduledRoot=se,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ue)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?ke++:ke=0,pe=t,de=e}function v(e){w(0,!0,e)}function b(){w(1,!1,null)}function w(e,t,n){if(ve=n,g(),t)for(;null!==pe&&0!==de&&(0===e||e>=de)&&(!ye||d()>=de);)E(pe,de,!ye),g();else for(;null!==pe&&0!==de&&(0===e||e>=de);)E(pe,de,!1),g();null!==ve&&(ce=0,le=-1),0!==de&&y(de),ve=null,ye=!1,C()}function C(){if(ke=0,null!==Ee){var e=Ee;Ee=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){me||(me=!0,ge=e)}}}if(me)throw e=ge,ge=null,me=!1,e}function E(e,t,n){fe&&p("245"),fe=!0,n?null!==(n=e.finishedWork)?x(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(k()?e.finishedWork=n:x(e,n,t))):null!==(n=e.finishedWork)?x(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&x(e,n,t)),fe=!1}function x(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ee?Ee=[r]:Ee.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=Z=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0;var o=d();if(Qe.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(K(n.containerInfo),re=i;null!==re;){var a=!1,s=void 0;try{for(;null!==re;)2048&re.effectTag&&j(re.alternate,re),re=re.nextEffect}catch(e){a=!0,s=e}a&&(null===re&&p("178"),u(re,s),null!==re&&(re=re.nextEffect))}for(re=i;null!==re;){a=!1,s=void 0;try{for(;null!==re;){var c=re.effectTag;if(16&c&&M(re),128&c){var l=re.alternate;null!==l&&q(l)}switch(14&c){case 2:D(re),re.effectTag&=-3;break;case 6:D(re),re.effectTag&=-3,F(re.alternate,re);break;case 4:F(re.alternate,re);break;case 8:B(re)}re=re.nextEffect}}catch(e){a=!0,s=e}a&&(null===re&&p("178"),u(re,s),null!==re&&(re=re.nextEffect))}for($(n.containerInfo),n.current=t,re=i;null!==re;){c=!1,l=void 0;try{for(i=n,a=o,s=r;null!==re;){var f=re.effectTag;36&f&&L(i,re.alternate,re,a,s),256&f&&z(re,_),128&f&&H(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){c=!0,l=e}c&&(null===re&&p("178"),u(re,l),null!==re&&(re=re.nextEffect))}Z=oe=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function k(){return!(null===ve||ve.timeRemaining()>_e)&&(ye=!0)}function _(e){null===pe&&p("246"),pe.remainingExpirationTime=0,me||(me=!0,ge=e)}var S=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),T=function(e,t){function n(e){return e===Cr&&p("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,s=e(Cr),u=e(Cr),c=e(Cr);return{getHostContext:function(){return n(s.current)},getRootHostContainer:function(){return n(c.current)},popHostContainer:function(e){a(s,e),a(u,e),a(c,e)},popHostContext:function(e){u.current===e&&(a(s,e),a(u,e))},pushHostContainer:function(e,t){i(c,t,e),i(u,e,e),i(s,Cr,e),t=o(t),a(s,e),i(s,t,e)},pushHostContext:function(e){var t=n(c.current),o=n(s.current);o!==(t=r(o,e.type,t))&&(i(u,e,e),i(s,t,e))}}}(e,S),P=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",ct(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,s=e.pop,u=o(f),c=o(!1),l=f;return{getUnmaskedContext:function(e){return n(e)?l:u.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return f;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&t(e,n,a),a},hasContextChanged:function(){return c.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(s(c,e),s(u,e))},popTopLevelContextObject:function(e){s(c,e),s(u,e)},pushTopLevelContextObject:function(e,t,n){null!=u.cursor&&p("168"),i(u,t,e),i(c,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,l=u.current,i(u,t,e),i(c,c.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||p("169"),t){var o=r(e,l);n.__reactInternalMemoizedMergedChildContext=o,s(c,e),s(u,e),i(u,o,e)}else s(c,e);i(c,t,e)},findCurrentUnmaskedContext:function(e){for((2!==$t(e)||2!==e.tag)&&p("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||p("171")}return e.stateNode.context}}}(S);S=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;r(o,e),r(i,e),r(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(S);var O=function(e){function t(e,t){var n=new Kn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,s=e.getNextHydratableSibling,u=e.getFirstHydratableChild,c=e.hydrateInstance,l=e.hydrateTextInstance,f=null,d=null,h=!1;return{enterHydrationState:function(e){return d=u(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){d=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(!(r=s(r))||!n(e,r))return e.effectTag|=2,h=!1,void(f=e);t(f,d)}f=e,d=u(r)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=c(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return l(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=d;n;)t(e,n),n=s(n);return r(e),d=f?s(e.stateNode):null,!0}}}(e),R=br(e,T,P,S,O,l,c).beginWork,I=function(e,t,n,r,o){function i(e){e.effectTag|=4}var a=e.createInstance,s=e.createTextInstance,u=e.appendInitialChild,c=e.finalizeInitialChildren,l=e.prepareUpdate,f=e.persistence,d=t.getRootHostContainer,h=t.popHostContext,y=t.getHostContext,m=t.popHostContainer,g=n.popContextProvider,v=n.popTopLevelContextObject,b=r.popProvider,w=o.prepareToHydrateHostInstance,C=o.prepareToHydrateHostTextInstance,E=o.popHydrationState,x=void 0,k=void 0,_=void 0;return e.mutation?(x=function(){},k=function(e,t,n){(t.updateQueue=n)&&i(t)},_=function(e,t,n,r){n!==r&&i(t)}):p(f?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return g(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return m(t),v(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(E(t),t.effectTag&=-3),x(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=d();var o=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,S=t.stateNode,T=y();S=l(S,o,f,r,n,T),k(e,t,S,o,f,r,n,T),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&p("166"),null;if(e=y(),E(t))w(t,n,e)&&i(t);else{f=a(o,r,n,e,t);e:for(T=t.child;null!==T;){if(5===T.tag||6===T.tag)u(f,T.stateNode);else if(4!==T.tag&&null!==T.child){T.child.return=T,T=T.child;continue}if(T===t)break;for(;null===T.sibling;){if(null===T.return||T.return===t)break e;T=T.return}T.sibling.return=T.return,T=T.sibling}c(f,o,r,n,e)&&i(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)_(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&p("166"),null;e=d(),n=y(),E(t)?C(t)&&i(t):t.stateNode=s(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||p("165"),t.tag=8,o=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)p("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),t.child=gr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return m(t),x(t),null;case 13:return b(t),null;case 12:return null;case 0:p("167");default:p("156")}}}}(e,T,P,S,O).completeWork,A=(T=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,s=t.popContextProvider,u=t.popTopLevelContextObject,c=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:lt(t)};do{switch(e.tag){case 3:return ur(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){ur(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:s(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),u(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return c(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:s(e);break;case 3:i(e),u(e);break;case 5:a(e);break;case 4:i(e);break;case 13:c(e)}}}}(T,P,S,0,n)).throwException,N=T.unwindWork,U=T.unwindInterruptedWork,j=(T=function(e,t,n,r,o){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(rr(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:s(e.stateNode);break;case 4:f&&c(e)}}function s(e){for(var t=e;;)if(a(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function u(e){return 5===e.tag||3===e.tag||4===e.tag}function c(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)s(t),o?E(r,t.stateNode):C(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var l=e.getPublicInstance,f=e.mutation;e=e.persistence,f||p(e?"235":"236");var d=f.commitMount,h=f.commitUpdate,y=f.resetTextContent,m=f.commitTextUpdate,g=f.appendChild,v=f.appendChildToContainer,b=f.insertBefore,w=f.insertInContainerBefore,C=f.removeChild,E=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:p("163")}},commitResetTextContent:function(e){y(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(u(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(y(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||u(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?w(t,o.stateNode,n):b(t,o.stateNode,n):r?v(t,o.stateNode):g(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){c(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&h(n,i,o,e,r,t)}break;case 6:null===t.stateNode&&p("162"),n=t.memoizedProps,m(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:p("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&pr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=l(n.child.stateNode);break;case 2:e=n.child.stateNode}pr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&d(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:p("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&p("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,s=r.stack;wr(e,r),t.componentDidCatch(a,{componentStack:null!==s?s:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&p("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)wr(e,r=i[n]),t(r.value);break;default:p("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=l(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,u,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,M=T.commitResetTextContent,D=T.commitPlacement,B=T.commitDeletion,F=T.commitWork,L=T.commitLifeCycles,z=T.commitErrorLogging,H=T.commitAttachRef,q=T.commitDetachRef,V=e.now,W=e.scheduleDeferredCallback,Y=e.cancelDeferredCallback,K=e.prepareForCommit,$=e.resetAfterCommit,Q=V(),X=Q,G=0,J=0,Z=!1,ee=null,te=null,ne=0,re=null,oe=!1,ie=!1,ae=null,se=null,ue=null,ce=0,le=-1,fe=!1,pe=null,de=0,he=0,ye=!1,me=!1,ge=null,ve=null,be=!1,we=!1,Ce=!1,Ee=null,xe=1e3,ke=0,_e=1;return{recalculateCurrentTime:d,computeExpirationForFiber:c,scheduleWork:l,requestWork:m,flushRoot:function(e,t){fe&&p("253"),pe=e,de=t,E(e,t,!1),b(),C()},batchedUpdates:function(e,t){var n=be;be=!0;try{return e(t)}finally{(be=n)||fe||b()}},unbatchedUpdates:function(e,t){if(be&&!we){we=!0;try{return e(t)}finally{we=!1}}return e(t)},flushSync:function(e,t){fe&&p("187");var n=be;be=!0;try{return h(e,t)}finally{be=n,b()}},flushControlled:function(e){var t=be;be=!0;try{h(e)}finally{(be=t)||fe||w(1,!1,null)}},deferredUpdates:function(e){var t=J;J=25*(1+((d()+500)/25|0));try{return e()}finally{J=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(Ce)return e(t,n);be||fe||0===he||(w(he,!1,null),he=0);var r=Ce,o=be;be=Ce=!0;try{return e(t,n)}finally{Ce=r,(be=o)||fe||b()}},flushInteractiveUpdates:function(){fe||0===he||(w(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((d()+500)/25|0));return e<=G&&(e=G+1),G=e},legacyContext:P}}function xr(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var s=u(n);n=c(n)?l(n,s):s}else n=f;return null===t.context?t.context=n:t.pendingContext=n,cr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(r,o),o}var n=e.getPublicInstance,r=(e=Er(e)).recalculateCurrentTime,o=e.computeExpirationForFiber,i=e.scheduleWork,s=e.legacyContext,u=s.findCurrentUnmaskedContext,c=s.isContextProvider,l=s.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Kn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,i,a){var s=n.current;return t(e,n,i,r(),s=o(s),a)},updateContainerAtExpirationTime:function(e,n,o,i,a){return t(e,n,o,r(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=Jt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Gt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Zn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=Jt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var kr=Object.freeze({default:xr}),_r=kr&&xr||kr,Sr=_r.default?_r.default:_r;var Tr="object"==typeof performance&&"function"==typeof performance.now,Pr=void 0;Pr=Tr?function(){return performance.now()}:function(){return Date.now()};var Or=void 0,Rr=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Ir=null,Ar=!1,Nr=-1,Ur=!1,jr=0,Mr=33,Dr=33,Br=void 0;Br=Tr?{didTimeout:!1,timeRemaining:function(){var e=jr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=jr-Date.now();return 0<e?e:0}};var Fr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Fr){if(Ar=!1,e=Pr(),0>=jr-e){if(!(-1!==Nr&&Nr<=e))return void(Ur||(Ur=!0,requestAnimationFrame(Lr)));Br.didTimeout=!0}else Br.didTimeout=!1;Nr=-1,e=Ir,Ir=null,null!==e&&e(Br)}},!1);var Lr=function(e){Ur=!1;var t=e-jr+Dr;t<Dr&&Mr<Dr?(8>t&&(t=8),Dr=t<Mr?Mr:t):Mr=t,jr=e+Dr,Ar||(Ar=!0,window.postMessage(Fr,"*"))};Or=function(e,t){return Ir=e,null!=t&&"number"==typeof t.timeout&&(Nr=Pr()+t.timeout),Ur||(Ur=!0,requestAnimationFrame(Lr)),0},Rr=function(){Ir=null,Ar=!1,Nr=-1}}else Or=window.requestIdleCallback,Rr=window.cancelIdleCallback;else Or=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Rr=function(e){clearTimeout(e)};function zr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Hr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function qr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Vr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Yr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Kr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var $r={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Qr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Xr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Qr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Gr,Jr=void 0,Zr=(Gr=function(e,t){if(e.namespaceURI!==$r.svg||"innerHTML"in e)e.innerHTML=t;else{for((Jr=Jr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Jr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Gr(e,t)})}:Gr);function eo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var to={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||to.hasOwnProperty(o)&&to[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(to).forEach(function(e){no.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),to[t]=to[e]})});var oo=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(e,t,n){t&&(oo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var so=s.thatReturns("");function uo(e,t){var n=jn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?Cn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(Cn("topFocus","focus",e),Cn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(We("cancel",!0)&&Cn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(We("close",!0)&&Cn("topClose","close",e),n.topClose=!0):Rn.hasOwnProperty(o)&&wn(o,Rn[o],e),n[o]=!0)}}function co(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===$r.html&&(r=Qr(e)),r===$r.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function lo(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":wn("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in In)In.hasOwnProperty(i)&&wn(i,In[i],e);i=n;break;case"source":wn("topError","error",e),i=n;break;case"img":case"image":case"link":wn("topError","error",e),wn("topLoad","load",e),i=n;break;case"form":wn("topReset","reset",e),wn("topSubmit","submit",e),i=n;break;case"details":wn("topToggle","toggle",e),i=n;break;case"input":wt(e,n),i=bt(e,n),wn("topInvalid","invalid",e),uo(r,"onChange");break;case"option":i=zr(e,n);break;case"select":qr(e,n),i=a({},n,{value:void 0}),wn("topInvalid","invalid",e),uo(r,"onChange");break;case"textarea":Wr(e,n),i=Vr(e,n),wn("topInvalid","invalid",e),uo(r,"onChange");break;default:i=n}io(t,i,so);var u,c=i;for(u in c)if(c.hasOwnProperty(u)){var l=c[u];"style"===u?ro(e,l):"dangerouslySetInnerHTML"===u?null!=(l=l?l.__html:void 0)&&Zr(e,l):"children"===u?"string"==typeof l?("textarea"!==t||""!==l)&&eo(e,l):"number"==typeof l&&eo(e,""+l):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(w.hasOwnProperty(u)?null!=l&&uo(r,u):null!=l&&vt(e,u,l,o))}switch(t){case"input":Ke(e),xt(e,n);break;case"textarea":Ke(e),Kr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Hr(e,!!n.multiple,t,!1):null!=n.defaultValue&&Hr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=s)}}function po(e,t,n,r,o){var i=null;switch(t){case"input":n=bt(e,n),r=bt(e,r),i=[];break;case"option":n=zr(e,n),r=zr(e,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=Vr(e,n),r=Vr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=s)}io(t,r,so),t=e=void 0;var u=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var c=n[e];for(t in c)c.hasOwnProperty(t)&&(u||(u={}),u[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(w.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var l=r[e];if(c=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&l!==c&&(null!=l||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||l&&l.hasOwnProperty(t)||(u||(u={}),u[t]="");for(t in l)l.hasOwnProperty(t)&&c[t]!==l[t]&&(u||(u={}),u[t]=l[t])}else u||(i||(i=[]),i.push(e,u)),u=l;else"dangerouslySetInnerHTML"===e?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(i=i||[]).push(e,""+l)):"children"===e?c===l||"string"!=typeof l&&"number"!=typeof l||(i=i||[]).push(e,""+l):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(w.hasOwnProperty(e)?(null!=l&&uo(o,e),i||c===l||(i=[])):(i=i||[]).push(e,l))}return u&&(i=i||[]).push("style",u),i}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Ct(e,o),ao(n,r),r=ao(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],s=t[i+1];"style"===a?ro(e,s):"dangerouslySetInnerHTML"===a?Zr(e,s):"children"===a?eo(e,s):vt(e,a,s,r)}switch(n){case"input":Et(e,o);break;case"textarea":Yr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Hr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Hr(e,!!o.multiple,o.defaultValue,!0):Hr(e,!!o.multiple,o.multiple?[]:"",!1))}}function yo(e,t,n,r,o){switch(t){case"iframe":case"object":wn("topLoad","load",e);break;case"video":case"audio":for(var i in In)In.hasOwnProperty(i)&&wn(i,In[i],e);break;case"source":wn("topError","error",e);break;case"img":case"image":case"link":wn("topError","error",e),wn("topLoad","load",e);break;case"form":wn("topReset","reset",e),wn("topSubmit","submit",e);break;case"details":wn("topToggle","toggle",e);break;case"input":wt(e,n),wn("topInvalid","invalid",e),uo(o,"onChange");break;case"select":qr(e,n),wn("topInvalid","invalid",e),uo(o,"onChange");break;case"textarea":Wr(e,n),wn("topInvalid","invalid",e),uo(o,"onChange")}for(var a in io(t,n,so),r=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):w.hasOwnProperty(a)&&null!=i&&uo(o,a));switch(t){case"input":Ke(e),xt(e,n);break;case"textarea":Ke(e),Kr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=s)}return r}function mo(e,t){return e.nodeValue!==t}var go=Object.freeze({createElement:co,createTextNode:lo,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:yo,diffHydratedText:mo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Et(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=W(r);o||p("90"),$e(r),Et(r,o)}}}break;case"textarea":Yr(e,n);break;case"select":null!=(t=n.value)&&Hr(e,!!n.multiple,t,!1)}}});Oe.injectFiberControlledHostComponent(go);var vo=null,bo=null;function wo(e){this._expirationTime=_o.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Co(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Eo(e,t,n){this._internalRoot=_o.createContainer(e,t,n)}function xo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ko(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}wo.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Co;return _o.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},wo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},wo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,_o.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},wo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Co.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Co.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},Eo.prototype.render=function(e,t){var n=this._internalRoot,r=new Co;return null!==(t=void 0===t?null:t)&&r.then(t),_o.updateContainer(e,n,null,r._onCommit),r},Eo.prototype.unmount=function(e){var t=this._internalRoot,n=new Co;return null!==(e=void 0===e?null:e)&&n.then(e),_o.updateContainer(null,t,null,n._onCommit),n},Eo.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Co;return null!==(n=void 0===n?null:n)&&o.then(n),_o.updateContainer(t,r,e,o._onCommit),o},Eo.prototype.createBatch=function(){var e=new wo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var _o=Sr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Xr(null,"");break;default:e=Xr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Xr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){vo=vn;var e=u();if(Bn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,s=-1,c=0,l=0,f=e,p=null;t:for(;;){for(var d;f!==t||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==n&&3!==f.nodeType||(s=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===e)break t;if(p===t&&++c===r&&(a=i),p===o&&++l===n&&(s=i),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}t=-1===a||-1===s?null:{start:a,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;bo={focusedElem:e,selectionRange:t},bn(!1)},resetAfterCommit:function(){var e=bo,t=u(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&l(document.documentElement,n)){if(Bn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[oe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Dn(n,e);var i=Dn(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}bo=null,bn(vo),vo=null},createInstance:function(e,t,n,r,o){return(e=co(e,t,n,r))[z]=o,e[H]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),ko(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=lo(e,t))[z]=r,e},now:Pr,mutation:{commitMount:function(e,t,n){ko(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[H]=o,ho(e,t,n,r,o)},resetTextContent:function(e){eo(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[z]=i,e[H]=n,yo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[z]=n,mo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Or,cancelDeferredCallback:Rr}),So=_o;function To(e,t,n,r,o){xo(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=_o.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Eo(e,!1,t)}(n,r),"function"==typeof o){var s=o;o=function(){var e=_o.getPublicRootInstance(i._internalRoot);s.call(e)}}_o.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return _o.getPublicRootInstance(i._internalRoot)}function Po(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return xo(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}De=So.batchedUpdates,Be=So.interactiveUpdates,Fe=So.flushInteractiveUpdates;var Oo={createPortal:Po,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:_o.findHostInstance(e)},hydrate:function(e,t,n){return To(null,e,t,!0,n)},render:function(e,t,n){return To(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),To(e,t,n,!1,r)},unmountComponentAtNode:function(e){return xo(e)||p("40"),!!e._reactRootContainer&&(_o.unbatchedUpdates(function(){To(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Po.apply(void 0,arguments)},unstable_batchedUpdates:_o.batchedUpdates,unstable_deferredUpdates:_o.deferredUpdates,flushSync:_o.flushSync,unstable_flushControlled:_o.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:F,EventPluginRegistry:k,EventPropagators:ne,ReactControlledComponent:Me,ReactDOMComponentTree:Y,ReactDOMEventListener:kn},unstable_createRoot:function(e,t){return new Eo(e,!0,null!=t&&!0===t.hydrate)}};_o.injectIntoDevTools({findFiberByHostInstance:q,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Ro=Object.freeze({default:Oo}),Io=Ro&&Oo||Ro;e.exports=Io.default?Io.default:Io},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(87)},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(34),o=n(14),i=n(33),a=n(13),s="function"==typeof Symbol&&Symbol.for,u=s?Symbol.for("react.element"):60103,c=s?Symbol.for("react.portal"):60106,l=s?Symbol.for("react.fragment"):60107,f=s?Symbol.for("react.strict_mode"):60108,p=s?Symbol.for("react.provider"):60109,d=s?Symbol.for("react.context"):60110,h=s?Symbol.for("react.async_mode"):60111,y=s?Symbol.for("react.forward_ref"):60112,m="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function b(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}function w(){}function C(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=b.prototype;var E=C.prototype=new w;E.constructor=C,r(E,b.prototype),E.isPureReactComponent=!0;var x={current:null},k=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!_.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),l=0;l<s;l++)c[l]=arguments[l+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:u,type:e,key:i,ref:a,props:o,_owner:x.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var P=/\/+/g,O=[];function R(e,t,n,r){if(O.length){var o=O.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function A(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case u:case c:i=!0}}if(i)return n(r,e,""===t?"."+N(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var s=t+N(o=e[a],a);i+=A(o,s,n,r)}else if(null===e||void 0===e?s=null:s="function"==typeof(s=m&&e[m]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),a=0;!(o=e.next()).done;)i+=A(o=o.value,s=t+N(o,a++),n,r);else"object"===o&&g("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function U(e,t){e.func.call(e.context,t,e.count++)}function j(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,r,n,a.thatReturnsArgument):null!=e&&(T(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function M(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(P,"$&/")+"/"),t=R(t,i,r,o),null==e||A(e,"",j,t),I(t)}var D={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return M(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=R(null,null,t,n),null==e||A(e,"",U,t),I(t)},count:function(e){return null==e?0:A(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return M(e,t,null,a.thatReturnsArgument),t},only:function(e){return T(e)||g("143"),e}},createRef:function(){return{current:null}},Component:b,PureComponent:C,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:y,render:e}},Fragment:l,StrictMode:f,unstable_AsyncMode:h,createElement:S,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var o=void 0,i=r({},e.props),a=e.key,s=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,c=x.current),void 0!==t.key&&(a=""+t.key);var l=void 0;for(o in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),t)k.call(t,o)&&!_.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==l?l[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){l=Array(o);for(var f=0;f<o;f++)l[f]=arguments[f+2];i.children=l}return{$$typeof:u,type:e.type,key:a,ref:s,props:i,_owner:c}},createFactory:function(e){var t=S.bind(null,e);return t.type=e,t},isValidElement:T,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:r}},B=Object.freeze({default:D}),F=B&&D||B;e.exports=F.default?F.default:F},function(e,t,n){"use strict";var r=l(n(1)),o=l(n(88)),i=l(n(80)),a=n(15),s=l(n(65)),u=n(9),c=(l(n(30)),l(n(37)));n(17);function l(e){return e&&e.__esModule?e:{default:e}}var f=(0,a.createStore)(c.default,(0,a.applyMiddleware)(s.default));o.default.render(r.default.createElement(u.Provider,{store:f},r.default.createElement(i.default,null)),document.getElementById("root"))},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(0))},function(e,t,n){e.exports=n.p+"9ee991ff2bc1603cdc05c7fea51d4020.png"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r};n(95);var s=n(9),u=n(17);var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"render",value:function(){var e=this.props,t=e.usersList,n=e.closeComponent;return a.default.createElement("div",{id:"create-room-comp"},a.default.createElement("div",{class:"flex-col"},a.default.createElement("h1",null,"Create a new room ",a.default.createElement("strong",{style:{cursor:"pointer",color:"red"},onClick:n},"X Close")),a.default.createElement("div",{class:"flex-row"},a.default.createElement("div",null,a.default.createElement("form",{onSubmit:function(e){return e.preventDefault()}},a.default.createElement("input",{type:"text",placeholder:"Name of the room"}),a.default.createElement("br",null),a.default.createElement("input",{type:"text",placeholder:"Participants"}),a.default.createElement("br",null),a.default.createElement("textarea",null),a.default.createElement("br",null),a.default.createElement("button",null,"Create"))),a.default.createElement("div",null,t.map(function(e){return a.default.createElement("p",null,"+ ",e.name)})))))}}]),t}();t.default=(0,s.connect)(function(e){return{usersList:e.usersList}},function(e){return{handleCreateRoom:function(){return e((0,u.createRoom)())}}})(c)},function(e,t,n){(e.exports=n(32)(!1)).push([e.i,"@keyframes rotation {\n  from {\n    transform: rotate(0deg); }\n  to {\n    transform: rotate(360deg); } }\n\n.flex-row {\n  display: flex;\n  flex-direction: row; }\n\n.flex-col {\n  display: flex;\n  flex-direction: column; }\n\n#create-room-comp {\n  position: fixed;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 50;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.5); }\n  #create-room-comp div {\n    width: 500px;\n    height: 350px;\n    background-color: white; }\n",""])},function(e,t,n){var r=n(94);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(31)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=p(n(1)),i=n(9),a=p(n(30)),s=p(n(76)),u=p(n(72)),c=p(n(71)),l=p(n(70)),f=n(17);function p(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement(o.default.Fragment,null,o.default.createElement("div",{id:"left-container"},o.default.createElement(l.default,null),o.default.createElement(s.default,null)),o.default.createElement("div",{id:"right-container"},o.default.createElement(u.default,null),o.default.createElement(c.default,null)))}},{key:"componentWillMount",value:function(){a.default.on("RECEIVE_USERS_LIST",function(e){console.log(e)}),this.props.retrieveUsersList()}}]),t}();t.default=(0,i.connect)(function(e){return{}},function(e){return{retrieveUsersList:function(){return e((0,f.retrieveUsersList)())}}})(d)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWluaGVyaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi94bWxodHRwcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvYWN0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luZGV4b2YvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3llYXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9tYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2lzLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2V1cmkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvU29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvcmVkdWNlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhY2tvMi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG8tYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmctanNvbnAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jsb2IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1hcnJheWJ1ZmZlci9saWIvYmFzZTY0LWFycmF5YnVmZmVyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL3V0ZjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FmdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheWJ1ZmZlci5zbGljZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtY29ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvTG9naW5Db21wb25lbnQuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0xvZ2luQ29tcG9uZW50LnNjc3M/NjJmOSIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0xvZ2luQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvaW1nL2VkaXQucG5nIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvUHJvZmlsZUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0lucHV0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvQ29udmVyc2F0aW9uQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvUm9vbXNMaXN0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9BcHAuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0FwcC5zY3NzPzhmNjUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL2ltZy9sb2FkaW5nLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0NyZWF0ZVJvb21Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9DcmVhdGVSb29tQ29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9DcmVhdGVSb29tQ29tcG9uZW50LnNjc3M/NzE2NyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0NoYXRDb21wb25lbnQuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImciLCJ0aGlzIiwiRnVuY3Rpb24iLCJldmFsIiwiZSIsIndpbmRvdyIsInByb2Nlc3MiLCJsb2FkIiwic3RvcmFnZSIsImRlYnVnIiwiZW52IiwiREVCVUciLCJsb2ciLCJjb25zb2xlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmb3JtYXRBcmdzIiwiYXJncyIsInVzZUNvbG9ycyIsIm5hbWVzcGFjZSIsImh1bWFuaXplIiwiZGlmZiIsImNvbG9yIiwic3BsaWNlIiwiaW5kZXgiLCJsYXN0QyIsInJlcGxhY2UiLCJtYXRjaCIsInNhdmUiLCJuYW1lc3BhY2VzIiwicmVtb3ZlSXRlbSIsInR5cGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsImV4Y2VwdGlvbiIsInRhYmxlIiwicGFyc2VJbnQiLCJSZWdFeHAiLCIkMSIsImNocm9tZSIsImxvY2FsIiwibG9jYWxTdG9yYWdlIiwibG9jYWxzdG9yYWdlIiwiY29sb3JzIiwiZm9ybWF0dGVycyIsImoiLCJ2IiwiSlNPTiIsInN0cmluZ2lmeSIsImVyciIsIm1lc3NhZ2UiLCJlbmFibGUiLCJnbG9iYWwiLCJiYXNlNjRlbmNvZGVyIiwia2V5cyIsImhhc0JpbmFyeSIsInNsaWNlQnVmZmVyIiwiYWZ0ZXIiLCJ1dGY4IiwiQXJyYXlCdWZmZXIiLCJpc0FuZHJvaWQiLCJ0ZXN0IiwiaXNQaGFudG9tSlMiLCJkb250U2VuZEJsb2JzIiwicHJvdG9jb2wiLCJwYWNrZXRzIiwib3BlbiIsImNsb3NlIiwicGluZyIsInBvbmciLCJ1cGdyYWRlIiwibm9vcCIsInBhY2tldHNsaXN0IiwiZGF0YSIsIkJsb2IiLCJtYXAiLCJhcnkiLCJlYWNoIiwiZG9uZSIsInJlc3VsdCIsIkFycmF5IiwibGVuZ3RoIiwibmV4dCIsImVhY2hXaXRoSW5kZXgiLCJlbCIsImNiIiwiZXJyb3IiLCJtc2ciLCJlbmNvZGVQYWNrZXQiLCJwYWNrZXQiLCJzdXBwb3J0c0JpbmFyeSIsInV0ZjhlbmNvZGUiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsImJ1ZmZlciIsImVuY29kZUJhc2U2NFBhY2tldCIsImNvbnRlbnRBcnJheSIsIlVpbnQ4QXJyYXkiLCJyZXN1bHRCdWZmZXIiLCJieXRlTGVuZ3RoIiwiZW5jb2RlQXJyYXlCdWZmZXIiLCJmciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImVuY29kZUJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsImVuY29kZUJsb2IiLCJiYXNlNjQiLCJlbmNvZGVCYXNlNjRPYmplY3QiLCJlbmNvZGVkIiwiZW5jb2RlIiwiU3RyaW5nIiwic3RyaWN0IiwiYjY0ZGF0YSIsImI2NCIsInNwbGl0IiwicmVhZEFzRGF0YVVSTCIsImZyb21DaGFyQ29kZSIsInR5cGVkIiwiYmFzaWMiLCJidG9hIiwiZGVjb2RlUGFja2V0IiwiYmluYXJ5VHlwZSIsInV0ZjhkZWNvZGUiLCJjaGFyQXQiLCJkZWNvZGVCYXNlNjRQYWNrZXQiLCJzdWJzdHIiLCJkZWNvZGUiLCJ0cnlEZWNvZGUiLCJOdW1iZXIiLCJzdWJzdHJpbmciLCJyZXN0IiwiZW5jb2RlUGF5bG9hZCIsImlzQmluYXJ5IiwiZW5jb2RlUGF5bG9hZEFzQmxvYiIsImVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyIiwiZG9uZUNhbGxiYWNrIiwic2V0TGVuZ3RoSGVhZGVyIiwicmVzdWx0cyIsImpvaW4iLCJkZWNvZGVQYXlsb2FkIiwiZGVjb2RlUGF5bG9hZEFzQmluYXJ5IiwiY2hyIiwiZW5jb2RlZFBhY2tldHMiLCJ0b3RhbExlbmd0aCIsInJlZHVjZSIsImFjYyIsImxlbiIsInRvU3RyaW5nIiwicmVzdWx0QXJyYXkiLCJidWZmZXJJbmRleCIsImZvckVhY2giLCJpc1N0cmluZyIsImFiIiwidmlldyIsImNoYXJDb2RlQXQiLCJsZW5TdHIiLCJiaW5hcnlJZGVudGlmaWVyIiwic2l6ZSIsImxlbmd0aEFyeSIsImJ1ZmZlclRhaWwiLCJidWZmZXJzIiwidGFpbEFycmF5IiwibXNnTGVuZ3RoIiwicHVzaCIsInRvdGFsIiwiRW1pdHRlciIsIm9iaiIsImtleSIsIm1peGluIiwib24iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJmbiIsIl9jYWxsYmFja3MiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FsbGJhY2tzIiwiZW1pdCIsInNsaWNlIiwibGlzdGVuZXJzIiwiaGFzTGlzdGVuZXJzIiwiYSIsImIiLCJjb25zdHJ1Y3RvciIsInN0ciIsImVuY29kZVVSSUNvbXBvbmVudCIsInFzIiwicXJ5IiwicGFpcnMiLCJwYWlyIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiZiIsIkVycm9yIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsInN1YnNjcmlwdGlvblNoYXBlIiwicHJvcF90eXBlc19kZWZhdWx0Iiwic2hhcGUiLCJ0cnlTdWJzY3JpYmUiLCJmdW5jIiwiaXNSZXF1aXJlZCIsInRyeVVuc3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsImlzU3Vic2NyaWJlZCIsInN0b3JlU2hhcGUiLCJzdWJzY3JpYmUiLCJkaXNwYXRjaCIsImdldFN0YXRlIiwiY3JlYXRlUHJvdmlkZXIiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJzdG9yZUtleSIsInN1YnNjcmlwdGlvbktleSIsIlByb3ZpZGVyIiwiX0NvbXBvbmVudCIsInByb3BzIiwiY29udGV4dCIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJfdGhpcyIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic3RvcmUiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ3cml0YWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwiZ2V0Q2hpbGRDb250ZXh0IiwiX3JlZiIsInJlbmRlciIsInJlYWN0Iiwib25seSIsImNoaWxkcmVuIiwicHJvcFR5cGVzIiwiZWxlbWVudCIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29tcG9uZW50c19Qcm92aWRlciIsIkNMRUFSRUQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwib25TdGF0ZUNoYW5nZSIsIlN1YnNjcmlwdGlvbl9jbGFzc0NhbGxDaGVjayIsInVuc3Vic2NyaWJlIiwiYWRkTmVzdGVkU3ViIiwibGlzdGVuZXIiLCJCb29sZWFuIiwiY3VycmVudCIsImNsZWFyIiwiaW5kZXhPZiIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0Iiwic291cmNlIiwiaG90UmVsb2FkaW5nVmVyc2lvbiIsImR1bW15U3RhdGUiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfY29udGV4dFR5cGVzIiwiX2NoaWxkQ29udGV4dFR5cGVzIiwiX3JlZiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZiRtZXRob2ROYW1lIiwibWV0aG9kTmFtZSIsIl9yZWYkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZiRzaG91bGRIYW5kbGVTdGF0Iiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZiRzdG9yZUtleSIsIl9yZWYkd2l0aFJlZiIsIndpdGhSZWYiLCJjb25uZWN0T3B0aW9ucyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInZlcnNpb24iLCJjb250ZXh0VHlwZXMiLCJXcmFwcGVkQ29tcG9uZW50IiwiYnJvd3Nlcl9kZWZhdWx0Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJkaXNwbGF5TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJDb25uZWN0IiwiY29ubmVjdEFkdmFuY2VkX2NsYXNzQ2FsbENoZWNrIiwiY29ubmVjdEFkdmFuY2VkX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdGF0ZSIsInJlbmRlckNvdW50IiwicHJvcHNNb2RlIiwic2V0V3JhcHBlZEluc3RhbmNlIiwiYmluZCIsImluaXRTZWxlY3RvciIsImluaXRTdWJzY3JpcHRpb24iLCJjb25uZWN0QWR2YW5jZWRfaW5oZXJpdHMiLCJfcmVmMiIsInN1YnNjcmlwdGlvbiIsImNvbXBvbmVudERpZE1vdW50Iiwic2VsZWN0b3IiLCJydW4iLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJmb3JjZVVwZGF0ZSIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImdldFdyYXBwZWRJbnN0YW5jZSIsIndyYXBwZWRJbnN0YW5jZSIsInJlZiIsInNvdXJjZVNlbGVjdG9yIiwibWFrZVNlbGVjdG9yU3RhdGVmdWwiLCJjb21wb25lbnREaWRVcGRhdGUiLCJub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUiLCJzZXRTdGF0ZSIsImFkZEV4dHJhUHJvcHMiLCJ3aXRoRXh0cmFzIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfZGVmYXVsdCIsImhhc093biIsImlzIiwieCIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJmcmVlU2VsZiIsIl9TeW1ib2wiLCJfZnJlZUdsb2JhbCIsIlN5bWJvbCIsIm9iamVjdFByb3RvIiwidG9TdHJpbmdUYWciLCJnZXRQcm90b3R5cGVPZiIsImZ1bmNQcm90byIsImlzUGxhaW5PYmplY3Rfb2JqZWN0UHJvdG8iLCJmdW5jVG9TdHJpbmciLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJvcHRpb25zIiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJwcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwiY29ubmVjdF9tYXBEaXNwYXRjaFRvUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJyZWR1eCIsImNvbm5lY3RfbWFwU3RhdGVUb1Byb3BzIiwibWFwU3RhdGVUb1Byb3BzIiwibWVyZ2VQcm9wc19leHRlbmRzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsImNvbm5lY3RfbWVyZ2VQcm9wcyIsIm1lcmdlUHJvcHMiLCJwdXJlIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJtZXJnZWRQcm9wcyIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dFN0YXRlIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwic2VsZWN0b3JGYWN0b3J5X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiY29ubmVjdF9leHRlbmRzIiwiYXJnIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjb25uZWN0X2Nvbm5lY3QiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkcHVyZSIsIl9yZWYyJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjIkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjIkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjIkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwiY29ubmVjdF9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInBhcnNlciIsIlRyYW5zcG9ydCIsIm9wdHMiLCJwYXRoIiwiaG9zdG5hbWUiLCJwb3J0Iiwic2VjdXJlIiwicXVlcnkiLCJ0aW1lc3RhbXBQYXJhbSIsInRpbWVzdGFtcFJlcXVlc3RzIiwicmVhZHlTdGF0ZSIsImFnZW50Iiwic29ja2V0IiwiZW5hYmxlc1hEUiIsInBmeCIsInBhc3NwaHJhc2UiLCJjZXJ0IiwiY2EiLCJjaXBoZXJzIiwicmVqZWN0VW5hdXRob3JpemVkIiwiZm9yY2VOb2RlIiwiZXh0cmFIZWFkZXJzIiwibG9jYWxBZGRyZXNzIiwib25FcnJvciIsImRlc2MiLCJkZXNjcmlwdGlvbiIsImRvT3BlbiIsImRvQ2xvc2UiLCJvbkNsb3NlIiwic2VuZCIsIndyaXRlIiwib25PcGVuIiwib25EYXRhIiwib25QYWNrZXQiLCJoYXNDT1JTIiwieGRvbWFpbiIsInhzY2hlbWUiLCJYTUxIdHRwUmVxdWVzdCIsIlhEb21haW5SZXF1ZXN0IiwiY29uY2F0IiwiYmluYXJ5IiwiaXNBcnJheSIsImlzQnVmIiwiRW5jb2RlciIsInR5cGVzIiwiQ09OTkVDVCIsIkRJU0NPTk5FQ1QiLCJFVkVOVCIsIkFDSyIsIkVSUk9SIiwiQklOQVJZX0VWRU5UIiwiQklOQVJZX0FDSyIsIkRlY29kZXIiLCJFUlJPUl9QQUNLRVQiLCJlbmNvZGVBc1N0cmluZyIsImF0dGFjaG1lbnRzIiwibnNwIiwiaWQiLCJwYXlsb2FkIiwidHJ5U3RyaW5naWZ5IiwicmVjb25zdHJ1Y3RvciIsIkJpbmFyeVJlY29uc3RydWN0b3IiLCJyZWNvblBhY2siLCJyZW1vdmVCbG9icyIsImJsb2JsZXNzRGF0YSIsImRlY29uc3RydWN0aW9uIiwiZGVjb25zdHJ1Y3RQYWNrZXQiLCJwYWNrIiwidW5zaGlmdCIsImVuY29kZUFzQmluYXJ5IiwiYWRkIiwiYnVmIiwicGFyc2UiLCJ0cnlQYXJzZSIsImlzUGF5bG9hZFZhbGlkIiwiZGVjb2RlU3RyaW5nIiwidGFrZUJpbmFyeURhdGEiLCJkZXN0cm95IiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsImJpbkRhdGEiLCJyZWNvbnN0cnVjdFBhY2tldCIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJ2YWxpZGF0ZUZvcm1hdCIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIk1hdGgiLCJyYW5kb20iLCJSRVBMQUNFIiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsImFjdGlvbiIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJzeW1ib2xfb2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwiZmluYWxSZWR1Y2VyS2V5cyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwiX2kiLCJfa2V5IiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9sZW4yIiwiX2tleTIiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsInJldHJpZXZlUm9vbXNMaXN0IiwiUkVUUklFVkVfUk9PTVNfTElTVF9QRU5ESU5HIiwicmV0cmlldmVVc2Vyc0xpc3QiLCJSRVRSSUVWRV9VU0VSU19MSVNUX1BFTkRJTkciLCJyZWNlaXZlUm9vbXNMaXN0IiwibGlzdCIsIlJFQ0VJVkVfUk9PTVNfTElTVCIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkxPR0lOX1JFUVVFU1QiLCJmZXRjaCIsImhlYWRlcnMiLCJBY2NlcHQiLCJDb250ZW50LVR5cGUiLCJtZXRob2QiLCJjcmVkZW50aWFscyIsImJvZHkiLCJ0aGVuIiwianNvbiIsIkxPR0lOX0ZBSUxFRCIsIkxPR0lOX1NVQ0NFU1MiLCJ1c2VyIiwiY3JlYXRlUm9vbSIsIl9Tb2NrZXQiLCJSRUNFSVZFX1VTRVJTX0xJU1QiLCJldiIsInRvQXJyYXkiLCJwYXJzZXFzIiwiaGFzQmluIiwiU29ja2V0IiwiZXZlbnRzIiwiY29ubmVjdCIsImNvbm5lY3RfZXJyb3IiLCJjb25uZWN0X3RpbWVvdXQiLCJjb25uZWN0aW5nIiwiZGlzY29ubmVjdCIsInJlY29ubmVjdCIsInJlY29ubmVjdF9hdHRlbXB0IiwicmVjb25uZWN0X2ZhaWxlZCIsInJlY29ubmVjdF9lcnJvciIsInJlY29ubmVjdGluZyIsImlvIiwiaWRzIiwiYWNrcyIsInJlY2VpdmVCdWZmZXIiLCJzZW5kQnVmZmVyIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiZmxhZ3MiLCJhdXRvQ29ubmVjdCIsInN1YkV2ZW50cyIsInN1YnMiLCJvbm9wZW4iLCJjb21wcmVzcyIsInBvcCIsIm9uY2xvc2UiLCJyZWFzb24iLCJvbnBhY2tldCIsInNhbWVOYW1lc3BhY2UiLCJyb290TmFtZXNwYWNlRXJyb3IiLCJvbmNvbm5lY3QiLCJvbmV2ZW50Iiwib25hY2siLCJvbmRpc2Nvbm5lY3QiLCJhY2siLCJzZW50IiwiZW1pdEJ1ZmZlcmVkIiwiYXJyIiwicHJldiIsImFscGhhYmV0Iiwic2VlZCIsIm51bSIsImZsb29yIiwieWVhc3QiLCJub3ciLCJEYXRlIiwiZGVjb2RlZCIsIkJ1ZmZlciIsIndpdGhOYXRpdmVCbG9iIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwiaXNCdWZmZXIiLCJ0b0pTT04iLCJpbmhlcml0IiwiUG9sbGluZyIsImhhc1hIUjIiLCJyZXNwb25zZVR5cGUiLCJmb3JjZUJhc2U2NCIsInBvbGwiLCJwYXVzZSIsIm9uUGF1c2UiLCJwb2xsaW5nIiwiZG9Qb2xsIiwiY2FsbGJhY2tmbiIsImRvV3JpdGUiLCJ1cmkiLCJzY2hlbWEiLCJzaWQiLCJYSFIiLCJKU09OUCIsIndlYnNvY2tldCIsInhkIiwieHMiLCJqc29ucCIsImxvY2F0aW9uIiwiaXNTU0wiLCJmb3JjZUpTT05QIiwiZWlvIiwiQmFja29mZiIsImhhcyIsIk1hbmFnZXIiLCJuc3BzIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJJbmZpbml0eSIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsIm1pbiIsIm1heCIsImppdHRlciIsInRpbWVvdXQiLCJsYXN0UGluZyIsImVuY29kaW5nIiwicGFja2V0QnVmZmVyIiwiX3BhcnNlciIsImVuY29kZXIiLCJkZWNvZGVyIiwiZW1pdEFsbCIsInVwZGF0ZVNvY2tldElkcyIsImdlbmVyYXRlSWQiLCJlbmdpbmUiLCJfcmVjb25uZWN0aW9uIiwiX3JlY29ubmVjdGlvbkF0dGVtcHRzIiwiX3JlY29ubmVjdGlvbkRlbGF5Iiwic2V0TWluIiwiX3JhbmRvbWl6YXRpb25GYWN0b3IiLCJzZXRKaXR0ZXIiLCJfcmVjb25uZWN0aW9uRGVsYXlNYXgiLCJzZXRNYXgiLCJfdGltZW91dCIsIm1heWJlUmVjb25uZWN0T25PcGVuIiwiYXR0ZW1wdHMiLCJza2lwUmVjb25uZWN0Iiwib3BlblN1YiIsImVycm9yU3ViIiwiY2xlYW51cCIsInRpbWVyIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsIm9ucGluZyIsIm9ucG9uZyIsIm9uZGF0YSIsIm9uZGVjb2RlZCIsIm9uZXJyb3IiLCJvbkNvbm5lY3RpbmciLCJwcm9jZXNzUGFja2V0UXVldWUiLCJzaGlmdCIsInN1YnNMZW5ndGgiLCJyZXNldCIsImRlbGF5IiwiZHVyYXRpb24iLCJvbnJlY29ubmVjdCIsImF0dGVtcHQiLCJ3aXRoTmF0aXZlQnVmZmVyIiwid2l0aE5hdGl2ZUFycmF5QnVmZmVyIiwiaXNWaWV3IiwicmUiLCJwYXJ0cyIsInNyYyIsImV4ZWMiLCJob3N0IiwiYXV0aG9yaXR5IiwiaXB2NnVyaSIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiaXRlbSIsImRvbVN0eWxlIiwicmVmcyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpZHgiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXR0cnMiLCJhZGRBdHRycyIsInNldEF0dHJpYnV0ZSIsInVwZGF0ZSIsInJlbW92ZSIsInRyYW5zZm9ybSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJ1bmVzY2FwZSIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsInVzZVNvdXJjZU1hcCIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRlc3QxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwidmFsIiwidG9PYmplY3QiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiUkVBQ1RfU1RBVElDUyIsImRlZmF1bHRQcm9wcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiZGVzY3JpcHRvciIsImZhY3RvcnkiLCJfcmVkdXgiLCJfaW5kZXgiLCJfaWQiLCJsYXN0RGF0ZUFjdGl2ZSIsInVzZXJzTGlzdCIsInJvb21zIiwiaXNMb2dnZWRJbiIsImlzTG9nZ2luZ0luIiwibXMiLCJmYWN0b3IiLCJwb3ciLCJyYW5kIiwiZGV2aWF0aW9uIiwiYXJyYXkiLCJOb2RlV2ViU29ja2V0IiwiQnJvd3NlcldlYlNvY2tldCIsIldlYlNvY2tldCIsIk1veldlYlNvY2tldCIsIldTIiwicGVyTWVzc2FnZURlZmxhdGUiLCJ1c2luZ0Jyb3dzZXJXZWJTb2NrZXQiLCJwcm90b2NvbHMiLCJjaGVjayIsIndzIiwic3VwcG9ydHMiLCJhZGRFdmVudExpc3RlbmVycyIsIm9ubWVzc2FnZSIsInRocmVzaG9sZCIsIkpTT05QUG9sbGluZyIsInJOZXdsaW5lIiwickVzY2FwZWROZXdsaW5lIiwiZW1wdHkiLCJfX19laW8iLCJzY3JpcHQiLCJmb3JtIiwiaWZyYW1lIiwiYXN5bmMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFyZWEiLCJpZnJhbWVJZCIsImNsYXNzTmFtZSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsImNvbXBsZXRlIiwiaW5pdElmcmFtZSIsImh0bWwiLCJzdWJtaXQiLCJhdHRhY2hFdmVudCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJibG9iU3VwcG9ydGVkIiwiYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3IiwiYmxvYkJ1aWxkZXJTdXBwb3J0ZWQiLCJhcHBlbmQiLCJnZXRCbG9iIiwibWFwQXJyYXlCdWZmZXJWaWV3cyIsImNodW5rIiwiY29weSIsInNldCIsImJ5dGVPZmZzZXQiLCJCbG9iQnVpbGRlckNvbnN0cnVjdG9yIiwiYmIiLCJCbG9iQ29uc3RydWN0b3IiLCJjaGFycyIsImxvb2t1cCIsImFycmF5YnVmZmVyIiwiYnl0ZXMiLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsImJ1ZmZlckxlbmd0aCIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJmcmVlRXhwb3J0cyIsImZyZWVHbG9iYWwiLCJieXRlQXJyYXkiLCJieXRlQ291bnQiLCJieXRlSW5kZXgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJ1Y3MyZGVjb2RlIiwic3RyaW5nIiwiZXh0cmEiLCJvdXRwdXQiLCJjb3VudGVyIiwiY2hlY2tTY2FsYXJWYWx1ZSIsImNvZGVQb2ludCIsInRvVXBwZXJDYXNlIiwiY3JlYXRlQnl0ZSIsImVuY29kZUNvZGVQb2ludCIsInN5bWJvbCIsInJlYWRDb250aW51YXRpb25CeXRlIiwiY29udGludWF0aW9uQnl0ZSIsImRlY29kZVN5bWJvbCIsImJ5dGUxIiwiY29kZVBvaW50cyIsImJ5dGVTdHJpbmciLCJ0bXAiLCJ1Y3MyZW5jb2RlIiwiY291bnQiLCJlcnJfY2IiLCJiYWlsIiwic3RhcnQiLCJlbmQiLCJhYnYiLCJpaSIsInJlYWQiLCJvZmZzZXQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsInJ0IiwiYWJzIiwiaXNOYU4iLCJMTjIiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG9CeXRlQXJyYXkiLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJyZXZMb29rdXAiLCJmcm9tQnl0ZUFycmF5IiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwiY29kZSIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJmcm9tU3RyaW5nIiwiY2hlY2tlZCIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJkaXIiLCJhcnJheUluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJiYXNlNjRTbGljZSIsInV0ZjhTbGljZSIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImJ5dGVzUGVyU2VxdWVuY2UiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJoZXhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsInV0ZjE2bGVTbGljZSIsImVxdWFscyIsImluc3BlY3QiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsIl9hcnIiLCJyZXQiLCJvdXQiLCJ0b0hleCIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsIklOVkFMSURfQkFTRTY0X1JFIiwibGVhZFN1cnJvZ2F0ZSIsInRyaW0iLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJkc3QiLCJyZXF1ZXN0VGltZW91dCIsIlJlcXVlc3QiLCJ1bmxvYWRIYW5kbGVyIiwicmVxdWVzdHMiLCJhYm9ydCIsInJlcXVlc3QiLCJyZXEiLCJzZW5kWGhyIiwicG9sbFhociIsInhociIsInNldERpc2FibGVIZWFkZXJDaGVjayIsInNldFJlcXVlc3RIZWFkZXIiLCJ3aXRoQ3JlZGVudGlhbHMiLCJoYXNYRFIiLCJvbkxvYWQiLCJyZXNwb25zZVRleHQiLCJjb250ZW50VHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwic3RhdHVzIiwicmVxdWVzdHNDb3VudCIsIm9uU3VjY2VzcyIsImZyb21FcnJvciIsInJlc3BvbnNlIiwidHJhbnNwb3J0cyIsInBhcnNldXJpIiwidHJhbnNwb3J0T3B0aW9ucyIsIndyaXRlQnVmZmVyIiwicHJldkJ1ZmZlckxlbiIsInBvbGljeVBvcnQiLCJyZW1lbWJlclVwZ3JhZGUiLCJvbmx5QmluYXJ5VXBncmFkZXMiLCJ1cGdyYWRlcyIsInBpbmdJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwicGluZ0ludGVydmFsVGltZXIiLCJwaW5nVGltZW91dFRpbWVyIiwicHJpb3JXZWJzb2NrZXRTdWNjZXNzIiwiY3JlYXRlVHJhbnNwb3J0IiwiY2xvbmUiLCJFSU8iLCJ0cmFuc3BvcnQiLCJzZXRUcmFuc3BvcnQiLCJvbkRyYWluIiwicHJvYmUiLCJmYWlsZWQiLCJvblRyYW5zcG9ydE9wZW4iLCJ1cGdyYWRlTG9zZXNCaW5hcnkiLCJ1cGdyYWRpbmciLCJmbHVzaCIsImZyZWV6ZVRyYW5zcG9ydCIsIm9uVHJhbnNwb3J0Q2xvc2UiLCJvbnVwZ3JhZGUiLCJvbkhhbmRzaGFrZSIsInNldFBpbmciLCJmaWx0ZXJVcGdyYWRlcyIsIm9uSGVhcnRiZWF0Iiwic2VuZFBhY2tldCIsIndhaXRGb3JVcGdyYWRlIiwiY2xlYW51cEFuZENsb3NlIiwiZmlsdGVyZWRVcGdyYWRlcyIsInBhY2tldERhdGEiLCJfZGVjb25zdHJ1Y3RQYWNrZXQiLCJwbGFjZWhvbGRlciIsIl9wbGFjZWhvbGRlciIsIm5ld0RhdGEiLCJfcmVjb25zdHJ1Y3RQYWNrZXQiLCJwZW5kaW5nQmxvYnMiLCJfcmVtb3ZlQmxvYnMiLCJjdXJLZXkiLCJjb250YWluaW5nT2JqZWN0IiwiZmlsZVJlYWRlciIsImgiLCJwbHVyYWwiLCJjZWlsIiwicGFyc2VGbG9hdCIsImxvbmciLCJyb3VuZCIsImZtdFNob3J0IiwiY3JlYXRlRGVidWciLCJwcmV2VGltZSIsImVuYWJsZWQiLCJjdXJyIiwiY29lcmNlIiwiZm9ybWF0dGVyIiwiaGFzaCIsInNlbGVjdENvbG9yIiwiaW5pdCIsImluc3RhbmNlcyIsInN0YWNrIiwiZGlzYWJsZSIsIm5hbWVzIiwic2tpcHMiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJsb2MiLCJ1cmwiLCJjYWNoZSIsIm1hbmFnZXJzIiwiZm9yY2VOZXciLCJtdWx0aXBsZXgiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImhtciIsImxvY2FscyIsIl9yZWFjdFJlZHV4IiwiTG9naW5Db21wb25lbnQiLCJoYW5kbGVGb3JtQ2hhbmdlIiwiX2UkdGFyZ2V0IiwicHJldlN0YXRlIiwiX2RlZmluZVByb3BlcnR5Iiwic2lnblVwIiwicHJldmVudERlZmF1bHQiLCJfdGhpcyRzdGF0ZSRzaWduVXBGb3IiLCJzaWduVXBGb3JtIiwicmVwZWF0UGFzc3dvcmQiLCJpbmZvIiwic3VibWl0TG9naW4iLCJfdGhpcyRzdGF0ZSRsb2dpbkZvcm0iLCJsb2dpbkZvcm0iLCJoYW5kbGVMb2dpbiIsIlJlYWN0IiwiQ29tcG9uZW50IiwiX3JlYWN0MiIsImRlZmF1bHQiLCJsb2FkaW5nIiwiYWx0Iiwib25TdWJtaXQiLCJvbkNoYW5nZSIsIlByb2ZpbGVDb21wb25lbnQiLCJlZGl0SW1hZ2UiLCJfcmVhY3QiLCJJbnB1dENvbXBvbmVudCIsIkNvbnZlcnNhdGlvbkNvbXBvbmVudCIsIm9yaWdpbmFsTW9kdWxlIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsIm51bWJlciIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwibm9kZSIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiUm9vbXNMaXN0SXRlbSIsImxhc3RNZXNzYWdlQ29udGVudCIsImxhc3RNZXNzYWdlRGF0ZSIsImNsYXNzIiwiUm9vbXNMaXN0Q29tcG9uZW50IiwidG9nZ2xlQ3JlYXRlUm9vbSIsImlzQ3JlYXRlUm9vbUNvbXBvbmVudE9wZW4iLCJfQ3JlYXRlUm9vbUNvbXBvbmVudDIiLCJjbG9zZUNvbXBvbmVudCIsImN1cnNvciIsIm9uQ2xpY2siLCJiYXNlVXJsIiwiY3VycmVudERpciIsInBhdGhuYW1lIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIkFwcCIsIl9wcm9wcyIsIl9DaGF0Q29tcG9uZW50MiIsIl9Mb2dpbkNvbXBvbmVudDIiLCJkZWZhdWx0VmlldyIsIm93bmVyRG9jdW1lbnQiLCJOb2RlIiwibm9kZVR5cGUiLCJub2RlTmFtZSIsImlzTm9kZSIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZG9jIiwiYWN0aXZlRWxlbWVudCIsImNhblVzZURPTSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwiYmEiLCJlYSIsIkEiLCJDIiwiZmEiLCJoYSIsImphIiwia2EiLCJEIiwiRSIsIl9jYXVnaHRFcnJvciIsIl9oYXNDYXVnaHRFcnJvciIsIl9yZXRocm93RXJyb3IiLCJfaGFzUmV0aHJvd0Vycm9yIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrIiwiayIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsIm9hIiwicGEiLCJxYSIsInJhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJzYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidGEiLCJyZWdpc3RyYXRpb25OYW1lIiwidWEiLCJ2YSIsImRlcGVuZGVuY2llcyIsIndhIiwieGEiLCJDYSIsImZyZWV6ZSIsInBsdWdpbnMiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiY3VycmVudFRhcmdldCIsIkhhIiwiSWEiLCJKYSIsIkthIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIlBhIiwiUWEiLCJSYSIsImluamVjdGlvbiIsImdldExpc3RlbmVyIiwicnVuRXZlbnRzSW5CYXRjaCIsInJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2giLCJTYSIsIkYiLCJUYSIsIlVhIiwidGFnIiwiVmEiLCJYYSIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiTCIsImRiIiwiZGlzcGF0Y2hDb25maWciLCJlYiIsIl90YXJnZXRJbnN0IiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImFsdGVybmF0ZSIsImtiIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0IiwiYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMiLCJsYiIsIm1iIiwiTSIsIl9yb290IiwiX3N0YXJ0VGV4dCIsIl9mYWxsYmFja1RleHQiLCJuYiIsIm9iIiwicGIiLCJxYiIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJpc1RydXN0ZWQiLCJOIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsInNiIiwiZXZlbnRQb29sIiwidGIiLCJkZXN0cnVjdG9yIiwicmIiLCJnZXRQb29sZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXh0ZW5kIiwidWIiLCJ2YiIsIndiIiwieGIiLCJ5YiIsImRvY3VtZW50TW9kZSIsInpiIiwiQWIiLCJCYiIsIktiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIkxiIiwiTWIiLCJrZXlDb2RlIiwiTmIiLCJkZXRhaWwiLCJPYiIsIlJiIiwid2hpY2giLCJQYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIlFiIiwiU2IiLCJUYiIsImluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQiLCJVYiIsIlZiIiwiV2IiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwiZ2MiLCJoYyIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiaWMiLCJqYyIsImxjIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJrYyIsIm1jIiwibmMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiTyIsIm9jIiwicGMiLCJxYyIsInJjIiwic2MiLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiJCR0eXBlb2YiLCJCYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiQ2MiLCJEYyIsIkVjIiwiVSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJWIiwiU2MiLCJUYyIsIlVjIiwiR2MiLCJIYyIsIkZjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJWYyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiV2MiLCJYYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJZYyIsIlpjIiwiJGMiLCJhZCIsInRhYkluZGV4IiwiYmQiLCJjaGFuZ2UiLCJjZCIsImRkIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJqZCIsImRldGFjaEV2ZW50Iiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsInBkIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsInFkIiwicmQiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0Iiwic2QiLCJnZXRNb2RpZmllclN0YXRlIiwidGQiLCJ1ZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50Iiwic3JjRWxlbWVudCIsInRvRWxlbWVudCIsInZkIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJ3ZCIsInBhcmVudFdpbmRvdyIsImVmZmVjdFRhZyIsInlkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsInpkIiwiQWQiLCJjaGlsZCIsInNpYmxpbmciLCJCZCIsIkRkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkVkIiwiY2xpcGJvYXJkRGF0YSIsIkZkIiwiR2QiLCJjaGFyQ29kZSIsIkhkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIklkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIkpkIiwicmVwZWF0IiwibG9jYWxlIiwiS2QiLCJkYXRhVHJhbnNmZXIiLCJMZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJNZCIsIk5kIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJPZCIsIlBkIiwiUWQiLCJpc0ludGVyYWN0aXZlIiwiUmQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJTZCIsIlRkIiwiVWQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIlZkIiwiV2QiLCJXIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiYWUiLCJiZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImNlIiwiZGUiLCJlZSIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJmZSIsInRvcEFuaW1hdGlvbkVuZCIsInRvcEFuaW1hdGlvbkl0ZXJhdGlvbiIsInRvcEFuaW1hdGlvblN0YXJ0IiwidG9wQmx1ciIsInRvcENhbmNlbCIsInRvcENoYW5nZSIsInRvcENsaWNrIiwidG9wQ2xvc2UiLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcEZvY3VzIiwidG9wSW5wdXQiLCJ0b3BLZXlEb3duIiwidG9wS2V5UHJlc3MiLCJ0b3BLZXlVcCIsInRvcExvYWQiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFNjcm9sbCIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFRleHRJbnB1dCIsInRvcFRvZ2dsZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFdoZWVsIiwiZ2UiLCJ0b3BBYm9ydCIsInRvcENhblBsYXkiLCJ0b3BDYW5QbGF5VGhyb3VnaCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BQYXVzZSIsInRvcFBsYXkiLCJ0b3BQbGF5aW5nIiwidG9wUHJvZ3Jlc3MiLCJ0b3BSYXRlQ2hhbmdlIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFN0YWxsZWQiLCJ0b3BTdXNwZW5kIiwidG9wVGltZVVwZGF0ZSIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwibWUiLCJ0ZXh0Q29udGVudCIsIm5lIiwiY29udGVudEVkaXRhYmxlIiwib2UiLCJwZSIsInNlbGVjdCIsInFlIiwic2UiLCJ0ZSIsInVlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJ2ZSIsIm9uU2VsZWN0IiwieGUiLCJwZW5kaW5nUHJvcHMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibW9kZSIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJleHBpcmF0aW9uVGltZSIsInplIiwiQWUiLCJpc1JlYWN0Q29tcG9uZW50IiwiQmUiLCJDZSIsIkRlIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiRWUiLCJGZSIsIkdlIiwiSWUiLCJKZSIsIktlIiwiYmFzZVN0YXRlIiwiZmlyc3QiLCJsYXN0IiwiY2FsbGJhY2tMaXN0IiwiaGFzRm9yY2VVcGRhdGUiLCJpc0luaXRpYWxpemVkIiwiY2FwdHVyZWRWYWx1ZXMiLCJMZSIsIlNldCIsIk1lIiwiTmUiLCJPZSIsIlBlIiwiUWUiLCJwYXJ0aWFsU3RhdGUiLCJSZSIsImlzUmVwbGFjZSIsImlzRm9yY2VkIiwiY2FwdHVyZWRWYWx1ZSIsIlNlIiwiVWUiLCJWZSIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJXZSIsIlhlIiwiTWFwIiwieiIsIkIiLCJxIiwidSIsInQiLCJRIiwiSCIsIlllIiwiWmUiLCIkZSIsInBlbmRpbmdDb250ZXh0IiwiWSIsInNob3VsZFNldFRleHRDb250ZW50Iiwic2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSIsInB1c2hIb3N0Q29udGV4dCIsInB1c2hIb3N0Q29udGFpbmVyIiwiRyIsInB1c2hQcm92aWRlciIsIlIiLCJnZXRNYXNrZWRDb250ZXh0IiwiUyIsImdldFVubWFza2VkQ29udGV4dCIsImhhc0NvbnRleHRDaGFuZ2VkIiwicHVzaENvbnRleHRQcm92aWRlciIsInB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QiLCJpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyIiwiZW50ZXJIeWRyYXRpb25TdGF0ZSIsIldhIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsIkNiIiwidHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJKYyIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwidXBkYXRlciIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImNhY2hlQ29udGV4dCIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNNb3VudGVkIiwiZW5xdWV1ZVNldFN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiYWRvcHRDbGFzc0luc3RhbmNlIiwiY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbnN0cnVjdENsYXNzSW5zdGFuY2UiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJyZXN1bWVNb3VudENsYXNzSW5zdGFuY2UiLCJ1cGRhdGVDbGFzc0luc3RhbmNlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiVGUiLCJLYyIsIkxjIiwiRGIiLCJNYyIsIkViIiwiYmVnaW5Xb3JrIiwiaHlkcmF0ZSIsIl9jb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsImNmIiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsImVmIiwibGYiLCJJIiwiWWEiLCJaIiwiTmMiLCJ5YSIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsIk9jIiwiWmEiLCJnZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJjb21wb25lbnREaWRDYXRjaCIsImlhIiwiemEiLCJkYSIsIkZiIiwieGciLCJ5ZSIsIkljIiwiUGMiLCJHYiIsIm1nIiwiUWMiLCJsZyIsIm5leHRTY2hlZHVsZWRSb290IiwicmVtYWluaW5nRXhwaXJhdGlvblRpbWUiLCJLIiwibGEiLCJUIiwiSiIsIkhiIiwiYWEiLCJQIiwiJGEiLCJJYiIsIkFhIiwiX29uQ29tcGxldGUiLCJ3ZyIsIkJhIiwiSmIiLCJmaW5pc2hlZFdvcmsiLCJmaXJzdEJhdGNoIiwiX2V4cGlyYXRpb25UaW1lIiwiX2RlZmVyIiwiemciLCJ3Iiwia2ciLCJ3ZSIsImdnIiwiQWciLCJoZyIsImlnIiwiamciLCJ0aW1lUmVtYWluaW5nIiwiQmciLCJjcmVhdGVDdXJzb3IiLCJpc0VtcHR5IiwiY2hlY2tUaGF0U3RhY2tJc0VtcHR5IiwicmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2Iiwia2YiLCJnZXRDaGlsZEhvc3RDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250ZXh0IiwiZ2V0SG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250YWluZXIiLCJwb3BIb3N0Q29udGV4dCIsImZmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiaXNDb250ZXh0UHJvdmlkZXIiLCJwb3BDb250ZXh0UHJvdmlkZXIiLCJwb3BUb3BMZXZlbENvbnRleHRPYmplY3QiLCJwcm9jZXNzQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCIsImhmIiwicG9wUHJvdmlkZXIiLCJqZiIsImh5ZHJhdGlvbiIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSIsInBvcEh5ZHJhdGlvblN0YXRlIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlU2libGluZyIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkIiwiaHlkcmF0ZUluc3RhbmNlIiwiaHlkcmF0ZVRleHRJbnN0YW5jZSIsImdmIiwiY3JlYXRlSW5zdGFuY2UiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJwZXJzaXN0ZW5jZSIsIm11dGF0aW9uIiwiY29tcGxldGVXb3JrIiwiaGFuZGxlciIsImFmIiwidGhyb3dFeGNlcHRpb24iLCJ1bndpbmRXb3JrIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiYmYiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImNvbW1pdE1vdW50IiwiY29tbWl0VXBkYXRlIiwicmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFRleHRVcGRhdGUiLCJhcHBlbmRDaGlsZFRvQ29udGFpbmVyIiwiaW5zZXJ0SW5Db250YWluZXJCZWZvcmUiLCJyZW1vdmVDaGlsZEZyb21Db250YWluZXIiLCJjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImNvbW1pdFJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRQbGFjZW1lbnQiLCJjb21taXREZWxldGlvbiIsImNvbW1pdFdvcmsiLCJjb21taXRMaWZlQ3ljbGVzIiwiY29tbWl0RXJyb3JMb2dnaW5nIiwiY29tcG9uZW50U3RhY2siLCJjb21taXRBdHRhY2hSZWYiLCJjb21taXREZXRhY2hSZWYiLCJkZiIsInNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayIsImNhbmNlbERlZmVycmVkQ2FsbGJhY2siLCJwcmVwYXJlRm9yQ29tbWl0IiwicmVzZXRBZnRlckNvbW1pdCIsIlJjIiwicmVjYWxjdWxhdGVDdXJyZW50VGltZSIsImNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIiLCJzY2hlZHVsZVdvcmsiLCJyZXF1ZXN0V29yayIsImZsdXNoUm9vdCIsImJhdGNoZWRVcGRhdGVzIiwidW5iYXRjaGVkVXBkYXRlcyIsImZsdXNoU3luYyIsImZsdXNoQ29udHJvbGxlZCIsImRlZmVycmVkVXBkYXRlcyIsInN5bmNVcGRhdGVzIiwiaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMiLCJjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uIiwibGVnYWN5Q29udGV4dCIsIm1mIiwiY3JlYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZSIsImdldFB1YmxpY1Jvb3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFscyIsIkNkIiwiaW5qZWN0SW50b0RldlRvb2xzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJIZSIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwibmYiLCJvZiIsInBmIiwicmYiLCJwZXJmb3JtYW5jZSIsInNmIiwidGYiLCJ1ZiIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiZGlkVGltZW91dCIsIkRmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiRWYiLCJwb3N0TWVzc2FnZSIsIkdmIiwiQ2hpbGRyZW4iLCJGZiIsIkhmIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJJZiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJKZiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJtYXRobWwiLCJzdmciLCJPZiIsIlBmIiwiUWYiLCJSZiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJTZiIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIlRmIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiVWYiLCJWZiIsInNldFByb3BlcnR5IiwiV2YiLCJtZW51aXRlbSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiY3JlYXRlRWxlbWVudE5TIiwiYmciLCJjZyIsIl9faHRtbCIsIm9uY2xpY2siLCJkZyIsImVnIiwiZmciLCJuZyIsIm9nIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJkaWZmUHJvcGVydGllcyIsInVwZGF0ZVByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkVGV4dCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicGciLCJxZyIsInJnIiwiWCIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwic2ciLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwidGciLCJfaW50ZXJuYWxSb290IiwidWciLCJ2ZyIsImF1dG9Gb2N1cyIsImNvbW1pdCIsInVubW91bnQiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjcmVhdGVCYXRjaCIsInRhZ05hbWUiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJmb2N1cyIsImhpZGRlbiIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwiQ2ciLCJFZyIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJEZyIsIkZnIiwicWYiLCJHZyIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiSGciLCJJZyIsImNoZWNrRENFIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI9IiwiOiIsImVzY2FwZSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2RlZmF1bHRWYWx1ZSIsIkNvbnN1bWVyIiwiZm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsInVuc3RhYmxlX0FzeW5jTW9kZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsInJvb3RSZWR1Y2VyIiwiUmVhY3RET00iLCJfQXBwMiIsImdldEVsZW1lbnRCeUlkIiwiQ3JlYXRlUm9vbUNvbXBvbmVudCIsImhhbmRsZUNyZWF0ZVJvb20iLCJDaGF0Q29tcG9uZW50IiwiX1Byb2ZpbGVDb21wb25lbnQyIiwiX1Jvb21zTGlzdENvbXBvbmVudDIiLCJfQ29udmVyc2F0aW9uQ29tcG9uZW50MiIsIl9JbnB1dENvbXBvbmVudDIiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQW1CLFdBQ0EsV0FBMkIsT0FBQW5CLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUFWLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBZ0IsRUFBQUMsSUFHdER4QixFQUFBMkIsRUFBQSxHQUlBM0IsSUFBQTRCLEVBQUEsb0JDbkVBLElBQUFDLEVBR0FBLEVBQUEsV0FDQSxPQUFBQyxLQURBLEdBSUEsSUFFQUQsS0FBQUUsU0FBQSxjQUFBQSxLQUFBLEVBQUFDLE1BQUEs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QkFBc0IsU0FBQTRZLEdBQzlCaGpCLFFBQVFELElBQUlpakIsS0FJZDVqQixLQUFLa08sTUFBTXVWLHdDQWdCQSxFQUFBc3NCLEVBQUF4cUIsU0FaUyxTQUFBMVMsR0FDdEIsVUFLeUIsU0FBQW5GLEdBQ3pCLE9BQ0UrVixrQkFBbUIsa0JBQU0vVixHQUFTLEVBQUFvb0IsRUFBQXJTLHlCQUl2QixDQUE2Qzh5RCIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDkwKTtcbiIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2ggKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWVcbiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbFxuICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG4gICcjMDAwMENDJywgJyMwMDAwRkYnLCAnIzAwMzNDQycsICcjMDAzM0ZGJywgJyMwMDY2Q0MnLCAnIzAwNjZGRicsICcjMDA5OUNDJyxcbiAgJyMwMDk5RkYnLCAnIzAwQ0MwMCcsICcjMDBDQzMzJywgJyMwMENDNjYnLCAnIzAwQ0M5OScsICcjMDBDQ0NDJywgJyMwMENDRkYnLFxuICAnIzMzMDBDQycsICcjMzMwMEZGJywgJyMzMzMzQ0MnLCAnIzMzMzNGRicsICcjMzM2NkNDJywgJyMzMzY2RkYnLCAnIzMzOTlDQycsXG4gICcjMzM5OUZGJywgJyMzM0NDMDAnLCAnIzMzQ0MzMycsICcjMzNDQzY2JywgJyMzM0NDOTknLCAnIzMzQ0NDQycsICcjMzNDQ0ZGJyxcbiAgJyM2NjAwQ0MnLCAnIzY2MDBGRicsICcjNjYzM0NDJywgJyM2NjMzRkYnLCAnIzY2Q0MwMCcsICcjNjZDQzMzJywgJyM5OTAwQ0MnLFxuICAnIzk5MDBGRicsICcjOTkzM0NDJywgJyM5OTMzRkYnLCAnIzk5Q0MwMCcsICcjOTlDQzMzJywgJyNDQzAwMDAnLCAnI0NDMDAzMycsXG4gICcjQ0MwMDY2JywgJyNDQzAwOTknLCAnI0NDMDBDQycsICcjQ0MwMEZGJywgJyNDQzMzMDAnLCAnI0NDMzMzMycsICcjQ0MzMzY2JyxcbiAgJyNDQzMzOTknLCAnI0NDMzNDQycsICcjQ0MzM0ZGJywgJyNDQzY2MDAnLCAnI0NDNjYzMycsICcjQ0M5OTAwJywgJyNDQzk5MzMnLFxuICAnI0NDQ0MwMCcsICcjQ0NDQzMzJywgJyNGRjAwMDAnLCAnI0ZGMDAzMycsICcjRkYwMDY2JywgJyNGRjAwOTknLCAnI0ZGMDBDQycsXG4gICcjRkYwMEZGJywgJyNGRjMzMDAnLCAnI0ZGMzMzMycsICcjRkYzMzY2JywgJyNGRjMzOTknLCAnI0ZGMzNDQycsICcjRkYzM0ZGJyxcbiAgJyNGRjY2MDAnLCAnI0ZGNjYzMycsICcjRkY5OTAwJywgJyNGRjk5MzMnLCAnI0ZGQ0MwMCcsICcjRkZDQzMzJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgd2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAvLyBkb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG52YXIgaGFzQmluYXJ5ID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcbnZhciBzbGljZUJ1ZmZlciA9IHJlcXVpcmUoJ2FycmF5YnVmZmVyLnNsaWNlJyk7XG52YXIgYWZ0ZXIgPSByZXF1aXJlKCdhZnRlcicpO1xudmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTtcblxudmFyIGJhc2U2NGVuY29kZXI7XG5pZiAoZ2xvYmFsICYmIGdsb2JhbC5BcnJheUJ1ZmZlcikge1xuICBiYXNlNjRlbmNvZGVyID0gcmVxdWlyZSgnYmFzZTY0LWFycmF5YnVmZmVyJyk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgYW4gYW5kcm9pZCBicm93c2VyLiBUaGF0IHJlcXVpcmVzIHVzIHRvIHVzZVxuICogQXJyYXlCdWZmZXIgd2l0aCBwb2xsaW5nIHRyYW5zcG9ydHMuLi5cbiAqXG4gKiBodHRwOi8vZ2hpbmRhLm5ldC9qcGVnLWJsb2ItYWpheC1hbmRyb2lkL1xuICovXG5cbnZhciBpc0FuZHJvaWQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvQW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gUGhhbnRvbUpTLlxuICogVXBsb2FkaW5nIGEgQmxvYiB3aXRoIFBoYW50b21KUyBkb2VzIG5vdCB3b3JrIGNvcnJlY3RseSwgYXMgcmVwb3J0ZWQgaGVyZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcml5YS9waGFudG9tanMvaXNzdWVzLzExMzk1XG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBpc1BoYW50b21KUyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9QaGFudG9tSlMvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIFdoZW4gdHJ1ZSwgYXZvaWRzIHVzaW5nIEJsb2JzIHRvIGVuY29kZSBwYXlsb2Fkcy5cbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xudmFyIGRvbnRTZW5kQmxvYnMgPSBpc0FuZHJvaWQgfHwgaXNQaGFudG9tSlM7XG5cbi8qKlxuICogQ3VycmVudCBwcm90b2NvbCB2ZXJzaW9uLlxuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqL1xuXG52YXIgcGFja2V0cyA9IGV4cG9ydHMucGFja2V0cyA9IHtcbiAgICBvcGVuOiAgICAgMCAgICAvLyBub24td3NcbiAgLCBjbG9zZTogICAgMSAgICAvLyBub24td3NcbiAgLCBwaW5nOiAgICAgMlxuICAsIHBvbmc6ICAgICAzXG4gICwgbWVzc2FnZTogIDRcbiAgLCB1cGdyYWRlOiAgNVxuICAsIG5vb3A6ICAgICA2XG59O1xuXG52YXIgcGFja2V0c2xpc3QgPSBrZXlzKHBhY2tldHMpO1xuXG4vKipcbiAqIFByZW1hZGUgZXJyb3IgcGFja2V0LlxuICovXG5cbnZhciBlcnIgPSB7IHR5cGU6ICdlcnJvcicsIGRhdGE6ICdwYXJzZXIgZXJyb3InIH07XG5cbi8qKlxuICogQ3JlYXRlIGEgYmxvYiBhcGkgZXZlbiBmb3IgYmxvYiBidWlsZGVyIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XG4gKi9cblxudmFyIEJsb2IgPSByZXF1aXJlKCdibG9iJyk7XG5cbi8qKlxuICogRW5jb2RlcyBhIHBhY2tldC5cbiAqXG4gKiAgICAgPHBhY2tldCB0eXBlIGlkPiBbIDxkYXRhPiBdXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgNWhlbGxvIHdvcmxkXG4gKiAgICAgM1xuICogICAgIDRcbiAqXG4gKiBCaW5hcnkgaXMgZW5jb2RlZCBpbiBhbiBpZGVudGljYWwgcHJpbmNpcGxlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgdXRmOGVuY29kZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdXRmOGVuY29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gdXRmOGVuY29kZTtcbiAgICB1dGY4ZW5jb2RlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkYXRhID0gKHBhY2tldC5kYXRhID09PSB1bmRlZmluZWQpXG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHBhY2tldC5kYXRhLmJ1ZmZlciB8fCBwYWNrZXQuZGF0YTtcblxuICBpZiAoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoQmxvYiAmJiBkYXRhIGluc3RhbmNlb2YgZ2xvYmFsLkJsb2IpIHtcbiAgICByZXR1cm4gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBtaWdodCBiZSBhbiBvYmplY3Qgd2l0aCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgaWYgKGRhdGEgJiYgZGF0YS5iYXNlNjQpIHtcbiAgICByZXR1cm4gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gU2VuZGluZyBkYXRhIGFzIGEgdXRmLTggc3RyaW5nXG4gIHZhciBlbmNvZGVkID0gcGFja2V0c1twYWNrZXQudHlwZV07XG5cbiAgLy8gZGF0YSBmcmFnbWVudCBpcyBvcHRpb25hbFxuICBpZiAodW5kZWZpbmVkICE9PSBwYWNrZXQuZGF0YSkge1xuICAgIGVuY29kZWQgKz0gdXRmOGVuY29kZSA/IHV0ZjguZW5jb2RlKFN0cmluZyhwYWNrZXQuZGF0YSksIHsgc3RyaWN0OiBmYWxzZSB9KSA6IFN0cmluZyhwYWNrZXQuZGF0YSk7XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2soJycgKyBlbmNvZGVkKTtcblxufTtcblxuZnVuY3Rpb24gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spIHtcbiAgLy8gcGFja2V0IGRhdGEgaXMgYW4gb2JqZWN0IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBkYXRhQXNCYXNlNjRTdHJpbmcgfVxuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV0gKyBwYWNrZXQuZGF0YS5kYXRhO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBoZWxwZXJzIGZvciBiaW5hcnkgdHlwZXNcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGRhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIGNvbnRlbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgcmVzdWx0QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMSArIGRhdGEuYnl0ZUxlbmd0aCk7XG5cbiAgcmVzdWx0QnVmZmVyWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGVudEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0QnVmZmVyW2krMV0gPSBjb250ZW50QXJyYXlbaV07XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2socmVzdWx0QnVmZmVyLmJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBwYWNrZXQuZGF0YSA9IGZyLnJlc3VsdDtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCB0cnVlLCBjYWxsYmFjayk7XG4gIH07XG4gIHJldHVybiBmci5yZWFkQXNBcnJheUJ1ZmZlcihwYWNrZXQuZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmIChkb250U2VuZEJsb2JzKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBuZXcgVWludDhBcnJheSgxKTtcbiAgbGVuZ3RoWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIHZhciBibG9iID0gbmV3IEJsb2IoW2xlbmd0aC5idWZmZXIsIHBhY2tldC5kYXRhXSk7XG5cbiAgcmV0dXJuIGNhbGxiYWNrKGJsb2IpO1xufVxuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQgd2l0aCBiaW5hcnkgZGF0YSBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0LCBoYXMgYHR5cGVgIGFuZCBgZGF0YWBcbiAqIEByZXR1cm4ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBjYWxsYmFjaykge1xuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV07XG4gIGlmIChCbG9iICYmIHBhY2tldC5kYXRhIGluc3RhbmNlb2YgZ2xvYmFsLkJsb2IpIHtcbiAgICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGI2NCA9IGZyLnJlc3VsdC5zcGxpdCgnLCcpWzFdO1xuICAgICAgY2FsbGJhY2sobWVzc2FnZSArIGI2NCk7XG4gICAgfTtcbiAgICByZXR1cm4gZnIucmVhZEFzRGF0YVVSTChwYWNrZXQuZGF0YSk7XG4gIH1cblxuICB2YXIgYjY0ZGF0YTtcbiAgdHJ5IHtcbiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgd2l0aCB0eXBlZCBhcnJheXNcbiAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSk7XG4gICAgdmFyIGJhc2ljID0gbmV3IEFycmF5KHR5cGVkLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgYmFzaWNbaV0gPSB0eXBlZFtpXTtcbiAgICB9XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmFzaWMpO1xuICB9XG4gIG1lc3NhZ2UgKz0gZ2xvYmFsLmJ0b2EoYjY0ZGF0YSk7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldC4gQ2hhbmdlcyBmb3JtYXQgdG8gQmxvYiBpZiByZXF1ZXN0ZWQuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBhY2tldCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCB1dGY4ZGVjb2RlKSB7XG4gIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG4gIC8vIFN0cmluZyBkYXRhXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZGF0YS5jaGFyQXQoMCkgPT09ICdiJykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0KGRhdGEuc3Vic3RyKDEpLCBiaW5hcnlUeXBlKTtcbiAgICB9XG5cbiAgICBpZiAodXRmOGRlY29kZSkge1xuICAgICAgZGF0YSA9IHRyeURlY29kZShkYXRhKTtcbiAgICAgIGlmIChkYXRhID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdHlwZSA9IGRhdGEuY2hhckF0KDApO1xuXG4gICAgaWYgKE51bWJlcih0eXBlKSAhPSB0eXBlIHx8ICFwYWNrZXRzbGlzdFt0eXBlXSkge1xuICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogZGF0YS5zdWJzdHJpbmcoMSkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0gfTtcbiAgICB9XG4gIH1cblxuICB2YXIgYXNBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgdHlwZSA9IGFzQXJyYXlbMF07XG4gIHZhciByZXN0ID0gc2xpY2VCdWZmZXIoZGF0YSwgMSk7XG4gIGlmIChCbG9iICYmIGJpbmFyeVR5cGUgPT09ICdibG9iJykge1xuICAgIHJlc3QgPSBuZXcgQmxvYihbcmVzdF0pO1xuICB9XG4gIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiByZXN0IH07XG59O1xuXG5mdW5jdGlvbiB0cnlEZWNvZGUoZGF0YSkge1xuICB0cnkge1xuICAgIGRhdGEgPSB1dGY4LmRlY29kZShkYXRhLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldCBlbmNvZGVkIGluIGEgYmFzZTY0IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcbiAqL1xuXG5leHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKG1zZywgYmluYXJ5VHlwZSkge1xuICB2YXIgdHlwZSA9IHBhY2tldHNsaXN0W21zZy5jaGFyQXQoMCldO1xuICBpZiAoIWJhc2U2NGVuY29kZXIpIHtcbiAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogbXNnLnN1YnN0cigxKSB9IH07XG4gIH1cblxuICB2YXIgZGF0YSA9IGJhc2U2NGVuY29kZXIuZGVjb2RlKG1zZy5zdWJzdHIoMSkpO1xuXG4gIGlmIChiaW5hcnlUeXBlID09PSAnYmxvYicgJiYgQmxvYikge1xuICAgIGRhdGEgPSBuZXcgQmxvYihbZGF0YV0pO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogZGF0YSB9O1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKS5cbiAqXG4gKiAgICAgPGxlbmd0aD46ZGF0YVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDExOmhlbGxvIHdvcmxkMjpoaVxuICpcbiAqIElmIGFueSBjb250ZW50cyBhcmUgYmluYXJ5LCB0aGV5IHdpbGwgYmUgZW5jb2RlZCBhcyBiYXNlNjQgc3RyaW5ncy4gQmFzZTY0XG4gKiBlbmNvZGVkIHN0cmluZ3MgYXJlIG1hcmtlZCB3aXRoIGEgYiBiZWZvcmUgdGhlIGxlbmd0aCBzcGVjaWZpZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAocGFja2V0cywgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gbnVsbDtcbiAgfVxuXG4gIHZhciBpc0JpbmFyeSA9IGhhc0JpbmFyeShwYWNrZXRzKTtcblxuICBpZiAoc3VwcG9ydHNCaW5hcnkgJiYgaXNCaW5hcnkpIHtcbiAgICBpZiAoQmxvYiAmJiAhZG9udFNlbmRCbG9icykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYihwYWNrZXRzLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIocGFja2V0cywgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjaygnMDonKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UubGVuZ3RoICsgJzonICsgbWVzc2FnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgIWlzQmluYXJ5ID8gZmFsc2UgOiBzdXBwb3J0c0JpbmFyeSwgZmFsc2UsIGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdHMuam9pbignJykpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQXN5bmMgYXJyYXkgbWFwIHVzaW5nIGFmdGVyXG4gKi9cblxuZnVuY3Rpb24gbWFwKGFyeSwgZWFjaCwgZG9uZSkge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGFyeS5sZW5ndGgpO1xuICB2YXIgbmV4dCA9IGFmdGVyKGFyeS5sZW5ndGgsIGRvbmUpO1xuXG4gIHZhciBlYWNoV2l0aEluZGV4ID0gZnVuY3Rpb24oaSwgZWwsIGNiKSB7XG4gICAgZWFjaChlbCwgZnVuY3Rpb24oZXJyb3IsIG1zZykge1xuICAgICAgcmVzdWx0W2ldID0gbXNnO1xuICAgICAgY2IoZXJyb3IsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICBlYWNoV2l0aEluZGV4KGksIGFyeVtpXSwgbmV4dCk7XG4gIH1cbn1cblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gUG9zc2libGUgYmluYXJ5IGNvbnRlbnRzIGFyZVxuICogZGVjb2RlZCBmcm9tIHRoZWlyIGJhc2U2NCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIHBhY2tldDtcbiAgaWYgKGRhdGEgPT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9ICcnLCBuLCBtc2c7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaHIgPSBkYXRhLmNoYXJBdChpKTtcblxuICAgIGlmIChjaHIgIT09ICc6Jykge1xuICAgICAgbGVuZ3RoICs9IGNocjtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGggPT09ICcnIHx8IChsZW5ndGggIT0gKG4gPSBOdW1iZXIobGVuZ3RoKSkpKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBtc2cgPSBkYXRhLnN1YnN0cihpICsgMSwgbik7XG5cbiAgICBpZiAobGVuZ3RoICE9IG1zZy5sZW5ndGgpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIGlmIChtc2cubGVuZ3RoKSB7XG4gICAgICBwYWNrZXQgPSBleHBvcnRzLmRlY29kZVBhY2tldChtc2csIGJpbmFyeVR5cGUsIGZhbHNlKTtcblxuICAgICAgaWYgKGVyci50eXBlID09PSBwYWNrZXQudHlwZSAmJiBlcnIuZGF0YSA9PT0gcGFja2V0LmRhdGEpIHtcbiAgICAgICAgLy8gcGFyc2VyIGVycm9yIGluIGluZGl2aWR1YWwgcGFja2V0IC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJldCA9IGNhbGxiYWNrKHBhY2tldCwgaSArIG4sIGwpO1xuICAgICAgaWYgKGZhbHNlID09PSByZXQpIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhZHZhbmNlIGN1cnNvclxuICAgIGkgKz0gbjtcbiAgICBsZW5ndGggPSAnJztcbiAgfVxuXG4gIGlmIChsZW5ndGggIT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkgYXMgYmluYXJ5LlxuICpcbiAqIDwxID0gYmluYXJ5LCAwID0gc3RyaW5nPjxudW1iZXIgZnJvbSAwLTk+PG51bWJlciBmcm9tIDAtOT5bLi4uXTxudW1iZXJcbiAqIDI1NT48ZGF0YT5cbiAqXG4gKiBFeGFtcGxlOlxuICogMSAzIDI1NSAxIDIgMywgaWYgdGhlIGJpbmFyeSBjb250ZW50cyBhcmUgaW50ZXJwcmV0ZWQgYXMgOCBiaXQgaW50ZWdlcnNcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gZW5jb2RlZCBwYXlsb2FkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHtcbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQXJyYXlCdWZmZXIoMCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZG9uZUNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCBlbmNvZGVkUGFja2V0cykge1xuICAgIHZhciB0b3RhbExlbmd0aCA9IGVuY29kZWRQYWNrZXRzLnJlZHVjZShmdW5jdGlvbihhY2MsIHApIHtcbiAgICAgIHZhciBsZW47XG4gICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKXtcbiAgICAgICAgbGVuID0gcC5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW4gPSBwLmJ5dGVMZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjICsgbGVuLnRvU3RyaW5nKCkubGVuZ3RoICsgbGVuICsgMjsgLy8gc3RyaW5nL2JpbmFyeSBpZGVudGlmaWVyICsgc2VwYXJhdG9yID0gMlxuICAgIH0sIDApO1xuXG4gICAgdmFyIHJlc3VsdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xuXG4gICAgdmFyIGJ1ZmZlckluZGV4ID0gMDtcbiAgICBlbmNvZGVkUGFja2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IHR5cGVvZiBwID09PSAnc3RyaW5nJztcbiAgICAgIHZhciBhYiA9IHA7XG4gICAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShwLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBwLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgYWIgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKSB7IC8vIG5vdCB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDA7XG4gICAgICB9IGVsc2UgeyAvLyB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW5TdHIgPSBhYi5ieXRlTGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XG4gICAgICB9XG4gICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDI1NTtcblxuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSB2aWV3W2ldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEFycmF5LmJ1ZmZlcik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBFbmNvZGUgYXMgQmxvYlxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYiA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZW5jb2RlZCkge1xuICAgICAgdmFyIGJpbmFyeUlkZW50aWZpZXIgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAxO1xuICAgICAgaWYgKHR5cGVvZiBlbmNvZGVkID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmlld1tpXSA9IGVuY29kZWQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGVkID0gdmlldy5idWZmZXI7XG4gICAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuID0gKGVuY29kZWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcilcbiAgICAgICAgPyBlbmNvZGVkLmJ5dGVMZW5ndGhcbiAgICAgICAgOiBlbmNvZGVkLnNpemU7XG5cbiAgICAgIHZhciBsZW5TdHIgPSBsZW4udG9TdHJpbmcoKTtcbiAgICAgIHZhciBsZW5ndGhBcnkgPSBuZXcgVWludDhBcnJheShsZW5TdHIubGVuZ3RoICsgMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZW5ndGhBcnlbaV0gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgbGVuZ3RoQXJ5W2xlblN0ci5sZW5ndGhdID0gMjU1O1xuXG4gICAgICBpZiAoQmxvYikge1xuICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtiaW5hcnlJZGVudGlmaWVyLmJ1ZmZlciwgbGVuZ3RoQXJ5LmJ1ZmZlciwgZW5jb2RlZF0pO1xuICAgICAgICBkb25lQ2FsbGJhY2sobnVsbCwgYmxvYik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEJsb2IocmVzdWx0cykpO1xuICB9KTtcbn07XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFN0cmluZ3MgYXJlIGRlY29kZWQgYnlcbiAqIGludGVycHJldGluZyBlYWNoIGJ5dGUgYXMgYSBrZXkgY29kZSBmb3IgZW50cmllcyBtYXJrZWQgdG8gc3RhcnQgd2l0aCAwLiBTZWVcbiAqIGRlc2NyaXB0aW9uIG9mIGVuY29kZVBheWxvYWRBc0JpbmFyeVxuICpcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeSA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XG4gIH1cblxuICB2YXIgYnVmZmVyVGFpbCA9IGRhdGE7XG4gIHZhciBidWZmZXJzID0gW107XG5cbiAgd2hpbGUgKGJ1ZmZlclRhaWwuYnl0ZUxlbmd0aCA+IDApIHtcbiAgICB2YXIgdGFpbEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyVGFpbCk7XG4gICAgdmFyIGlzU3RyaW5nID0gdGFpbEFycmF5WzBdID09PSAwO1xuICAgIHZhciBtc2dMZW5ndGggPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAxOyA7IGkrKykge1xuICAgICAgaWYgKHRhaWxBcnJheVtpXSA9PT0gMjU1KSBicmVhaztcblxuICAgICAgLy8gMzEwID0gY2hhciBsZW5ndGggb2YgTnVtYmVyLk1BWF9WQUxVRVxuICAgICAgaWYgKG1zZ0xlbmd0aC5sZW5ndGggPiAzMTApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIG1zZ0xlbmd0aCArPSB0YWlsQXJyYXlbaV07XG4gICAgfVxuXG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDIgKyBtc2dMZW5ndGgubGVuZ3RoKTtcbiAgICBtc2dMZW5ndGggPSBwYXJzZUludChtc2dMZW5ndGgpO1xuXG4gICAgdmFyIG1zZyA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDAsIG1zZ0xlbmd0aCk7XG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBtc2cgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KG1zZykpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB0byB0eXBlZCBhcnJheXNcbiAgICAgICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkobXNnKTtcbiAgICAgICAgbXNnID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBtc2cgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh0eXBlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBidWZmZXJzLnB1c2gobXNnKTtcbiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgbXNnTGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0b3RhbCA9IGJ1ZmZlcnMubGVuZ3RoO1xuICBidWZmZXJzLmZvckVhY2goZnVuY3Rpb24oYnVmZmVyLCBpKSB7XG4gICAgY2FsbGJhY2soZXhwb3J0cy5kZWNvZGVQYWNrZXQoYnVmZmVyLCBiaW5hcnlUeXBlLCB0cnVlKSwgaSwgdG90YWwpO1xuICB9KTtcbn07XG4iLCJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxyXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG5cclxuICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xyXG59O1xyXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYSwgYil7XG4gIHZhciBmbiA9IGZ1bmN0aW9uKCl7fTtcbiAgZm4ucHJvdG90eXBlID0gYi5wcm90b3R5cGU7XG4gIGEucHJvdG90eXBlID0gbmV3IGZuO1xuICBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7XG59OyIsIi8qKlxyXG4gKiBDb21waWxlcyBhIHF1ZXJ5c3RyaW5nXHJcbiAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gIHZhciBzdHIgPSAnJztcclxuXHJcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcclxuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgaWYgKHN0ci5sZW5ndGgpIHN0ciArPSAnJic7XHJcbiAgICAgIHN0ciArPSBlbmNvZGVVUklDb21wb25lbnQoaSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2ldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzdHI7XHJcbn07XHJcblxyXG4vKipcclxuICogUGFyc2VzIGEgc2ltcGxlIHF1ZXJ5c3RyaW5nIGludG8gYW4gb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBxc1xyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uKHFzKXtcclxuICB2YXIgcXJ5ID0ge307XHJcbiAgdmFyIHBhaXJzID0gcXMuc3BsaXQoJyYnKTtcclxuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgdmFyIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpO1xyXG4gICAgcXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XHJcbiAgfVxyXG4gIHJldHVybiBxcnk7XHJcbn07XHJcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmV4cG9ydCB2YXIgc3Vic2NyaXB0aW9uU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICB0cnlTdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHRyeVVuc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBub3RpZnlOZXN0ZWRTdWJzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1N1YnNjcmliZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pO1xuXG5leHBvcnQgdmFyIHN0b3JlU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgeyBDb21wb25lbnQsIENoaWxkcmVuIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uL3V0aWxzL3dhcm5pbmcnO1xuXG52YXIgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSBmYWxzZTtcbmZ1bmN0aW9uIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCkge1xuICBpZiAoZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSB0cnVlO1xuXG4gIHdhcm5pbmcoJzxQcm92aWRlcj4gZG9lcyBub3Qgc3VwcG9ydCBjaGFuZ2luZyBgc3RvcmVgIG9uIHRoZSBmbHkuICcgKyAnSXQgaXMgbW9zdCBsaWtlbHkgdGhhdCB5b3Ugc2VlIHRoaXMgZXJyb3IgYmVjYXVzZSB5b3UgdXBkYXRlZCB0byAnICsgJ1JlZHV4IDIueCBhbmQgUmVhY3QgUmVkdXggMi54IHdoaWNoIG5vIGxvbmdlciBob3QgcmVsb2FkIHJlZHVjZXJzICcgKyAnYXV0b21hdGljYWxseS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJlZHV4L3JlbGVhc2VzLycgKyAndGFnL3YyLjAuMCBmb3IgdGhlIG1pZ3JhdGlvbiBpbnN0cnVjdGlvbnMuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm92aWRlcigpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleDtcblxuICB2YXIgc3RvcmVLZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdzdG9yZSc7XG4gIHZhciBzdWJLZXkgPSBhcmd1bWVudHNbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN1YktleSB8fCBzdG9yZUtleSArICdTdWJzY3JpcHRpb24nO1xuXG4gIHZhciBQcm92aWRlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltzdG9yZUtleV0gPSB0aGlzW3N0b3JlS2V5XSwgX3JlZltzdWJzY3JpcHRpb25LZXldID0gbnVsbCwgX3JlZjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm92aWRlcik7XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgICBfdGhpc1tzdG9yZUtleV0gPSBwcm9wcy5zdG9yZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIENoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpc1tzdG9yZUtleV0gIT09IG5leHRQcm9wcy5zdG9yZSkge1xuICAgICAgICB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IHN0b3JlU2hhcGUuaXNSZXF1aXJlZCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZFxuICB9O1xuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICByZXR1cm4gUHJvdmlkZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVByb3ZpZGVyKCk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxudmFyIENMRUFSRUQgPSBudWxsO1xudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge31cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgLy8gdGhlIGN1cnJlbnQvbmV4dCBwYXR0ZXJuIGlzIGNvcGllZCBmcm9tIHJlZHV4J3MgY3JlYXRlU3RvcmUgY29kZS5cbiAgLy8gVE9ETzogcmVmYWN0b3IrZXhwb3NlIHRoYXQgY29kZSB0byBiZSByZXVzYWJsZSBoZXJlP1xuICB2YXIgY3VycmVudCA9IFtdO1xuICB2YXIgbmV4dCA9IFtdO1xuXG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgbmV4dCA9IENMRUFSRUQ7XG4gICAgICBjdXJyZW50ID0gQ0xFQVJFRDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnQgPSBuZXh0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJzW2ldKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICBuZXh0LnB1c2gobGlzdGVuZXIpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGN1cnJlbnQgPT09IENMRUFSRUQpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICAgIG5leHQuc3BsaWNlKG5leHQuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViLCBvblN0YXRlQ2hhbmdlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN1YnNjcmlwdGlvbik7XG5cbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy5vblN0YXRlQ2hhbmdlID0gb25TdGF0ZUNoYW5nZTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gIH1cblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZE5lc3RlZFN1YiA9IGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRoaXMudHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLm9uU3RhdGVDaGFuZ2UpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5vblN0YXRlQ2hhbmdlKTtcblxuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5cbnZhciBob3RSZWxvYWRpbmdWZXJzaW9uID0gMDtcbnZhciBkdW1teVN0YXRlID0ge307XG5mdW5jdGlvbiBub29wKCkge31cbmZ1bmN0aW9uIG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCBzdG9yZSkge1xuICAvLyB3cmFwIHRoZSBzZWxlY3RvciBpbiBhbiBvYmplY3QgdGhhdCB0cmFja3MgaXRzIHJlc3VsdHMgYmV0d2VlbiBydW5zLlxuICB2YXIgc2VsZWN0b3IgPSB7XG4gICAgcnVuOiBmdW5jdGlvbiBydW5Db21wb25lbnRTZWxlY3Rvcihwcm9wcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5leHRQcm9wcyA9IHNvdXJjZVNlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHByb3BzKTtcbiAgICAgICAgaWYgKG5leHRQcm9wcyAhPT0gc2VsZWN0b3IucHJvcHMgfHwgc2VsZWN0b3IuZXJyb3IpIHtcbiAgICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgIHNlbGVjdG9yLnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgICAgIHNlbGVjdG9yLmVycm9yID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSkge1xuICB2YXIgX2NvbnRleHRUeXBlcywgX2NoaWxkQ29udGV4dFR5cGVzO1xuXG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkZ2V0RGlzcGxheU5hbWUgPSBfcmVmLmdldERpc3BsYXlOYW1lLFxuICAgICAgZ2V0RGlzcGxheU5hbWUgPSBfcmVmJGdldERpc3BsYXlOYW1lID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiAnQ29ubmVjdEFkdmFuY2VkKCcgKyBuYW1lICsgJyknO1xuICB9IDogX3JlZiRnZXREaXNwbGF5TmFtZSxcbiAgICAgIF9yZWYkbWV0aG9kTmFtZSA9IF9yZWYubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmJG1ldGhvZE5hbWUgPT09IHVuZGVmaW5lZCA/ICdjb25uZWN0QWR2YW5jZWQnIDogX3JlZiRtZXRob2ROYW1lLFxuICAgICAgX3JlZiRyZW5kZXJDb3VudFByb3AgPSBfcmVmLnJlbmRlckNvdW50UHJvcCxcbiAgICAgIHJlbmRlckNvdW50UHJvcCA9IF9yZWYkcmVuZGVyQ291bnRQcm9wID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBfcmVmJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9IF9yZWYuc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gX3JlZiRzaG91bGRIYW5kbGVTdGF0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZiRzaG91bGRIYW5kbGVTdGF0LFxuICAgICAgX3JlZiRzdG9yZUtleSA9IF9yZWYuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYkc3RvcmVLZXkgPT09IHVuZGVmaW5lZCA/ICdzdG9yZScgOiBfcmVmJHN0b3JlS2V5LFxuICAgICAgX3JlZiR3aXRoUmVmID0gX3JlZi53aXRoUmVmLFxuICAgICAgd2l0aFJlZiA9IF9yZWYkd2l0aFJlZiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmJHdpdGhSZWYsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ2dldERpc3BsYXlOYW1lJywgJ21ldGhvZE5hbWUnLCAncmVuZGVyQ291bnRQcm9wJywgJ3Nob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcycsICdzdG9yZUtleScsICd3aXRoUmVmJ10pO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdG9yZUtleSArICdTdWJzY3JpcHRpb24nO1xuICB2YXIgdmVyc2lvbiA9IGhvdFJlbG9hZGluZ1ZlcnNpb24rKztcblxuICB2YXIgY29udGV4dFR5cGVzID0gKF9jb250ZXh0VHlwZXMgPSB7fSwgX2NvbnRleHRUeXBlc1tzdG9yZUtleV0gPSBzdG9yZVNoYXBlLCBfY29udGV4dFR5cGVzW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX2NvbnRleHRUeXBlcyk7XG4gIHZhciBjaGlsZENvbnRleHRUeXBlcyA9IChfY2hpbGRDb250ZXh0VHlwZXMgPSB7fSwgX2NoaWxkQ29udGV4dFR5cGVzW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX2NoaWxkQ29udGV4dFR5cGVzKTtcblxuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpbnZhcmlhbnQodHlwZW9mIFdyYXBwZWRDb21wb25lbnQgPT0gJ2Z1bmN0aW9uJywgJ1lvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5ICcgKyAobWV0aG9kTmFtZSArICcuIEluc3RlYWQgcmVjZWl2ZWQgJyArIEpTT04uc3RyaW5naWZ5KFdyYXBwZWRDb21wb25lbnQpKSk7XG5cbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcblxuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIHdpdGhSZWY6IHdpdGhSZWYsXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICB2YXIgQ29ubmVjdCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHMoQ29ubmVjdCwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIENvbm5lY3QocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbm5lY3QpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgICAgIF90aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICBfdGhpcy5yZW5kZXJDb3VudCA9IDA7XG4gICAgICAgIF90aGlzLnN0b3JlID0gcHJvcHNbc3RvcmVLZXldIHx8IGNvbnRleHRbc3RvcmVLZXldO1xuICAgICAgICBfdGhpcy5wcm9wc01vZGUgPSBCb29sZWFuKHByb3BzW3N0b3JlS2V5XSk7XG4gICAgICAgIF90aGlzLnNldFdyYXBwZWRJbnN0YW5jZSA9IF90aGlzLnNldFdyYXBwZWRJbnN0YW5jZS5iaW5kKF90aGlzKTtcblxuICAgICAgICBpbnZhcmlhbnQoX3RoaXMuc3RvcmUsICdDb3VsZCBub3QgZmluZCBcIicgKyBzdG9yZUtleSArICdcIiBpbiBlaXRoZXIgdGhlIGNvbnRleHQgb3IgcHJvcHMgb2YgJyArICgnXCInICsgZGlzcGxheU5hbWUgKyAnXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sICcpICsgKCdvciBleHBsaWNpdGx5IHBhc3MgXCInICsgc3RvcmVLZXkgKyAnXCIgYXMgYSBwcm9wIHRvIFwiJyArIGRpc3BsYXlOYW1lICsgJ1wiLicpKTtcblxuICAgICAgICBfdGhpcy5pbml0U2VsZWN0b3IoKTtcbiAgICAgICAgX3RoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgICAgdmFyIF9yZWYyO1xuXG4gICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IHJlY2VpdmVkIHN0b3JlIGZyb20gcHJvcHMsIGl0cyBzdWJzY3JpcHRpb24gc2hvdWxkIGJlIHRyYW5zcGFyZW50XG4gICAgICAgIC8vIHRvIGFueSBkZXNjZW5kYW50cyByZWNlaXZpbmcgc3RvcmUrc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dDsgaXQgcGFzc2VzIGFsb25nXG4gICAgICAgIC8vIHN1YnNjcmlwdGlvbiBwYXNzZWQgdG8gaXQuIE90aGVyd2lzZSwgaXQgc2hhZG93cyB0aGUgcGFyZW50IHN1YnNjcmlwdGlvbiwgd2hpY2ggYWxsb3dzXG4gICAgICAgIC8vIENvbm5lY3QgdG8gY29udHJvbCBvcmRlcmluZyBvZiBub3RpZmljYXRpb25zIHRvIGZsb3cgdG9wLWRvd24uXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLnByb3BzTW9kZSA/IG51bGwgOiB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIF9yZWYyID0ge30sIF9yZWYyW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb24gfHwgdGhpcy5jb250ZXh0W3N1YnNjcmlwdGlvbktleV0sIF9yZWYyO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBjb21wb25lbnRXaWxsTW91bnQgZmlyZXMgZHVyaW5nIHNlcnZlciBzaWRlIHJlbmRlcmluZywgYnV0IGNvbXBvbmVudERpZE1vdW50IGFuZFxuICAgICAgICAvLyBjb21wb25lbnRXaWxsVW5tb3VudCBkbyBub3QuIEJlY2F1c2Ugb2YgdGhpcywgdHJ5U3Vic2NyaWJlIGhhcHBlbnMgZHVyaW5nIC4uLmRpZE1vdW50LlxuICAgICAgICAvLyBPdGhlcndpc2UsIHVuc3Vic2NyaXB0aW9uIHdvdWxkIG5ldmVyIHRha2UgcGxhY2UgZHVyaW5nIFNTUiwgY2F1c2luZyBhIG1lbW9yeSBsZWFrLlxuICAgICAgICAvLyBUbyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYSBjaGlsZCBjb21wb25lbnQgbWF5IGhhdmUgdHJpZ2dlcmVkIGEgc3RhdGUgY2hhbmdlIGJ5XG4gICAgICAgIC8vIGRpc3BhdGNoaW5nIGFuIGFjdGlvbiBpbiBpdHMgY29tcG9uZW50V2lsbE1vdW50LCB3ZSBoYXZlIHRvIHJlLXJ1biB0aGUgc2VsZWN0IGFuZCBtYXliZVxuICAgICAgICAvLyByZS1yZW5kZXIuXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4obmV4dFByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB0aGlzLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IG5vb3A7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1biA9IG5vb3A7XG4gICAgICAgIHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBnZXRXcmFwcGVkSW5zdGFuY2UoKSB7XG4gICAgICAgIGludmFyaWFudCh3aXRoUmVmLCAnVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB5b3UgbmVlZCB0byBzcGVjaWZ5ICcgKyAoJ3sgd2l0aFJlZjogdHJ1ZSB9IGluIHRoZSBvcHRpb25zIGFyZ3VtZW50IG9mIHRoZSAnICsgbWV0aG9kTmFtZSArICcoKSBjYWxsLicpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlZEluc3RhbmNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuc2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gc2V0V3JhcHBlZEluc3RhbmNlKHJlZikge1xuICAgICAgICB0aGlzLndyYXBwZWRJbnN0YW5jZSA9IHJlZjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmluaXRTZWxlY3RvciA9IGZ1bmN0aW9uIGluaXRTZWxlY3RvcigpIHtcbiAgICAgICAgdmFyIHNvdXJjZVNlbGVjdG9yID0gc2VsZWN0b3JGYWN0b3J5KHRoaXMuc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHRoaXMuc3RvcmUpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmluaXRTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiBpbml0U3Vic2NyaXB0aW9uKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuO1xuXG4gICAgICAgIC8vIHBhcmVudFN1YidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuICAgICAgICB2YXIgcGFyZW50U3ViID0gKHRoaXMucHJvcHNNb2RlID8gdGhpcy5wcm9wcyA6IHRoaXMuY29udGV4dClbc3Vic2NyaXB0aW9uS2V5XTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHRoaXMuc3RvcmUsIHBhcmVudFN1YiwgdGhpcy5vblN0YXRlQ2hhbmdlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzICB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGB0aGlzLnN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIEFuXG4gICAgICAgIC8vIGV4dHJhIG51bGwgY2hlY2sgZXZlcnkgY2hhbmdlIGNhbiBiZSBhdm9pZGVkIGJ5IGNvcHlpbmcgdGhlIG1ldGhvZCBvbnRvIGB0aGlzYCBhbmQgdGhlblxuICAgICAgICAvLyByZXBsYWNpbmcgaXQgd2l0aCBhIG5vLW9wIG9uIHVubW91bnQuIFRoaXMgY2FuIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3NcbiAgICAgICAgLy8gbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGVcbiAgICAgICAgLy8gbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcC5cbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzID0gdGhpcy5zdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHRoaXMuc3Vic2NyaXB0aW9uKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLm9uU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiBvblN0YXRlQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcblxuICAgICAgICBpZiAoIXRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB7XG4gICAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUgPSB0aGlzLm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKGR1bW15U3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIC8vIGBjb21wb25lbnREaWRVcGRhdGVgIGlzIGNvbmRpdGlvbmFsbHkgaW1wbGVtZW50ZWQgd2hlbiBgb25TdGF0ZUNoYW5nZWAgZGV0ZXJtaW5lcyBpdFxuICAgICAgICAvLyBuZWVkcyB0byBub3RpZnkgbmVzdGVkIHN1YnMuIE9uY2UgY2FsbGVkLCBpdCB1bmltcGxlbWVudHMgaXRzZWxmIHVudGlsIGZ1cnRoZXIgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlcyBvY2N1ci4gRG9pbmcgaXQgdGhpcyB3YXkgdnMgaGF2aW5nIGEgcGVybWFuZW50IGBjb21wb25lbnREaWRVcGRhdGVgIHRoYXQgZG9lc1xuICAgICAgICAvLyBhIGJvb2xlYW4gY2hlY2sgZXZlcnkgdGltZSBhdm9pZHMgYW4gZXh0cmEgbWV0aG9kIGNhbGwgbW9zdCBvZiB0aGUgdGltZSwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIHNvbWUgcGVyZiBib29zdC5cbiAgICAgICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnN1YnNjcmlwdGlvbikgJiYgdGhpcy5zdWJzY3JpcHRpb24uaXNTdWJzY3JpYmVkKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5hZGRFeHRyYVByb3BzID0gZnVuY3Rpb24gYWRkRXh0cmFQcm9wcyhwcm9wcykge1xuICAgICAgICBpZiAoIXdpdGhSZWYgJiYgIXJlbmRlckNvdW50UHJvcCAmJiAhKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSkgcmV0dXJuIHByb3BzO1xuICAgICAgICAvLyBtYWtlIGEgc2hhbGxvdyBjb3B5IHNvIHRoYXQgZmllbGRzIGFkZGVkIGRvbid0IGxlYWsgdG8gdGhlIG9yaWdpbmFsIHNlbGVjdG9yLlxuICAgICAgICAvLyB0aGlzIGlzIGVzcGVjaWFsbHkgaW1wb3J0YW50IGZvciAncmVmJyBzaW5jZSB0aGF0J3MgYSByZWZlcmVuY2UgYmFjayB0byB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGluc3RhbmNlLiBhIHNpbmdsZXRvbiBtZW1vaXplZCBzZWxlY3RvciB3b3VsZCB0aGVuIGJlIGhvbGRpbmcgYSByZWZlcmVuY2UgdG8gdGhlXG4gICAgICAgIC8vIGluc3RhbmNlLCBwcmV2ZW50aW5nIHRoZSBpbnN0YW5jZSBmcm9tIGJlaW5nIGdhcmJhZ2UgY29sbGVjdGVkLCBhbmQgdGhhdCB3b3VsZCBiZSBiYWRcbiAgICAgICAgdmFyIHdpdGhFeHRyYXMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuICAgICAgICBpZiAod2l0aFJlZikgd2l0aEV4dHJhcy5yZWYgPSB0aGlzLnNldFdyYXBwZWRJbnN0YW5jZTtcbiAgICAgICAgaWYgKHJlbmRlckNvdW50UHJvcCkgd2l0aEV4dHJhc1tyZW5kZXJDb3VudFByb3BdID0gdGhpcy5yZW5kZXJDb3VudCsrO1xuICAgICAgICBpZiAodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pIHdpdGhFeHRyYXNbc3Vic2NyaXB0aW9uS2V5XSA9IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gd2l0aEV4dHJhcztcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgc2VsZWN0b3IuZXJyb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgdGhpcy5hZGRFeHRyYVByb3BzKHNlbGVjdG9yLnByb3BzKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb25uZWN0O1xuICAgIH0oQ29tcG9uZW50KTtcblxuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgIENvbm5lY3QuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcbiAgICBDb25uZWN0LmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbiAgICBDb25uZWN0LnByb3BUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgLy8gV2UgYXJlIGhvdCByZWxvYWRpbmchXG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gIT09IHZlcnNpb24pIHtcbiAgICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgIHRoaXMuaW5pdFNlbGVjdG9yKCk7XG5cbiAgICAgICAgICAvLyBJZiBhbnkgY29ubmVjdGVkIGRlc2NlbmRhbnRzIGRvbid0IGhvdCByZWxvYWQgKGFuZCByZXN1YnNjcmliZSBpbiB0aGUgcHJvY2VzcyksIHRoZWlyXG4gICAgICAgICAgLy8gbGlzdGVuZXJzIHdpbGwgYmUgbG9zdCB3aGVuIHdlIHVuc3Vic2NyaWJlLiBVbmZvcnR1bmF0ZWx5LCBieSBjb3B5aW5nIG92ZXIgYWxsXG4gICAgICAgICAgLy8gbGlzdGVuZXJzLCB0aGlzIGRvZXMgbWVhbiB0aGF0IHRoZSBvbGQgdmVyc2lvbnMgb2YgY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdpbGwgc3RpbGwgYmVcbiAgICAgICAgICAvLyBub3RpZmllZCBvZiBzdGF0ZSBjaGFuZ2VzOyBob3dldmVyLCB0aGVpciBvblN0YXRlQ2hhbmdlIGZ1bmN0aW9uIGlzIGEgbm8tb3Agc28gdGhpc1xuICAgICAgICAgIC8vIGlzbid0IGEgaHVnZSBkZWFsLlxuICAgICAgICAgIHZhciBvbGRMaXN0ZW5lcnMgPSBbXTtcblxuICAgICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzID0gdGhpcy5zdWJzY3JpcHRpb24ubGlzdGVuZXJzLmdldCgpO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBvbGRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5zdWJzY3JpcHRpb24ubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn0iLCJ2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duLmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb1N0cmluZztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRQcm90b3R5cGU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1BsYWluT2JqZWN0O1xuIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufVxuXG4vLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vIFxuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn1cblxuLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy8gXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vLyAgICBcbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vLyAgICBcbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vLyAgICBcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTtcblxuICAgIC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG5cbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7IGRpc3BhdGNoOiBkaXNwYXRjaCB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG5cbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcyA9IHZvaWQgMDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG5cbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZSA9IHZvaWQgMDtcbiAgdmFyIG93blByb3BzID0gdm9pZCAwO1xuICB2YXIgc3RhdGVQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIGRpc3BhdGNoUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBtZXJnZWRQcm9wcyA9IHZvaWQgMDtcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcblxuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuXG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG5cbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcblxuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59XG5cbi8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG5cbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFsnaW5pdE1hcFN0YXRlVG9Qcm9wcycsICdpbml0TWFwRGlzcGF0Y2hUb1Byb3BzJywgJ2luaXRNZXJnZVByb3BzJ10pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG5cbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBvZiB0eXBlICcgKyB0eXBlb2YgYXJnICsgJyBmb3IgJyArIG5hbWUgKyAnIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgJyArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyAnLicpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG4vLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB1bmRlZmluZWQgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykge1xuICAgIHZhciBfcmVmMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge30sXG4gICAgICAgIF9yZWYyJHB1cmUgPSBfcmVmMi5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjIkcHVyZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYyJHB1cmUsXG4gICAgICAgIF9yZWYyJGFyZVN0YXRlc0VxdWFsID0gX3JlZjIuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjIkYXJlU3RhdGVzRXF1YWwgPT09IHVuZGVmaW5lZCA/IHN0cmljdEVxdWFsIDogX3JlZjIkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYyJGFyZU93blByb3BzRXF1YSA9IF9yZWYyLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMiRhcmVPd25Qcm9wc0VxdWEgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjIkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjIuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMiRhcmVTdGF0ZVByb3BzRXEgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjIkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjIuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYyJGFyZU1lcmdlZFByb3BzRSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFsncHVyZScsICdhcmVTdGF0ZXNFcXVhbCcsICdhcmVPd25Qcm9wc0VxdWFsJywgJ2FyZVN0YXRlUHJvcHNFcXVhbCcsICdhcmVNZXJnZWRQcm9wc0VxdWFsJ10pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuXG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG5cbiAgICAgIC8vIHVzZWQgdG8gY29tcHV0ZSBDb25uZWN0J3MgZGlzcGxheU5hbWUgZnJvbSB0aGUgd3JhcHBlZCBjb21wb25lbnQncyBkaXNwbGF5TmFtZS5cbiAgICAgIGdldERpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiAnQ29ubmVjdCgnICsgbmFtZSArICcpJztcbiAgICAgIH0sXG5cbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuXG4gICAgICAvLyBwYXNzZWQgdGhyb3VnaCB0byBzZWxlY3RvckZhY3RvcnlcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHM6IGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzOiBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHM6IGluaXRNZXJnZVByb3BzLFxuICAgICAgcHVyZTogcHVyZSxcbiAgICAgIGFyZVN0YXRlc0VxdWFsOiBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWw6IGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWw6IGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWw6IGFyZU1lcmdlZFByb3BzRXF1YWxcblxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0KCk7IiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG5cbi8qKlxuICogVHJhbnNwb3J0IGFic3RyYWN0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gVHJhbnNwb3J0IChvcHRzKSB7XG4gIHRoaXMucGF0aCA9IG9wdHMucGF0aDtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWU7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydDtcbiAgdGhpcy5zZWN1cmUgPSBvcHRzLnNlY3VyZTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9IG9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gIHRoaXMubG9jYWxBZGRyZXNzID0gb3B0cy5sb2NhbEFkZHJlc3M7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFRyYW5zcG9ydC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIEVtaXRzIGFuIGVycm9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChtc2csIGRlc2MpIHtcbiAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICBlcnIudHlwZSA9ICdUcmFuc3BvcnRFcnJvcic7XG4gIGVyci5kZXNjcmlwdGlvbiA9IGRlc2M7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogT3BlbnMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcbiAgICB0aGlzLmRvT3BlbigpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMuZG9DbG9zZSgpO1xuICAgIHRoaXMub25DbG9zZSgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIG11bHRpcGxlIHBhY2tldHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy53cml0ZShwYWNrZXRzKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBub3Qgb3BlbicpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIG9wZW5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW4nO1xuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHBhY2tldCA9IHBhcnNlci5kZWNvZGVQYWNrZXQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSk7XG4gIHRoaXMub25QYWNrZXQocGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggYSBkZWNvZGVkIHBhY2tldC5cbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnKTtcbn07XG4iLCIvLyBicm93c2VyIHNoaW0gZm9yIHhtbGh0dHByZXF1ZXN0IG1vZHVsZVxuXG52YXIgaGFzQ09SUyA9IHJlcXVpcmUoJ2hhcy1jb3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgdmFyIHhkb21haW4gPSBvcHRzLnhkb21haW47XG5cbiAgLy8gc2NoZW1lIG11c3QgYmUgc2FtZSB3aGVuIHVzaWduIFhEb21haW5SZXF1ZXN0XG4gIC8vIGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llaW50ZXJuYWxzL2FyY2hpdmUvMjAxMC8wNS8xMy94ZG9tYWlucmVxdWVzdC1yZXN0cmljdGlvbnMtbGltaXRhdGlvbnMtYW5kLXdvcmthcm91bmRzLmFzcHhcbiAgdmFyIHhzY2hlbWUgPSBvcHRzLnhzY2hlbWU7XG5cbiAgLy8gWERvbWFpblJlcXVlc3QgaGFzIGEgZmxvdyBvZiBub3Qgc2VuZGluZyBjb29raWUsIHRoZXJlZm9yZSBpdCBzaG91bGQgYmUgZGlzYWJsZWQgYXMgYSBkZWZhdWx0LlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9lbmdpbmUuaW8tY2xpZW50L3B1bGwvMjE3XG4gIHZhciBlbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuXG4gIC8vIFhNTEh0dHBSZXF1ZXN0IGNhbiBiZSBkaXNhYmxlZCBvbiBJRVxuICB0cnkge1xuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNDT1JTKSkge1xuICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgLy8gVXNlIFhEb21haW5SZXF1ZXN0IGZvciBJRTggaWYgZW5hYmxlc1hEUiBpcyB0cnVlXG4gIC8vIGJlY2F1c2UgbG9hZGluZyBiYXIga2VlcHMgZmxhc2hpbmcgd2hlbiB1c2luZyBqc29ucC1wb2xsaW5nXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS95dWppb3Nha2Evc29ja2UuaW8taWU4LWxvYWRpbmctZXhhbXBsZVxuICB0cnkge1xuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICYmICF4c2NoZW1lICYmIGVuYWJsZXNYRFIpIHtcbiAgICAgIHJldHVybiBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIGlmICgheGRvbWFpbikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFtbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICB9IGNhdGNoIChlKSB7IH1cbiAgfVxufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBiaW5hcnkgPSByZXF1aXJlKCcuL2JpbmFyeScpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gNDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZXMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnR5cGVzID0gW1xuICAnQ09OTkVDVCcsXG4gICdESVNDT05ORUNUJyxcbiAgJ0VWRU5UJyxcbiAgJ0FDSycsXG4gICdFUlJPUicsXG4gICdCSU5BUllfRVZFTlQnLFxuICAnQklOQVJZX0FDSydcbl07XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGNvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5DT05ORUNUID0gMDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZGlzY29ubmVjdGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRJU0NPTk5FQ1QgPSAxO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBldmVudGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVWRU5UID0gMjtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgYWNrYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQUNLID0gMztcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXJyb3JgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FUlJPUiA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgJ2JpbmFyeSBldmVudCdcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQklOQVJZX0VWRU5UID0gNTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgYmluYXJ5IGFja2AuIEZvciBhY2tzIHdpdGggYmluYXJ5IGFyZ3VtZW50cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQklOQVJZX0FDSyA9IDY7XG5cbi8qKlxuICogRW5jb2RlciBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRW5jb2RlciA9IEVuY29kZXI7XG5cbi8qKlxuICogRGVjb2RlciBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRGVjb2RlciA9IERlY29kZXI7XG5cbi8qKlxuICogQSBzb2NrZXQuaW8gRW5jb2RlciBpbnN0YW5jZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRW5jb2RlcigpIHt9XG5cbnZhciBFUlJPUl9QQUNLRVQgPSBleHBvcnRzLkVSUk9SICsgJ1wiZW5jb2RlIGVycm9yXCInO1xuXG4vKipcbiAqIEVuY29kZSBhIHBhY2tldCBhcyBhIHNpbmdsZSBzdHJpbmcgaWYgbm9uLWJpbmFyeSwgb3IgYXMgYVxuICogYnVmZmVyIHNlcXVlbmNlLCBkZXBlbmRpbmcgb24gcGFja2V0IHR5cGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHBhY2tldCBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gaGFuZGxlIGVuY29kaW5ncyAobGlrZWx5IGVuZ2luZS53cml0ZSlcbiAqIEByZXR1cm4gQ2FsbHMgY2FsbGJhY2sgd2l0aCBBcnJheSBvZiBlbmNvZGluZ3NcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24ob2JqLCBjYWxsYmFjayl7XG4gIGRlYnVnKCdlbmNvZGluZyBwYWNrZXQgJWonLCBvYmopO1xuXG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gb2JqLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBvYmoudHlwZSkge1xuICAgIGVuY29kZUFzQmluYXJ5KG9iaiwgY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHZhciBlbmNvZGluZyA9IGVuY29kZUFzU3RyaW5nKG9iaik7XG4gICAgY2FsbGJhY2soW2VuY29kaW5nXSk7XG4gIH1cbn07XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBhcyBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7U3RyaW5nfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc1N0cmluZyhvYmopIHtcblxuICAvLyBmaXJzdCBpcyB0eXBlXG4gIHZhciBzdHIgPSAnJyArIG9iai50eXBlO1xuXG4gIC8vIGF0dGFjaG1lbnRzIGlmIHdlIGhhdmUgdGhlbVxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBzdHIgKz0gb2JqLmF0dGFjaG1lbnRzICsgJy0nO1xuICB9XG5cbiAgLy8gaWYgd2UgaGF2ZSBhIG5hbWVzcGFjZSBvdGhlciB0aGFuIGAvYFxuICAvLyB3ZSBhcHBlbmQgaXQgZm9sbG93ZWQgYnkgYSBjb21tYSBgLGBcbiAgaWYgKG9iai5uc3AgJiYgJy8nICE9PSBvYmoubnNwKSB7XG4gICAgc3RyICs9IG9iai5uc3AgKyAnLCc7XG4gIH1cblxuICAvLyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSB0aGUgaWRcbiAgaWYgKG51bGwgIT0gb2JqLmlkKSB7XG4gICAgc3RyICs9IG9iai5pZDtcbiAgfVxuXG4gIC8vIGpzb24gZGF0YVxuICBpZiAobnVsbCAhPSBvYmouZGF0YSkge1xuICAgIHZhciBwYXlsb2FkID0gdHJ5U3RyaW5naWZ5KG9iai5kYXRhKTtcbiAgICBpZiAocGF5bG9hZCAhPT0gZmFsc2UpIHtcbiAgICAgIHN0ciArPSBwYXlsb2FkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRVJST1JfUEFDS0VUO1xuICAgIH1cbiAgfVxuXG4gIGRlYnVnKCdlbmNvZGVkICVqIGFzICVzJywgb2JqLCBzdHIpO1xuICByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiB0cnlTdHJpbmdpZnkoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0cik7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBhcyAnYnVmZmVyIHNlcXVlbmNlJyBieSByZW1vdmluZyBibG9icywgYW5kXG4gKiBkZWNvbnN0cnVjdGluZyBwYWNrZXQgaW50byBvYmplY3Qgd2l0aCBwbGFjZWhvbGRlcnMgYW5kXG4gKiBhIGxpc3Qgb2YgYnVmZmVycy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9IGVuY29kZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFzQmluYXJ5KG9iaiwgY2FsbGJhY2spIHtcblxuICBmdW5jdGlvbiB3cml0ZUVuY29kaW5nKGJsb2JsZXNzRGF0YSkge1xuICAgIHZhciBkZWNvbnN0cnVjdGlvbiA9IGJpbmFyeS5kZWNvbnN0cnVjdFBhY2tldChibG9ibGVzc0RhdGEpO1xuICAgIHZhciBwYWNrID0gZW5jb2RlQXNTdHJpbmcoZGVjb25zdHJ1Y3Rpb24ucGFja2V0KTtcbiAgICB2YXIgYnVmZmVycyA9IGRlY29uc3RydWN0aW9uLmJ1ZmZlcnM7XG5cbiAgICBidWZmZXJzLnVuc2hpZnQocGFjayk7IC8vIGFkZCBwYWNrZXQgaW5mbyB0byBiZWdpbm5pbmcgb2YgZGF0YSBsaXN0XG4gICAgY2FsbGJhY2soYnVmZmVycyk7IC8vIHdyaXRlIGFsbCB0aGUgYnVmZmVyc1xuICB9XG5cbiAgYmluYXJ5LnJlbW92ZUJsb2JzKG9iaiwgd3JpdGVFbmNvZGluZyk7XG59XG5cbi8qKlxuICogQSBzb2NrZXQuaW8gRGVjb2RlciBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gZGVjb2RlclxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBEZWNvZGVyKCkge1xuICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAgd2l0aCBEZWNvZGVyLlxuICovXG5cbkVtaXR0ZXIoRGVjb2Rlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERlY29kZXMgYW4gZWNvZGVkIHBhY2tldCBzdHJpbmcgaW50byBwYWNrZXQgSlNPTi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gb2JqIC0gZW5jb2RlZCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcGFja2V0O1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICBwYWNrZXQgPSBkZWNvZGVTdHJpbmcob2JqKTtcbiAgICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHBhY2tldC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcGFja2V0LnR5cGUpIHsgLy8gYmluYXJ5IHBhY2tldCdzIGpzb25cbiAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG5ldyBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCk7XG5cbiAgICAgIC8vIG5vIGF0dGFjaG1lbnRzLCBsYWJlbGVkIGJpbmFyeSBidXQgbm8gYmluYXJ5IGRhdGEgdG8gZm9sbG93XG4gICAgICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yLnJlY29uUGFjay5hdHRhY2htZW50cyA9PT0gMCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7IC8vIG5vbi1iaW5hcnkgZnVsbCBwYWNrZXRcbiAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGlzQnVmKG9iaikgfHwgb2JqLmJhc2U2NCkgeyAvLyByYXcgYmluYXJ5IGRhdGFcbiAgICBpZiAoIXRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdnb3QgYmluYXJ5IGRhdGEgd2hlbiBub3QgcmVjb25zdHJ1Y3RpbmcgYSBwYWNrZXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7XG4gICAgICBpZiAocGFja2V0KSB7IC8vIHJlY2VpdmVkIGZpbmFsIGJ1ZmZlclxuICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZTogJyArIG9iaik7XG4gIH1cbn07XG5cbi8qKlxuICogRGVjb2RlIGEgcGFja2V0IFN0cmluZyAoSlNPTiBkYXRhKVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGVTdHJpbmcoc3RyKSB7XG4gIHZhciBpID0gMDtcbiAgLy8gbG9vayB1cCB0eXBlXG4gIHZhciBwID0ge1xuICAgIHR5cGU6IE51bWJlcihzdHIuY2hhckF0KDApKVxuICB9O1xuXG4gIGlmIChudWxsID09IGV4cG9ydHMudHlwZXNbcC50eXBlXSkge1xuICAgIHJldHVybiBlcnJvcigndW5rbm93biBwYWNrZXQgdHlwZSAnICsgcC50eXBlKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAgYXR0YWNobWVudHMgaWYgdHlwZSBiaW5hcnlcbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwLnR5cGUpIHtcbiAgICB2YXIgYnVmID0gJyc7XG4gICAgd2hpbGUgKHN0ci5jaGFyQXQoKytpKSAhPT0gJy0nKSB7XG4gICAgICBidWYgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYnVmICE9IE51bWJlcihidWYpIHx8IHN0ci5jaGFyQXQoaSkgIT09ICctJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGF0dGFjaG1lbnRzJyk7XG4gICAgfVxuICAgIHAuYXR0YWNobWVudHMgPSBOdW1iZXIoYnVmKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAgbmFtZXNwYWNlIChpZiBhbnkpXG4gIGlmICgnLycgPT09IHN0ci5jaGFyQXQoaSArIDEpKSB7XG4gICAgcC5uc3AgPSAnJztcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoJywnID09PSBjKSBicmVhaztcbiAgICAgIHAubnNwICs9IGM7XG4gICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHAubnNwID0gJy8nO1xuICB9XG5cbiAgLy8gbG9vayB1cCBpZFxuICB2YXIgbmV4dCA9IHN0ci5jaGFyQXQoaSArIDEpO1xuICBpZiAoJycgIT09IG5leHQgJiYgTnVtYmVyKG5leHQpID09IG5leHQpIHtcbiAgICBwLmlkID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKG51bGwgPT0gYyB8fCBOdW1iZXIoYykgIT0gYykge1xuICAgICAgICAtLWk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcC5pZCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBwLmlkID0gTnVtYmVyKHAuaWQpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBqc29uIGRhdGFcbiAgaWYgKHN0ci5jaGFyQXQoKytpKSkge1xuICAgIHZhciBwYXlsb2FkID0gdHJ5UGFyc2Uoc3RyLnN1YnN0cihpKSk7XG4gICAgdmFyIGlzUGF5bG9hZFZhbGlkID0gcGF5bG9hZCAhPT0gZmFsc2UgJiYgKHAudHlwZSA9PT0gZXhwb3J0cy5FUlJPUiB8fCBpc0FycmF5KHBheWxvYWQpKTtcbiAgICBpZiAoaXNQYXlsb2FkVmFsaWQpIHtcbiAgICAgIHAuZGF0YSA9IHBheWxvYWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlcnJvcignaW52YWxpZCBwYXlsb2FkJyk7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ2RlY29kZWQgJXMgYXMgJWonLCBzdHIsIHApO1xuICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gdHJ5UGFyc2Uoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWFsbG9jYXRlcyBhIHBhcnNlcidzIHJlc291cmNlc1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgdGhpcy5yZWNvbnN0cnVjdG9yLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBIG1hbmFnZXIgb2YgYSBiaW5hcnkgZXZlbnQncyAnYnVmZmVyIHNlcXVlbmNlJy4gU2hvdWxkXG4gKiBiZSBjb25zdHJ1Y3RlZCB3aGVuZXZlciBhIHBhY2tldCBvZiB0eXBlIEJJTkFSWV9FVkVOVCBpc1xuICogZGVjb2RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtCaW5hcnlSZWNvbnN0cnVjdG9yfSBpbml0aWFsaXplZCByZWNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCkge1xuICB0aGlzLnJlY29uUGFjayA9IHBhY2tldDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59XG5cbi8qKlxuICogTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIGJpbmFyeSBkYXRhIHJlY2VpdmVkIGZyb20gY29ubmVjdGlvblxuICogYWZ0ZXIgYSBCSU5BUllfRVZFTlQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyIHwgQXJyYXlCdWZmZXJ9IGJpbkRhdGEgLSB0aGUgcmF3IGJpbmFyeSBkYXRhIHJlY2VpdmVkXG4gKiBAcmV0dXJuIHtudWxsIHwgT2JqZWN0fSByZXR1cm5zIG51bGwgaWYgbW9yZSBiaW5hcnkgZGF0YSBpcyBleHBlY3RlZCBvclxuICogICBhIHJlY29uc3RydWN0ZWQgcGFja2V0IG9iamVjdCBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gcmVjZWl2ZWQuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS50YWtlQmluYXJ5RGF0YSA9IGZ1bmN0aW9uKGJpbkRhdGEpIHtcbiAgdGhpcy5idWZmZXJzLnB1c2goYmluRGF0YSk7XG4gIGlmICh0aGlzLmJ1ZmZlcnMubGVuZ3RoID09PSB0aGlzLnJlY29uUGFjay5hdHRhY2htZW50cykgeyAvLyBkb25lIHdpdGggYnVmZmVyIGxpc3RcbiAgICB2YXIgcGFja2V0ID0gYmluYXJ5LnJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLCB0aGlzLmJ1ZmZlcnMpO1xuICAgIHRoaXMuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgIHJldHVybiBwYWNrZXQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBiaW5hcnkgcGFja2V0IHJlY29uc3RydWN0aW9uIHZhcmlhYmxlcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS5maW5pc2hlZFJlY29uc3RydWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVjb25QYWNrID0gbnVsbDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59O1xuXG5mdW5jdGlvbiBlcnJvcihtc2cpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBleHBvcnRzLkVSUk9SLFxuICAgIGRhdGE6ICdwYXJzZXIgZXJyb3I6ICcgKyBtc2dcbiAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogJ0BAcmVkdXgvSU5JVCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKSxcbiAgUkVQTEFDRTogJ0BAcmVkdXgvUkVQTEFDRScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKVxufTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmo7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICgodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBwcm90byA9IG9iajtcbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0UgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICgodHlwZW9mIG9ic2VydmVyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYnNlcnZlcikpICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH1cblxuICAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cbiAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5JTklUIH0pO1xuXG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiAnYWN0aW9uIFwiJyArIFN0cmluZyhhY3Rpb25UeXBlKSArICdcIicgfHwgJ2FuIGFjdGlvbic7XG5cbiAgcmV0dXJuICdHaXZlbiAnICsgYWN0aW9uRGVzY3JpcHRpb24gKyAnLCByZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQuICcgKyAnVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiAnICsgJ0lmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLic7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiAnVGhlICcgKyBhcmd1bWVudE5hbWUgKyAnIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXCInICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyAnXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgJyArICgna2V5czogXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCInKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG5cbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcblxuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gJ1VuZXhwZWN0ZWQgJyArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgJyAnICsgKCdcIicgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArICdcIiBmb3VuZCBpbiAnICsgYXJndW1lbnROYW1lICsgJy4gJykgKyAnRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiAnICsgKCdcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiAnICsgJ0lmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCAnICsgJ2V4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgJyArICdub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uXFwndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsICcgKyAneW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9ICdAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IHR5cGUgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuICcgKyAoJ0RvblxcJ3QgdHJ5IHRvIGhhbmRsZSAnICsgQWN0aW9uVHlwZXMuSU5JVCArICcgb3Igb3RoZXIgYWN0aW9ucyBpbiBcInJlZHV4LypcIiAnKSArICduYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSAnICsgJ2N1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsICcgKyAnaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlICcgKyAnYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuJyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZygnTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlID0gdm9pZCAwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oKSB7XG4gICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkICcgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFjdGlvbkNyZWF0b3JzKSkgKyAnLiAnICsgJ0RpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/Jyk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHVuZGVmaW5lZCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKFwiWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSAncHJvZHVjdGlvbicuIFwiICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3IgRGVmaW5lUGx1Z2luIGZvciB3ZWJwYWNrIChodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDMwMDMxKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGJpbmRBY3Rpb25DcmVhdG9ycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzIH07XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImltcG9ydCBzb2NrZXQgZnJvbSAnLi8uLi9Tb2NrZXQnO1xuXG5leHBvcnQgY29uc3QgUkVUUklFVkVfUk9PTVNfTElTVF9QRU5ESU5HID0gJ1JFVFJJRVZFX1JPT01TX0xJU1RfUEVORElORyc7XG5leHBvcnQgY29uc3QgUkVUUklFVkVfVVNFUlNfTElTVF9QRU5ESU5HID0gJ1JFVFJJRVZFX1VTRVJTX0xJU1RfUEVORElORyc7XG5leHBvcnQgY29uc3QgUkVDRUlWRV9ST09NU19MSVNUID0gJ1JFQ0VJVkVfUk9PTVNfTElTVCc7XG5leHBvcnQgY29uc3QgUkVDRUlWRV9VU0VSU19MSVNUID0gJ1JFQ0VJVkVfVVNFUlNfTElTVCc7XG5leHBvcnQgY29uc3QgTE9HSU5fU1VDQ0VTUyA9ICdMT0dJTl9TVUNDRVNTJztcbmV4cG9ydCBjb25zdCBMT0dJTl9SRVFVRVNUID0gJ0xPR0lOX1JFUVVFU1QnO1xuZXhwb3J0IGNvbnN0IExPR0lOX0ZBSUxFRCA9ICdMT0dJTl9GQUlMRUQnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmV0cmlldmVSb29tc0xpc3QoKSB7XG4gIHJldHVybiAoZGlzcGF0Y2gpID0+IHtcbiAgICBkaXNwYXRjaCh7dHlwZTogUkVUUklFVkVfUk9PTVNfTElTVF9QRU5ESU5HfSk7XG5cbiAgICBzb2NrZXQuZW1pdCgnUkVUUklFVkVfUk9PTVNfTElTVCcpO1xuICB9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJldHJpZXZlVXNlcnNMaXN0KCkge1xuICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG4gICAgZGlzcGF0Y2goe3R5cGU6IFJFVFJJRVZFX1VTRVJTX0xJU1RfUEVORElOR30pO1xuXG4gICAgc29ja2V0LmVtaXQoJ1JFVFJJRVZFX1VTRVJTX0xJU1QnKTtcbiAgfTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWNlaXZlUm9vbXNMaXN0KGxpc3QpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSRUNFSVZFX1JPT01TX0xJU1QsXG4gICAgbGlzdFxuICB9XG59O1xuXG4vLyBMT0dJTiBUSFVOS1xuZXhwb3J0IGZ1bmN0aW9uIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG4gICAgZGlzcGF0Y2goe3R5cGU6IExPR0lOX1JFUVVFU1R9KTtcblxuICAgIGZldGNoKCcvbG9naW4nLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgIH0sXG4gICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB1c2VybmFtZSxcbiAgICAgICAgcGFzc3dvcmRcbiAgICAgIH0pXG4gICAgfSlcbiAgICAudGhlbihcbiAgICAgIGRhdGEgPT4gZGF0YS5qc29uKCksXG4gICAgICBlcnJvciA9PiBjb25zb2xlLmxvZygnQW4gZXJyb3Igb2NjdXJlZCcsIGVycm9yKVxuICAgICkudGhlbihkYXRhID0+IHtcbiAgICAgIGlmKGRhdGEuZXJyb3IpIHtcbiAgICAgICAgZGlzcGF0Y2goe3R5cGU6IExPR0lOX0ZBSUxFRH0pXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEuZXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSlcbiAgICAgICAgZGlzcGF0Y2goe3R5cGU6IExPR0lOX1NVQ0NFU1MsIHVzZXI6IGRhdGF9KVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb29tKCkge1xuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgIC8vIENSRUFURSBST09NIElOIFRIRVJFXG4gIH1cbn0iLCIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9uO1xuXG4vKipcbiAqIEhlbHBlciBmb3Igc3Vic2NyaXB0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikge1xuICBvYmoub24oZXYsIGZuKTtcbiAgcmV0dXJuIHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTtcbiAgICB9XG4gIH07XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIHRvQXJyYXkgPSByZXF1aXJlKCd0by1hcnJheScpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDpzb2NrZXQnKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIGhhc0JpbiA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIEludGVybmFsIGV2ZW50cyAoYmxhY2tsaXN0ZWQpLlxuICogVGhlc2UgZXZlbnRzIGNhbid0IGJlIGVtaXR0ZWQgYnkgdGhlIHVzZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIGV2ZW50cyA9IHtcbiAgY29ubmVjdDogMSxcbiAgY29ubmVjdF9lcnJvcjogMSxcbiAgY29ubmVjdF90aW1lb3V0OiAxLFxuICBjb25uZWN0aW5nOiAxLFxuICBkaXNjb25uZWN0OiAxLFxuICBlcnJvcjogMSxcbiAgcmVjb25uZWN0OiAxLFxuICByZWNvbm5lY3RfYXR0ZW1wdDogMSxcbiAgcmVjb25uZWN0X2ZhaWxlZDogMSxcbiAgcmVjb25uZWN0X2Vycm9yOiAxLFxuICByZWNvbm5lY3Rpbmc6IDEsXG4gIHBpbmc6IDEsXG4gIHBvbmc6IDFcbn07XG5cbi8qKlxuICogU2hvcnRjdXQgdG8gYEVtaXR0ZXIjZW1pdGAuXG4gKi9cblxudmFyIGVtaXQgPSBFbWl0dGVyLnByb3RvdHlwZS5lbWl0O1xuXG4vKipcbiAqIGBTb2NrZXRgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0IChpbywgbnNwLCBvcHRzKSB7XG4gIHRoaXMuaW8gPSBpbztcbiAgdGhpcy5uc3AgPSBuc3A7XG4gIHRoaXMuanNvbiA9IHRoaXM7IC8vIGNvbXBhdFxuICB0aGlzLmlkcyA9IDA7XG4gIHRoaXMuYWNrcyA9IHt9O1xuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgdGhpcy5mbGFncyA9IHt9O1xuICBpZiAob3B0cyAmJiBvcHRzLnF1ZXJ5KSB7XG4gICAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIH1cbiAgaWYgKHRoaXMuaW8uYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihTb2NrZXQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gb3BlbiwgY2xvc2UgYW5kIHBhY2tldCBldmVudHNcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnN1YkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc3VicykgcmV0dXJuO1xuXG4gIHZhciBpbyA9IHRoaXMuaW87XG4gIHRoaXMuc3VicyA9IFtcbiAgICBvbihpbywgJ29wZW4nLCBiaW5kKHRoaXMsICdvbm9wZW4nKSksXG4gICAgb24oaW8sICdwYWNrZXQnLCBiaW5kKHRoaXMsICdvbnBhY2tldCcpKSxcbiAgICBvbihpbywgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKVxuICBdO1xufTtcblxuLyoqXG4gKiBcIk9wZW5zXCIgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUub3BlbiA9XG5Tb2NrZXQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkgcmV0dXJuIHRoaXM7XG5cbiAgdGhpcy5zdWJFdmVudHMoKTtcbiAgdGhpcy5pby5vcGVuKCk7IC8vIGVuc3VyZSBvcGVuXG4gIGlmICgnb3BlbicgPT09IHRoaXMuaW8ucmVhZHlTdGF0ZSkgdGhpcy5vbm9wZW4oKTtcbiAgdGhpcy5lbWl0KCdjb25uZWN0aW5nJyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIGBtZXNzYWdlYCBldmVudC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgYXJncy51bnNoaWZ0KCdtZXNzYWdlJyk7XG4gIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlIGBlbWl0YC5cbiAqIElmIHRoZSBldmVudCBpcyBpbiBgZXZlbnRzYCwgaXQncyBlbWl0dGVkIG5vcm1hbGx5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBuYW1lXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKGV2KSB7XG4gIGlmIChldmVudHMuaGFzT3duUHJvcGVydHkoZXYpKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogKHRoaXMuZmxhZ3MuYmluYXJ5ICE9PSB1bmRlZmluZWQgPyB0aGlzLmZsYWdzLmJpbmFyeSA6IGhhc0JpbihhcmdzKSkgPyBwYXJzZXIuQklOQVJZX0VWRU5UIDogcGFyc2VyLkVWRU5ULFxuICAgIGRhdGE6IGFyZ3NcbiAgfTtcblxuICBwYWNrZXQub3B0aW9ucyA9IHt9O1xuICBwYWNrZXQub3B0aW9ucy5jb21wcmVzcyA9ICF0aGlzLmZsYWdzIHx8IGZhbHNlICE9PSB0aGlzLmZsYWdzLmNvbXByZXNzO1xuXG4gIC8vIGV2ZW50IGFjayBjYWxsYmFja1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSkge1xuICAgIGRlYnVnKCdlbWl0dGluZyBwYWNrZXQgd2l0aCBhY2sgaWQgJWQnLCB0aGlzLmlkcyk7XG4gICAgdGhpcy5hY2tzW3RoaXMuaWRzXSA9IGFyZ3MucG9wKCk7XG4gICAgcGFja2V0LmlkID0gdGhpcy5pZHMrKztcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZW5kQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgfVxuXG4gIHRoaXMuZmxhZ3MgPSB7fTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHBhY2tldC5uc3AgPSB0aGlzLm5zcDtcbiAgdGhpcy5pby5wYWNrZXQocGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBvcGVuYC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3RyYW5zcG9ydCBpcyBvcGVuIC0gY29ubmVjdGluZycpO1xuXG4gIC8vIHdyaXRlIGNvbm5lY3QgcGFja2V0IGlmIG5lY2Vzc2FyeVxuICBpZiAoJy8nICE9PSB0aGlzLm5zcCkge1xuICAgIGlmICh0aGlzLnF1ZXJ5KSB7XG4gICAgICB2YXIgcXVlcnkgPSB0eXBlb2YgdGhpcy5xdWVyeSA9PT0gJ29iamVjdCcgPyBwYXJzZXFzLmVuY29kZSh0aGlzLnF1ZXJ5KSA6IHRoaXMucXVlcnk7XG4gICAgICBkZWJ1Zygnc2VuZGluZyBjb25uZWN0IHBhY2tldCB3aXRoIHF1ZXJ5ICVzJywgcXVlcnkpO1xuICAgICAgdGhpcy5wYWNrZXQoe3R5cGU6IHBhcnNlci5DT05ORUNULCBxdWVyeTogcXVlcnl9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYWNrZXQoe3R5cGU6IHBhcnNlci5DT05ORUNUfSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBgY2xvc2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb25cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgZGVidWcoJ2Nsb3NlICglcyknLCByZWFzb24pO1xuICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gIGRlbGV0ZSB0aGlzLmlkO1xuICB0aGlzLmVtaXQoJ2Rpc2Nvbm5lY3QnLCByZWFzb24pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBzb2NrZXQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gcGFja2V0Lm5zcCA9PT0gdGhpcy5uc3A7XG4gIHZhciByb290TmFtZXNwYWNlRXJyb3IgPSBwYWNrZXQudHlwZSA9PT0gcGFyc2VyLkVSUk9SICYmIHBhY2tldC5uc3AgPT09ICcvJztcblxuICBpZiAoIXNhbWVOYW1lc3BhY2UgJiYgIXJvb3ROYW1lc3BhY2VFcnJvcikgcmV0dXJuO1xuXG4gIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICBjYXNlIHBhcnNlci5DT05ORUNUOlxuICAgICAgdGhpcy5vbmNvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQklOQVJZX0VWRU5UOlxuICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkFDSzpcbiAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQklOQVJZX0FDSzpcbiAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRElTQ09OTkVDVDpcbiAgICAgIHRoaXMub25kaXNjb25uZWN0KCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkVSUk9SOlxuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHBhY2tldC5kYXRhKTtcbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25ldmVudCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIGFyZ3MgPSBwYWNrZXQuZGF0YSB8fCBbXTtcbiAgZGVidWcoJ2VtaXR0aW5nIGV2ZW50ICVqJywgYXJncyk7XG5cbiAgaWYgKG51bGwgIT0gcGFja2V0LmlkKSB7XG4gICAgZGVidWcoJ2F0dGFjaGluZyBhY2sgY2FsbGJhY2sgdG8gZXZlbnQnKTtcbiAgICBhcmdzLnB1c2godGhpcy5hY2socGFja2V0LmlkKSk7XG4gIH1cblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5wdXNoKGFyZ3MpO1xuICB9XG59O1xuXG4vKipcbiAqIFByb2R1Y2VzIGFuIGFjayBjYWxsYmFjayB0byBlbWl0IHdpdGggYW4gZXZlbnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5hY2sgPSBmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2VudCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIC8vIHByZXZlbnQgZG91YmxlIGNhbGxiYWNrc1xuICAgIGlmIChzZW50KSByZXR1cm47XG4gICAgc2VudCA9IHRydWU7XG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgZGVidWcoJ3NlbmRpbmcgYWNrICVqJywgYXJncyk7XG5cbiAgICBzZWxmLnBhY2tldCh7XG4gICAgICB0eXBlOiBoYXNCaW4oYXJncykgPyBwYXJzZXIuQklOQVJZX0FDSyA6IHBhcnNlci5BQ0ssXG4gICAgICBpZDogaWQsXG4gICAgICBkYXRhOiBhcmdzXG4gICAgfSk7XG4gIH07XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGFja25vd2xlZ2VtZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25hY2sgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhY2spIHtcbiAgICBkZWJ1ZygnY2FsbGluZyBhY2sgJXMgd2l0aCAlaicsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgIGFjay5hcHBseSh0aGlzLCBwYWNrZXQuZGF0YSk7XG4gICAgZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICB9IGVsc2Uge1xuICAgIGRlYnVnKCdiYWQgYWNrICVzJywgcGFja2V0LmlkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3QnKTtcbiAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbn07XG5cbi8qKlxuICogRW1pdCBidWZmZXJlZCBldmVudHMgKHJlY2VpdmVkIGFuZCBlbWl0dGVkKS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXRCdWZmZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnJlY2VpdmVCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIHRoaXMucmVjZWl2ZUJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucGFja2V0KHRoaXMuc2VuZEJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnc2VydmVyIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgdGhpcy5kZXN0cm95KCk7XG4gIHRoaXMub25jbG9zZSgnaW8gc2VydmVyIGRpc2Nvbm5lY3QnKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZm9yY2VkIGNsaWVudC9zZXJ2ZXIgc2lkZSBkaXNjb25uZWN0aW9ucyxcbiAqIHRoaXMgbWV0aG9kIGVuc3VyZXMgdGhlIG1hbmFnZXIgc3RvcHMgdHJhY2tpbmcgdXMgYW5kXG4gKiB0aGF0IHJlY29ubmVjdGlvbnMgZG9uJ3QgZ2V0IHRyaWdnZXJlZCBmb3IgdGhpcy5cbiAqXG4gKiBAYXBpIHByaXZhdGUuXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSB7XG4gICAgLy8gY2xlYW4gc3Vic2NyaXB0aW9ucyB0byBhdm9pZCByZWNvbm5lY3Rpb25zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc3Vic1tpXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuc3VicyA9IG51bGw7XG4gIH1cblxuICB0aGlzLmlvLmRlc3Ryb3kodGhpcyk7XG59O1xuXG4vKipcbiAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXQgbWFudWFsbHkuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY2xvc2UgPVxuU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBkZWJ1ZygncGVyZm9ybWluZyBkaXNjb25uZWN0ICglcyknLCB0aGlzLm5zcCk7XG4gICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBwYXJzZXIuRElTQ09OTkVDVCB9KTtcbiAgfVxuXG4gIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gIHRoaXMuZGVzdHJveSgpO1xuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgdGhpcy5vbmNsb3NlKCdpbyBjbGllbnQgZGlzY29ubmVjdCcpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb21wcmVzcyBmbGFnLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaWYgYHRydWVgLCBjb21wcmVzc2VzIHRoZSBzZW5kaW5nIGRhdGFcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNvbXByZXNzID0gZnVuY3Rpb24gKGNvbXByZXNzKSB7XG4gIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSBjb21wcmVzcztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGJpbmFyeSBmbGFnXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB3aGV0aGVyIHRoZSBlbWl0dGVkIGRhdGEgY29udGFpbnMgYmluYXJ5XG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5iaW5hcnkgPSBmdW5jdGlvbiAoYmluYXJ5KSB7XG4gIHRoaXMuZmxhZ3MuYmluYXJ5ID0gYmluYXJ5O1xuICByZXR1cm4gdGhpcztcbn07XG4iLCJcbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXycuc3BsaXQoJycpXG4gICwgbGVuZ3RoID0gNjRcbiAgLCBtYXAgPSB7fVxuICAsIHNlZWQgPSAwXG4gICwgaSA9IDBcbiAgLCBwcmV2O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBlbmNvZGUobnVtKSB7XG4gIHZhciBlbmNvZGVkID0gJyc7XG5cbiAgZG8ge1xuICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcbiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIGxlbmd0aCk7XG4gIH0gd2hpbGUgKG51bSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50ZWdlciB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBpbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIHZhciBkZWNvZGVkID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XG4gIH1cblxuICByZXR1cm4gZGVjb2RlZDtcbn1cblxuLyoqXG4gKiBZZWFzdDogQSB0aW55IGdyb3dpbmcgaWQgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24geWVhc3QoKSB7XG4gIHZhciBub3cgPSBlbmNvZGUoK25ldyBEYXRlKCkpO1xuXG4gIGlmIChub3cgIT09IHByZXYpIHJldHVybiBzZWVkID0gMCwgcHJldiA9IG5vdztcbiAgcmV0dXJuIG5vdyArJy4nKyBlbmNvZGUoc2VlZCsrKTtcbn1cblxuLy9cbi8vIE1hcCBlYWNoIGNoYXJhY3RlciB0byBpdHMgaW5kZXguXG4vL1xuZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgbWFwW2FscGhhYmV0W2ldXSA9IGk7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIGB5ZWFzdGAsIGBlbmNvZGVgIGFuZCBgZGVjb2RlYCBmdW5jdGlvbnMuXG4vL1xueWVhc3QuZW5jb2RlID0gZW5jb2RlO1xueWVhc3QuZGVjb2RlID0gZGVjb2RlO1xubW9kdWxlLmV4cG9ydHMgPSB5ZWFzdDtcbiIsIi8qIGdsb2JhbCBCbG9iIEZpbGUgKi9cblxuLypcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJztcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0JpbmFyeTtcblxuLyoqXG4gKiBDaGVja3MgZm9yIGJpbmFyeSBkYXRhLlxuICpcbiAqIFN1cHBvcnRzIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEJsb2IgYW5kIEZpbGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFueXRoaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGhhc0JpbmFyeSAob2JqKSB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgQnVmZmVyLmlzQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8XG4gICAgKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpXG4gICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9oYXMtYmluYXJ5L3B1bGwvNFxuICBpZiAob2JqLnRvSlNPTiAmJiB0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGhhc0JpbmFyeShvYmoudG9KU09OKCksIHRydWUpO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG4vKipcbiAqIElzIFhIUjIgc3VwcG9ydGVkP1xuICovXG5cbnZhciBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbi8qKlxuICogUG9sbGluZyBpbnRlcmZhY2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmICghaGFzWEhSMiB8fCBmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFBvbGxpbmcsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucG9sbCgpO1xufTtcblxuLyoqXG4gKiBQYXVzZXMgcG9sbGluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9uUGF1c2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdwYXVzaW5nJztcblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgZGVidWcoJ3BhdXNlZCcpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdwYXVzZWQnO1xuICAgIG9uUGF1c2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ3BvbGxDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhdXNlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygncG9sbGluZycpO1xuICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICB0aGlzLmRvUG9sbCgpO1xuICB0aGlzLmVtaXQoJ3BvbGwnKTtcbn07XG5cbi8qKlxuICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkZWJ1ZygncG9sbGluZyBnb3QgZGF0YSAlcycsIGRhdGEpO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgaWYgKCdvcGVuaW5nJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICBzZWxmLm9uT3BlbigpO1xuICAgIH1cblxuICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICBpZiAoJ2Nsb3NlJyA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH07XG5cbiAgLy8gZGVjb2RlIHBheWxvYWRcbiAgcGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuXG4gIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BvbGxDb21wbGV0ZScpO1xuXG4gICAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnBvbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGNsb3NlICgpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBjbG9zZSBwYWNrZXQnKTtcbiAgICBzZWxmLndyaXRlKFt7IHR5cGU6ICdjbG9zZScgfV0pO1xuICB9XG5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBvcGVuIC0gY2xvc2luZycpO1xuICAgIGNsb3NlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgIGRlYnVnKCd0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2UnKTtcbiAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHZhciBjYWxsYmFja2ZuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfTtcblxuICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gIGlmIChmYWxzZSAhPT0gdGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnaHR0cHMnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgKCdodHRwJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBYSFIgPSByZXF1aXJlKCcuL3BvbGxpbmcteGhyJyk7XG52YXIgSlNPTlAgPSByZXF1aXJlKCcuL3BvbGxpbmctanNvbnAnKTtcbnZhciB3ZWJzb2NrZXQgPSByZXF1aXJlKCcuL3dlYnNvY2tldCcpO1xuXG4vKipcbiAqIEV4cG9ydCB0cmFuc3BvcnRzLlxuICovXG5cbmV4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7XG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcblxuLyoqXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqIERlY2lkZXMgb24geGhyIHZzIGpzb25wIGJhc2VkIG9uIGZlYXR1cmUgZGV0ZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIHhocjtcbiAgdmFyIHhkID0gZmFsc2U7XG4gIHZhciB4cyA9IGZhbHNlO1xuICB2YXIganNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtcblxuICBpZiAoZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHhkID0gb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG5cbiAgb3B0cy54ZG9tYWluID0geGQ7XG4gIG9wdHMueHNjaGVtZSA9IHhzO1xuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG5cbiAgaWYgKCdvcGVuJyBpbiB4aHIgJiYgIW9wdHMuZm9yY2VKU09OUCkge1xuICAgIHJldHVybiBuZXcgWEhSKG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghanNvbnApIHRocm93IG5ldyBFcnJvcignSlNPTlAgZGlzYWJsZWQnKTtcbiAgICByZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICB9XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZWlvID0gcmVxdWlyZSgnZW5naW5lLmlvLWNsaWVudCcpO1xudmFyIFNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDptYW5hZ2VyJyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBCYWNrb2ZmID0gcmVxdWlyZSgnYmFja28yJyk7XG5cbi8qKlxuICogSUU2KyBoYXNPd25Qcm9wZXJ0eVxuICovXG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNYW5hZ2VyO1xuXG4vKipcbiAqIGBNYW5hZ2VyYCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5naW5lIGluc3RhbmNlIG9yIGVuZ2luZSB1cmkvb3B0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWFuYWdlciAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYW5hZ2VyKSkgcmV0dXJuIG5ldyBNYW5hZ2VyKHVyaSwgb3B0cyk7XG4gIGlmICh1cmkgJiYgKCdvYmplY3QnID09PSB0eXBlb2YgdXJpKSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCAnL3NvY2tldC5pbyc7XG4gIHRoaXMubnNwcyA9IHt9O1xuICB0aGlzLnN1YnMgPSBbXTtcbiAgdGhpcy5vcHRzID0gb3B0cztcbiAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgIG1pbjogdGhpcy5yZWNvbm5lY3Rpb25EZWxheSgpLFxuICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKClcbiAgfSk7XG4gIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMudXJpID0gdXJpO1xuICB0aGlzLmNvbm5lY3RpbmcgPSBbXTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdmFyIF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gIHRoaXMuZW5jb2RlciA9IG5ldyBfcGFyc2VyLkVuY29kZXIoKTtcbiAgdGhpcy5kZWNvZGVyID0gbmV3IF9wYXJzZXIuRGVjb2RlcigpO1xuICB0aGlzLmF1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBQcm9wYWdhdGUgZ2l2ZW4gZXZlbnQgdG8gc29ja2V0cyBhbmQgZW1pdCBvbiBgdGhpc2BcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5lbWl0QWxsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmVtaXQuYXBwbHkodGhpcy5uc3BzW25zcF0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBgc29ja2V0LmlkYCBvZiBhbGwgc29ja2V0c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVNvY2tldElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmlkID0gdGhpcy5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGdlbmVyYXRlIGBzb2NrZXQuaWRgIGZvciB0aGUgZ2l2ZW4gYG5zcGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbnNwXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKG5zcCkge1xuICByZXR1cm4gKG5zcCA9PT0gJy8nID8gJycgOiAobnNwICsgJyMnKSkgKyB0aGlzLmVuZ2luZS5pZDtcbn07XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKE1hbmFnZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgcmVjb25uZWN0aW9uYCBjb25maWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB0cnVlL2ZhbHNlIGlmIGl0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHJlY29ubmVjdFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb24gPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBjb25maWcuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYmVmb3JlIGdpdmluZyB1cFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xuICB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNaW4odik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuTWFuYWdlci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3RvciA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldEppdHRlcih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1heGltdW0gZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWF4KHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29ubmVjdGlvbiB0aW1lb3V0LiBgZmFsc2VgIHRvIGRpc2FibGVcbiAqXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUubWF5YmVSZWNvbm5lY3RPbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgaWYgKCF0aGlzLnJlY29ubmVjdGluZyAmJiB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9uYWwsIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9wZW4gPVxuTWFuYWdlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChmbiwgb3B0cykge1xuICBkZWJ1ZygncmVhZHlTdGF0ZSAlcycsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIGlmICh+dGhpcy5yZWFkeVN0YXRlLmluZGV4T2YoJ29wZW4nKSkgcmV0dXJuIHRoaXM7XG5cbiAgZGVidWcoJ29wZW5pbmcgJXMnLCB0aGlzLnVyaSk7XG4gIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSBmYWxzZTtcblxuICAvLyBlbWl0IGBvcGVuYFxuICB2YXIgb3BlblN1YiA9IG9uKHNvY2tldCwgJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbm9wZW4oKTtcbiAgICBmbiAmJiBmbigpO1xuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X2Vycm9yYFxuICB2YXIgZXJyb3JTdWIgPSBvbihzb2NrZXQsICdlcnJvcicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGVidWcoJ2Nvbm5lY3RfZXJyb3InKTtcbiAgICBzZWxmLmNsZWFudXAoKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfZXJyb3InLCBkYXRhKTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gZXJyb3InKTtcbiAgICAgIGVyci5kYXRhID0gZGF0YTtcbiAgICAgIGZuKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICBzZWxmLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X3RpbWVvdXRgXG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuXG4gICAgLy8gc2V0IHRpbWVyXG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7XG4gICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsICd0aW1lb3V0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfdGltZW91dCcsIHRpbWVvdXQpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5zdWJzLnB1c2gob3BlblN1Yik7XG4gIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnb3BlbicpO1xuXG4gIC8vIGNsZWFyIG9sZCBzdWJzXG4gIHRoaXMuY2xlYW51cCgpO1xuXG4gIC8vIG1hcmsgYXMgb3BlblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuXG4gIC8vIGFkZCBuZXcgc3Vic1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2RhdGEnLCBiaW5kKHRoaXMsICdvbmRhdGEnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwaW5nJywgYmluZCh0aGlzLCAnb25waW5nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncG9uZycsIGJpbmQodGhpcywgJ29ucG9uZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Vycm9yJywgYmluZCh0aGlzLCAnb25lcnJvcicpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgJ2RlY29kZWQnLCBiaW5kKHRoaXMsICdvbmRlY29kZWQnKSkpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTtcbiAgdGhpcy5lbWl0QWxsKCdwaW5nJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0QWxsKCdwb25nJywgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5lbWl0QWxsKCdlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAobnNwLCBvcHRzKSB7XG4gIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNvY2tldC5vbignY29ubmVjdGluZycsIG9uQ29ubmVjdGluZyk7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc29ja2V0LmlkID0gc2VsZi5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvQ29ubmVjdCkge1xuICAgICAgLy8gbWFudWFsbHkgY2FsbCBoZXJlIHNpbmNlIGNvbm5lY3RpbmcgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGxpc3RlbmluZ1xuICAgICAgb25Db25uZWN0aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBpZiAoIX5pbmRleE9mKHNlbGYuY29ubmVjdGluZywgc29ja2V0KSkge1xuICAgICAgc2VsZi5jb25uZWN0aW5nLnB1c2goc29ja2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ja2V0O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgdmFyIGluZGV4ID0gaW5kZXhPZih0aGlzLmNvbm5lY3RpbmcsIHNvY2tldCk7XG4gIGlmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO1xuICBpZiAodGhpcy5jb25uZWN0aW5nLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHRoaXMuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAocGFja2V0LnF1ZXJ5ICYmIHBhY2tldC50eXBlID09PSAwKSBwYWNrZXQubnNwICs9ICc/JyArIHBhY2tldC5xdWVyeTtcblxuICBpZiAoIXNlbGYuZW5jb2RpbmcpIHtcbiAgICAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgdG8gZW5naW5lIHdpdGggcmVzdWx0XG4gICAgc2VsZi5lbmNvZGluZyA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2VsZi5lbmNvZGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5wcm9jZXNzUGFja2V0UXVldWUoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHsgLy8gYWRkIHBhY2tldCB0byB0aGUgcXVldWVcbiAgICBzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cbn07XG5cbi8qKlxuICogSWYgcGFja2V0IGJ1ZmZlciBpcyBub24tZW1wdHksIGJlZ2lucyBlbmNvZGluZyB0aGVcbiAqIG5leHQgcGFja2V0IGluIGxpbmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1BhY2tldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRCdWZmZXIubGVuZ3RoID4gMCAmJiAhdGhpcy5lbmNvZGluZykge1xuICAgIHZhciBwYWNrID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTtcbiAgICB0aGlzLnBhY2tldChwYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuXG4gIHZhciBzdWJzTGVuZ3RoID0gdGhpcy5zdWJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzLnNoaWZ0KCk7XG4gICAgc3ViLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG5cbiAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlID1cbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdkaXNjb25uZWN0Jyk7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGBvbmNsb3NlYCB3aWxsIG5vdCBmaXJlIGJlY2F1c2VcbiAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICBpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1Zygnb25jbG9zZScpO1xuXG4gIHRoaXMuY2xlYW51cCgpO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24pO1xuXG4gIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgZGVidWcoJ3JlY29ubmVjdCBmYWlsZWQnKTtcbiAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdF9mYWlsZWQnKTtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgIGRlYnVnKCd3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQnLCBkZWxheSk7XG5cbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfYXR0ZW1wdCcsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdGluZycsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG5cbiAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBzZWxmLm9wZW4oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBhdHRlbXB0IGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2Vycm9yJywgZXJyLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3Qgc3VjY2VzcycpO1xuICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVsYXkpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMudXBkYXRlU29ja2V0SWRzKCk7XG4gIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0JywgYXR0ZW1wdCk7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG52YXIgd2l0aE5hdGl2ZUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nO1xudmFyIHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc1ZpZXcgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5BcnJheUJ1ZmZlci5pc1ZpZXc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iai5idWZmZXIgaW5zdGFuY2VvZiBnbG9iYWwuQXJyYXlCdWZmZXI7IH07XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAgICAgICAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBnbG9iYWwuQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKTtcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXHJcbiAqIFBhcnNlcyBhbiBVUklcclxuICpcclxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcclxuXHJcbnZhciBwYXJ0cyA9IFtcclxuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xyXG5dO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcclxuICAgIHZhciBzcmMgPSBzdHIsXHJcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXHJcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXHJcbiAgICAgICAgdXJpID0ge30sXHJcbiAgICAgICAgaSA9IDE0O1xyXG5cclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcclxuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVyaTtcclxufTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgcmVxdWlyZSgnc29ja2V0LmlvLWNsaWVudCcpKCk7IiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbC5ob2lzdE5vblJlYWN0U3RhdGljcyA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIFxuICAgIHZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgICAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgICAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICAgICAgbWl4aW5zOiB0cnVlLFxuICAgICAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgICAgIHR5cGU6IHRydWVcbiAgICB9O1xuICAgIFxuICAgIHZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICBsZW5ndGg6IHRydWUsXG4gICAgICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICAgICAgY2FsbGVyOiB0cnVlLFxuICAgICAgICBjYWxsZWU6IHRydWUsXG4gICAgICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICAgICAgYXJpdHk6IHRydWVcbiAgICB9O1xuICAgIFxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIHZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgICB2YXIgb2JqZWN0UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoT2JqZWN0KTtcbiAgICBcbiAgICByZXR1cm4gZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHsgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7IC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfTtcbn0pKSk7XG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQge1xuICBSRUNFSVZFX1JPT01TX0xJU1QsXG4gIFJFQ0VJVkVfVVNFUlNfTElTVCxcbiAgTE9HSU5fUkVRVUVTVCxcbiAgTE9HSU5fRkFJTEVELFxuICBMT0dJTl9TVUNDRVNTLFxuICBsb2dpblxufSBmcm9tICcuLy4uL2FjdGlvbnMvaW5kZXgnO1xuXG5mdW5jdGlvbiB1c2VyKHN0YXRlID0ge1xuICAgIF9pZDogJzViMDQ1MjAzY2U1Y2Q1MTRmOGIxYWMxYicsXG4gICAgbmFtZTogJ1NhcmEnLFxuICAgIHBhc3N3b3JkOiAnMTIzNCcsXG4gICAgbGFzdERhdGVBY3RpdmU6ICc0NTYyMTM1OCdcbn0sIGFjdGlvbikge1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIExPR0lOX1NVQ0NFU1M6XG4gICAgICByZXR1cm4gey4uLmFjdGlvbi51c2VyfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVzZXJzTGlzdChzdGF0ZSA9IFt7bmFtZTogJ0pvbid9LCB7bmFtZTogJ0FuZHJldyd9XSwgYWN0aW9uKSB7XG4gIHN3aXRjaChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgUkVDRUlWRV9VU0VSU19MSVNUOlxuICAgICAgcmV0dXJuIGFjdGlvbi5saXN0O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcm9vbXMoc3RhdGUgPSBbXSwgYWN0aW9uKSB7XG4gIHN3aXRjaChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgUkVDRUlWRV9ST09NU19MSVNUOlxuICAgICAgY29uc29sZS5sb2coYWN0aW9uLmxpc3QpXG4gICAgICByZXR1cm4gYWN0aW9uLmxpc3Q7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0xvZ2dlZEluKHN0YXRlID0gdHJ1ZSwgYWN0aW9uKSB7XG4gIHN3aXRjaChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgTE9HSU5fU1VDQ0VTUzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNMb2dnaW5nSW4oc3RhdGUgPSBmYWxzZSwgYWN0aW9uKSB7XG4gIHN3aXRjaChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgTE9HSU5fUkVRVUVTVDpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgTE9HSU5fU1VDQ0VTUzpcbiAgICBjYXNlIExPR0lOX0ZBSUxFRDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIHVzZXIsXG4gIHVzZXJzTGlzdCxcbiAgcm9vbXMsXG4gIGlzTG9nZ2VkSW4sXG4gIGlzTG9nZ2luZ0luXG59KTsiLCJcbi8qKlxuICogRXhwb3NlIGBCYWNrb2ZmYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tvZmY7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxuICpcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXG4gKiAtIGBqaXR0ZXJgIFswXVxuICogLSBgZmFjdG9yYCBbMl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBCYWNrb2ZmKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XG4gIHRoaXMubWF4ID0gb3B0cy5tYXggfHwgMTAwMDA7XG4gIHRoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjtcbiAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBiYWNrb2ZmIGR1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbigpe1xuICB2YXIgbXMgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7XG4gIGlmICh0aGlzLmppdHRlcikge1xuICAgIHZhciByYW5kID0gIE1hdGgucmFuZG9tKCk7XG4gICAgdmFyIGRldmlhdGlvbiA9IE1hdGguZmxvb3IocmFuZCAqIHRoaXMuaml0dGVyICogbXMpO1xuICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcbiAgfVxuICByZXR1cm4gTWF0aC5taW4obXMsIHRoaXMubWF4KSB8IDA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1pbmltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1pbiA9IGZ1bmN0aW9uKG1pbil7XG4gIHRoaXMubXMgPSBtaW47XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4aW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWF4ID0gZnVuY3Rpb24obWF4KXtcbiAgdGhpcy5tYXggPSBtYXg7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaml0dGVyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbihqaXR0ZXIpe1xuICB0aGlzLmppdHRlciA9IGppdHRlcjtcbn07XG5cbiIsIm1vZHVsZS5leHBvcnRzID0gdG9BcnJheVxuXG5mdW5jdGlvbiB0b0FycmF5KGxpc3QsIGluZGV4KSB7XG4gICAgdmFyIGFycmF5ID0gW11cblxuICAgIGluZGV4ID0gaW5kZXggfHwgMFxuXG4gICAgZm9yICh2YXIgaSA9IGluZGV4IHx8IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2kgLSBpbmRleF0gPSBsaXN0W2ldXG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5XG59XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL3RyYW5zcG9ydCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIHllYXN0ID0gcmVxdWlyZSgneWVhc3QnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6d2Vic29ja2V0Jyk7XG52YXIgQnJvd3NlcldlYlNvY2tldCA9IGdsb2JhbC5XZWJTb2NrZXQgfHwgZ2xvYmFsLk1veldlYlNvY2tldDtcbnZhciBOb2RlV2ViU29ja2V0O1xuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRyeSB7XG4gICAgTm9kZVdlYlNvY2tldCA9IHJlcXVpcmUoJ3dzJyk7XG4gIH0gY2F0Y2ggKGUpIHsgfVxufVxuXG4vKipcbiAqIEdldCBlaXRoZXIgdGhlIGBXZWJTb2NrZXRgIG9yIGBNb3pXZWJTb2NrZXRgIGdsb2JhbHNcbiAqIGluIHRoZSBicm93c2VyIG9yIHRyeSB0byByZXNvbHZlIFdlYlNvY2tldC1jb21wYXRpYmxlXG4gKiBpbnRlcmZhY2UgZXhwb3NlZCBieSBgd3NgIGZvciBOb2RlLWxpa2UgZW52aXJvbm1lbnQuXG4gKi9cblxudmFyIFdlYlNvY2tldCA9IEJyb3dzZXJXZWJTb2NrZXQ7XG5pZiAoIVdlYlNvY2tldCAmJiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICBXZWJTb2NrZXQgPSBOb2RlV2ViU29ja2V0O1xufVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gV1M7XG5cbi8qKlxuICogV2ViU29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHtPYmplY3R9IGNvbm5lY3Rpb24gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBXUyAob3B0cykge1xuICB2YXIgZm9yY2VCYXNlNjQgPSAob3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0KTtcbiAgaWYgKGZvcmNlQmFzZTY0KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlO1xuICB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA9IEJyb3dzZXJXZWJTb2NrZXQgJiYgIW9wdHMuZm9yY2VOb2RlO1xuICB0aGlzLnByb3RvY29scyA9IG9wdHMucHJvdG9jb2xzO1xuICBpZiAoIXRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgV2ViU29ja2V0ID0gTm9kZVdlYlNvY2tldDtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFdTLCBUcmFuc3BvcnQpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBuYW1lLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLm5hbWUgPSAnd2Vic29ja2V0JztcblxuLypcbiAqIFdlYlNvY2tldHMgc3VwcG9ydCBiaW5hcnlcbiAqL1xuXG5XUy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuXG4vKipcbiAqIE9wZW5zIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuY2hlY2soKSkge1xuICAgIC8vIGxldCBwcm9iZSB0aW1lb3V0XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHVyaSA9IHRoaXMudXJpKCk7XG4gIHZhciBwcm90b2NvbHMgPSB0aGlzLnByb3RvY29scztcbiAgdmFyIG9wdHMgPSB7XG4gICAgYWdlbnQ6IHRoaXMuYWdlbnQsXG4gICAgcGVyTWVzc2FnZURlZmxhdGU6IHRoaXMucGVyTWVzc2FnZURlZmxhdGVcbiAgfTtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIGlmICh0aGlzLmV4dHJhSGVhZGVycykge1xuICAgIG9wdHMuaGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO1xuICB9XG4gIGlmICh0aGlzLmxvY2FsQWRkcmVzcykge1xuICAgIG9wdHMubG9jYWxBZGRyZXNzID0gdGhpcy5sb2NhbEFkZHJlc3M7XG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMud3MgPSB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA/IChwcm90b2NvbHMgPyBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzKSA6IG5ldyBXZWJTb2NrZXQodXJpKSkgOiBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzLCBvcHRzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG5cbiAgaWYgKHRoaXMud3MuYmluYXJ5VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMud3Muc3VwcG9ydHMgJiYgdGhpcy53cy5zdXBwb3J0cy5iaW5hcnkpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnbm9kZWJ1ZmZlcic7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgfVxuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbn07XG5cbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIHNvY2tldFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMud3Mub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25PcGVuKCk7XG4gIH07XG4gIHRoaXMud3Mub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgfTtcbiAgdGhpcy53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICBzZWxmLm9uRGF0YShldi5kYXRhKTtcbiAgfTtcbiAgdGhpcy53cy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3dlYnNvY2tldCBlcnJvcicsIGUpO1xuICB9O1xufTtcblxuLyoqXG4gKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgb2YgcGFja2V0cy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIC8vIGVuY29kZVBhY2tldCBlZmZpY2llbnQgYXMgaXQgdXNlcyBXUyBmcmFtaW5nXG4gIC8vIG5vIG5lZWQgZm9yIGVuY29kZVBheWxvYWRcbiAgdmFyIHRvdGFsID0gcGFja2V0cy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdG90YWw7IGkgPCBsOyBpKyspIHtcbiAgICAoZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgcGFyc2VyLmVuY29kZVBhY2tldChwYWNrZXQsIHNlbGYuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICghc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAvLyBhbHdheXMgY3JlYXRlIGEgbmV3IG9iamVjdCAoR0gtNDM3KVxuICAgICAgICAgIHZhciBvcHRzID0ge307XG4gICAgICAgICAgaWYgKHBhY2tldC5vcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gcGFja2V0Lm9wdGlvbnMuY29tcHJlc3M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSAnc3RyaW5nJyA9PT0gdHlwZW9mIGRhdGEgPyBnbG9iYWwuQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW4gPCBzZWxmLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZXRpbWVzIHRoZSB3ZWJzb2NrZXQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQgYnV0IHRoZSBicm93c2VyIGRpZG4ndFxuICAgICAgICAvLyBoYXZlIGEgY2hhbmNlIG9mIGluZm9ybWluZyB1cyBhYm91dCBpdCB5ZXQsIGluIHRoYXQgY2FzZSBzZW5kIHdpbGxcbiAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIC8vIFR5cGVFcnJvciBpcyB0aHJvd24gd2hlbiBwYXNzaW5nIHRoZSBzZWNvbmQgYXJndW1lbnQgb24gU2FmYXJpXG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhLCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1Zygnd2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLS10b3RhbCB8fCBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KShwYWNrZXRzW2ldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmUgKCkge1xuICAgIHNlbGYuZW1pdCgnZmx1c2gnKTtcblxuICAgIC8vIGZha2UgZHJhaW5cbiAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgICB9LCAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogQ2xvc2VzIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICd3c3MnIDogJ3dzJztcbiAgdmFyIHBvcnQgPSAnJztcblxuICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICBpZiAodGhpcy5wb3J0ICYmICgoJ3dzcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICgnd3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgaWYgKHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gIH1cblxuICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG5cbi8qKlxuICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoaXMgdHJhbnNwb3J0IGlzIGF2YWlsYWJsZS5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFXZWJTb2NrZXQgJiYgISgnX19pbml0aWFsaXplJyBpbiBXZWJTb2NrZXQgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSk7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpTT05QUG9sbGluZztcblxuLyoqXG4gKiBDYWNoZWQgcmVndWxhciBleHByZXNzaW9ucy5cbiAqL1xuXG52YXIgck5ld2xpbmUgPSAvXFxuL2c7XG52YXIgckVzY2FwZWROZXdsaW5lID0gL1xcXFxuL2c7XG5cbi8qKlxuICogR2xvYmFsIEpTT05QIGNhbGxiYWNrcy5cbiAqL1xuXG52YXIgY2FsbGJhY2tzO1xuXG4vKipcbiAqIE5vb3AuXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkgKCkgeyB9XG5cbi8qKlxuICogSlNPTlAgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gSlNPTlBQb2xsaW5nIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcblxuICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcblxuICAvLyBkZWZpbmUgZ2xvYmFsIGNhbGxiYWNrcyBhcnJheSBpZiBub3QgcHJlc2VudFxuICAvLyB3ZSBkbyB0aGlzIGhlcmUgKGxhemlseSkgdG8gYXZvaWQgdW5uZWVkZWQgZ2xvYmFsIHBvbGx1dGlvblxuICBpZiAoIWNhbGxiYWNrcykge1xuICAgIC8vIHdlIG5lZWQgdG8gY29uc2lkZXIgbXVsdGlwbGUgZW5naW5lcyBpbiB0aGUgc2FtZSBwYWdlXG4gICAgaWYgKCFnbG9iYWwuX19fZWlvKSBnbG9iYWwuX19fZWlvID0gW107XG4gICAgY2FsbGJhY2tzID0gZ2xvYmFsLl9fX2VpbztcbiAgfVxuXG4gIC8vIGNhbGxiYWNrIGlkZW50aWZpZXJcbiAgdGhpcy5pbmRleCA9IGNhbGxiYWNrcy5sZW5ndGg7XG5cbiAgLy8gYWRkIGNhbGxiYWNrIHRvIGpzb25wIGdsb2JhbFxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uIChtc2cpIHtcbiAgICBzZWxmLm9uRGF0YShtc2cpO1xuICB9KTtcblxuICAvLyBhcHBlbmQgdG8gcXVlcnkgc3RyaW5nXG4gIHRoaXMucXVlcnkuaiA9IHRoaXMuaW5kZXg7XG5cbiAgLy8gcHJldmVudCBzcHVyaW91cyBlcnJvcnMgZnJvbSBiZWluZyBlbWl0dGVkIHdoZW4gdGhlIHdpbmRvdyBpcyB1bmxvYWRlZFxuICBpZiAoZ2xvYmFsLmRvY3VtZW50ICYmIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNjcmlwdCkgc2VsZi5zY3JpcHQub25lcnJvciA9IGVtcHR5O1xuICAgIH0sIGZhbHNlKTtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KEpTT05QUG9sbGluZywgUG9sbGluZyk7XG5cbi8qXG4gKiBKU09OUCBvbmx5IHN1cHBvcnRzIGJpbmFyeSBhcyBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuXG4vKipcbiAqIENsb3NlcyB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG5cbiAgaWYgKHRoaXMuZm9ybSkge1xuICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7XG4gICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICB0aGlzLmlmcmFtZSA9IG51bGw7XG4gIH1cblxuICBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO1xuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsIGVycm9yJywgZSk7XG4gIH07XG5cbiAgdmFyIGluc2VydEF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICBpZiAoaW5zZXJ0QXQpIHtcbiAgICBpbnNlcnRBdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGluc2VydEF0KTtcbiAgfSBlbHNlIHtcbiAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9XG4gIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuXG4gIHZhciBpc1VBZ2Vja28gPSAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvZ2Vja28vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gIGlmIChpc1VBZ2Vja28pIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICB9LCAxMDApO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyB3aXRoIGEgaGlkZGVuIGlmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICB2YXIgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdmFyIGlkID0gdGhpcy5pZnJhbWVJZCA9ICdlaW9faWZyYW1lXycgKyB0aGlzLmluZGV4O1xuICAgIHZhciBpZnJhbWU7XG5cbiAgICBmb3JtLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7XG4gICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZm9ybS5zdHlsZS50b3AgPSAnLTEwMDBweCc7XG4gICAgZm9ybS5zdHlsZS5sZWZ0ID0gJy0xMDAwcHgnO1xuICAgIGZvcm0udGFyZ2V0ID0gaWQ7XG4gICAgZm9ybS5tZXRob2QgPSAnUE9TVCc7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjY2VwdC1jaGFyc2V0JywgJ3V0Zi04Jyk7XG4gICAgYXJlYS5uYW1lID0gJ2QnO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoYXJlYSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgdGhpcy5hcmVhID0gYXJlYTtcbiAgfVxuXG4gIHRoaXMuZm9ybS5hY3Rpb24gPSB0aGlzLnVyaSgpO1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlICgpIHtcbiAgICBpbml0SWZyYW1lKCk7XG4gICAgZm4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRJZnJhbWUgKCkge1xuICAgIGlmIChzZWxmLmlmcmFtZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yJywgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgICAgdmFyIGh0bWwgPSAnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiBuYW1lPVwiJyArIHNlbGYuaWZyYW1lSWQgKyAnXCI+JztcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaHRtbCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBpZnJhbWUubmFtZSA9IHNlbGYuaWZyYW1lSWQ7XG4gICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6MCc7XG4gICAgfVxuXG4gICAgaWZyYW1lLmlkID0gc2VsZi5pZnJhbWVJZDtcblxuICAgIHNlbGYuZm9ybS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIHNlbGYuaWZyYW1lID0gaWZyYW1lO1xuICB9XG5cbiAgaW5pdElmcmFtZSgpO1xuXG4gIC8vIGVzY2FwZSBcXG4gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGNvbnZlcnRlZCBpbnRvIFxcclxcbiBieSBzb21lIFVBc1xuICAvLyBkb3VibGUgZXNjYXBpbmcgaXMgcmVxdWlyZWQgZm9yIGVzY2FwZWQgbmV3IGxpbmVzIGJlY2F1c2UgdW5lc2NhcGluZyBvZiBuZXcgbGluZXMgY2FuIGJlIGRvbmUgc2FmZWx5IG9uIHNlcnZlci1zaWRlXG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UockVzY2FwZWROZXdsaW5lLCAnXFxcXFxcbicpO1xuICB0aGlzLmFyZWEudmFsdWUgPSBkYXRhLnJlcGxhY2Uock5ld2xpbmUsICdcXFxcbicpO1xuXG4gIHRyeSB7XG4gICAgdGhpcy5mb3JtLnN1Ym1pdCgpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIGlmICh0aGlzLmlmcmFtZS5hdHRhY2hFdmVudCkge1xuICAgIHRoaXMuaWZyYW1lLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZTtcbiAgfVxufTtcbiIsIi8qKlxuICogQ3JlYXRlIGEgYmxvYiBidWlsZGVyIGV2ZW4gd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcbiAqL1xuXG52YXIgQmxvYkJ1aWxkZXIgPSBnbG9iYWwuQmxvYkJ1aWxkZXJcbiAgfHwgZ2xvYmFsLldlYktpdEJsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5NU0Jsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5Nb3pCbG9iQnVpbGRlcjtcblxuLyoqXG4gKiBDaGVjayBpZiBCbG9iIGNvbnN0cnVjdG9yIGlzIHN1cHBvcnRlZFxuICovXG5cbnZhciBibG9iU3VwcG9ydGVkID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBhID0gbmV3IEJsb2IoWydoaSddKTtcbiAgICByZXR1cm4gYS5zaXplID09PSAyO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBzdXBwb3J0cyBBcnJheUJ1ZmZlclZpZXdzXG4gKiBGYWlscyBpbiBTYWZhcmkgNiwgc28gd2UgbmVlZCB0byBtYXAgdG8gQXJyYXlCdWZmZXJzIHRoZXJlLlxuICovXG5cbnZhciBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPSBibG9iU3VwcG9ydGVkICYmIChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYiA9IG5ldyBCbG9iKFtuZXcgVWludDhBcnJheShbMSwyXSldKTtcbiAgICByZXR1cm4gYi5zaXplID09PSAyO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYkJ1aWxkZXIgaXMgc3VwcG9ydGVkXG4gKi9cblxudmFyIGJsb2JCdWlsZGVyU3VwcG9ydGVkID0gQmxvYkJ1aWxkZXJcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmFwcGVuZFxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuZ2V0QmxvYjtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBtYXBzIEFycmF5QnVmZmVyVmlld3MgdG8gQXJyYXlCdWZmZXJzXG4gKiBVc2VkIGJ5IEJsb2JCdWlsZGVyIGNvbnN0cnVjdG9yIGFuZCBvbGQgYnJvd3NlcnMgdGhhdCBkaWRuJ3RcbiAqIHN1cHBvcnQgaXQgaW4gdGhlIEJsb2IgY29uc3RydWN0b3IuXG4gKi9cblxuZnVuY3Rpb24gbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2h1bmsgPSBhcnlbaV07XG4gICAgaWYgKGNodW5rLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgYnVmID0gY2h1bmsuYnVmZmVyO1xuXG4gICAgICAvLyBpZiB0aGlzIGlzIGEgc3ViYXJyYXksIG1ha2UgYSBjb3B5IHNvIHdlIG9ubHlcbiAgICAgIC8vIGluY2x1ZGUgdGhlIHN1YmFycmF5IHJlZ2lvbiBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlclxuICAgICAgaWYgKGNodW5rLmJ5dGVMZW5ndGggIT09IGJ1Zi5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIHZhciBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmsuYnl0ZUxlbmd0aCk7XG4gICAgICAgIGNvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZiwgY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCkpO1xuICAgICAgICBidWYgPSBjb3B5LmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgYXJ5W2ldID0gYnVmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBCbG9iQnVpbGRlckNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgYmIgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcbiAgbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgYmIuYXBwZW5kKGFyeVtpXSk7XG4gIH1cblxuICByZXR1cm4gKG9wdGlvbnMudHlwZSkgPyBiYi5nZXRCbG9iKG9wdGlvbnMudHlwZSkgOiBiYi5nZXRCbG9iKCk7XG59O1xuXG5mdW5jdGlvbiBCbG9iQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XG4gIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KTtcbiAgcmV0dXJuIG5ldyBCbG9iKGFyeSwgb3B0aW9ucyB8fCB7fSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgaWYgKGJsb2JTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID8gZ2xvYmFsLkJsb2IgOiBCbG9iQ29uc3RydWN0b3I7XG4gIH0gZWxzZSBpZiAoYmxvYkJ1aWxkZXJTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59KSgpO1xuIiwiLypcbiAqIGJhc2U2NC1hcnJheWJ1ZmZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uKCl7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBjaGFycyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuXG4gIC8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbiAgdmFyIGxvb2t1cCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xuICB9XG5cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbihhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSxcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyBcIj1cIjtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlNjQ7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LFxuICAgIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLFxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuXG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09IFwiPVwiKSB7XG4gICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcbiAgICAgIGVuY29kZWQxID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkpXTtcbiAgICAgIGVuY29kZWQyID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMSldO1xuICAgICAgZW5jb2RlZDMgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsyKV07XG4gICAgICBlbmNvZGVkNCA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzMpXTtcblxuICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQyICYgMTUpIDw8IDQpIHwgKGVuY29kZWQzID4+IDIpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlidWZmZXI7XG4gIH07XG59KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcclxuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3V0ZjhqcyB2Mi4xLjIgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlcyBgZXhwb3J0c2Bcblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cztcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYFxuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0bW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMgJiYgbW9kdWxlO1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgLCBmcm9tIE5vZGUuanMgb3IgQnJvd3NlcmlmaWVkIGNvZGUsXG5cdC8vIGFuZCB1c2UgaXQgYXMgYHJvb3RgXG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0dmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cblx0Ly8gVGFrZW4gZnJvbSBodHRwczovL210aHMuYmUvcHVueWNvZGVcblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0dmFyIGNvdW50ZXIgPSAwO1xuXHRcdHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHRcdHZhciB2YWx1ZTtcblx0XHR2YXIgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Ly8gVGFrZW4gZnJvbSBodHRwczovL210aHMuYmUvcHVueWNvZGVcblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIHZhbHVlO1xuXHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBhcnJheVtpbmRleF07XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHhEODAwICYmIGNvZGVQb2ludCA8PSAweERGRkYpIHtcblx0XHRcdGlmIChzdHJpY3QpIHtcblx0XHRcdFx0dGhyb3cgRXJyb3IoXG5cdFx0XHRcdFx0J0xvbmUgc3Vycm9nYXRlIFUrJyArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArXG5cdFx0XHRcdFx0JyBpcyBub3QgYSBzY2FsYXIgdmFsdWUnXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZUJ5dGUoY29kZVBvaW50LCBzaGlmdCkge1xuXHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gc2hpZnQpICYgMHgzRikgfCAweDgwKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRcdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRkY4MCkgPT0gMCkgeyAvLyAxLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcblx0XHR9XG5cdFx0dmFyIHN5bWJvbCA9ICcnO1xuXHRcdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRjgwMCkgPT0gMCkgeyAvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiA2KSAmIDB4MUYpIHwgMHhDMCk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRkYwMDAwKSA9PSAwKSB7IC8vIDMtYnl0ZSBzZXF1ZW5jZVxuXHRcdFx0aWYgKCFjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSkge1xuXHRcdFx0XHRjb2RlUG9pbnQgPSAweEZGRkQ7XG5cdFx0XHR9XG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTIpICYgMHgwRikgfCAweEUwKTtcblx0XHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgNik7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRTAwMDAwKSA9PSAwKSB7IC8vIDQtYnl0ZSBzZXF1ZW5jZVxuXHRcdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDE4KSAmIDB4MDcpIHwgMHhGMCk7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDEyKTtcblx0XHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgNik7XG5cdFx0fVxuXHRcdHN5bWJvbCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoKGNvZGVQb2ludCAmIDB4M0YpIHwgMHg4MCk7XG5cdFx0cmV0dXJuIHN5bWJvbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHV0ZjhlbmNvZGUoc3RyaW5nLCBvcHRzKSB7XG5cdFx0b3B0cyA9IG9wdHMgfHwge307XG5cdFx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRcdHZhciBjb2RlUG9pbnRzID0gdWNzMmRlY29kZShzdHJpbmcpO1xuXHRcdHZhciBsZW5ndGggPSBjb2RlUG9pbnRzLmxlbmd0aDtcblx0XHR2YXIgaW5kZXggPSAtMTtcblx0XHR2YXIgY29kZVBvaW50O1xuXHRcdHZhciBieXRlU3RyaW5nID0gJyc7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdGNvZGVQb2ludCA9IGNvZGVQb2ludHNbaW5kZXhdO1xuXHRcdFx0Ynl0ZVN0cmluZyArPSBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpO1xuXHRcdH1cblx0XHRyZXR1cm4gYnl0ZVN0cmluZztcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdGZ1bmN0aW9uIHJlYWRDb250aW51YXRpb25CeXRlKCkge1xuXHRcdGlmIChieXRlSW5kZXggPj0gYnl0ZUNvdW50KSB7XG5cdFx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBieXRlIGluZGV4Jyk7XG5cdFx0fVxuXG5cdFx0dmFyIGNvbnRpbnVhdGlvbkJ5dGUgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdFx0Ynl0ZUluZGV4Kys7XG5cblx0XHRpZiAoKGNvbnRpbnVhdGlvbkJ5dGUgJiAweEMwKSA9PSAweDgwKSB7XG5cdFx0XHRyZXR1cm4gY29udGludWF0aW9uQnl0ZSAmIDB4M0Y7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZW5kIHVwIGhlcmUsIGl04oCZcyBub3QgYSBjb250aW51YXRpb24gYnl0ZVxuXHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdH1cblxuXHRmdW5jdGlvbiBkZWNvZGVTeW1ib2woc3RyaWN0KSB7XG5cdFx0dmFyIGJ5dGUxO1xuXHRcdHZhciBieXRlMjtcblx0XHR2YXIgYnl0ZTM7XG5cdFx0dmFyIGJ5dGU0O1xuXHRcdHZhciBjb2RlUG9pbnQ7XG5cblx0XHRpZiAoYnl0ZUluZGV4ID4gYnl0ZUNvdW50KSB7XG5cdFx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBieXRlIGluZGV4Jyk7XG5cdFx0fVxuXG5cdFx0aWYgKGJ5dGVJbmRleCA9PSBieXRlQ291bnQpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBSZWFkIGZpcnN0IGJ5dGVcblx0XHRieXRlMSA9IGJ5dGVBcnJheVtieXRlSW5kZXhdICYgMHhGRjtcblx0XHRieXRlSW5kZXgrKztcblxuXHRcdC8vIDEtYnl0ZSBzZXF1ZW5jZSAobm8gY29udGludWF0aW9uIGJ5dGVzKVxuXHRcdGlmICgoYnl0ZTEgJiAweDgwKSA9PSAwKSB7XG5cdFx0XHRyZXR1cm4gYnl0ZTE7XG5cdFx0fVxuXG5cdFx0Ly8gMi1ieXRlIHNlcXVlbmNlXG5cdFx0aWYgKChieXRlMSAmIDB4RTApID09IDB4QzApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDFGKSA8PCA2KSB8IGJ5dGUyO1xuXHRcdFx0aWYgKGNvZGVQb2ludCA+PSAweDgwKSB7XG5cdFx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIDMtYnl0ZSBzZXF1ZW5jZSAobWF5IGluY2x1ZGUgdW5wYWlyZWQgc3Vycm9nYXRlcylcblx0XHRpZiAoKGJ5dGUxICYgMHhGMCkgPT0gMHhFMCkge1xuXHRcdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdFx0Ynl0ZTMgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MEYpIDw8IDEyKSB8IChieXRlMiA8PCA2KSB8IGJ5dGUzO1xuXHRcdFx0aWYgKGNvZGVQb2ludCA+PSAweDA4MDApIHtcblx0XHRcdFx0cmV0dXJuIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpID8gY29kZVBvaW50IDogMHhGRkZEO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRpZiAoKGJ5dGUxICYgMHhGOCkgPT0gMHhGMCkge1xuXHRcdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdFx0Ynl0ZTMgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdFx0Ynl0ZTQgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MDcpIDw8IDB4MTIpIHwgKGJ5dGUyIDw8IDB4MEMpIHxcblx0XHRcdFx0KGJ5dGUzIDw8IDB4MDYpIHwgYnl0ZTQ7XG5cdFx0XHRpZiAoY29kZVBvaW50ID49IDB4MDEwMDAwICYmIGNvZGVQb2ludCA8PSAweDEwRkZGRikge1xuXHRcdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRocm93IEVycm9yKCdJbnZhbGlkIFVURi04IGRldGVjdGVkJyk7XG5cdH1cblxuXHR2YXIgYnl0ZUFycmF5O1xuXHR2YXIgYnl0ZUNvdW50O1xuXHR2YXIgYnl0ZUluZGV4O1xuXHRmdW5jdGlvbiB1dGY4ZGVjb2RlKGJ5dGVTdHJpbmcsIG9wdHMpIHtcblx0XHRvcHRzID0gb3B0cyB8fCB7fTtcblx0XHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdFx0Ynl0ZUFycmF5ID0gdWNzMmRlY29kZShieXRlU3RyaW5nKTtcblx0XHRieXRlQ291bnQgPSBieXRlQXJyYXkubGVuZ3RoO1xuXHRcdGJ5dGVJbmRleCA9IDA7XG5cdFx0dmFyIGNvZGVQb2ludHMgPSBbXTtcblx0XHR2YXIgdG1wO1xuXHRcdHdoaWxlICgodG1wID0gZGVjb2RlU3ltYm9sKHN0cmljdCkpICE9PSBmYWxzZSkge1xuXHRcdFx0Y29kZVBvaW50cy5wdXNoKHRtcCk7XG5cdFx0fVxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKGNvZGVQb2ludHMpO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0dmFyIHV0ZjggPSB7XG5cdFx0J3ZlcnNpb24nOiAnMi4xLjInLFxuXHRcdCdlbmNvZGUnOiB1dGY4ZW5jb2RlLFxuXHRcdCdkZWNvZGUnOiB1dGY4ZGVjb2RlXG5cdH07XG5cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdXRmODtcblx0XHR9KTtcblx0fVx0ZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgIWZyZWVFeHBvcnRzLm5vZGVUeXBlKSB7XG5cdFx0aWYgKGZyZWVNb2R1bGUpIHsgLy8gaW4gTm9kZS5qcyBvciBSaW5nb0pTIHYwLjguMCtcblx0XHRcdGZyZWVNb2R1bGUuZXhwb3J0cyA9IHV0Zjg7XG5cdFx0fSBlbHNlIHsgLy8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdHZhciBvYmplY3QgPSB7fTtcblx0XHRcdHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdC5oYXNPd25Qcm9wZXJ0eTtcblx0XHRcdGZvciAodmFyIGtleSBpbiB1dGY4KSB7XG5cdFx0XHRcdGhhc093blByb3BlcnR5LmNhbGwodXRmOCwga2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHV0Zjhba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgeyAvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyXG5cdFx0cm9vdC51dGY4ID0gdXRmODtcblx0fVxuXG59KHRoaXMpKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gYWZ0ZXJcblxuZnVuY3Rpb24gYWZ0ZXIoY291bnQsIGNhbGxiYWNrLCBlcnJfY2IpIHtcbiAgICB2YXIgYmFpbCA9IGZhbHNlXG4gICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3BcbiAgICBwcm94eS5jb3VudCA9IGNvdW50XG5cbiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eVxuXG4gICAgZnVuY3Rpb24gcHJveHkoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWZ0ZXIgY2FsbGVkIHRvbyBtYW55IHRpbWVzJylcbiAgICAgICAgfVxuICAgICAgICAtLXByb3h5LmNvdW50XG5cbiAgICAgICAgLy8gYWZ0ZXIgZmlyc3QgZXJyb3IsIHJlc3QgYXJlIHBhc3NlZCB0byBlcnJfY2JcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgYmFpbCA9IHRydWVcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGVycl9jYlxuICAgICAgICB9IGVsc2UgaWYgKHByb3h5LmNvdW50ID09PSAwICYmICFiYWlsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIiwiLyoqXG4gKiBBbiBhYnN0cmFjdGlvbiBmb3Igc2xpY2luZyBhbiBhcnJheWJ1ZmZlciBldmVuIHdoZW5cbiAqIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSBpcyBub3Qgc3VwcG9ydGVkXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGFycmF5YnVmZmVyLmJ5dGVMZW5ndGg7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgZW5kID0gZW5kIHx8IGJ5dGVzO1xuXG4gIGlmIChhcnJheWJ1ZmZlci5zbGljZSkgeyByZXR1cm4gYXJyYXlidWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7IH1cblxuICBpZiAoc3RhcnQgPCAwKSB7IHN0YXJ0ICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPCAwKSB7IGVuZCArPSBieXRlczsgfVxuICBpZiAoZW5kID4gYnl0ZXMpIHsgZW5kID0gYnl0ZXM7IH1cblxuICBpZiAoc3RhcnQgPj0gYnl0ZXMgfHwgc3RhcnQgPj0gZW5kIHx8IGJ5dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgfVxuXG4gIHZhciBhYnYgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG4gIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShlbmQgLSBzdGFydCk7XG4gIGZvciAodmFyIGkgPSBzdGFydCwgaWkgPSAwOyBpIDwgZW5kOyBpKyssIGlpKyspIHtcbiAgICByZXN1bHRbaWldID0gYWJ2W2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQuYnVmZmVyO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIlxuLyoqXG4gKiBHZXRzIHRoZSBrZXlzIGZvciBhbiBvYmplY3QuXG4gKlxuICogQHJldHVybiB7QXJyYXl9IGtleXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyAob2JqKXtcbiAgdmFyIGFyciA9IFtdO1xuICB2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGkpKSB7XG4gICAgICBhcnIucHVzaChpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycjtcbn07XG4iLCIvKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nLXhocicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gWEhSO1xubW9kdWxlLmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogRW1wdHkgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7fVxuXG4vKipcbiAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFhIUiAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIGlmIChnbG9iYWwubG9jYXRpb24pIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgdGhpcy54ZCA9IG9wdHMuaG9zdG5hbWUgIT09IGdsb2JhbC5sb2NhdGlvbi5ob3N0bmFtZSB8fFxuICAgICAgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHRoaXMueHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxuaW5oZXJpdChYSFIsIFBvbGxpbmcpO1xuXG4vKipcbiAqIFhIUiBzdXBwb3J0cyBiaW5hcnlcbiAqL1xuXG5YSFIucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgb3B0cy51cmkgPSB0aGlzLnVyaSgpO1xuICBvcHRzLnhkID0gdGhpcy54ZDtcbiAgb3B0cy54cyA9IHRoaXMueHM7XG4gIG9wdHMuYWdlbnQgPSB0aGlzLmFnZW50IHx8IGZhbHNlO1xuICBvcHRzLnN1cHBvcnRzQmluYXJ5ID0gdGhpcy5zdXBwb3J0c0JpbmFyeTtcbiAgb3B0cy5lbmFibGVzWERSID0gdGhpcy5lbmFibGVzWERSO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgb3B0cy5yZXF1ZXN0VGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5leHRyYUhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVycztcblxuICByZXR1cm4gbmV3IFJlcXVlc3Qob3B0cyk7XG59O1xuXG4vKipcbiAqIFNlbmRzIGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1dyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGZuKSB7XG4gIHZhciBpc0JpbmFyeSA9IHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJyAmJiBkYXRhICE9PSB1bmRlZmluZWQ7XG4gIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6ICdQT1NUJywgZGF0YTogZGF0YSwgaXNCaW5hcnk6IGlzQmluYXJ5IH0pO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJlcS5vbignc3VjY2VzcycsIGZuKTtcbiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb3N0IGVycm9yJywgZXJyKTtcbiAgfSk7XG4gIHRoaXMuc2VuZFhociA9IHJlcTtcbn07XG5cbi8qKlxuICogU3RhcnRzIGEgcG9sbCBjeWNsZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLmRvUG9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3hociBwb2xsJyk7XG4gIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYub25EYXRhKGRhdGEpO1xuICB9KTtcbiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb2xsIGVycm9yJywgZXJyKTtcbiAgfSk7XG4gIHRoaXMucG9sbFhociA9IHJlcTtcbn07XG5cbi8qKlxuICogUmVxdWVzdCBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlcXVlc3QgKG9wdHMpIHtcbiAgdGhpcy5tZXRob2QgPSBvcHRzLm1ldGhvZCB8fCAnR0VUJztcbiAgdGhpcy51cmkgPSBvcHRzLnVyaTtcbiAgdGhpcy54ZCA9ICEhb3B0cy54ZDtcbiAgdGhpcy54cyA9ICEhb3B0cy54cztcbiAgdGhpcy5hc3luYyA9IGZhbHNlICE9PSBvcHRzLmFzeW5jO1xuICB0aGlzLmRhdGEgPSB1bmRlZmluZWQgIT09IG9wdHMuZGF0YSA/IG9wdHMuZGF0YSA6IG51bGw7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50O1xuICB0aGlzLmlzQmluYXJ5ID0gb3B0cy5pc0JpbmFyeTtcbiAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IG9wdHMuc3VwcG9ydHNCaW5hcnk7XG4gIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IG9wdHMucmVxdWVzdFRpbWVvdXQ7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG5cbiAgdGhpcy5jcmVhdGUoKTtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoUmVxdWVzdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIFhIUiBvYmplY3QgYW5kIHNlbmRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9wdHMgPSB7IGFnZW50OiB0aGlzLmFnZW50LCB4ZG9tYWluOiB0aGlzLnhkLCB4c2NoZW1lOiB0aGlzLnhzLCBlbmFibGVzWERSOiB0aGlzLmVuYWJsZXNYRFIgfTtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG5cbiAgdmFyIHhociA9IHRoaXMueGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KG9wdHMpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdHJ5IHtcbiAgICBkZWJ1ZygneGhyIG9wZW4gJXM6ICVzJywgdGhpcy5tZXRob2QsIHRoaXMudXJpKTtcbiAgICB4aHIub3Blbih0aGlzLm1ldGhvZCwgdGhpcy51cmksIHRoaXMuYXN5bmMpO1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayAmJiB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrKHRydWUpO1xuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihpLCB0aGlzLmV4dHJhSGVhZGVyc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIGlmICgnUE9TVCcgPT09IHRoaXMubWV0aG9kKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodGhpcy5pc0JpbmFyeSkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICcqLyonKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgLy8gaWU2IGNoZWNrXG4gICAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVxdWVzdFRpbWVvdXQpIHtcbiAgICAgIHhoci50aW1lb3V0ID0gdGhpcy5yZXF1ZXN0VGltZW91dDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5vbkxvYWQoKTtcbiAgICAgIH07XG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSAyKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjb250ZW50VHlwZSA9IHhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgICAgICAgICBpZiAoc2VsZi5zdXBwb3J0c0JpbmFyeSAmJiBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpIHtcbiAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgICBpZiAoNCAhPT0geGhyLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgaWYgKDIwMCA9PT0geGhyLnN0YXR1cyB8fCAxMjIzID09PSB4aHIuc3RhdHVzKSB7XG4gICAgICAgICAgc2VsZi5vbkxvYWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGBlcnJvcmAgZXZlbnQgaGFuZGxlciB0aGF0J3MgdXNlci1zZXRcbiAgICAgICAgICAvLyBkb2VzIG5vdCB0aHJvdyBpbiB0aGUgc2FtZSB0aWNrIGFuZCBnZXRzIGNhdWdodCBoZXJlXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9uRXJyb3IoeGhyLnN0YXR1cyk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgZGVidWcoJ3hociBkYXRhICVzJywgdGhpcy5kYXRhKTtcbiAgICB4aHIuc2VuZCh0aGlzLmRhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gTmVlZCB0byBkZWZlciBzaW5jZSAuY3JlYXRlKCkgaXMgY2FsbGVkIGRpcmVjdGx5IGZocm9tIHRoZSBjb25zdHJ1Y3RvclxuICAgIC8vIGFuZCB0aHVzIHRoZSAnZXJyb3InIGV2ZW50IGNhbiBvbmx5IGJlIG9ubHkgYm91bmQgKmFmdGVyKiB0aGlzIGV4Y2VwdGlvblxuICAgIC8vIG9jY3Vycy4gIFRoZXJlZm9yZSwgYWxzbywgd2UgY2Fubm90IHRocm93IGhlcmUgYXQgYWxsLlxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5vbkVycm9yKGUpO1xuICAgIH0sIDApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICB0aGlzLmluZGV4ID0gUmVxdWVzdC5yZXF1ZXN0c0NvdW50Kys7XG4gICAgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XSA9IHRoaXM7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZXNwb25zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vblN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnc3VjY2VzcycpO1xuICB0aGlzLmNsZWFudXAoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIGlmIHdlIGhhdmUgZGF0YS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKTtcbiAgdGhpcy5vblN1Y2Nlc3MoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHRoaXMuY2xlYW51cCh0cnVlKTtcbn07XG5cbi8qKlxuICogQ2xlYW5zIHVwIGhvdXNlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoZnJvbUVycm9yKSB7XG4gIGlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRoaXMueGhyIHx8IG51bGwgPT09IHRoaXMueGhyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHhtbGh0dHByZXF1ZXN0XG4gIGlmICh0aGlzLmhhc1hEUigpKSB7XG4gICAgdGhpcy54aHIub25sb2FkID0gdGhpcy54aHIub25lcnJvciA9IGVtcHR5O1xuICB9IGVsc2Uge1xuICAgIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGVtcHR5O1xuICB9XG5cbiAgaWYgKGZyb21FcnJvcikge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnhoci5hYm9ydCgpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cblxuICBpZiAoZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgZGVsZXRlIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF07XG4gIH1cblxuICB0aGlzLnhociA9IG51bGw7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGxvYWQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25Mb2FkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZGF0YTtcbiAgdHJ5IHtcbiAgICB2YXIgY29udGVudFR5cGU7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnRlbnRUeXBlID0gdGhpcy54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgaWYgKGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJykge1xuICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlIHx8IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLm9uRXJyb3IoZSk7XG4gIH1cbiAgaWYgKG51bGwgIT0gZGF0YSkge1xuICAgIHRoaXMub25EYXRhKGRhdGEpO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGl0IGhhcyBYRG9tYWluUmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5oYXNYRFIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGdsb2JhbC5YRG9tYWluUmVxdWVzdCAmJiAhdGhpcy54cyAmJiB0aGlzLmVuYWJsZXNYRFI7XG59O1xuXG4vKipcbiAqIEFib3J0cyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNsZWFudXAoKTtcbn07XG5cbi8qKlxuICogQWJvcnRzIHBlbmRpbmcgcmVxdWVzdHMgd2hlbiB1bmxvYWRpbmcgdGhlIHdpbmRvdy4gVGhpcyBpcyBuZWVkZWQgdG8gcHJldmVudFxuICogbWVtb3J5IGxlYWtzIChlLmcuIHdoZW4gdXNpbmcgSUUpIGFuZCB0byBlbnN1cmUgdGhhdCBubyBzcHVyaW91cyBlcnJvciBpc1xuICogZW1pdHRlZC5cbiAqL1xuXG5SZXF1ZXN0LnJlcXVlc3RzQ291bnQgPSAwO1xuUmVxdWVzdC5yZXF1ZXN0cyA9IHt9O1xuXG5pZiAoZ2xvYmFsLmRvY3VtZW50KSB7XG4gIGlmIChnbG9iYWwuYXR0YWNoRXZlbnQpIHtcbiAgICBnbG9iYWwuYXR0YWNoRXZlbnQoJ29udW5sb2FkJywgdW5sb2FkSGFuZGxlcik7XG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdW5sb2FkSGFuZGxlciwgZmFsc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVubG9hZEhhbmRsZXIgKCkge1xuICBmb3IgKHZhciBpIGluIFJlcXVlc3QucmVxdWVzdHMpIHtcbiAgICBpZiAoUmVxdWVzdC5yZXF1ZXN0cy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgUmVxdWVzdC5yZXF1ZXN0c1tpXS5hYm9ydCgpO1xuICAgIH1cbiAgfVxufVxuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICpcbiAqIExvZ2ljIGJvcnJvd2VkIGZyb20gTW9kZXJuaXpyOlxuICpcbiAqICAgLSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29ycy5qc1xuICovXG5cbnRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufSBjYXRjaCAoZXJyKSB7XG4gIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3dcbiAgLy8gd2hlbiB0cnlpbmcgdG8gY3JlYXRlXG4gIG1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG59XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHRyYW5zcG9ydHMgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvaW5kZXgnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6c29ja2V0Jyk7XG52YXIgaW5kZXggPSByZXF1aXJlKCdpbmRleG9mJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHVyaSBvciBvcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKHVyaSwgb3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ja2V0KSkgcmV0dXJuIG5ldyBTb2NrZXQodXJpLCBvcHRzKTtcblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICBpZiAodXJpICYmICdvYmplY3QnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSBudWxsO1xuICB9XG5cbiAgaWYgKHVyaSkge1xuICAgIHVyaSA9IHBhcnNldXJpKHVyaSk7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHVyaS5ob3N0O1xuICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSAnaHR0cHMnIHx8IHVyaS5wcm90b2NvbCA9PT0gJ3dzcyc7XG4gICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7XG4gICAgaWYgKHVyaS5xdWVyeSkgb3B0cy5xdWVyeSA9IHVyaS5xdWVyeTtcbiAgfSBlbHNlIGlmIChvcHRzLmhvc3QpIHtcbiAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0O1xuICB9XG5cbiAgdGhpcy5zZWN1cmUgPSBudWxsICE9IG9wdHMuc2VjdXJlID8gb3B0cy5zZWN1cmVcbiAgICA6IChnbG9iYWwubG9jYXRpb24gJiYgJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sKTtcblxuICBpZiAob3B0cy5ob3N0bmFtZSAmJiAhb3B0cy5wb3J0KSB7XG4gICAgLy8gaWYgbm8gcG9ydCBpcyBzcGVjaWZpZWQgbWFudWFsbHksIHVzZSB0aGUgcHJvdG9jb2wgZGVmYXVsdFxuICAgIG9wdHMucG9ydCA9IHRoaXMuc2VjdXJlID8gJzQ0MycgOiAnODAnO1xuICB9XG5cbiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQgfHwgZmFsc2U7XG4gIHRoaXMuaG9zdG5hbWUgPSBvcHRzLmhvc3RuYW1lIHx8XG4gICAgKGdsb2JhbC5sb2NhdGlvbiA/IGxvY2F0aW9uLmhvc3RuYW1lIDogJ2xvY2FsaG9zdCcpO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQgfHwgKGdsb2JhbC5sb2NhdGlvbiAmJiBsb2NhdGlvbi5wb3J0XG4gICAgICA/IGxvY2F0aW9uLnBvcnRcbiAgICAgIDogKHRoaXMuc2VjdXJlID8gNDQzIDogODApKTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnkgfHwge307XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHRoaXMucXVlcnkpIHRoaXMucXVlcnkgPSBwYXJzZXFzLmRlY29kZSh0aGlzLnF1ZXJ5KTtcbiAgdGhpcy51cGdyYWRlID0gZmFsc2UgIT09IG9wdHMudXBncmFkZTtcbiAgdGhpcy5wYXRoID0gKG9wdHMucGF0aCB8fCAnL2VuZ2luZS5pbycpLnJlcGxhY2UoL1xcLyQvLCAnJykgKyAnLyc7XG4gIHRoaXMuZm9yY2VKU09OUCA9ICEhb3B0cy5mb3JjZUpTT05QO1xuICB0aGlzLmpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG4gIHRoaXMuZm9yY2VCYXNlNjQgPSAhIW9wdHMuZm9yY2VCYXNlNjQ7XG4gIHRoaXMuZW5hYmxlc1hEUiA9ICEhb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbSB8fCAndCc7XG4gIHRoaXMudGltZXN0YW1wUmVxdWVzdHMgPSBvcHRzLnRpbWVzdGFtcFJlcXVlc3RzO1xuICB0aGlzLnRyYW5zcG9ydHMgPSBvcHRzLnRyYW5zcG9ydHMgfHwgWydwb2xsaW5nJywgJ3dlYnNvY2tldCddO1xuICB0aGlzLnRyYW5zcG9ydE9wdGlvbnMgPSBvcHRzLnRyYW5zcG9ydE9wdGlvbnMgfHwge307XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICcnO1xuICB0aGlzLndyaXRlQnVmZmVyID0gW107XG4gIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG4gIHRoaXMucG9saWN5UG9ydCA9IG9wdHMucG9saWN5UG9ydCB8fCA4NDM7XG4gIHRoaXMucmVtZW1iZXJVcGdyYWRlID0gb3B0cy5yZW1lbWJlclVwZ3JhZGUgfHwgZmFsc2U7XG4gIHRoaXMuYmluYXJ5VHlwZSA9IG51bGw7XG4gIHRoaXMub25seUJpbmFyeVVwZ3JhZGVzID0gb3B0cy5vbmx5QmluYXJ5VXBncmFkZXM7XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBmYWxzZSAhPT0gb3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSA/IChvcHRzLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHt9KSA6IGZhbHNlO1xuXG4gIGlmICh0cnVlID09PSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlKSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0ge307XG4gIGlmICh0aGlzLnBlck1lc3NhZ2VEZWZsYXRlICYmIG51bGwgPT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQpIHtcbiAgICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCA9IDEwMjQ7XG4gIH1cblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5wZnggPSBvcHRzLnBmeCB8fCBudWxsO1xuICB0aGlzLmtleSA9IG9wdHMua2V5IHx8IG51bGw7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZSB8fCBudWxsO1xuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQgfHwgbnVsbDtcbiAgdGhpcy5jYSA9IG9wdHMuY2EgfHwgbnVsbDtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzIHx8IG51bGw7XG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgdGhpcy5mb3JjZU5vZGUgPSAhIW9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuICBpZiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwpIHtcbiAgICBpZiAob3B0cy5leHRyYUhlYWRlcnMgJiYgT2JqZWN0LmtleXMob3B0cy5leHRyYUhlYWRlcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubG9jYWxBZGRyZXNzKSB7XG4gICAgICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBvbiBoYW5kc2hha2VcbiAgdGhpcy5pZCA9IG51bGw7XG4gIHRoaXMudXBncmFkZXMgPSBudWxsO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXQgPSBudWxsO1xuXG4gIC8vIHNldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5waW5nSW50ZXJ2YWxUaW1lciA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IG51bGw7XG5cbiAgdGhpcy5vcGVuKCk7XG59XG5cblNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDsgLy8gdGhpcyBpcyBhbiBpbnRcblxuLyoqXG4gKiBFeHBvc2UgZGVwcyBmb3IgbGVnYWN5IGNvbXBhdGliaWxpdHlcbiAqIGFuZCBzdGFuZGFsb25lIGJyb3dzZXIgYWNjZXNzLlxuICovXG5cblNvY2tldC5Tb2NrZXQgPSBTb2NrZXQ7XG5Tb2NrZXQuVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQnKTtcblNvY2tldC50cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG5Tb2NrZXQucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgdHJhbnNwb3J0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQHJldHVybiB7VHJhbnNwb3J0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jcmVhdGVUcmFuc3BvcnQgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygnY3JlYXRpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO1xuICB2YXIgcXVlcnkgPSBjbG9uZSh0aGlzLnF1ZXJ5KTtcblxuICAvLyBhcHBlbmQgZW5naW5lLmlvIHByb3RvY29sIGlkZW50aWZpZXJcbiAgcXVlcnkuRUlPID0gcGFyc2VyLnByb3RvY29sO1xuXG4gIC8vIHRyYW5zcG9ydCBuYW1lXG4gIHF1ZXJ5LnRyYW5zcG9ydCA9IG5hbWU7XG5cbiAgLy8gcGVyLXRyYW5zcG9ydCBvcHRpb25zXG4gIHZhciBvcHRpb25zID0gdGhpcy50cmFuc3BvcnRPcHRpb25zW25hbWVdIHx8IHt9O1xuXG4gIC8vIHNlc3Npb24gaWQgaWYgd2UgYWxyZWFkeSBoYXZlIG9uZVxuICBpZiAodGhpcy5pZCkgcXVlcnkuc2lkID0gdGhpcy5pZDtcblxuICB2YXIgdHJhbnNwb3J0ID0gbmV3IHRyYW5zcG9ydHNbbmFtZV0oe1xuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBzb2NrZXQ6IHRoaXMsXG4gICAgYWdlbnQ6IG9wdGlvbnMuYWdlbnQgfHwgdGhpcy5hZ2VudCxcbiAgICBob3N0bmFtZTogb3B0aW9ucy5ob3N0bmFtZSB8fCB0aGlzLmhvc3RuYW1lLFxuICAgIHBvcnQ6IG9wdGlvbnMucG9ydCB8fCB0aGlzLnBvcnQsXG4gICAgc2VjdXJlOiBvcHRpb25zLnNlY3VyZSB8fCB0aGlzLnNlY3VyZSxcbiAgICBwYXRoOiBvcHRpb25zLnBhdGggfHwgdGhpcy5wYXRoLFxuICAgIGZvcmNlSlNPTlA6IG9wdGlvbnMuZm9yY2VKU09OUCB8fCB0aGlzLmZvcmNlSlNPTlAsXG4gICAganNvbnA6IG9wdGlvbnMuanNvbnAgfHwgdGhpcy5qc29ucCxcbiAgICBmb3JjZUJhc2U2NDogb3B0aW9ucy5mb3JjZUJhc2U2NCB8fCB0aGlzLmZvcmNlQmFzZTY0LFxuICAgIGVuYWJsZXNYRFI6IG9wdGlvbnMuZW5hYmxlc1hEUiB8fCB0aGlzLmVuYWJsZXNYRFIsXG4gICAgdGltZXN0YW1wUmVxdWVzdHM6IG9wdGlvbnMudGltZXN0YW1wUmVxdWVzdHMgfHwgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyxcbiAgICB0aW1lc3RhbXBQYXJhbTogb3B0aW9ucy50aW1lc3RhbXBQYXJhbSB8fCB0aGlzLnRpbWVzdGFtcFBhcmFtLFxuICAgIHBvbGljeVBvcnQ6IG9wdGlvbnMucG9saWN5UG9ydCB8fCB0aGlzLnBvbGljeVBvcnQsXG4gICAgcGZ4OiBvcHRpb25zLnBmeCB8fCB0aGlzLnBmeCxcbiAgICBrZXk6IG9wdGlvbnMua2V5IHx8IHRoaXMua2V5LFxuICAgIHBhc3NwaHJhc2U6IG9wdGlvbnMucGFzc3BocmFzZSB8fCB0aGlzLnBhc3NwaHJhc2UsXG4gICAgY2VydDogb3B0aW9ucy5jZXJ0IHx8IHRoaXMuY2VydCxcbiAgICBjYTogb3B0aW9ucy5jYSB8fCB0aGlzLmNhLFxuICAgIGNpcGhlcnM6IG9wdGlvbnMuY2lwaGVycyB8fCB0aGlzLmNpcGhlcnMsXG4gICAgcmVqZWN0VW5hdXRob3JpemVkOiBvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCB8fCB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogb3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLFxuICAgIGV4dHJhSGVhZGVyczogb3B0aW9ucy5leHRyYUhlYWRlcnMgfHwgdGhpcy5leHRyYUhlYWRlcnMsXG4gICAgZm9yY2VOb2RlOiBvcHRpb25zLmZvcmNlTm9kZSB8fCB0aGlzLmZvcmNlTm9kZSxcbiAgICBsb2NhbEFkZHJlc3M6IG9wdGlvbnMubG9jYWxBZGRyZXNzIHx8IHRoaXMubG9jYWxBZGRyZXNzLFxuICAgIHJlcXVlc3RUaW1lb3V0OiBvcHRpb25zLnJlcXVlc3RUaW1lb3V0IHx8IHRoaXMucmVxdWVzdFRpbWVvdXQsXG4gICAgcHJvdG9jb2xzOiBvcHRpb25zLnByb3RvY29scyB8fCB2b2lkICgwKVxuICB9KTtcblxuICByZXR1cm4gdHJhbnNwb3J0O1xufTtcblxuZnVuY3Rpb24gY2xvbmUgKG9iaikge1xuICB2YXIgbyA9IHt9O1xuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIG9baV0gPSBvYmpbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIHRyYW5zcG9ydCB0byB1c2UgYW5kIHN0YXJ0cyBwcm9iZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuU29ja2V0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdHJhbnNwb3J0O1xuICBpZiAodGhpcy5yZW1lbWJlclVwZ3JhZGUgJiYgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyAmJiB0aGlzLnRyYW5zcG9ydHMuaW5kZXhPZignd2Vic29ja2V0JykgIT09IC0xKSB7XG4gICAgdHJhbnNwb3J0ID0gJ3dlYnNvY2tldCc7XG4gIH0gZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgIC8vIEVtaXQgZXJyb3Igb24gbmV4dCB0aWNrIHNvIGl0IGNhbiBiZSBsaXN0ZW5lZCB0b1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCAnTm8gdHJhbnNwb3J0cyBhdmFpbGFibGUnKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy50cmFuc3BvcnRzWzBdO1xuICB9XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcblxuICAvLyBSZXRyeSB3aXRoIHRoZSBuZXh0IHRyYW5zcG9ydCBpZiB0aGUgdHJhbnNwb3J0IGlzIGRpc2FibGVkIChqc29ucDogZmFsc2UpXG4gIHRyeSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpO1xuICAgIHRoaXMub3BlbigpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG4gIHRoaXMuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0LiBEaXNhYmxlcyB0aGUgZXhpc3Rpbmcgb25lIChpZiBhbnkpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2V0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICBkZWJ1Zygnc2V0dGluZyB0cmFuc3BvcnQgJXMnLCB0cmFuc3BvcnQubmFtZSk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICBkZWJ1ZygnY2xlYXJpbmcgZXhpc3RpbmcgdHJhbnNwb3J0ICVzJywgdGhpcy50cmFuc3BvcnQubmFtZSk7XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIH1cblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0XG4gIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuXG4gIC8vIHNldCB1cCB0cmFuc3BvcnQgbGlzdGVuZXJzXG4gIHRyYW5zcG9ydFxuICAub24oJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25EcmFpbigpO1xuICB9KVxuICAub24oJ3BhY2tldCcsIGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH0pXG4gIC5vbignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcihlKTtcbiAgfSlcbiAgLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoJ3RyYW5zcG9ydCBjbG9zZScpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUHJvYmVzIGEgdHJhbnNwb3J0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5wcm9iZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlYnVnKCdwcm9iaW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KG5hbWUsIHsgcHJvYmU6IDEgfSk7XG4gIHZhciBmYWlsZWQgPSBmYWxzZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydE9wZW4gKCkge1xuICAgIGlmIChzZWxmLm9ubHlCaW5hcnlVcGdyYWRlcykge1xuICAgICAgdmFyIHVwZ3JhZGVMb3Nlc0JpbmFyeSA9ICF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmIHNlbGYudHJhbnNwb3J0LnN1cHBvcnRzQmluYXJ5O1xuICAgICAgZmFpbGVkID0gZmFpbGVkIHx8IHVwZ3JhZGVMb3Nlc0JpbmFyeTtcbiAgICB9XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgb3BlbmVkJywgbmFtZSk7XG4gICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3BpbmcnLCBkYXRhOiAncHJvYmUnIH1dKTtcbiAgICB0cmFuc3BvcnQub25jZSgncGFja2V0JywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuICAgICAgaWYgKCdwb25nJyA9PT0gbXNnLnR5cGUgJiYgJ3Byb2JlJyA9PT0gbXNnLmRhdGEpIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgcG9uZycsIG5hbWUpO1xuICAgICAgICBzZWxmLnVwZ3JhZGluZyA9IHRydWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkaW5nJywgdHJhbnNwb3J0KTtcbiAgICAgICAgaWYgKCF0cmFuc3BvcnQpIHJldHVybjtcbiAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0cmFuc3BvcnQubmFtZTtcblxuICAgICAgICBkZWJ1ZygncGF1c2luZyBjdXJyZW50IHRyYW5zcG9ydCBcIiVzXCInLCBzZWxmLnRyYW5zcG9ydC5uYW1lKTtcbiAgICAgICAgc2VsZi50cmFuc3BvcnQucGF1c2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICAgIGRlYnVnKCdjaGFuZ2luZyB0cmFuc3BvcnQgYW5kIHNlbmRpbmcgdXBncmFkZSBwYWNrZXQnKTtcblxuICAgICAgICAgIGNsZWFudXAoKTtcblxuICAgICAgICAgIHNlbGYuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3VwZ3JhZGUnIH1dKTtcbiAgICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGUnLCB0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgICAgc2VsZi51cGdyYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLmZsdXNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkJywgbmFtZSk7XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ3Byb2JlIGVycm9yJyk7XG4gICAgICAgIGVyci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcbiAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJlZXplVHJhbnNwb3J0ICgpIHtcbiAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cbiAgICAvLyBBbnkgY2FsbGJhY2sgY2FsbGVkIGJ5IHRyYW5zcG9ydCBzaG91bGQgYmUgaWdub3JlZCBzaW5jZSBub3dcbiAgICBmYWlsZWQgPSB0cnVlO1xuXG4gICAgY2xlYW51cCgpO1xuXG4gICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxuXG4gIC8vIEhhbmRsZSBhbnkgZXJyb3IgdGhhdCBoYXBwZW5zIHdoaWxlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25lcnJvciAoZXJyKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcjogJyArIGVycik7XG4gICAgZXJyb3IudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICBmcmVlemVUcmFuc3BvcnQoKTtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCBiZWNhdXNlIG9mIGVycm9yOiAlcycsIG5hbWUsIGVycik7XG5cbiAgICBzZWxmLmVtaXQoJ3VwZ3JhZGVFcnJvcicsIGVycm9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNwb3J0Q2xvc2UgKCkge1xuICAgIG9uZXJyb3IoJ3RyYW5zcG9ydCBjbG9zZWQnKTtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHNvY2tldCBpcyBjbG9zZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbmNsb3NlICgpIHtcbiAgICBvbmVycm9yKCdzb2NrZXQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgdXBncmFkZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbnVwZ3JhZGUgKHRvKSB7XG4gICAgaWYgKHRyYW5zcG9ydCAmJiB0by5uYW1lICE9PSB0cmFuc3BvcnQubmFtZSkge1xuICAgICAgZGVidWcoJ1wiJXNcIiB3b3JrcyAtIGFib3J0aW5nIFwiJXNcIicsIHRvLm5hbWUsIHRyYW5zcG9ydC5uYW1lKTtcbiAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIG9uIHRoZSB0cmFuc3BvcnQgYW5kIG9uIHNlbGZcbiAgZnVuY3Rpb24gY2xlYW51cCAoKSB7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcigndXBncmFkaW5nJywgb251cGdyYWRlKTtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vbmNlKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgdHJhbnNwb3J0Lm9uY2UoJ2Vycm9yJywgb25lcnJvcik7XG4gIHRyYW5zcG9ydC5vbmNlKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuXG4gIHRoaXMub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgdGhpcy5vbmNlKCd1cGdyYWRpbmcnLCBvbnVwZ3JhZGUpO1xuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIGNvbm5lY3Rpb24gaXMgZGVlbWVkIG9wZW4uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3NvY2tldCBvcGVuJyk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0aGlzLnRyYW5zcG9ydC5uYW1lO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbiAgdGhpcy5mbHVzaCgpO1xuXG4gIC8vIHdlIGNoZWNrIGZvciBgcmVhZHlTdGF0ZWAgaW4gY2FzZSBhbiBgb3BlbmBcbiAgLy8gbGlzdGVuZXIgYWxyZWFkeSBjbG9zZWQgdGhlIHNvY2tldFxuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy51cGdyYWRlICYmIHRoaXMudHJhbnNwb3J0LnBhdXNlKSB7XG4gICAgZGVidWcoJ3N0YXJ0aW5nIHVwZ3JhZGUgcHJvYmVzJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnVwZ3JhZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5wcm9iZSh0aGlzLnVwZ3JhZGVzW2ldKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSGFuZGxlcyBhIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCByZWNlaXZlOiB0eXBlIFwiJXNcIiwgZGF0YSBcIiVzXCInLCBwYWNrZXQudHlwZSwgcGFja2V0LmRhdGEpO1xuXG4gICAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xuXG4gICAgLy8gU29ja2V0IGlzIGxpdmUgLSBhbnkgcGFja2V0IGNvdW50c1xuICAgIHRoaXMuZW1pdCgnaGVhcnRiZWF0Jyk7XG5cbiAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICBjYXNlICdvcGVuJzpcbiAgICAgICAgdGhpcy5vbkhhbmRzaGFrZShKU09OLnBhcnNlKHBhY2tldC5kYXRhKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdwb25nJzpcbiAgICAgICAgdGhpcy5zZXRQaW5nKCk7XG4gICAgICAgIHRoaXMuZW1pdCgncG9uZycpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdzZXJ2ZXIgZXJyb3InKTtcbiAgICAgICAgZXJyLmNvZGUgPSBwYWNrZXQuZGF0YTtcbiAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgdGhpcy5lbWl0KCdkYXRhJywgcGFja2V0LmRhdGEpO1xuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygncGFja2V0IHJlY2VpdmVkIHdpdGggc29ja2V0IHJlYWR5U3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBoYW5kc2hha2UgY29tcGxldGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGFuZHNoYWtlIG9ialxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkhhbmRzaGFrZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnaGFuZHNoYWtlJywgZGF0YSk7XG4gIHRoaXMuaWQgPSBkYXRhLnNpZDtcbiAgdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gZGF0YS5zaWQ7XG4gIHRoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IGRhdGEucGluZ0ludGVydmFsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gZGF0YS5waW5nVGltZW91dDtcbiAgdGhpcy5vbk9wZW4oKTtcbiAgLy8gSW4gY2FzZSBvcGVuIGhhbmRsZXIgY2xvc2VzIHNvY2tldFxuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICB0aGlzLnNldFBpbmcoKTtcblxuICAvLyBQcm9sb25nIGxpdmVuZXNzIG9mIHNvY2tldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5yZW1vdmVMaXN0ZW5lcignaGVhcnRiZWF0JywgdGhpcy5vbkhlYXJ0YmVhdCk7XG4gIHRoaXMub24oJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xufTtcblxuLyoqXG4gKiBSZXNldHMgcGluZyB0aW1lb3V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IZWFydGJlYXQgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLnBpbmdUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgIHNlbGYub25DbG9zZSgncGluZyB0aW1lb3V0Jyk7XG4gIH0sIHRpbWVvdXQgfHwgKHNlbGYucGluZ0ludGVydmFsICsgc2VsZi5waW5nVGltZW91dCkpO1xufTtcblxuLyoqXG4gKiBQaW5ncyBzZXJ2ZXIgZXZlcnkgYHRoaXMucGluZ0ludGVydmFsYCBhbmQgZXhwZWN0cyByZXNwb25zZVxuICogd2l0aGluIGB0aGlzLnBpbmdUaW1lb3V0YCBvciBjbG9zZXMgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2xlYXJUaW1lb3V0KHNlbGYucGluZ0ludGVydmFsVGltZXIpO1xuICBzZWxmLnBpbmdJbnRlcnZhbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgcGluZyBwYWNrZXQgLSBleHBlY3RpbmcgcG9uZyB3aXRoaW4gJXNtcycsIHNlbGYucGluZ1RpbWVvdXQpO1xuICAgIHNlbGYucGluZygpO1xuICAgIHNlbGYub25IZWFydGJlYXQoc2VsZi5waW5nVGltZW91dCk7XG4gIH0sIHNlbGYucGluZ0ludGVydmFsKTtcbn07XG5cbi8qKlxuKiBTZW5kcyBhIHBpbmcgcGFja2V0LlxuKlxuKiBAYXBpIHByaXZhdGVcbiovXG5cblNvY2tldC5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlbmRQYWNrZXQoJ3BpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5lbWl0KCdwaW5nJyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgb24gYGRyYWluYCBldmVudFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25EcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKTtcblxuICAvLyBzZXR0aW5nIHByZXZCdWZmZXJMZW4gPSAwIGlzIHZlcnkgaW1wb3J0YW50XG4gIC8vIGZvciBleGFtcGxlLCB3aGVuIHVwZ3JhZGluZywgdXBncmFkZSBwYWNrZXQgaXMgc2VudCBvdmVyLFxuICAvLyBhbmQgYSBub256ZXJvIHByZXZCdWZmZXJMZW4gY291bGQgY2F1c2UgcHJvYmxlbXMgb24gYGRyYWluYFxuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuXG4gIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIHRoaXMuZW1pdCgnZHJhaW4nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRmx1c2ggd3JpdGUgYnVmZmVycy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICF0aGlzLnVwZ3JhZGluZyAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIGRlYnVnKCdmbHVzaGluZyAlZCBwYWNrZXRzIGluIHNvY2tldCcsIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAvLyBzcGxpY2Ugd3JpdGVCdWZmZXIgYW5kIGNhbGxiYWNrQnVmZmVyIG9uIGBkcmFpbmBcbiAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDtcbiAgICB0aGlzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2VuZHMgYSBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLndyaXRlID1cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChtc2csIG9wdGlvbnMsIGZuKSB7XG4gIHRoaXMuc2VuZFBhY2tldCgnbWVzc2FnZScsIG1zZywgb3B0aW9ucywgZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kUGFja2V0ID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEsIG9wdGlvbnMsIGZuKSB7XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZGF0YSkge1xuICAgIGZuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgZm4gPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgaWYgKCdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBkYXRhOiBkYXRhLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfTtcbiAgdGhpcy5lbWl0KCdwYWNrZXRDcmVhdGUnLCBwYWNrZXQpO1xuICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgaWYgKGZuKSB0aGlzLm9uY2UoJ2ZsdXNoJywgZm4pO1xuICB0aGlzLmZsdXNoKCk7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2luZyc7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCdmb3JjZWQgY2xvc2UnKTtcbiAgICBkZWJ1Zygnc29ja2V0IGNsb3NpbmcgLSB0ZWxsaW5nIHRyYW5zcG9ydCB0byBjbG9zZScpO1xuICAgIHNlbGYudHJhbnNwb3J0LmNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwQW5kQ2xvc2UgKCkge1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGVFcnJvcicsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgY2xvc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhaXRGb3JVcGdyYWRlICgpIHtcbiAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgIHNlbGYub25jZSgndXBncmFkZScsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgc2VsZi5vbmNlKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBlcnJvclxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ3NvY2tldCBlcnJvciAlaicsIGVycik7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHRoaXMub25DbG9zZSgndHJhbnNwb3J0IGVycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24sIGRlc2MpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogXCIlc1wiJywgcmVhc29uKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBjbGVhciB0aW1lcnNcbiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lcik7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG5cbiAgICAvLyBzdG9wIGV2ZW50IGZyb20gZmlyaW5nIGFnYWluIGZvciB0cmFuc3BvcnRcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nsb3NlJyk7XG5cbiAgICAvLyBlbnN1cmUgdHJhbnNwb3J0IHdvbid0IHN0YXkgb3BlblxuICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvblxuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG4gICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG5cbiAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgdGhpcy5pZCA9IG51bGw7XG5cbiAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbiwgZGVzYyk7XG5cbiAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGxcbiAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnRcbiAgICBzZWxmLndyaXRlQnVmZmVyID0gW107XG4gICAgc2VsZi5wcmV2QnVmZmVyTGVuID0gMDtcbiAgfVxufTtcblxuLyoqXG4gKiBGaWx0ZXJzIHVwZ3JhZGVzLCByZXR1cm5pbmcgb25seSB0aG9zZSBtYXRjaGluZyBjbGllbnQgdHJhbnNwb3J0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzZXJ2ZXIgdXBncmFkZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICpcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZpbHRlclVwZ3JhZGVzID0gZnVuY3Rpb24gKHVwZ3JhZGVzKSB7XG4gIHZhciBmaWx0ZXJlZFVwZ3JhZGVzID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBqID0gdXBncmFkZXMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKH5pbmRleCh0aGlzLnRyYW5zcG9ydHMsIHVwZ3JhZGVzW2ldKSkgZmlsdGVyZWRVcGdyYWRlcy5wdXNoKHVwZ3JhZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gZmlsdGVyZWRVcGdyYWRlcztcbn07XG4iLCJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnRzIHBhcnNlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cy5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG4iLCIvKmdsb2JhbCBCbG9iLEZpbGUqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHNcbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIGdsb2JhbC5CbG9iID09PSAnZnVuY3Rpb24nIHx8IHRvU3RyaW5nLmNhbGwoZ2xvYmFsLkJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJztcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBnbG9iYWwuRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0b1N0cmluZy5jYWxsKGdsb2JhbC5GaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXSc7XG5cbi8qKlxuICogUmVwbGFjZXMgZXZlcnkgQnVmZmVyIHwgQXJyYXlCdWZmZXIgaW4gcGFja2V0IHdpdGggYSBudW1iZXJlZCBwbGFjZWhvbGRlci5cbiAqIEFueXRoaW5nIHdpdGggYmxvYnMgb3IgZmlsZXMgc2hvdWxkIGJlIGZlZCB0aHJvdWdoIHJlbW92ZUJsb2JzIGJlZm9yZSBjb21pbmdcbiAqIGhlcmUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIHNvY2tldC5pbyBldmVudCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBkZWNvbnN0cnVjdGVkIHBhY2tldCBhbmQgbGlzdCBvZiBidWZmZXJzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgdmFyIHBhY2tldERhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIHBhY2sgPSBwYWNrZXQ7XG4gIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhLCBidWZmZXJzKTtcbiAgcGFjay5hdHRhY2htZW50cyA9IGJ1ZmZlcnMubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmluYXJ5ICdhdHRhY2htZW50cydcbiAgcmV0dXJuIHtwYWNrZXQ6IHBhY2ssIGJ1ZmZlcnM6IGJ1ZmZlcnN9O1xufTtcblxuZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICBpZiAoaXNCdWYoZGF0YSkpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXIgPSB7IF9wbGFjZWhvbGRlcjogdHJ1ZSwgbnVtOiBidWZmZXJzLmxlbmd0aCB9O1xuICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIHZhciBuZXdEYXRhID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiAhKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgIHZhciBuZXdEYXRhID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBSZWNvbnN0cnVjdHMgYSBiaW5hcnkgcGFja2V0IGZyb20gaXRzIHBsYWNlaG9sZGVyIHBhY2tldCBhbmQgYnVmZmVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBldmVudCBwYWNrZXQgd2l0aCBwbGFjZWhvbGRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlcnMgLSBiaW5hcnkgYnVmZmVycyB0byBwdXQgaW4gcGxhY2Vob2xkZXIgcG9zaXRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY29uc3RydWN0ZWQgcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGJ1ZmZlcnMpIHtcbiAgcGFja2V0LmRhdGEgPSBfcmVjb25zdHJ1Y3RQYWNrZXQocGFja2V0LmRhdGEsIGJ1ZmZlcnMpO1xuICBwYWNrZXQuYXR0YWNobWVudHMgPSB1bmRlZmluZWQ7IC8vIG5vIGxvbmdlciB1c2VmdWxcbiAgcmV0dXJuIHBhY2tldDtcbn07XG5cbmZ1bmN0aW9uIF9yZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGRhdGEgJiYgZGF0YS5fcGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gYnVmZmVyc1tkYXRhLm51bV07IC8vIGFwcHJvcHJpYXRlIGJ1ZmZlciAoc2hvdWxkIGJlIG5hdHVyYWwgb3JkZXIgYW55d2F5KVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBkYXRhW2tleV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSByZW1vdmVzIEJsb2JzIG9yIEZpbGVzIGZyb20gZGF0YSB2aWFcbiAqIEZpbGVSZWFkZXIncyByZWFkQXNBcnJheUJ1ZmZlciBtZXRob2QuIFVzZWQgYmVmb3JlIGVuY29kaW5nXG4gKiBkYXRhIGFzIG1zZ3BhY2suIENhbGxzIGNhbGxiYWNrIHdpdGggdGhlIGJsb2JsZXNzIGRhdGEuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnJlbW92ZUJsb2JzID0gZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gX3JlbW92ZUJsb2JzKG9iaiwgY3VyS2V5LCBjb250YWluaW5nT2JqZWN0KSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBvYmo7XG5cbiAgICAvLyBjb252ZXJ0IGFueSBibG9iXG4gICAgaWYgKCh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSkpIHtcbiAgICAgIHBlbmRpbmdCbG9icysrO1xuXG4gICAgICAvLyBhc3luYyBmaWxlcmVhZGVyXG4gICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyAvLyB0aGlzLnJlc3VsdCA9PSBhcnJheWJ1ZmZlclxuICAgICAgICBpZiAoY29udGFpbmluZ09iamVjdCkge1xuICAgICAgICAgIGNvbnRhaW5pbmdPYmplY3RbY3VyS2V5XSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGJsb2JsZXNzRGF0YSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbm90aGluZyBwZW5kaW5nIGl0cyBjYWxsYmFjayB0aW1lXG4gICAgICAgIGlmKCEgLS1wZW5kaW5nQmxvYnMpIHtcbiAgICAgICAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKG9iaik7IC8vIGJsb2IgLT4gYXJyYXlidWZmZXJcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqKSkgeyAvLyBoYW5kbGUgYXJyYXlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhaXNCdWYob2JqKSkgeyAvLyBhbmQgb2JqZWN0XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBwZW5kaW5nQmxvYnMgPSAwO1xuICB2YXIgYmxvYmxlc3NEYXRhID0gZGF0YTtcbiAgX3JlbW92ZUJsb2JzKGJsb2JsZXNzRGF0YSk7XG4gIGlmICghcGVuZGluZ0Jsb2JzKSB7XG4gICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgfVxufTtcbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0cy5pbnN0YW5jZXMgPSBbXTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgdmFyIHByZXZUaW1lO1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICBkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICBleHBvcnRzLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuICByZXR1cm4gZGVidWc7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB2YXIgaW5kZXggPSBleHBvcnRzLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgZXhwb3J0cy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgaTtcbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cG9ydHMuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZXhwb3J0cy5pbnN0YW5jZXNbaV07XG4gICAgaW5zdGFuY2UuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2V1cmkgPSByZXF1aXJlKCdwYXJzZXVyaScpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDp1cmwnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVybDtcblxuLyoqXG4gKiBVUkwgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7T2JqZWN0fSBBbiBvYmplY3QgbWVhbnQgdG8gbWltaWMgd2luZG93LmxvY2F0aW9uLlxuICogICAgICAgICAgICAgICAgIERlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdXJsICh1cmksIGxvYykge1xuICB2YXIgb2JqID0gdXJpO1xuXG4gIC8vIGRlZmF1bHQgdG8gd2luZG93LmxvY2F0aW9uXG4gIGxvYyA9IGxvYyB8fCBnbG9iYWwubG9jYXRpb247XG4gIGlmIChudWxsID09IHVyaSkgdXJpID0gbG9jLnByb3RvY29sICsgJy8vJyArIGxvYy5ob3N0O1xuXG4gIC8vIHJlbGF0aXZlIHBhdGggc3VwcG9ydFxuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB1cmkpIHtcbiAgICBpZiAoJy8nID09PSB1cmkuY2hhckF0KDApKSB7XG4gICAgICBpZiAoJy8nID09PSB1cmkuY2hhckF0KDEpKSB7XG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIHVyaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVyaSA9IGxvYy5ob3N0ICsgdXJpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghL14oaHR0cHM/fHdzcz8pOlxcL1xcLy8udGVzdCh1cmkpKSB7XG4gICAgICBkZWJ1ZygncHJvdG9jb2wtbGVzcyB1cmwgJXMnLCB1cmkpO1xuICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbG9jKSB7XG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSAnaHR0cHM6Ly8nICsgdXJpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHBhcnNlXG4gICAgZGVidWcoJ3BhcnNlICVzJywgdXJpKTtcbiAgICBvYmogPSBwYXJzZXVyaSh1cmkpO1xuICB9XG5cbiAgLy8gbWFrZSBzdXJlIHdlIHRyZWF0IGBsb2NhbGhvc3Q6ODBgIGFuZCBgbG9jYWxob3N0YCBlcXVhbGx5XG4gIGlmICghb2JqLnBvcnQpIHtcbiAgICBpZiAoL14oaHR0cHx3cykkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzgwJztcbiAgICB9IGVsc2UgaWYgKC9eKGh0dHB8d3MpcyQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgb2JqLnBvcnQgPSAnNDQzJztcbiAgICB9XG4gIH1cblxuICBvYmoucGF0aCA9IG9iai5wYXRoIHx8ICcvJztcblxuICB2YXIgaXB2NiA9IG9iai5ob3N0LmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHZhciBob3N0ID0gaXB2NiA/ICdbJyArIG9iai5ob3N0ICsgJ10nIDogb2JqLmhvc3Q7XG5cbiAgLy8gZGVmaW5lIHVuaXF1ZSBpZFxuICBvYmouaWQgPSBvYmoucHJvdG9jb2wgKyAnOi8vJyArIGhvc3QgKyAnOicgKyBvYmoucG9ydDtcbiAgLy8gZGVmaW5lIGhyZWZcbiAgb2JqLmhyZWYgPSBvYmoucHJvdG9jb2wgKyAnOi8vJyArIGhvc3QgKyAobG9jICYmIGxvYy5wb3J0ID09PSBvYmoucG9ydCA/ICcnIDogKCc6JyArIG9iai5wb3J0KSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCcuL3VybCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBNYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gbG9va3VwO1xuXG4vKipcbiAqIE1hbmFnZXJzIGNhY2hlLlxuICovXG5cbnZhciBjYWNoZSA9IGV4cG9ydHMubWFuYWdlcnMgPSB7fTtcblxuLyoqXG4gKiBMb29rcyB1cCBhbiBleGlzdGluZyBgTWFuYWdlcmAgZm9yIG11bHRpcGxleGluZy5cbiAqIElmIHRoZSB1c2VyIHN1bW1vbnM6XG4gKlxuICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYScpO2BcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2InKTtgXG4gKlxuICogV2UgcmV1c2UgdGhlIGV4aXN0aW5nIGluc3RhbmNlIGJhc2VkIG9uIHNhbWUgc2NoZW1lL3BvcnQvaG9zdCxcbiAqIGFuZCB3ZSBpbml0aWFsaXplIHNvY2tldHMgZm9yIGVhY2ggbmFtZXNwYWNlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9va3VwICh1cmksIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiB1cmkgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICB2YXIgcGFyc2VkID0gdXJsKHVyaSk7XG4gIHZhciBzb3VyY2UgPSBwYXJzZWQuc291cmNlO1xuICB2YXIgaWQgPSBwYXJzZWQuaWQ7XG4gIHZhciBwYXRoID0gcGFyc2VkLnBhdGg7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gY2FjaGVbaWRdICYmIHBhdGggaW4gY2FjaGVbaWRdLm5zcHM7XG4gIHZhciBuZXdDb25uZWN0aW9uID0gb3B0cy5mb3JjZU5ldyB8fCBvcHRzWydmb3JjZSBuZXcgY29ubmVjdGlvbiddIHx8XG4gICAgICAgICAgICAgICAgICAgICAgZmFsc2UgPT09IG9wdHMubXVsdGlwbGV4IHx8IHNhbWVOYW1lc3BhY2U7XG5cbiAgdmFyIGlvO1xuXG4gIGlmIChuZXdDb25uZWN0aW9uKSB7XG4gICAgZGVidWcoJ2lnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgIGlvID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICBkZWJ1ZygnbmV3IGlvIGluc3RhbmNlIGZvciAlcycsIHNvdXJjZSk7XG4gICAgICBjYWNoZVtpZF0gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGlvID0gY2FjaGVbaWRdO1xuICB9XG4gIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHtcbiAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5O1xuICB9XG4gIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpO1xufVxuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sO1xuXG4vKipcbiAqIGBjb25uZWN0YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY29ubmVjdCA9IGxvb2t1cDtcblxuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5NYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG5leHBvcnRzLlNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5mdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHRodW5rOyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQGtleWZyYW1lcyByb3RhdGlvbiB7XFxuICBmcm9tIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cXG4gIHRvIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfSB9XFxuXFxuLmZsZXgtcm93IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93OyB9XFxuXFxuLmZsZXgtY29sIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyB9XFxuXFxuI2xvZ2luLWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiA0MjtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGhlaWdodDogMTAwdmg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgfVxcbiAgI2xvZ2luLWNvbnRhaW5lciBkaXYge1xcbiAgICB3aWR0aDogMTAyNHB4O1xcbiAgICBoZWlnaHQ6IDYwMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZlZmVmO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgfVxcbiAgICAjbG9naW4tY29udGFpbmVyIGRpdiBpbWcge1xcbiAgICAgIGFuaW1hdGlvbjogcm90YXRpb24gMXMgaW5maW5pdGUgbGluZWFyOyB9XFxuICAgICNsb2dpbi1jb250YWluZXIgZGl2IGRpdiB7XFxuICAgICAgd2lkdGg6IDUxMnB4O1xcbiAgICAgIHBhZGRpbmc6IDMwcHg7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9Mb2dpbkNvbXBvbmVudC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0xvZ2luQ29tcG9uZW50LnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0xvZ2luQ29tcG9uZW50LnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGxvZ2luIH0gZnJvbSAnLi8uLi9hY3Rpb25zL2luZGV4JztcbmltcG9ydCAnLi9Mb2dpbkNvbXBvbmVudC5zY3NzJztcbmltcG9ydCBsb2FkaW5nIGZyb20gJy4vaW1nL2xvYWRpbmcucG5nJztcblxuY2xhc3MgTG9naW5Db21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpbmZvOiAnJyxcbiAgICAgIHNpZ25VcEZvcm06IHtcbiAgICAgICAgdXNlcm5hbWU6ICcnLFxuICAgICAgICBwYXNzd29yZDogJycsXG4gICAgICAgIHJlcGVhdFBhc3N3b3JkOiAnJ1xuICAgICAgfSxcbiAgICAgIGxvZ2luRm9ybToge1xuICAgICAgICB1c2VybmFtZTogJycsXG4gICAgICAgIHBhc3N3b3JkOiAnJ1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBoYW5kbGVGb3JtQ2hhbmdlID0gKGZvcm0pID0+IChlKSA9PiB7XG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZS50YXJnZXQ7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgICBbZm9ybV06IHsuLi5wcmV2U3RhdGVbZm9ybV0sIFtuYW1lXTogdmFsdWV9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgc2lnblVwID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCB7XG4gICAgICB1c2VybmFtZSxcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgcmVwZWF0UGFzc3dvcmRcbiAgICB9ID0gdGhpcy5zdGF0ZS5zaWduVXBGb3JtO1xuXG4gICAgLy8gc2lnbiB1cCB0ZXN0c1xuICAgIGlmKCF1c2VybmFtZS5sZW5ndGggfHwgIXBhc3N3b3JkLmxlbmd0aCB8fCBwYXNzd29yZCAhPSByZXBlYXRQYXNzd29yZCkge1xuICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgc2lnbnVwIGZvcm0nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhcGkgY2FsbFxuICAgIGZldGNoKCcvc2lnbnVwJywge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9LFxuICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdXNlcm5hbWUsXG4gICAgICAgIHBhc3N3b3JkXG4gICAgICB9KVxuICAgIH0pXG4gICAgLnRoZW4oXG4gICAgICBkYXRhID0+IGRhdGEuanNvbigpLFxuICAgICAgZXJyb3IgPT4gY29uc29sZS5sb2coJ0FuIGVycm9yIG9jY3VyZWQnLCBlcnJvcilcbiAgICApLnRoZW4oZGF0YSA9PiB7XG4gICAgICBpZihkYXRhLmVycm9yKVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtpbmZvOiBgJHt1c2VybmFtZX0gaXMgYWxyZWFkeSB0YWtlbi5gfSk7XG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2luZm86IGBBY2NvdW50IGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5ICFgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzdWJtaXRMb2dpbiA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgeyB1c2VybmFtZSwgcGFzc3dvcmQgfSA9IHRoaXMuc3RhdGUubG9naW5Gb3JtO1xuICAgIGNvbnN0IHsgaGFuZGxlTG9naW4gfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyB0ZXN0c1xuICAgIGhhbmRsZUxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgbG9naW5Gb3JtID0gdGhpcy5zdGF0ZS5sb2dpbkZvcm07XG4gICAgY29uc3Qgc2lnblVwRm9ybSA9IHRoaXMuc3RhdGUuc2lnblVwRm9ybTtcbiAgICBjb25zdCB7IGlzTG9nZ2luZ0luIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaW5mbyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmKGlzTG9nZ2luZ0luKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGlkPSdsb2dpbi1jb250YWluZXInPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8aW1nIHNyYz17bG9hZGluZ30gYWx0PSdsb2FkaW5nJyAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybihcbiAgICAgICAgPGRpdiBpZD0nbG9naW4tY29udGFpbmVyJz5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuc2lnblVwfSA+XG4gICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9J3VzZXJuYW1lJyB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0nWW91ciB1c2VybmFtZSdcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXtzaWduVXBGb3JtLnVzZXJuYW1lfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVGb3JtQ2hhbmdlKCdzaWduVXBGb3JtJyl9IC8+PGJyIC8+XG4gICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9J3Bhc3N3b3JkJyB0eXBlPSdwYXNzd29yZCcgcGxhY2Vob2xkZXI9J1lvdXIgcGFzc3dvcmQnXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17c2lnblVwRm9ybS5wYXNzd29yZH0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlRm9ybUNoYW5nZSgnc2lnblVwRm9ybScpfSAvPjxiciAvPlxuICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSdyZXBlYXRQYXNzd29yZCcgdHlwZT0ncGFzc3dvcmQnIHBsYWNlaG9sZGVyPSdSZXBlYXQgeW91ciBwYXNzd29yZCdcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXtzaWduVXBGb3JtLnJlcGVhdFBhc3N3b3JkfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVGb3JtQ2hhbmdlKCdzaWduVXBGb3JtJyl9IC8+PGJyIC8+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbj5TaWduIHVwPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPHA+e2luZm99PC9wPlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLnN1Ym1pdExvZ2lufSA+XG4gICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9J3VzZXJuYW1lJyB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0nVXNlcm5hbWUnXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17bG9naW5Gb3JtLnVzZXJuYW1lfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVGb3JtQ2hhbmdlKCdsb2dpbkZvcm0nKX0gLz48YnIgLz5cbiAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0ncGFzc3dvcmQnIHR5cGU9J3Bhc3N3b3JkJyBwbGFjZWhvbGRlcj0nUGFzc3dvcmQnXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17bG9naW5Gb3JtLnBhc3N3b3JkfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVGb3JtQ2hhbmdlKCdsb2dpbkZvcm0nKX0gLz48YnIgLz5cbiAgICAgICAgICAgICAgICA8YnV0dG9uPkNvbm5lY3Q8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4ge1xuICByZXR1cm4ge307XG59O1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiB7XG4gIHJldHVybiB7XG4gICAgaGFuZGxlTG9naW46ICh1c2VybmFtZSwgcGFzc3dvcmQpID0+IGRpc3BhdGNoKGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCkpXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShMb2dpbkNvbXBvbmVudCk7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNmY2ZTE4NTVmYzBiYjg4ZWZhNzIwNWI0MTgxMDNkNTAucG5nXCI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgZWRpdEltYWdlIGZyb20gJy4vaW1nL2VkaXQucG5nJztcblxuY2xhc3MgUHJvZmlsZUNvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHVzZXJcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybihcbiAgICAgIDxkaXYgaWQ9J3Byb2ZpbGUtY29tcG9uZW50Jz5cbiAgICAgICAgPHA+Q29ubmVjdGVkIGFzIHt1c2VyLm5hbWV9IDxpbWcgc3JjPXtlZGl0SW1hZ2V9IGFsdD0nZWRpdCcgLz48L3A+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xuICByZXR1cm4ge1xuICAgIHVzZXI6IHN0YXRlLnVzZXJcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShQcm9maWxlQ29tcG9uZW50KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnB1dENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybihcbiAgICAgIDxkaXYgaWQ9J2lucHV0LWNvbXBvbmVudCc+XG4gICAgICAgIDxwPklucHV0Q29tcG9uZW50PC9wPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnZlcnNhdGlvbkNvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybihcbiAgICAgIDxkaXYgaWQ9J2NvbnZlcnNhdGlvbi1jb21wb25lbnQnPlxuICAgICAgICA8cD5Db252ZXJzYXRpb25Db21wb25lbnQ8L3A+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xyXG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWVcclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBDcmVhdGVSb29tQ29tcG9uZW50IGZyb20gJy4vQ3JlYXRlUm9vbUNvbXBvbmVudCc7XG5cbmNvbnN0IFJvb21zTGlzdEl0ZW0gPSAoe25hbWUsIGxhc3RNZXNzYWdlQ29udGVudCwgbGFzdE1lc3NhZ2VEYXRlfSkgPT4gKFxuICA8ZGl2IGNsYXNzPSdyb29tcy1saXN0LWl0ZW0nPlxuICAgIDxoND57bmFtZX08L2g0PlxuICAgIDxwPntsYXN0TWVzc2FnZUNvbnRlbnR9PC9wPlxuICAgIDxwPntsYXN0TWVzc2FnZURhdGV9PC9wPlxuICA8L2Rpdj5cbik7XG5cblxuY2xhc3MgUm9vbXNMaXN0Q29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNDcmVhdGVSb29tQ29tcG9uZW50T3BlbjogdHJ1ZVxuICAgIH07XG4gIH1cblxuICB0b2dnbGVDcmVhdGVSb29tID0gKCkgPT4gdGhpcy5zZXRTdGF0ZSh7aXNDcmVhdGVSb29tQ29tcG9uZW50T3BlbjogIXRoaXMuc3RhdGUuaXNDcmVhdGVSb29tQ29tcG9uZW50T3Blbn0pO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHJvb21zIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNDcmVhdGVSb29tQ29tcG9uZW50T3BlbiB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybihcbiAgICAgIDxkaXY+XG4gICAgICAgIHtpc0NyZWF0ZVJvb21Db21wb25lbnRPcGVuID8gPENyZWF0ZVJvb21Db21wb25lbnQgY2xvc2VDb21wb25lbnQ9e3RoaXMudG9nZ2xlQ3JlYXRlUm9vbX0gLz4gOiBudWxsfVxuICAgICAgICA8cCBzdHlsZT17e2N1cnNvcjogJ3BvaW50ZXInfX1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNyZWF0ZVJvb219ID5DcmVhdGUgbmV3IHJvb208L3A+XG4gICAgICAgIHtyb29tcy5tYXAociA9PiA8Um9vbXNMaXN0SXRlbSB7Li4ucn0gLz4pfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICByb29tczogc3RhdGUucm9vbXNcbiAgfTtcbjt9XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShSb29tc0xpc3RDb21wb25lbnQpOyIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIGZvbnQtZmFtaWx5OiBDb25zb2xhcztcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7IH1cXG5cXG4jYXBwLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGhlaWdodDogMTAwdmg7XFxuICB3aWR0aDogMTAwdnc7IH1cXG4gICNhcHAtY29udGFpbmVyICNsZWZ0LWNvbnRhaW5lciB7XFxuICAgIHdpZHRoOiAzMDBweDtcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2RlZGVkZTsgfVxcbiAgICAjYXBwLWNvbnRhaW5lciAjbGVmdC1jb250YWluZXIgI3Byb2ZpbGUtY29tcG9uZW50IHtcXG4gICAgICBoZWlnaHQ6IDIwMHB4O1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZWRlZGU7IH1cXG4gICNhcHAtY29udGFpbmVyICNyaWdodC1jb250YWluZXIge1xcbiAgICBmbGV4LWdyb3c6IDE7XFxuICAgIGhlaWdodDogMTAwdmg7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyB9XFxuICAgICNhcHAtY29udGFpbmVyICNyaWdodC1jb250YWluZXIgI2lucHV0LWNvbXBvbmVudCB7XFxuICAgICAgaGVpZ2h0OiAxMDBweDtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGVkZWRlOyB9XFxuICAgICNhcHAtY29udGFpbmVyICNyaWdodC1jb250YWluZXIgI2NvbnZlcnNhdGlvbi1jb21wb25lbnQge1xcbiAgICAgIGZsZXgtZ3JvdzogMTsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0FwcC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0FwcC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9BcHAuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0ICcuL0FwcC5zY3NzJztcbmltcG9ydCBDaGF0Q29tcG9uZW50IGZyb20gJy4vQ2hhdENvbXBvbmVudCc7XG5pbXBvcnQgTG9naW5Db21wb25lbnQgZnJvbSAnLi9Mb2dpbkNvbXBvbmVudCc7XG5cbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzTG9nZ2VkSW4sXG4gICAgICBpc0xvZ2dpbmdJblxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYoaXNMb2dnZWRJbikge1xuICAgICAgcmV0dXJuKFxuICAgICAgICA8ZGl2IGlkPSdhcHAtY29udGFpbmVyJz5cbiAgICAgICAgICA8Q2hhdENvbXBvbmVudCAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybihcbiAgICAgICAgPGRpdiBpZD0nYXBwLWNvbnRhaW5lcic+XG4gICAgICAgICAgPExvZ2luQ29tcG9uZW50IGlzTG9nZ2luZ0luPXtpc0xvZ2dpbmdJbn0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBpc0xvZ2dlZEluOiBzdGF0ZS5pc0xvZ2dlZEluLFxuICAgIGlzTG9nZ2luZ0luOiBzdGF0ZS5pc0xvZ2dpbmdJblxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEFwcCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMy4yXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYmE9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxlYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksQT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxDPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGZhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGhhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksamE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxrYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHA6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsZD0wO2Q8YjtkKyspYys9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWVhP3ZvaWQgMDpEKFwiMjI3XCIpO1xuZnVuY3Rpb24gbWEoYSxiLGMsZCxlLGYsaCxnLGspe3RoaXMuX2hhc0NhdWdodEVycm9yPSExO3RoaXMuX2NhdWdodEVycm9yPW51bGw7dmFyIHY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsdil9Y2F0Y2gobCl7dGhpcy5fY2F1Z2h0RXJyb3I9bCx0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMH19XG52YXIgRT17X2NhdWdodEVycm9yOm51bGwsX2hhc0NhdWdodEVycm9yOiExLF9yZXRocm93RXJyb3I6bnVsbCxfaGFzUmV0aHJvd0Vycm9yOiExLGludm9rZUd1YXJkZWRDYWxsYmFjazpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7bWEuYXBwbHkoRSxhcmd1bWVudHMpfSxpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3I6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsaCxnLGspe0UuaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihFLmhhc0NhdWdodEVycm9yKCkpe3ZhciB2PUUuY2xlYXJDYXVnaHRFcnJvcigpO0UuX2hhc1JldGhyb3dFcnJvcnx8KEUuX2hhc1JldGhyb3dFcnJvcj0hMCxFLl9yZXRocm93RXJyb3I9dil9fSxyZXRocm93Q2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gbmEuYXBwbHkoRSxhcmd1bWVudHMpfSxoYXNDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBFLl9oYXNDYXVnaHRFcnJvcn0sY2xlYXJDYXVnaHRFcnJvcjpmdW5jdGlvbigpe2lmKEUuX2hhc0NhdWdodEVycm9yKXt2YXIgYT1cbkUuX2NhdWdodEVycm9yO0UuX2NhdWdodEVycm9yPW51bGw7RS5faGFzQ2F1Z2h0RXJyb3I9ITE7cmV0dXJuIGF9RChcIjE5OFwiKX19O2Z1bmN0aW9uIG5hKCl7aWYoRS5faGFzUmV0aHJvd0Vycm9yKXt2YXIgYT1FLl9yZXRocm93RXJyb3I7RS5fcmV0aHJvd0Vycm9yPW51bGw7RS5faGFzUmV0aHJvd0Vycm9yPSExO3Rocm93IGE7fX12YXIgb2E9bnVsbCxwYT17fTtcbmZ1bmN0aW9uIHFhKCl7aWYob2EpZm9yKHZhciBhIGluIHBhKXt2YXIgYj1wYVthXSxjPW9hLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6RChcIjk2XCIsYSk7aWYoIXJhW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOkQoXCI5N1wiLGEpO3JhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGg9YixnPWQ7c2EuaGFzT3duUHJvcGVydHkoZyk/RChcIjk5XCIsZyk6dm9pZCAwO3NhW2ddPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnRhKGtbZV0saCxnKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh0YShmLnJlZ2lzdHJhdGlvbk5hbWUsaCxnKSxlPSEwKTplPSExO2U/dm9pZCAwOkQoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiB0YShhLGIsYyl7dWFbYV0/RChcIjEwMFwiLGEpOnZvaWQgMDt1YVthXT1iO3ZhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHJhPVtdLHNhPXt9LHVhPXt9LHZhPXt9O2Z1bmN0aW9uIHdhKGEpe29hP0QoXCIxMDFcIik6dm9pZCAwO29hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO3FhKCl9ZnVuY3Rpb24geGEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107cGEuaGFzT3duUHJvcGVydHkoYykmJnBhW2NdPT09ZHx8KHBhW2NdP0QoXCIxMDJcIixjKTp2b2lkIDAscGFbY109ZCxiPSEwKX1iJiZxYSgpfVxudmFyIENhPU9iamVjdC5mcmVlemUoe3BsdWdpbnM6cmEsZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOnNhLHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOnVhLHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6dmEscG9zc2libGVSZWdpc3RyYXRpb25OYW1lczpudWxsLGluamVjdEV2ZW50UGx1Z2luT3JkZXI6d2EsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnhhfSksRGE9bnVsbCxFYT1udWxsLEZhPW51bGw7ZnVuY3Rpb24gR2EoYSxiLGMsZCl7Yj1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1GYShkKTtFLmludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcihiLGMsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gSGEoYSxiKXtudWxsPT1iP0QoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIElhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBKYT1udWxsO1xuZnVuY3Rpb24gS2EoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspR2EoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZHYShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gS2EoYSwhMCl9ZnVuY3Rpb24gTWEoYSl7cmV0dXJuIEthKGEsITEpfXZhciBOYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp3YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6eGF9O1xuZnVuY3Rpb24gT2EoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1EYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9EKFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gUGEoYSxiKXtudWxsIT09YSYmKEphPUhhKEphLGEpKTthPUphO0phPW51bGw7YSYmKGI/SWEoYSxMYSk6SWEoYSxNYSksSmE/RChcIjk1XCIpOnZvaWQgMCxFLnJldGhyb3dDYXVnaHRFcnJvcigpKX1mdW5jdGlvbiBRYShhLGIsYyxkKXtmb3IodmFyIGU9bnVsbCxmPTA7ZjxyYS5sZW5ndGg7ZisrKXt2YXIgaD1yYVtmXTtoJiYoaD1oLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT1IYShlLGgpKX1QYShlLCExKX12YXIgUmE9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOk5hLGdldExpc3RlbmVyOk9hLHJ1bkV2ZW50c0luQmF0Y2g6UGEscnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaDpRYX0pLFNhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEY9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitTYSxUYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK1NhO1xuZnVuY3Rpb24gVWEoYSl7aWYoYVtGXSlyZXR1cm4gYVtGXTtmb3IoOyFhW0ZdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRl07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBWYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7RChcIjMzXCIpfWZ1bmN0aW9uIFhhKGEpe3JldHVybiBhW1RhXXx8bnVsbH12YXIgYmI9T2JqZWN0LmZyZWV6ZSh7cHJlY2FjaGVGaWJlck5vZGU6ZnVuY3Rpb24oYSxiKXtiW0ZdPWF9LGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOlVhLGdldEluc3RhbmNlRnJvbU5vZGU6ZnVuY3Rpb24oYSl7YT1hW0ZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9LGdldE5vZGVGcm9tSW5zdGFuY2U6VmEsZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTpYYSx1cGRhdGVGaWJlclByb3BzOmZ1bmN0aW9uKGEsYil7YVtUYV09Yn19KTtcbmZ1bmN0aW9uIEwoYSl7ZG8gYT1hW1wicmV0dXJuXCJdO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIGNiKGEsYixjKXtmb3IodmFyIGQ9W107YTspZC5wdXNoKGEpLGE9TChhKTtmb3IoYT1kLmxlbmd0aDswPGEtLTspYihkW2FdLFwiY2FwdHVyZWRcIixjKTtmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWIoZFthXSxcImJ1YmJsZWRcIixjKX1mdW5jdGlvbiBkYihhLGIsYyl7aWYoYj1PYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPUhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIGViKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMmJmNiKGEuX3RhcmdldEluc3QsZGIsYSl9XG5mdW5jdGlvbiBmYihhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXt2YXIgYj1hLl90YXJnZXRJbnN0O2I9Yj9MKGIpOm51bGw7Y2IoYixkYixhKX19ZnVuY3Rpb24gZ2IoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9T2EoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPUhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBoYihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJmdiKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBpYihhKXtJYShhLGViKX1cbmZ1bmN0aW9uIGpiKGEsYixjLGQpe2lmKGMmJmQpYTp7dmFyIGU9Yztmb3IodmFyIGY9ZCxoPTAsZz1lO2c7Zz1MKGcpKWgrKztnPTA7Zm9yKHZhciBrPWY7aztrPUwoaykpZysrO2Zvcig7MDxoLWc7KWU9TChlKSxoLS07Zm9yKDswPGctaDspZj1MKGYpLGctLTtmb3IoO2gtLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPUwoZSk7Zj1MKGYpfWU9bnVsbH1lbHNlIGU9bnVsbDtmPWU7Zm9yKGU9W107YyYmYyE9PWY7KXtoPWMuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztlLnB1c2goYyk7Yz1MKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7aD1kLmFsdGVybmF0ZTtpZihudWxsIT09aCYmaD09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9TChkKX1mb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKWdiKGVbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGE9Yy5sZW5ndGg7MDxhLS07KWdiKGNbYV0sXCJjYXB0dXJlZFwiLGIpfVxudmFyIGtiPU9iamVjdC5mcmVlemUoe2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6aWIsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7SWEoYSxmYil9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpqYixhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXtJYShhLGhiKX19KSxsYj1udWxsO2Z1bmN0aW9uIG1iKCl7IWxiJiZtLmNhblVzZURPTSYmKGxiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIGxifXZhciBNPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O1xuZnVuY3Rpb24gbmIoKXtpZihNLl9mYWxsYmFja1RleHQpcmV0dXJuIE0uX2ZhbGxiYWNrVGV4dDt2YXIgYSxiPU0uX3N0YXJ0VGV4dCxjPWIubGVuZ3RoLGQsZT1vYigpLGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGg9Yy1hO2ZvcihkPTE7ZDw9aCYmYltjLWRdPT09ZVtmLWRdO2QrKyk7TS5fZmFsbGJhY2tUZXh0PWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCk7cmV0dXJuIE0uX2ZhbGxiYWNrVGV4dH1mdW5jdGlvbiBvYigpe3JldHVyblwidmFsdWVcImluIE0uX3Jvb3Q/TS5fcm9vdC52YWx1ZTpNLl9yb290W21iKCldfVxudmFyIHBiPVwiZGlzcGF0Y2hDb25maWcgX3RhcmdldEluc3QgbmF0aXZlRXZlbnQgaXNEZWZhdWx0UHJldmVudGVkIGlzUHJvcGFnYXRpb25TdG9wcGVkIF9kaXNwYXRjaExpc3RlbmVycyBfZGlzcGF0Y2hJbnN0YW5jZXNcIi5zcGxpdChcIiBcIikscWI9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OkMudGhhdFJldHVybnNOdWxsLGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5mdW5jdGlvbiBOKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9DLnRoYXRSZXR1cm5zVHJ1ZTpDLnRoYXRSZXR1cm5zRmFsc2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zRmFsc2U7cmV0dXJuIHRoaXN9XG5BKE4ucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Qy50aGF0UmV0dXJuc1RydWUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc1RydWUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9Qy50aGF0UmV0dXJuc1RydWV9LGlzUGVyc2lzdGVudDpDLnRoYXRSZXR1cm5zRmFsc2UsXG5kZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDtmb3IoYT0wO2E8cGIubGVuZ3RoO2ErKyl0aGlzW3BiW2FdXT1udWxsfX0pO04uSW50ZXJmYWNlPXFiO04uZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO0EoZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPUEoe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7cmIoYyk7cmV0dXJuIGN9O3JiKE4pO1xuZnVuY3Rpb24gc2IoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gdGIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOkQoXCIyMjNcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIHJiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPXNiO2EucmVsZWFzZT10Yn12YXIgdWI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPU4uZXh0ZW5kKHtkYXRhOm51bGx9KSx3Yj1bOSwxMywyNywzMl0seGI9bS5jYW5Vc2VET00mJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHliPW51bGw7bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHliPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgemI9bS5jYW5Vc2VET00mJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiF5YixBYj1tLmNhblVzZURPTSYmKCF4Ynx8eWImJjg8eWImJjExPj15YiksQmI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksS2I9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJ0b3BDb21wb3NpdGlvbkVuZFwiLFwidG9wS2V5UHJlc3NcIixcInRvcFRleHRJbnB1dFwiLFwidG9wUGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25FbmQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblN0YXJ0IHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uVXBkYXRlIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfX0sTGI9ITE7XG5mdW5jdGlvbiBNYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4tMSE9PXdiLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwidG9wS2V5RG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcInRvcEtleVByZXNzXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BCbHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gTmIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgT2I9ITE7ZnVuY3Rpb24gUGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIE5iKGIpO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtMYj0hMDtyZXR1cm4gQmI7Y2FzZSBcInRvcFRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09QmImJkxiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIFFiKGEsYil7aWYoT2IpcmV0dXJuXCJ0b3BDb21wb3NpdGlvbkVuZFwiPT09YXx8IXhiJiZNYihhLGIpPyhhPW5iKCksTS5fcm9vdD1udWxsLE0uX3N0YXJ0VGV4dD1udWxsLE0uX2ZhbGxiYWNrVGV4dD1udWxsLE9iPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BQYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBBYj9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBSYj17ZXZlbnRUeXBlczpLYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYoeGIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvblN0YXJ0XCI6ZT1LYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6ZT1LYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvblVwZGF0ZVwiOmU9S2IuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIE9iP01iKGEsYykmJihlPUtiLmNvbXBvc2l0aW9uRW5kKTpcInRvcEtleURvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9S2IuY29tcG9zaXRpb25TdGFydCk7ZT8oQWImJihPYnx8ZSE9PUtiLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PUtiLmNvbXBvc2l0aW9uRW5kJiZPYiYmKGY9bmIoKSk6KE0uX3Jvb3Q9ZCxNLl9zdGFydFRleHQ9b2IoKSxPYj0hMCkpLGU9dWIuZ2V0UG9vbGVkKGUsXG5iLGMsZCksZj9lLmRhdGE9ZjooZj1OYihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksaWIoZSksZj1lKTpmPW51bGw7KGE9emI/UGIoYSxjKTpRYihhLGMpKT8oYj12Yi5nZXRQb29sZWQoS2IuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLGliKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LFNiPW51bGwsVGI9e2luamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQ6ZnVuY3Rpb24oYSl7U2I9YX19LFViPW51bGwsVmI9bnVsbDtmdW5jdGlvbiBXYihhKXtpZihhPUVhKGEpKXtTYiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFNiLnJlc3RvcmVDb250cm9sbGVkU3RhdGU/dm9pZCAwOkQoXCIxOTRcIik7dmFyIGI9RGEoYS5zdGF0ZU5vZGUpO1NiLnJlc3RvcmVDb250cm9sbGVkU3RhdGUoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBYYihhKXtVYj9WYj9WYi5wdXNoKGEpOlZiPVthXTpVYj1hfVxuZnVuY3Rpb24gWWIoKXtyZXR1cm4gbnVsbCE9PVVifHxudWxsIT09VmJ9ZnVuY3Rpb24gWmIoKXtpZihVYil7dmFyIGE9VWIsYj1WYjtWYj1VYj1udWxsO1diKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylXYihiW2FdKX19dmFyICRiPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpUYixlbnF1ZXVlU3RhdGVSZXN0b3JlOlhiLG5lZWRzU3RhdGVSZXN0b3JlOlliLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOlpifSk7ZnVuY3Rpb24gYWMoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBiYyhhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBjYygpe312YXIgZGM9ITE7ZnVuY3Rpb24gZWMoYSxiKXtpZihkYylyZXR1cm4gYShiKTtkYz0hMDt0cnl7cmV0dXJuIGFjKGEsYil9ZmluYWxseXtkYz0hMSxZYigpJiYoY2MoKSxaYigpKX19XG52YXIgZmM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFmY1thLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gaGMoYSl7YT1hLnRhcmdldHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1cbmZ1bmN0aW9uIGljKGEsYil7aWYoIW0uY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2E9XCJvblwiK2E7Yj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gamMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGtjKGEpe3ZhciBiPWpjKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0LmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtjLnNldC5jYWxsKHRoaXMsYSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBsYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9a2MoYSkpfWZ1bmN0aW9uIG1jKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1qYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIG5jPWVhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLE89XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLG9jPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxwYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQscWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5yZXR1cm5cIik6NjAxMDUscmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsc2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHVjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHdjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxcbnhjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseWM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIHpjKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT15YyYmYVt5Y118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIEFjKGEpe2E9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWU7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHNjOnJldHVyblwiUmVhY3RGcmFnbWVudFwiO2Nhc2UgcmM6cmV0dXJuXCJSZWFjdFBvcnRhbFwiO2Nhc2UgcGM6cmV0dXJuXCJSZWFjdENhbGxcIjtjYXNlIHFjOnJldHVyblwiUmVhY3RSZXR1cm5cIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHhjOnJldHVybiBhPWEucmVuZGVyLmRpc3BsYXlOYW1lfHxhLnJlbmRlci5uYW1lfHxcIlwiLFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwifXJldHVybiBudWxsfVxuZnVuY3Rpb24gQmMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSA1OnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZTt2YXIgZT1BYyhhKTt2YXIgZj1udWxsO2MmJihmPUFjKGMpKTtjPWQ7ZT1cIlxcbiAgICBpbiBcIisoZXx8XCJVbmtub3duXCIpKyhjP1wiIChhdCBcIitjLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIrYy5saW5lTnVtYmVyK1wiKVwiOmY/XCIgKGNyZWF0ZWQgYnkgXCIrZitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6ZT1cIlwifWIrPWU7YT1hW1wicmV0dXJuXCJdfXdoaWxlKGEpO3JldHVybiBifVxudmFyIENjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxEYz17fSxFYz17fTtmdW5jdGlvbiBGYyhhKXtpZihFYy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMDtpZihEYy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMTtpZihDYy50ZXN0KGEpKXJldHVybiBFY1thXT0hMDtEY1thXT0hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIEdjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEhjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fEdjKGEsYixjLGQpKXJldHVybiEwO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfVxuZnVuY3Rpb24gVShhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIFY9e307XCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMCwhMSxhLG51bGwpfSk7XG5bW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07VltiXT1uZXcgVShiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYSxudWxsKX0pO1xuXCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDMsITAsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNCwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciBTYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFRjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFxuVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7Vi50YWJJbmRleD1uZXcgVShcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiBVYyhhLGIsYyxkKXt2YXIgZT1WLmhhc093blByb3BlcnR5KGIpP1ZbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChIYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/RmMoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIFZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBXYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1YYyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIFljKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmVWMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIFpjKGEsYil7WWMoYSxiKTt2YXIgYz1YYyhiLnZhbHVlKTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1iLnR5cGUpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpPyRjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJiRjKGEsYi50eXBlLFhjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gYWQoYSxiKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpXCJcIj09PWEudmFsdWUmJihhLnZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSksYS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2I9YS5uYW1lO1wiXCIhPT1iJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YiYmKGEubmFtZT1iKX1mdW5jdGlvbiAkYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9XG5mdW5jdGlvbiBYYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19dmFyIGJkPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENoYW5nZSB0b3BDbGljayB0b3BGb2N1cyB0b3BJbnB1dCB0b3BLZXlEb3duIHRvcEtleVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIGNkKGEsYixjKXthPU4uZ2V0UG9vbGVkKGJkLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7WGIoYyk7aWIoYSk7cmV0dXJuIGF9dmFyIGRkPW51bGwsZWQ9bnVsbDtmdW5jdGlvbiBmZChhKXtQYShhLCExKX1cbmZ1bmN0aW9uIGdkKGEpe3ZhciBiPVZhKGEpO2lmKG1jKGIpKXJldHVybiBhfWZ1bmN0aW9uIGhkKGEsYil7aWYoXCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIGlkPSExO20uY2FuVXNlRE9NJiYoaWQ9aWMoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gamQoKXtkZCYmKGRkLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGtkKSxlZD1kZD1udWxsKX1mdW5jdGlvbiBrZChhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmZ2QoZWQpJiYoYT1jZChlZCxhLGhjKGEpKSxlYyhmZCxhKSl9ZnVuY3Rpb24gbGQoYSxiLGMpe1widG9wRm9jdXNcIj09PWE/KGpkKCksZGQ9YixlZD1jLGRkLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGtkKSk6XCJ0b3BCbHVyXCI9PT1hJiZqZCgpfVxuZnVuY3Rpb24gbWQoYSl7aWYoXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIj09PWF8fFwidG9wS2V5VXBcIj09PWF8fFwidG9wS2V5RG93blwiPT09YSlyZXR1cm4gZ2QoZWQpfWZ1bmN0aW9uIG5kKGEsYil7aWYoXCJ0b3BDbGlja1wiPT09YSlyZXR1cm4gZ2QoYil9ZnVuY3Rpb24gb2QoYSxiKXtpZihcInRvcElucHV0XCI9PT1hfHxcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gZ2QoYil9XG52YXIgcGQ9e2V2ZW50VHlwZXM6YmQsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDppZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/VmEoYik6d2luZG93LGY9dm9pZCAwLGg9dm9pZCAwLGc9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1nfHxcImlucHV0XCI9PT1nJiZcImZpbGVcIj09PWUudHlwZT9mPWhkOmdjKGUpP2lkP2Y9b2Q6KGY9bWQsaD1sZCk6KGc9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWcudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9bmQpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIGNkKGYsYyxkKTtoJiZoKGEsZSxiKTtcInRvcEJsdXJcIj09PWEmJm51bGwhPWImJihhPWIuX3dyYXBwZXJTdGF0ZXx8ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiYkYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxxZD1OLmV4dGVuZCh7dmlldzpudWxsLFxuZGV0YWlsOm51bGx9KSxyZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gc2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1yZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHRkKCl7cmV0dXJuIHNkfVxudmFyIHVkPXFkLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KSx2ZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19fSx3ZD17ZXZlbnRUeXBlczp2ZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsXG5iLGMsZCl7aWYoXCJ0b3BNb3VzZU92ZXJcIj09PWEmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHxcInRvcE1vdXNlT3V0XCIhPT1hJiZcInRvcE1vdXNlT3ZlclwiIT09YSlyZXR1cm4gbnVsbDt2YXIgZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztcInRvcE1vdXNlT3V0XCI9PT1hPyhhPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9VYShiKTpudWxsKTphPW51bGw7aWYoYT09PWIpcmV0dXJuIG51bGw7dmFyIGY9bnVsbD09YT9lOlZhKGEpO2U9bnVsbD09Yj9lOlZhKGIpO3ZhciBoPXVkLmdldFBvb2xlZCh2ZC5tb3VzZUxlYXZlLGEsYyxkKTtoLnR5cGU9XCJtb3VzZWxlYXZlXCI7aC50YXJnZXQ9ZjtoLnJlbGF0ZWRUYXJnZXQ9ZTtjPXVkLmdldFBvb2xlZCh2ZC5tb3VzZUVudGVyLGIsYyxkKTtjLnR5cGU9XCJtb3VzZWVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9XG5mO2piKGgsYyxhLGIpO3JldHVybltoLGNdfX07ZnVuY3Rpb24geGQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2JbXCJyZXR1cm5cIl07KWI9YltcInJldHVyblwiXTtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiW1wicmV0dXJuXCJdOylpZihiPWJbXCJyZXR1cm5cIl0sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiB5ZChhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT14ZChhKTohMX1mdW5jdGlvbiB6ZChhKXsyIT09eGQoYSk/RChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBBZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj14ZChhKSwzPT09Yj9EKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWNbXCJyZXR1cm5cIl0sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpcmV0dXJuIHpkKGUpLGE7aWYoaD09PWQpcmV0dXJuIHpkKGUpLGI7aD1oLnNpYmxpbmd9RChcIjE4OFwiKX1pZihjW1wicmV0dXJuXCJdIT09ZFtcInJldHVyblwiXSljPWUsZD1mO2Vsc2V7aD0hMTtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpe2g9ITA7Yz1lO2Q9ZjticmVha31pZihnPT09ZCl7aD0hMDtkPWU7Yz1mO2JyZWFrfWc9Zy5zaWJsaW5nfWlmKCFoKXtmb3IoZz1mLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWY7ZD1lO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZjtjPWU7YnJlYWt9Zz1nLnNpYmxpbmd9aD9cbnZvaWQgMDpEKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/RChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0QoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gQmQoYSl7YT1BZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIENkKGEpe2E9QWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgRGQ9Ti5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLEVkPU4uZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksRmQ9cWQuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIEdkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIEhkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxJZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sSmQ9cWQuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPUhkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPUdkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9JZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/R2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/R2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxLZD11ZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksTGQ9cWQuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGR9KSxNZD1OLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxOZD11ZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLE9kPXt9LFBkPXt9O2Z1bmN0aW9uIFFkKGEsYil7dmFyIGM9YVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSksZD1cIm9uXCIrYztjPVwidG9wXCIrYztiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTtPZFthXT1iO1BkW2NdPWJ9XG5cImJsdXIgY2FuY2VsIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRvdWJsZUNsaWNrIGRyYWdFbmQgZHJhZ1N0YXJ0IGRyb3AgZm9jdXMgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIG1vdXNlRG93biBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcmF0ZUNoYW5nZSByZXNldCBzZWVrZWQgc3VibWl0IHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UWQoYSwhMCl9KTtcblwiYWJvcnQgYW5pbWF0aW9uRW5kIGFuaW1hdGlvbkl0ZXJhdGlvbiBhbmltYXRpb25TdGFydCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGRyYWcgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgcGxheWluZyBwcm9ncmVzcyBzY3JvbGwgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZVVwZGF0ZSB0b2dnbGUgdG91Y2hNb3ZlIHRyYW5zaXRpb25FbmQgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1FkKGEsITEpfSk7XG52YXIgUmQ9e2V2ZW50VHlwZXM6T2QsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9UGRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVBkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigwPT09R2QoYykpcmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjphPUpkO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6Y2FzZSBcInRvcEZvY3VzXCI6YT1GZDticmVhaztjYXNlIFwidG9wQ2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcInRvcERvdWJsZUNsaWNrXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BNb3VzZU1vdmVcIjpjYXNlIFwidG9wTW91c2VVcFwiOmNhc2UgXCJ0b3BNb3VzZU91dFwiOmNhc2UgXCJ0b3BNb3VzZU92ZXJcIjpjYXNlIFwidG9wQ29udGV4dE1lbnVcIjphPVxudWQ7YnJlYWs7Y2FzZSBcInRvcERyYWdcIjpjYXNlIFwidG9wRHJhZ0VuZFwiOmNhc2UgXCJ0b3BEcmFnRW50ZXJcIjpjYXNlIFwidG9wRHJhZ0V4aXRcIjpjYXNlIFwidG9wRHJhZ0xlYXZlXCI6Y2FzZSBcInRvcERyYWdPdmVyXCI6Y2FzZSBcInRvcERyYWdTdGFydFwiOmNhc2UgXCJ0b3BEcm9wXCI6YT1LZDticmVhaztjYXNlIFwidG9wVG91Y2hDYW5jZWxcIjpjYXNlIFwidG9wVG91Y2hFbmRcIjpjYXNlIFwidG9wVG91Y2hNb3ZlXCI6Y2FzZSBcInRvcFRvdWNoU3RhcnRcIjphPUxkO2JyZWFrO2Nhc2UgXCJ0b3BBbmltYXRpb25FbmRcIjpjYXNlIFwidG9wQW5pbWF0aW9uSXRlcmF0aW9uXCI6Y2FzZSBcInRvcEFuaW1hdGlvblN0YXJ0XCI6YT1EZDticmVhaztjYXNlIFwidG9wVHJhbnNpdGlvbkVuZFwiOmE9TWQ7YnJlYWs7Y2FzZSBcInRvcFNjcm9sbFwiOmE9cWQ7YnJlYWs7Y2FzZSBcInRvcFdoZWVsXCI6YT1OZDticmVhaztjYXNlIFwidG9wQ29weVwiOmNhc2UgXCJ0b3BDdXRcIjpjYXNlIFwidG9wUGFzdGVcIjphPUVkO2JyZWFrO2RlZmF1bHQ6YT1cbk59Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtpYihiKTtyZXR1cm4gYn19LFNkPVJkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxUZD1bXTtmdW5jdGlvbiBVZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjW1wicmV0dXJuXCJdOyljPWNbXCJyZXR1cm5cIl07Yz0zIT09Yy50YWc/bnVsbDpjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFjKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYik7Yj1VYShjKX13aGlsZShiKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyliPWEuYW5jZXN0b3JzW2NdLFFhKGEudG9wTGV2ZWxUeXBlLGIsYS5uYXRpdmVFdmVudCxoYyhhLm5hdGl2ZUV2ZW50KSl9dmFyIFZkPSEwO2Z1bmN0aW9uIFdkKGEpe1ZkPSEhYX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKCFjKXJldHVybiBudWxsO2E9KFNkKGEpP1hkOllkKS5iaW5kKG51bGwsYSk7Yy5hZGRFdmVudExpc3RlbmVyKGIsYSwhMSl9ZnVuY3Rpb24gWmQoYSxiLGMpe2lmKCFjKXJldHVybiBudWxsO2E9KFNkKGEpP1hkOllkKS5iaW5kKG51bGwsYSk7Yy5hZGRFdmVudExpc3RlbmVyKGIsYSwhMCl9ZnVuY3Rpb24gWGQoYSxiKXtiYyhZZCxhLGIpfVxuZnVuY3Rpb24gWWQoYSxiKXtpZihWZCl7dmFyIGM9aGMoYik7Yz1VYShjKTtudWxsIT09YyYmXCJudW1iZXJcIj09PXR5cGVvZiBjLnRhZyYmMiE9PXhkKGMpJiYoYz1udWxsKTtpZihUZC5sZW5ndGgpe3ZhciBkPVRkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e2VjKFVkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+VGQubGVuZ3RoJiZUZC5wdXNoKGEpfX19XG52YXIgJGQ9T2JqZWN0LmZyZWV6ZSh7Z2V0IF9lbmFibGVkKCl7cmV0dXJuIFZkfSxzZXRFbmFibGVkOldkLGlzRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBWZH0sdHJhcEJ1YmJsZWRFdmVudDpXLHRyYXBDYXB0dXJlZEV2ZW50OlpkLGRpc3BhdGNoRXZlbnQ6WWR9KTtmdW5jdGlvbiBhZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO2NbXCJtc1wiK2FdPVwiTVNcIitiO2NbXCJPXCIrYV09XCJvXCIrYi50b0xvd2VyQ2FzZSgpO3JldHVybiBjfVxudmFyIGJlPXthbmltYXRpb25lbmQ6YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDphZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LGNlPXt9LGRlPXt9O20uY2FuVXNlRE9NJiYoZGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgYmUuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgYmUuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgYmUuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgYmUudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIGVlKGEpe2lmKGNlW2FdKXJldHVybiBjZVthXTtpZighYmVbYV0pcmV0dXJuIGE7dmFyIGI9YmVbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gZGUpcmV0dXJuIGNlW2FdPWJbY107cmV0dXJuIGF9XG52YXIgZmU9e3RvcEFuaW1hdGlvbkVuZDplZShcImFuaW1hdGlvbmVuZFwiKSx0b3BBbmltYXRpb25JdGVyYXRpb246ZWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksdG9wQW5pbWF0aW9uU3RhcnQ6ZWUoXCJhbmltYXRpb25zdGFydFwiKSx0b3BCbHVyOlwiYmx1clwiLHRvcENhbmNlbDpcImNhbmNlbFwiLHRvcENoYW5nZTpcImNoYW5nZVwiLHRvcENsaWNrOlwiY2xpY2tcIix0b3BDbG9zZTpcImNsb3NlXCIsdG9wQ29tcG9zaXRpb25FbmQ6XCJjb21wb3NpdGlvbmVuZFwiLHRvcENvbXBvc2l0aW9uU3RhcnQ6XCJjb21wb3NpdGlvbnN0YXJ0XCIsdG9wQ29tcG9zaXRpb25VcGRhdGU6XCJjb21wb3NpdGlvbnVwZGF0ZVwiLHRvcENvbnRleHRNZW51OlwiY29udGV4dG1lbnVcIix0b3BDb3B5OlwiY29weVwiLHRvcEN1dDpcImN1dFwiLHRvcERvdWJsZUNsaWNrOlwiZGJsY2xpY2tcIix0b3BEcmFnOlwiZHJhZ1wiLHRvcERyYWdFbmQ6XCJkcmFnZW5kXCIsdG9wRHJhZ0VudGVyOlwiZHJhZ2VudGVyXCIsdG9wRHJhZ0V4aXQ6XCJkcmFnZXhpdFwiLHRvcERyYWdMZWF2ZTpcImRyYWdsZWF2ZVwiLFxudG9wRHJhZ092ZXI6XCJkcmFnb3ZlclwiLHRvcERyYWdTdGFydDpcImRyYWdzdGFydFwiLHRvcERyb3A6XCJkcm9wXCIsdG9wRm9jdXM6XCJmb2N1c1wiLHRvcElucHV0OlwiaW5wdXRcIix0b3BLZXlEb3duOlwia2V5ZG93blwiLHRvcEtleVByZXNzOlwia2V5cHJlc3NcIix0b3BLZXlVcDpcImtleXVwXCIsdG9wTG9hZDpcImxvYWRcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BNb3VzZURvd246XCJtb3VzZWRvd25cIix0b3BNb3VzZU1vdmU6XCJtb3VzZW1vdmVcIix0b3BNb3VzZU91dDpcIm1vdXNlb3V0XCIsdG9wTW91c2VPdmVyOlwibW91c2VvdmVyXCIsdG9wTW91c2VVcDpcIm1vdXNldXBcIix0b3BQYXN0ZTpcInBhc3RlXCIsdG9wU2Nyb2xsOlwic2Nyb2xsXCIsdG9wU2VsZWN0aW9uQ2hhbmdlOlwic2VsZWN0aW9uY2hhbmdlXCIsdG9wVGV4dElucHV0OlwidGV4dElucHV0XCIsdG9wVG9nZ2xlOlwidG9nZ2xlXCIsdG9wVG91Y2hDYW5jZWw6XCJ0b3VjaGNhbmNlbFwiLHRvcFRvdWNoRW5kOlwidG91Y2hlbmRcIix0b3BUb3VjaE1vdmU6XCJ0b3VjaG1vdmVcIixcbnRvcFRvdWNoU3RhcnQ6XCJ0b3VjaHN0YXJ0XCIsdG9wVHJhbnNpdGlvbkVuZDplZShcInRyYW5zaXRpb25lbmRcIiksdG9wV2hlZWw6XCJ3aGVlbFwifSxnZT17dG9wQWJvcnQ6XCJhYm9ydFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcER1cmF0aW9uQ2hhbmdlOlwiZHVyYXRpb25jaGFuZ2VcIix0b3BFbXB0aWVkOlwiZW1wdGllZFwiLHRvcEVuY3J5cHRlZDpcImVuY3J5cHRlZFwiLHRvcEVuZGVkOlwiZW5kZWRcIix0b3BFcnJvcjpcImVycm9yXCIsdG9wTG9hZGVkRGF0YTpcImxvYWRlZGRhdGFcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wUGF1c2U6XCJwYXVzZVwiLHRvcFBsYXk6XCJwbGF5XCIsdG9wUGxheWluZzpcInBsYXlpbmdcIix0b3BQcm9ncmVzczpcInByb2dyZXNzXCIsdG9wUmF0ZUNoYW5nZTpcInJhdGVjaGFuZ2VcIix0b3BTZWVrZWQ6XCJzZWVrZWRcIix0b3BTZWVraW5nOlwic2Vla2luZ1wiLFxudG9wU3RhbGxlZDpcInN0YWxsZWRcIix0b3BTdXNwZW5kOlwic3VzcGVuZFwiLHRvcFRpbWVVcGRhdGU6XCJ0aW1ldXBkYXRlXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsdG9wV2FpdGluZzpcIndhaXRpbmdcIn0saGU9e30saWU9MCxqZT1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7ZnVuY3Rpb24ga2UoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsamUpfHwoYVtqZV09aWUrKyxoZVthW2plXV09e30pO3JldHVybiBoZVthW2plXV19ZnVuY3Rpb24gbGUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gbWUoYSxiKXt2YXIgYz1sZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1sZShjKX19ZnVuY3Rpb24gbmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmXCJ0ZXh0XCI9PT1hLnR5cGV8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIG9lPW0uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUscGU9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29udGV4dE1lbnUgdG9wRm9jdXMgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BNb3VzZURvd24gdG9wTW91c2VVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxxZT1udWxsLHJlPW51bGwsc2U9bnVsbCx0ZT0hMTtcbmZ1bmN0aW9uIHVlKGEsYil7aWYodGV8fG51bGw9PXFlfHxxZSE9PWZhKCkpcmV0dXJuIG51bGw7dmFyIGM9cWU7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmbmUoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OndpbmRvdy5nZXRTZWxlY3Rpb24/KGM9d2luZG93LmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pOmM9dm9pZCAwO3JldHVybiBzZSYmaGEoc2UsYyk/bnVsbDooc2U9YyxhPU4uZ2V0UG9vbGVkKHBlLnNlbGVjdCxyZSxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PXFlLGliKGEpLGEpfVxudmFyIHZlPXtldmVudFR5cGVzOnBlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPWtlKGUpO2Y9dmEub25TZWxlY3Q7Zm9yKHZhciBoPTA7aDxmLmxlbmd0aDtoKyspe3ZhciBnPWZbaF07aWYoIWUuaGFzT3duUHJvcGVydHkoZyl8fCFlW2ddKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9WYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BGb2N1c1wiOmlmKGdjKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKXFlPWUscmU9YixzZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6c2U9cmU9cWU9bnVsbDticmVhaztjYXNlIFwidG9wTW91c2VEb3duXCI6dGU9ITA7YnJlYWs7Y2FzZSBcInRvcENvbnRleHRNZW51XCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpyZXR1cm4gdGU9ITEsdWUoYyxkKTtjYXNlIFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI6aWYob2UpYnJlYWs7XG5jYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOnJldHVybiB1ZShjLGQpfXJldHVybiBudWxsfX07TmEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIFRhcEV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtEYT1iYi5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlO0VhPWJiLmdldEluc3RhbmNlRnJvbU5vZGU7RmE9YmIuZ2V0Tm9kZUZyb21JbnN0YW5jZTtOYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOlJkLEVudGVyTGVhdmVFdmVudFBsdWdpbjp3ZCxDaGFuZ2VFdmVudFBsdWdpbjpwZCxTZWxlY3RFdmVudFBsdWdpbjp2ZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOlJifSk7XG5mdW5jdGlvbiB4ZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpc1tcInJldHVyblwiXT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIHplKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtudWxsPT09ZD8oZD1uZXcgeGUoYS50YWcsYixhLmtleSxhLm1vZGUpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5wZW5kaW5nUHJvcHM9YixkLmVmZmVjdFRhZz0wLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCk7ZC5leHBpcmF0aW9uVGltZT1jO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gQWUoYSxiLGMpe3ZhciBkPWEudHlwZSxlPWEua2V5O2E9YS5wcm9wczt2YXIgZj12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpZj1kLnByb3RvdHlwZSYmZC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD8yOjA7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGQpZj01O2Vsc2Ugc3dpdGNoKGQpe2Nhc2Ugc2M6cmV0dXJuIEJlKGEuY2hpbGRyZW4sYixjLGUpO2Nhc2Ugd2M6Zj0xMTtifD0zO2JyZWFrO2Nhc2UgdGM6Zj0xMTtifD0yO2JyZWFrO2Nhc2UgcGM6Zj03O2JyZWFrO2Nhc2UgcWM6Zj05O2JyZWFrO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZClzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB1YzpmPTEzO2JyZWFrO2Nhc2UgdmM6Zj0xMjticmVhaztjYXNlIHhjOmY9MTQ7YnJlYWs7ZGVmYXVsdDppZihcIm51bWJlclwiPT09dHlwZW9mIGQudGFnKXJldHVybiBiPWQsYi5wZW5kaW5nUHJvcHM9YSxiLmV4cGlyYXRpb25UaW1lPWMsXG5iO0QoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9ZWxzZSBEKFwiMTMwXCIsbnVsbD09ZD9kOnR5cGVvZiBkLFwiXCIpfWI9bmV3IHhlKGYsYSxlLGIpO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiBCZShhLGIsYyxkKXthPW5ldyB4ZSgxMCxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIENlKGEsYixjKXthPW5ldyB4ZSg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gRGUoYSxiLGMpe2I9bmV3IHhlKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifXZhciBFZT1udWxsLEZlPW51bGw7XG5mdW5jdGlvbiBHZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fWZ1bmN0aW9uIEhlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO0VlPUdlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtGZT1HZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfWZ1bmN0aW9uIEllKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBFZSYmRWUoYSl9ZnVuY3Rpb24gSmUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEZlJiZGZShhKX1uZXcgU2V0O1xuZnVuY3Rpb24gS2UoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGV4cGlyYXRpb25UaW1lOjAsZmlyc3Q6bnVsbCxsYXN0Om51bGwsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITEsaXNJbml0aWFsaXplZDohMSxjYXB0dXJlZFZhbHVlczpudWxsfX1mdW5jdGlvbiBMZShhLGIpe251bGw9PT1hLmxhc3Q/YS5maXJzdD1hLmxhc3Q9YjooYS5sYXN0Lm5leHQ9YixhLmxhc3Q9Yik7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+Yi5leHBpcmF0aW9uVGltZSlhLmV4cGlyYXRpb25UaW1lPWIuZXhwaXJhdGlvblRpbWV9dmFyIE1lPXZvaWQgMCxOZT12b2lkIDA7XG5mdW5jdGlvbiBPZShhKXtNZT1OZT1udWxsO3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS51cGRhdGVRdWV1ZTtudWxsPT09YyYmKGM9YS51cGRhdGVRdWV1ZT1LZShudWxsKSk7bnVsbCE9PWI/KGE9Yi51cGRhdGVRdWV1ZSxudWxsPT09YSYmKGE9Yi51cGRhdGVRdWV1ZT1LZShudWxsKSkpOmE9bnVsbDtNZT1jO05lPWEhPT1jP2E6bnVsbH1mdW5jdGlvbiBQZShhLGIpe09lKGEpO2E9TWU7dmFyIGM9TmU7bnVsbD09PWM/TGUoYSxiKTpudWxsPT09YS5sYXN0fHxudWxsPT09Yy5sYXN0PyhMZShhLGIpLExlKGMsYikpOihMZShhLGIpLGMubGFzdD1iKX1mdW5jdGlvbiBRZShhLGIsYyxkKXthPWEucGFydGlhbFN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChiLGMsZCk6YX1cbmZ1bmN0aW9uIFJlKGEsYixjLGQsZSxmKXtudWxsIT09YSYmYS51cGRhdGVRdWV1ZT09PWMmJihjPWIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTpjLmJhc2VTdGF0ZSxleHBpcmF0aW9uVGltZTpjLmV4cGlyYXRpb25UaW1lLGZpcnN0OmMuZmlyc3QsbGFzdDpjLmxhc3QsaXNJbml0aWFsaXplZDpjLmlzSW5pdGlhbGl6ZWQsY2FwdHVyZWRWYWx1ZXM6Yy5jYXB0dXJlZFZhbHVlcyxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMX0pO2MuZXhwaXJhdGlvblRpbWU9MDtjLmlzSW5pdGlhbGl6ZWQ/YT1jLmJhc2VTdGF0ZTooYT1jLmJhc2VTdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5pc0luaXRpYWxpemVkPSEwKTtmb3IodmFyIGg9ITAsZz1jLmZpcnN0LGs9ITE7bnVsbCE9PWc7KXt2YXIgdj1nLmV4cGlyYXRpb25UaW1lO2lmKHY+Zil7dmFyIGw9Yy5leHBpcmF0aW9uVGltZTtpZigwPT09bHx8bD52KWMuZXhwaXJhdGlvblRpbWU9djtrfHwoaz0hMCxjLmJhc2VTdGF0ZT1hKX1lbHNle2t8fFxuKGMuZmlyc3Q9Zy5uZXh0LG51bGw9PT1jLmZpcnN0JiYoYy5sYXN0PW51bGwpKTtpZihnLmlzUmVwbGFjZSlhPVFlKGcsZCxhLGUpLGg9ITA7ZWxzZSBpZih2PVFlKGcsZCxhLGUpKWE9aD9BKHt9LGEsdik6QShhLHYpLGg9ITE7Zy5pc0ZvcmNlZCYmKGMuaGFzRm9yY2VVcGRhdGU9ITApO251bGwhPT1nLmNhbGxiYWNrJiYodj1jLmNhbGxiYWNrTGlzdCxudWxsPT09diYmKHY9Yy5jYWxsYmFja0xpc3Q9W10pLHYucHVzaChnKSk7bnVsbCE9PWcuY2FwdHVyZWRWYWx1ZSYmKHY9Yy5jYXB0dXJlZFZhbHVlcyxudWxsPT09dj9jLmNhcHR1cmVkVmFsdWVzPVtnLmNhcHR1cmVkVmFsdWVdOnYucHVzaChnLmNhcHR1cmVkVmFsdWUpKX1nPWcubmV4dH1udWxsIT09Yy5jYWxsYmFja0xpc3Q/Yi5lZmZlY3RUYWd8PTMyOm51bGwhPT1jLmZpcnN0fHxjLmhhc0ZvcmNlVXBkYXRlfHxudWxsIT09Yy5jYXB0dXJlZFZhbHVlc3x8KGIudXBkYXRlUXVldWU9bnVsbCk7a3x8KGMuYmFzZVN0YXRlPWEpO1xucmV0dXJuIGF9ZnVuY3Rpb24gU2UoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTGlzdDtpZihudWxsIT09Yylmb3IoYS5jYWxsYmFja0xpc3Q9bnVsbCxhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV0sZT1kLmNhbGxiYWNrO2QuY2FsbGJhY2s9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZT9EKFwiMTkxXCIsZSk6dm9pZCAwO2UuY2FsbChiKX19XG5mdW5jdGlvbiBUZShhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1ifHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSlyZXR1cm4hMDt2YXIgbj1hLnN0YXRlTm9kZTthPWEudHlwZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5zaG91bGRDb21wb25lbnRVcGRhdGU/bi5zaG91bGRDb21wb25lbnRVcGRhdGUoYyxlLGYpOmEucHJvdG90eXBlJiZhLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8haGEoYixjKXx8IWhhKGQsZSk6ITB9ZnVuY3Rpb24gaChhLGIpe2IudXBkYXRlcj1yO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWF9ZnVuY3Rpb24gZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfWZ1bmN0aW9uIGsoYSxiLGMsZCl7YT1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKXJldHVybiBhLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5jYWxsKG51bGwsYyxkKX12YXIgdj1hLmNhY2hlQ29udGV4dCxsPWEuZ2V0TWFza2VkQ29udGV4dCxwPWEuZ2V0VW5tYXNrZWRDb250ZXh0LHo9YS5pc0NvbnRleHRDb25zdW1lcixCPWEuaGFzQ29udGV4dENoYW5nZWQscj17aXNNb3VudGVkOnlkLGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGQsZSl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZj1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmYscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsXG5jYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGYpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMCxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGYpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxkKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBlPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpkLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMCxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGUpfX07cmV0dXJue2Fkb3B0Q2xhc3NJbnN0YW5jZTpoLGNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6ayxcbmNvbnN0cnVjdENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1wKGEpLGU9eihhKSxmPWU/bChhLGQpOmthO2M9bmV3IGMoYixmKTt2YXIgbj1udWxsIT09Yy5zdGF0ZSYmdm9pZCAwIT09Yy5zdGF0ZT9jLnN0YXRlOm51bGw7aChhLGMpO2EubWVtb2l6ZWRTdGF0ZT1uO2I9ayhhLGMsYixuKTtudWxsIT09YiYmdm9pZCAwIT09YiYmKGEubWVtb2l6ZWRTdGF0ZT1BKHt9LGEubWVtb2l6ZWRTdGF0ZSxiKSk7ZSYmdihhLGQsZik7cmV0dXJuIGN9LG1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPWEuYWx0ZXJuYXRlLGU9YS5zdGF0ZU5vZGUsZj1hLnBlbmRpbmdQcm9wcyxuPXAoYSk7ZS5wcm9wcz1mO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1rYTtlLmNvbnRleHQ9bChhLG4pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYz1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxjIT09ZS5zdGF0ZSYmci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihlLnN0YXRlPVJlKGQsYSxjLGUsZixiKSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfSxyZXN1bWVNb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsbj1hLnN0YXRlTm9kZTtuLnByb3BzPWEubWVtb2l6ZWRQcm9wcztuLnN0YXRlPVxuYS5tZW1vaXplZFN0YXRlO3ZhciBoPWEubWVtb2l6ZWRQcm9wcyxyPWEucGVuZGluZ1Byb3BzLHo9bi5jb250ZXh0LHE9cChhKTtxPWwoYSxxKTsoYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cnx8eiE9PXEpJiZnKGEsbixyLHEpO3o9YS5tZW1vaXplZFN0YXRlO2I9bnVsbCE9PWEudXBkYXRlUXVldWU/UmUobnVsbCxhLGEudXBkYXRlUXVldWUsbixyLGIpOno7dmFyIHU9dm9pZCAwO2ghPT1yJiYodT1rKGEsbixyLGIpKTtpZihudWxsIT09dSYmdm9pZCAwIT09dSl7Yj1udWxsPT09Ynx8dm9pZCAwPT09Yj91OkEoe30sYix1KTt2YXIgdD1hLnVwZGF0ZVF1ZXVlO1xubnVsbCE9PXQmJih0LmJhc2VTdGF0ZT1BKHt9LHQuYmFzZVN0YXRlLHUpKX1pZighKGghPT1yfHx6IT09Ynx8QigpfHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksITE7KGg9ZihhLGgscix6LGIscSkpPyhjfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnQmJm4uY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PVxuNCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KSxkKGEsciksZShhLGIpKTtuLnByb3BzPXI7bi5zdGF0ZT1iO24uY29udGV4dD1xO3JldHVybiBofSx1cGRhdGVDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgbj1iLnR5cGUseD1iLnN0YXRlTm9kZTt4LnByb3BzPWIubWVtb2l6ZWRQcm9wczt4LnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTt2YXIgaD1iLm1lbW9pemVkUHJvcHMscj1iLnBlbmRpbmdQcm9wcyxxPXguY29udGV4dCx1PXAoYik7dT1sKGIsdSk7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09cnx8cSE9PXUpJiZnKGIseCxyLHUpO3E9Yi5tZW1vaXplZFN0YXRlO2M9bnVsbCE9PWIudXBkYXRlUXVldWU/UmUoYSxiLGIudXBkYXRlUXVldWUseCxyLGMpOnE7dmFyIHQ9dm9pZCAwO2ghPT1yJiYodD1rKGIseCxyLGMpKTtpZihudWxsIT09dCYmdm9pZCAwIT09dCl7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz90OkEoe30sYyx0KTt2YXIgeT1iLnVwZGF0ZVF1ZXVlO251bGwhPT15JiYoeS5iYXNlU3RhdGU9QSh7fSx5LmJhc2VTdGF0ZSx0KSl9aWYoIShoIT09cnx8cSE9PWN8fEIoKXx8bnVsbCE9PWIudXBkYXRlUXVldWUmJmIudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKXJldHVyblwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmXG5xPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTIwNDgpLCExOyh0PWYoYixoLHIscSxjLHUpKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnRXaWxsVXBkYXRlJiZ4LmNvbXBvbmVudFdpbGxVcGRhdGUocixjLHUpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZ4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKHIsYyx1KSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTIwNDgpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZcbnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksZChiLHIpLGUoYixjKSk7eC5wcm9wcz1yO3guc3RhdGU9Yzt4LmNvbnRleHQ9dTtyZXR1cm4gdH19fXZhciBVZT1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gVmUoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMiE9PWMudGFnP0QoXCIxMTBcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOkQoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzPT09a2E/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT9EKFwiMTQ4XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6RChcIjI1NFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gV2UoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJkQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIFhlKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9emUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBoKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGcoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1DZShjLGEubW9kZSxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9VmUoYSxiLGMpLGRbXCJyZXR1cm5cIl09YSxkO2Q9QWUoYyxhLm1vZGUsZCk7ZC5yZWY9VmUoYSxiLGMpO2RbXCJyZXR1cm5cIl09YTtyZXR1cm4gZH1mdW5jdGlvbiB2KGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbkRlKGMsYS5tb2RlLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBsKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9QmUoYyxhLm1vZGUsZCxmKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1DZShcIlwiK2IsYS5tb2RlLGMpLGJbXCJyZXR1cm5cIl09YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBjPUFlKGIsYS5tb2RlLGMpLGMucmVmPVZlKGEsbnVsbCxiKSxjW1wicmV0dXJuXCJdPWEsYztjYXNlIHJjOnJldHVybiBiPURlKGIsYS5tb2RlLGMpLGJbXCJyZXR1cm5cIl09YSxifWlmKFVlKGIpfHx6YyhiKSlyZXR1cm4gYj1CZShiLFxuYS5tb2RlLGMsbnVsbCksYltcInJldHVyblwiXT1hLGI7V2UoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6ZyhhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09c2M/bChhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHJjOnJldHVybiBjLmtleT09PWU/dihhLGIsYyxkKTpudWxsfWlmKFVlKGMpfHx6YyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpsKGEsYixjLGQsbnVsbCk7V2UoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBCKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxnKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXNjP2woYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHJjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCx2KGIsYSxkLGUpfWlmKFVlKGQpfHx6YyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxsKGIsYSxkLGUsbnVsbCk7V2UoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGUsbCxnLGgpe2Zvcih2YXIgcj1udWxsLGs9bnVsbCxxPWwsdT1sPTAsdD1udWxsO251bGwhPT1xJiZ1PGcubGVuZ3RoO3UrKyl7cS5pbmRleD51Pyh0PXEscT1udWxsKTp0PXEuc2libGluZzt2YXIgbj16KGUscSxnW3VdLGgpO2lmKG51bGw9PT1uKXtudWxsPT09cSYmKHE9dCk7YnJlYWt9YSYmcSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSxxKTtsPWYobixsLHUpO251bGw9PT1rP3I9bjprLnNpYmxpbmc9bjtrPW47cT10fWlmKHU9PT1nLmxlbmd0aClyZXR1cm4gYyhlLHEpLHI7aWYobnVsbD09PXEpe2Zvcig7dTxnLmxlbmd0aDt1KyspaWYocT1wKGUsZ1t1XSxoKSlsPWYocSxsLHUpLG51bGw9PT1rP3I9cTprLnNpYmxpbmc9cSxrPXE7cmV0dXJuIHJ9Zm9yKHE9ZChlLHEpO3U8Zy5sZW5ndGg7dSsrKWlmKHQ9QihxLGUsdSxnW3VdLGgpKXtpZihhJiZudWxsIT09dC5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09dC5rZXk/dTp0LmtleSk7bD1mKHQsbCx1KTtudWxsPT09az9yPXQ6ay5zaWJsaW5nPXQ7az10fWEmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHJ9ZnVuY3Rpb24gUShlLGwsZyxoKXt2YXIgcj16YyhnKTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygcj9EKFwiMTUwXCIpOnZvaWQgMDtnPXIuY2FsbChnKTtudWxsPT1nP0QoXCIxNTFcIik6dm9pZCAwO2Zvcih2YXIgaz1cbnI9bnVsbCxxPWwsdT1sPTAsdD1udWxsLG49Zy5uZXh0KCk7bnVsbCE9PXEmJiFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpe3EuaW5kZXg+dT8odD1xLHE9bnVsbCk6dD1xLnNpYmxpbmc7dmFyIEg9eihlLHEsbi52YWx1ZSxoKTtpZihudWxsPT09SCl7cXx8KHE9dCk7YnJlYWt9YSYmcSYmbnVsbD09PUguYWx0ZXJuYXRlJiZiKGUscSk7bD1mKEgsbCx1KTtudWxsPT09az9yPUg6ay5zaWJsaW5nPUg7az1IO3E9dH1pZihuLmRvbmUpcmV0dXJuIGMoZSxxKSxyO2lmKG51bGw9PT1xKXtmb3IoOyFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpbj1wKGUsbi52YWx1ZSxoKSxudWxsIT09biYmKGw9ZihuLGwsdSksbnVsbD09PWs/cj1uOmsuc2libGluZz1uLGs9bik7cmV0dXJuIHJ9Zm9yKHE9ZChlLHEpOyFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpaWYobj1CKHEsZSx1LG4udmFsdWUsaCksbnVsbCE9PW4pe2lmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT1uLmtleT91Om4ua2V5KTtcbmw9ZihuLGwsdSk7bnVsbD09PWs/cj1uOmsuc2libGluZz1uO2s9bn1hJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiByfXJldHVybiBmdW5jdGlvbihhLGQsZixsKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1zYyYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgZz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGcpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugb2M6YTp7dmFyIGs9Zi5rZXk7Zm9yKGc9ZDtudWxsIT09Zzspe2lmKGcua2V5PT09aylpZigxMD09PWcudGFnP2YudHlwZT09PXNjOmcudHlwZT09PWYudHlwZSl7YyhhLGcuc2libGluZyk7ZD1lKGcsZi50eXBlPT09c2M/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGwpO2QucmVmPVZlKGEsZyxmKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZyk7YnJlYWt9ZWxzZSBiKGEsZyk7Zz1nLnNpYmxpbmd9Zi50eXBlPT09XG5zYz8oZD1CZShmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxsLGYua2V5KSxkW1wicmV0dXJuXCJdPWEsYT1kKToobD1BZShmLGEubW9kZSxsKSxsLnJlZj1WZShhLGQsZiksbFtcInJldHVyblwiXT1hLGE9bCl9cmV0dXJuIGgoYSk7Y2FzZSByYzphOntmb3IoZz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09ZylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10sbCk7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9RGUoZixhLm1vZGUsbCk7ZFtcInJldHVyblwiXT1hO2E9ZH1yZXR1cm4gaChhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJlxuNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGwpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihjKGEsZCksZD1DZShmLGEubW9kZSxsKSxkW1wicmV0dXJuXCJdPWEsYT1kKSxoKGEpO2lmKFVlKGYpKXJldHVybiByKGEsZCxmLGwpO2lmKHpjKGYpKXJldHVybiBRKGEsZCxmLGwpO2cmJldlKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpsPWEudHlwZSxEKFwiMTUyXCIsbC5kaXNwbGF5TmFtZXx8bC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgWWU9WGUoITApLFplPVhlKCExKTtcbmZ1bmN0aW9uICRlKGEsYixjLGQsZSxmLGgpe2Z1bmN0aW9uIGcoYSxiLGMpe2soYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gayhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1plKGIsbnVsbCxjLGQpOlllKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIHYoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBsKGEsYixjLGQsZSxmKXt2KGEsYik7aWYoIWMmJiFlKXJldHVybiBkJiZ5KGIsITEpLHIoYSxiKTtjPWIuc3RhdGVOb2RlO25jLmN1cnJlbnQ9Yjt2YXIgbD1lP251bGw6Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtlJiYoayhhLGIsbnVsbCxmKSxiLmNoaWxkPW51bGwpO2soYSxiLGwsZik7Yi5tZW1vaXplZFN0YXRlPWMuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWMucHJvcHM7ZCYmeShiLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBwKGEpe3ZhciBiPWEuc3RhdGVOb2RlO1xuYi5wZW5kaW5nQ29udGV4dD90KGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJnQoYSxiLmNvbnRleHQsITEpO1koYSxiLmNvbnRhaW5lckluZm8pfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDtmb3IobnVsbCE9PWUmJihlW1wicmV0dXJuXCJdPWEpO251bGwhPT1lOyl7c3dpdGNoKGUudGFnKXtjYXNlIDEyOnZhciBmPWUuc3RhdGVOb2RlfDA7aWYoZS50eXBlPT09YiYmMCE9PShmJmMpKXtmb3IoZj1lO251bGwhPT1mOyl7dmFyIGw9Zi5hbHRlcm5hdGU7aWYoMD09PWYuZXhwaXJhdGlvblRpbWV8fGYuZXhwaXJhdGlvblRpbWU+ZClmLmV4cGlyYXRpb25UaW1lPWQsbnVsbCE9PWwmJigwPT09bC5leHBpcmF0aW9uVGltZXx8bC5leHBpcmF0aW9uVGltZT5kKSYmKGwuZXhwaXJhdGlvblRpbWU9ZCk7ZWxzZSBpZihudWxsIT09bCYmKDA9PT1sLmV4cGlyYXRpb25UaW1lfHxsLmV4cGlyYXRpb25UaW1lPmQpKWwuZXhwaXJhdGlvblRpbWU9XG5kO2Vsc2UgYnJlYWs7Zj1mW1wicmV0dXJuXCJdfWY9bnVsbH1lbHNlIGY9ZS5jaGlsZDticmVhaztjYXNlIDEzOmY9ZS50eXBlPT09YS50eXBlP251bGw6ZS5jaGlsZDticmVhaztkZWZhdWx0OmY9ZS5jaGlsZH1pZihudWxsIT09ZilmW1wicmV0dXJuXCJdPWU7ZWxzZSBmb3IoZj1lO251bGwhPT1mOyl7aWYoZj09PWEpe2Y9bnVsbDticmVha31lPWYuc2libGluZztpZihudWxsIT09ZSl7Zj1lO2JyZWFrfWY9ZltcInJldHVyblwiXX1lPWZ9fWZ1bmN0aW9uIEIoYSxiLGMpe3ZhciBkPWIudHlwZS5fY29udGV4dCxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFByb3BzO2lmKCFxKCkmJmY9PT1lKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO3ZhciBsPWUudmFsdWU7Yi5tZW1vaXplZFByb3BzPWU7aWYobnVsbD09PWYpbD0xMDczNzQxODIzO2Vsc2UgaWYoZi52YWx1ZT09PWUudmFsdWUpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYiksXG5yKGEsYik7bD0wfWVsc2V7dmFyIGg9Zi52YWx1ZTtpZihoPT09bCYmKDAhPT1ofHwxL2g9PT0xL2wpfHxoIT09aCYmbCE9PWwpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO2w9MH1lbHNlIGlmKGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsbCk6MTA3Mzc0MTgyMyxsfD0wLDA9PT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKX1lbHNlIHooYixkLGwsYyl9Yi5zdGF0ZU5vZGU9bDtHKGIpO2coYSxiLGUuY2hpbGRyZW4pO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHIoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/RChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz16ZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO1xuYi5jaGlsZD1jO2ZvcihjW1wicmV0dXJuXCJdPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9emUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjW1wicmV0dXJuXCJdPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIFE9YS5zaG91bGRTZXRUZXh0Q29udGVudCxuPWEuc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSx4PWIucHVzaEhvc3RDb250ZXh0LFk9Yi5wdXNoSG9zdENvbnRhaW5lcixHPWQucHVzaFByb3ZpZGVyLFI9Yy5nZXRNYXNrZWRDb250ZXh0LFM9Yy5nZXRVbm1hc2tlZENvbnRleHQscT1jLmhhc0NvbnRleHRDaGFuZ2VkLHU9Yy5wdXNoQ29udGV4dFByb3ZpZGVyLHQ9Yy5wdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHk9Yy5pbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyLEg9ZS5lbnRlckh5ZHJhdGlvblN0YXRlLFdhPWUucmVzZXRIeWRyYXRpb25TdGF0ZSxDYj1lLnRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuYT1UZShjLGYsaCxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRQcm9wcz1ifSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRTdGF0ZT1ifSk7dmFyIEpjPWEuYWRvcHRDbGFzc0luc3RhbmNlLEtjPWEuY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxMYz1hLmNvbnN0cnVjdENsYXNzSW5zdGFuY2UsRGI9YS5tb3VudENsYXNzSW5zdGFuY2UsTWM9YS5yZXN1bWVNb3VudENsYXNzSW5zdGFuY2UsRWI9YS51cGRhdGVDbGFzc0luc3RhbmNlO3JldHVybntiZWdpbldvcms6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOnAoYik7YnJlYWs7Y2FzZSAyOnUoYik7YnJlYWs7Y2FzZSA0OlkoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEzOkcoYil9cmV0dXJuIG51bGx9c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/RChcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLFxuZT1iLnBlbmRpbmdQcm9wcyxmPVMoYik7Zj1SKGIsZik7ZD1kKGUsZik7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyJiZ2b2lkIDA9PT1kLiQkdHlwZW9mPyhmPWIudHlwZSxiLnRhZz0yLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZC5zdGF0ZSYmdm9pZCAwIT09ZC5zdGF0ZT9kLnN0YXRlOm51bGwsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoZT1LYyhiLGQsZSxiLm1lbW9pemVkU3RhdGUpLG51bGwhPT1lJiZ2b2lkIDAhPT1lJiYoYi5tZW1vaXplZFN0YXRlPUEoe30sYi5tZW1vaXplZFN0YXRlLGUpKSksZT11KGIpLEpjKGIsZCksRGIoYixjKSxhPWwoYSxiLCEwLGUsITEsYykpOihiLnRhZz0xLGcoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk7cmV0dXJuIGE7Y2FzZSAxOnJldHVybiBlPWIudHlwZSxjPWIucGVuZGluZ1Byb3BzLHEoKXx8XG5iLm1lbW9pemVkUHJvcHMhPT1jPyhkPVMoYiksZD1SKGIsZCksZT1lKGMsZCksYi5lZmZlY3RUYWd8PTEsZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMjplPXUoYik7bnVsbD09PWE/bnVsbD09PWIuc3RhdGVOb2RlPyhMYyhiLGIucGVuZGluZ1Byb3BzKSxEYihiLGMpLGQ9ITApOmQ9TWMoYixjKTpkPUViKGEsYixjKTtmPSExO3ZhciBoPWIudXBkYXRlUXVldWU7bnVsbCE9PWgmJm51bGwhPT1oLmNhcHR1cmVkVmFsdWVzJiYoZj1kPSEwKTtyZXR1cm4gbChhLGIsZCxlLGYsYyk7Y2FzZSAzOmE6aWYocChiKSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQpe2Y9Yi5tZW1vaXplZFN0YXRlO2U9UmUoYSxiLGQsbnVsbCxudWxsLGMpO2IubWVtb2l6ZWRTdGF0ZT1lO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMpZD1udWxsO2Vsc2UgaWYoZj09PWUpe1dhKCk7YT1yKGEsYik7YnJlYWsgYX1lbHNlIGQ9XG5lLmVsZW1lbnQ7Zj1iLnN0YXRlTm9kZTsobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZi5oeWRyYXRlJiZIKGIpPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPVplKGIsbnVsbCxkLGMpKTooV2EoKSxnKGEsYixkKSk7Yi5tZW1vaXplZFN0YXRlPWU7YT1iLmNoaWxkfWVsc2UgV2EoKSxhPXIoYSxiKTtyZXR1cm4gYTtjYXNlIDU6YTp7eChiKTtudWxsPT09YSYmQ2IoYik7ZT1iLnR5cGU7aD1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO2lmKCFxKCkmJmg9PT1kKXtpZihoPWIubW9kZSYxJiZuKGUsZCkpYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2lmKCFofHwxMDczNzQxODIzIT09Yyl7YT1yKGEsYik7YnJlYWsgYX19aD1kLmNoaWxkcmVuO1EoZSxkKT9oPW51bGw6ZiYmUShlLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTt2KGEsYik7MTA3Mzc0MTgyMyE9PWMmJmIubW9kZSYxJiZuKGUsZCk/KGIuZXhwaXJhdGlvblRpbWU9XG4xMDczNzQxODIzLGIubWVtb2l6ZWRQcm9wcz1kLGE9bnVsbCk6KGcoYSxiLGgpLGIubWVtb2l6ZWRQcm9wcz1kLGE9Yi5jaGlsZCl9cmV0dXJuIGE7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2IoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLG51bGw7Y2FzZSA4OmIudGFnPTc7Y2FzZSA3OnJldHVybiBlPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09ZXx8KGU9Yi5tZW1vaXplZFByb3BzKSxkPWUuY2hpbGRyZW4sYi5zdGF0ZU5vZGU9bnVsbD09PWE/WmUoYixiLnN0YXRlTm9kZSxkLGMpOlllKGIsYS5zdGF0ZU5vZGUsZCxjKSxiLm1lbW9pemVkUHJvcHM9ZSxiLnN0YXRlTm9kZTtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWU/KG51bGw9PT1hP2IuY2hpbGQ9WWUoYixudWxsLGUsYyk6ZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPVxuZSxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxNDpyZXR1cm4gYz1iLnR5cGUucmVuZGVyLGM9YyhiLnBlbmRpbmdQcm9wcyxiLnJlZiksZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYi5jaGlsZDtjYXNlIDEwOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTE6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4scSgpfHxudWxsIT09YyYmYi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTM6cmV0dXJuIEIoYSxiLGMpO2Nhc2UgMTI6YTp7ZD1iLnR5cGU7Zj1iLnBlbmRpbmdQcm9wcztoPWIubWVtb2l6ZWRQcm9wcztlPWQuX2N1cnJlbnRWYWx1ZTt2YXIgdD1kLl9jaGFuZ2VkQml0cztpZihxKCl8fDAhPT10fHxoIT09Zil7Yi5tZW1vaXplZFByb3BzPVxuZjt2YXIgaz1mLnVuc3RhYmxlX29ic2VydmVkQml0cztpZih2b2lkIDA9PT1rfHxudWxsPT09aylrPTEwNzM3NDE4MjM7Yi5zdGF0ZU5vZGU9aztpZigwIT09KHQmaykpeihiLGQsdCxjKTtlbHNlIGlmKGg9PT1mKXthPXIoYSxiKTticmVhayBhfWM9Zi5jaGlsZHJlbjtjPWMoZSk7ZyhhLGIsYyk7YT1iLmNoaWxkfWVsc2UgYT1yKGEsYil9cmV0dXJuIGE7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gYWYoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe2EuZWZmZWN0VGFnfD00fXZhciBoPWEuY3JlYXRlSW5zdGFuY2UsZz1hLmNyZWF0ZVRleHRJbnN0YW5jZSxrPWEuYXBwZW5kSW5pdGlhbENoaWxkLHY9YS5maW5hbGl6ZUluaXRpYWxDaGlsZHJlbixsPWEucHJlcGFyZVVwZGF0ZSxwPWEucGVyc2lzdGVuY2Usej1iLmdldFJvb3RIb3N0Q29udGFpbmVyLEI9Yi5wb3BIb3N0Q29udGV4dCxyPWIuZ2V0SG9zdENvbnRleHQsUT1iLnBvcEhvc3RDb250YWluZXIsbj1jLnBvcENvbnRleHRQcm92aWRlcix4PWMucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LFk9ZC5wb3BQcm92aWRlcixHPWUucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxSPWUucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsUz1lLnBvcEh5ZHJhdGlvblN0YXRlLHE9dm9pZCAwLHU9dm9pZCAwLHQ9dm9pZCAwO2EubXV0YXRpb24/KHE9ZnVuY3Rpb24oKXt9LHU9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPVxuYykmJmYoYil9LHQ9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJmYoYil9KTpwP0QoXCIyMzVcIik6RChcIjIzNlwiKTtyZXR1cm57Y29tcGxldGVXb3JrOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gbnVsbDtjYXNlIDI6cmV0dXJuIG4oYiksYT1iLnN0YXRlTm9kZSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQmJm51bGwhPT1kLmNhcHR1cmVkVmFsdWVzJiYoYi5lZmZlY3RUYWcmPS02NSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnREaWRDYXRjaD9iLmVmZmVjdFRhZ3w9MjU2OmQuY2FwdHVyZWRWYWx1ZXM9bnVsbCksbnVsbDtjYXNlIDM6UShiKTt4KGIpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKVMoYiksYi5lZmZlY3RUYWcmPS0zO3EoYik7YT1iLnVwZGF0ZVF1ZXVlO1xubnVsbCE9PWEmJm51bGwhPT1hLmNhcHR1cmVkVmFsdWVzJiYoYi5lZmZlY3RUYWd8PTI1Nik7cmV0dXJuIG51bGw7Y2FzZSA1OkIoYik7Yz16KCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIHA9YS5tZW1vaXplZFByb3BzLEg9Yi5zdGF0ZU5vZGUseT1yKCk7SD1sKEgsZSxwLGQsYyx5KTt1KGEsYixILGUscCxkLGMseSk7YS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2V7aWYoIWQpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9cigpO2lmKFMoYikpRyhiLGMsYSkmJmYoYik7ZWxzZXtwPWgoZSxkLGMsYSxiKTthOmZvcih5PWIuY2hpbGQ7bnVsbCE9PXk7KXtpZig1PT09eS50YWd8fDY9PT15LnRhZylrKHAseS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PXkudGFnJiZudWxsIT09eS5jaGlsZCl7eS5jaGlsZFtcInJldHVyblwiXT15O3k9eS5jaGlsZDtjb250aW51ZX1pZih5PT09YilicmVhaztcbmZvcig7bnVsbD09PXkuc2libGluZzspe2lmKG51bGw9PT15W1wicmV0dXJuXCJdfHx5W1wicmV0dXJuXCJdPT09YilicmVhayBhO3k9eVtcInJldHVyblwiXX15LnNpYmxpbmdbXCJyZXR1cm5cIl09eVtcInJldHVyblwiXTt5PXkuc2libGluZ312KHAsZSxkLGMsYSkmJmYoYik7Yi5zdGF0ZU5vZGU9cH1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpdChhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXooKTtjPXIoKTtTKGIpP1IoYikmJmYoYik6Yi5zdGF0ZU5vZGU9ZyhkLGEsYyxiKX1yZXR1cm4gbnVsbDtjYXNlIDc6KGQ9Yi5tZW1vaXplZFByb3BzKT92b2lkIDA6RChcIjE2NVwiKTtiLnRhZz04O2U9W107YTpmb3IoKHA9Yi5zdGF0ZU5vZGUpJiYocFtcInJldHVyblwiXT1iKTtudWxsIT09XG5wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWd8fDQ9PT1wLnRhZylEKFwiMjQ3XCIpO2Vsc2UgaWYoOT09PXAudGFnKWUucHVzaChwLnBlbmRpbmdQcm9wcy52YWx1ZSk7ZWxzZSBpZihudWxsIT09cC5jaGlsZCl7cC5jaGlsZFtcInJldHVyblwiXT1wO3A9cC5jaGlsZDtjb250aW51ZX1mb3IoO251bGw9PT1wLnNpYmxpbmc7KXtpZihudWxsPT09cFtcInJldHVyblwiXXx8cFtcInJldHVyblwiXT09PWIpYnJlYWsgYTtwPXBbXCJyZXR1cm5cIl19cC5zaWJsaW5nW1wicmV0dXJuXCJdPXBbXCJyZXR1cm5cIl07cD1wLnNpYmxpbmd9cD1kLmhhbmRsZXI7ZD1wKGQucHJvcHMsZSk7Yi5jaGlsZD1ZZShiLG51bGwhPT1hP2EuY2hpbGQ6bnVsbCxkLGMpO3JldHVybiBiLmNoaWxkO2Nhc2UgODpyZXR1cm4gYi50YWc9NyxudWxsO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTA6cmV0dXJuIG51bGw7Y2FzZSAxMTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIFEoYikscShiKSxudWxsO1xuY2FzZSAxMzpyZXR1cm4gWShiKSxudWxsO2Nhc2UgMTI6cmV0dXJuIG51bGw7Y2FzZSAwOkQoXCIxNjdcIik7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gYmYoYSxiLGMsZCxlKXt2YXIgZj1hLnBvcEhvc3RDb250YWluZXIsaD1hLnBvcEhvc3RDb250ZXh0LGc9Yi5wb3BDb250ZXh0UHJvdmlkZXIsaz1iLnBvcFRvcExldmVsQ29udGV4dE9iamVjdCx2PWMucG9wUHJvdmlkZXI7cmV0dXJue3Rocm93RXhjZXB0aW9uOmZ1bmN0aW9uKGEsYixjKXtiLmVmZmVjdFRhZ3w9NTEyO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7Yj17dmFsdWU6Yyxzb3VyY2U6YixzdGFjazpCYyhiKX07ZG97c3dpdGNoKGEudGFnKXtjYXNlIDM6T2UoYSk7YS51cGRhdGVRdWV1ZS5jYXB0dXJlZFZhbHVlcz1bYl07YS5lZmZlY3RUYWd8PTEwMjQ7cmV0dXJuO2Nhc2UgMjppZihjPWEuc3RhdGVOb2RlLDA9PT0oYS5lZmZlY3RUYWcmNjQpJiZudWxsIT09YyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50RGlkQ2F0Y2gmJiFlKGMpKXtPZShhKTtjPWEudXBkYXRlUXVldWU7dmFyIGQ9Yy5jYXB0dXJlZFZhbHVlcztudWxsPT09ZD9cbmMuY2FwdHVyZWRWYWx1ZXM9W2JdOmQucHVzaChiKTthLmVmZmVjdFRhZ3w9MTAyNDtyZXR1cm59fWE9YVtcInJldHVyblwiXX13aGlsZShudWxsIT09YSl9LHVud2luZFdvcms6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZyhhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBmKGEpLGsoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIGgoYSksbnVsbDtjYXNlIDQ6cmV0dXJuIGYoYSksbnVsbDtjYXNlIDEzOnJldHVybiB2KGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19LHVud2luZEludGVycnVwdGVkV29yazpmdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpnKGEpO2JyZWFrO2Nhc2UgMzpmKGEpO2soYSk7YnJlYWs7Y2FzZSA1OmgoYSk7YnJlYWs7Y2FzZSA0OmYoYSk7YnJlYWs7Y2FzZSAxMzp2KGEpfX19fVxuZnVuY3Rpb24gY2YoYSxiKXt2YXIgYz1iLnNvdXJjZTtudWxsPT09Yi5zdGFjayYmQmMoYyk7bnVsbCE9PWMmJkFjKGMpO2I9Yi52YWx1ZTtudWxsIT09YSYmMj09PWEudGFnJiZBYyhhKTt0cnl7YiYmYi5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGIpfWNhdGNoKGQpe2QmJmQuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihkKX19XG5mdW5jdGlvbiBkZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSl7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2godCl7YihhLHQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gaChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgSmUmJkplKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOmYoYSk7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2MucHJvcHM9YS5tZW1vaXplZFByb3BzLGMuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGMuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtiKGEsdCl9YnJlYWs7Y2FzZSA1OmYoYSk7YnJlYWs7Y2FzZSA3OmcoYS5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgNDpwJiZ2KGEpfX1mdW5jdGlvbiBnKGEpe2Zvcih2YXIgYj1hOzspaWYoaChiKSxudWxsPT09Yi5jaGlsZHx8cCYmND09PWIudGFnKXtpZihiPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfWVsc2UgYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZH1mdW5jdGlvbiBrKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfWZ1bmN0aW9uIHYoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iW1wicmV0dXJuXCJdO2E6Zm9yKDs7KXtudWxsPT09Yz9EKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yz0hMH1pZig1PT09XG5iLnRhZ3x8Nj09PWIudGFnKWcoYiksZT9TKGQsYi5zdGF0ZU5vZGUpOlIoZCxiLnN0YXRlTm9kZSk7ZWxzZSBpZig0PT09Yi50YWc/ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOmgoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGRbXCJyZXR1cm5cIl09YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl07ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXZhciBsPWEuZ2V0UHVibGljSW5zdGFuY2UscD1hLm11dGF0aW9uO2E9YS5wZXJzaXN0ZW5jZTtwfHwoYT9EKFwiMjM1XCIpOkQoXCIyMzZcIikpO3ZhciB6PXAuY29tbWl0TW91bnQsQj1wLmNvbW1pdFVwZGF0ZSxyPXAucmVzZXRUZXh0Q29udGVudCxRPXAuY29tbWl0VGV4dFVwZGF0ZSxuPXAuYXBwZW5kQ2hpbGQsXG54PXAuYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcixZPXAuaW5zZXJ0QmVmb3JlLEc9cC5pbnNlcnRJbkNvbnRhaW5lckJlZm9yZSxSPXAucmVtb3ZlQ2hpbGQsUz1wLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjtyZXR1cm57Y29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6aWYoYi5lZmZlY3RUYWcmMjA0OCYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2EucHJvcHM9Yi5tZW1vaXplZFByb3BzO2Euc3RhdGU9Yi5tZW1vaXplZFN0YXRlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShjLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0UmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXtyKGEuc3RhdGVOb2RlKX0sXG5jb21taXRQbGFjZW1lbnQ6ZnVuY3Rpb24oYSl7YTp7Zm9yKHZhciBiPWFbXCJyZXR1cm5cIl07bnVsbCE9PWI7KXtpZihrKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iW1wicmV0dXJuXCJdfUQoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDpEKFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYocihiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Y1tcInJldHVyblwiXXx8ayhjW1wicmV0dXJuXCJdKSl7Yz1udWxsO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWMuc2libGluZ1tcInJldHVyblwiXT1jW1wicmV0dXJuXCJdO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1cbmMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO2lmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGRbXCJyZXR1cm5cIl09YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZyljP2Q/RyhiLGUuc3RhdGVOb2RlLGMpOlkoYixlLnN0YXRlTm9kZSxjKTpkP3goYixlLnN0YXRlTm9kZSk6bihiLGUuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGRbXCJyZXR1cm5cIl09ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWVbXCJyZXR1cm5cIl18fGVbXCJyZXR1cm5cIl09PT1hKXJldHVybjtlPWVbXCJyZXR1cm5cIl19ZS5zaWJsaW5nW1wicmV0dXJuXCJdPWVbXCJyZXR1cm5cIl07ZT1lLnNpYmxpbmd9fSxjb21taXREZWxldGlvbjpmdW5jdGlvbihhKXt2KGEpO1xuYVtcInJldHVyblwiXT1udWxsO2EuY2hpbGQ9bnVsbDthLmFsdGVybmF0ZSYmKGEuYWx0ZXJuYXRlLmNoaWxkPW51bGwsYS5hbHRlcm5hdGVbXCJyZXR1cm5cIl09bnVsbCl9LGNvbW1pdFdvcms6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJkIoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2MlwiKTp2b2lkIDA7Yz1iLm1lbW9pemVkUHJvcHM7UShiLnN0YXRlTm9kZSxudWxsIT09YT9hLm1lbW9pemVkUHJvcHM6YyxjKTticmVhaztjYXNlIDM6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0TGlmZUN5Y2xlczpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDI6YT1cbmMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5wcm9wcz1jLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2I9Yi5tZW1vaXplZFN0YXRlO2EucHJvcHM9Yy5tZW1vaXplZFByb3BzO2Euc3RhdGU9Yy5tZW1vaXplZFN0YXRlO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYixhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1jPWMudXBkYXRlUXVldWU7bnVsbCE9PWMmJlNlKGMsYSk7YnJlYWs7Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9bChjLmNoaWxkLnN0YXRlTm9kZSk7YnJlYWs7Y2FzZSAyOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9U2UoYixhKX1icmVhaztjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmXG40JiZ6KGEsYy50eXBlLGMubWVtb2l6ZWRQcm9wcyxjKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdEVycm9yTG9nZ2luZzpmdW5jdGlvbihhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOnZhciBjPWEudHlwZTtiPWEuc3RhdGVOb2RlO3ZhciBkPWEudXBkYXRlUXVldWU7bnVsbD09PWR8fG51bGw9PT1kLmNhcHR1cmVkVmFsdWVzP0QoXCIyNjRcIik6dm9pZCAwO3ZhciBmPWQuY2FwdHVyZWRWYWx1ZXM7ZC5jYXB0dXJlZFZhbHVlcz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCYmZShiKTtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcztiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmb3IoYz0wO2M8Zi5sZW5ndGg7YysrKXtkPWZbY107dmFyIGw9ZC52YWx1ZSxnPWQuc3RhY2s7Y2YoYSxkKTtiLmNvbXBvbmVudERpZENhdGNoKGwse2NvbXBvbmVudFN0YWNrOm51bGwhPT1nP2c6XCJcIn0pfWJyZWFrO1xuY2FzZSAzOmM9YS51cGRhdGVRdWV1ZTtudWxsPT09Y3x8bnVsbD09PWMuY2FwdHVyZWRWYWx1ZXM/RChcIjI2NFwiKTp2b2lkIDA7Zj1jLmNhcHR1cmVkVmFsdWVzO2MuY2FwdHVyZWRWYWx1ZXM9bnVsbDtmb3IoYz0wO2M8Zi5sZW5ndGg7YysrKWQ9ZltjXSxjZihhLGQpLGIoZC52YWx1ZSk7YnJlYWs7ZGVmYXVsdDpEKFwiMjY1XCIpfX0sY29tbWl0QXR0YWNoUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWwoYyk7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19LGNvbW1pdERldGFjaFJlZjpmdW5jdGlvbihhKXthPWEucmVmO251bGwhPT1hJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YShudWxsKTphLmN1cnJlbnQ9bnVsbCl9fX12YXIgZWY9e307XG5mdW5jdGlvbiBmZihhLGIpe2Z1bmN0aW9uIGMoYSl7YT09PWVmP0QoXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfXZhciBkPWEuZ2V0Q2hpbGRIb3N0Q29udGV4dCxlPWEuZ2V0Um9vdEhvc3RDb250ZXh0O2E9Yi5jcmVhdGVDdXJzb3I7dmFyIGY9Yi5wdXNoLGg9Yi5wb3AsZz1hKGVmKSxrPWEoZWYpLHY9YShlZik7cmV0dXJue2dldEhvc3RDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGMoZy5jdXJyZW50KX0sZ2V0Um9vdEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYyh2LmN1cnJlbnQpfSxwb3BIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEpe2goZyxhKTtoKGssYSk7aCh2LGEpfSxwb3BIb3N0Q29udGV4dDpmdW5jdGlvbihhKXtrLmN1cnJlbnQ9PT1hJiYoaChnLGEpLGgoayxhKSl9LHB1c2hIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEsYil7Zih2LGIsYSk7ZihrLGEsYSk7ZihnLGVmLGEpO2I9ZShiKTtoKGcsYSk7ZihnLGIsYSl9LHB1c2hIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1cbmModi5jdXJyZW50KSxlPWMoZy5jdXJyZW50KTtiPWQoZSxhLnR5cGUsYik7ZSE9PWImJihmKGssYSxhKSxmKGcsYixhKSl9fX1cbmZ1bmN0aW9uIGdmKGEpe2Z1bmN0aW9uIGIoYSxiKXt2YXIgYz1uZXcgeGUoNSxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Y1tcInJldHVyblwiXT1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBjKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIGI9ZihiLGEudHlwZSxhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1oKGIsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBkKGEpe2ZvcihhPWFbXCJyZXR1cm5cIl07bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWFbXCJyZXR1cm5cIl07cD1hfXZhciBlPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQ7XG5hPWEuaHlkcmF0aW9uO2lmKCFhKXJldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NVwiKX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXtEKFwiMTc2XCIpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfX07dmFyIGY9YS5jYW5IeWRyYXRlSW5zdGFuY2UsaD1hLmNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UsZz1hLmdldE5leHRIeWRyYXRhYmxlU2libGluZyxrPWEuZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQsdj1hLmh5ZHJhdGVJbnN0YW5jZSxsPWEuaHlkcmF0ZVRleHRJbnN0YW5jZSxwPW51bGwsej1udWxsLEI9ITE7cmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7ej1cbmsoYS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cD1hO3JldHVybiBCPSEwfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7ej1wPW51bGw7Qj0hMX0sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oYSl7aWYoQil7dmFyIGQ9ejtpZihkKXtpZighYyhhLGQpKXtkPWcoZCk7aWYoIWR8fCFjKGEsZCkpe2EuZWZmZWN0VGFnfD0yO0I9ITE7cD1hO3JldHVybn1iKHAseil9cD1hO3o9ayhkKX1lbHNlIGEuZWZmZWN0VGFnfD0yLEI9ITEscD1hfX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7Yj12KGEuc3RhdGVOb2RlLGEudHlwZSxhLm1lbW9pemVkUHJvcHMsYixjLGEpO2EudXBkYXRlUXVldWU9YjtyZXR1cm4gbnVsbCE9PWI/ITA6ITF9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBsKGEuc3RhdGVOb2RlLGEubWVtb2l6ZWRQcm9wcyxhKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7aWYoYSE9PVxucClyZXR1cm4hMTtpZighQilyZXR1cm4gZChhKSxCPSEwLCExO3ZhciBjPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YyYmXCJib2R5XCIhPT1jJiYhZShjLGEubWVtb2l6ZWRQcm9wcykpZm9yKGM9ejtjOyliKGEsYyksYz1nKGMpO2QoYSk7ej1wP2coYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9fX1cbmZ1bmN0aW9uIGhmKGEpe2Z1bmN0aW9uIGIoYSxiLGMpe2E9YS5zdGF0ZU5vZGU7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWI7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1jfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIGQoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6RChcIjEwOFwiLEFjKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gQSh7fSxiLGMpfXZhciBlPWEuY3JlYXRlQ3Vyc29yLGY9YS5wdXNoLGg9YS5wb3AsZz1lKGthKSxrPWUoITEpLHY9a2E7cmV0dXJue2dldFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtyZXR1cm4gYyhhKT9cbnY6Zy5jdXJyZW50fSxjYWNoZUNvbnRleHQ6YixnZXRNYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEsYyl7dmFyIGQ9YS50eXBlLmNvbnRleHRUeXBlcztpZighZClyZXR1cm4ga2E7dmFyIGU9YS5zdGF0ZU5vZGU7aWYoZSYmZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YylyZXR1cm4gZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZj17fSxnO2ZvcihnIGluIGQpZltnXT1jW2ddO2UmJmIoYSxjLGYpO3JldHVybiBmfSxoYXNDb250ZXh0Q2hhbmdlZDpmdW5jdGlvbigpe3JldHVybiBrLmN1cnJlbnR9LGlzQ29udGV4dENvbnN1bWVyOmZ1bmN0aW9uKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jb250ZXh0VHlwZXN9LGlzQ29udGV4dFByb3ZpZGVyOmMscG9wQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2MoYSkmJihoKGssYSksaChnLGEpKX0scG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0OmZ1bmN0aW9uKGEpe2goayxcbmEpO2goZyxhKX0scHVzaFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhLGIsYyl7bnVsbCE9Zy5jdXJzb3I/RChcIjE2OFwiKTp2b2lkIDA7ZihnLGIsYSk7ZihrLGMsYSl9LHByb2Nlc3NDaGlsZENvbnRleHQ6ZCxwdXNoQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2lmKCFjKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8a2E7dj1nLmN1cnJlbnQ7ZihnLGIsYSk7ZihrLGsuY3VycmVudCxhKTtyZXR1cm4hMH0saW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkQoXCIxNjlcIik7aWYoYil7dmFyIGU9ZChhLHYpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZTtoKGssYSk7aChnLGEpO2YoZyxlLGEpfWVsc2UgaChrLGEpO2YoayxiLGEpfSxmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtmb3IoMiE9PVxueGQoYSl8fDIhPT1hLnRhZz9EKFwiMTcwXCIpOnZvaWQgMDszIT09YS50YWc7KXtpZihjKGEpKXJldHVybiBhLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDsoYT1hW1wicmV0dXJuXCJdKT92b2lkIDA6RChcIjE3MVwiKX1yZXR1cm4gYS5zdGF0ZU5vZGUuY29udGV4dH19fVxuZnVuY3Rpb24gamYoYSl7dmFyIGI9YS5jcmVhdGVDdXJzb3IsYz1hLnB1c2gsZD1hLnBvcCxlPWIobnVsbCksZj1iKG51bGwpLGg9YigwKTtyZXR1cm57cHVzaFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWEudHlwZS5fY29udGV4dDtjKGgsYi5fY2hhbmdlZEJpdHMsYSk7YyhmLGIuX2N1cnJlbnRWYWx1ZSxhKTtjKGUsYSxhKTtiLl9jdXJyZW50VmFsdWU9YS5wZW5kaW5nUHJvcHMudmFsdWU7Yi5fY2hhbmdlZEJpdHM9YS5zdGF0ZU5vZGV9LHBvcFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWguY3VycmVudCxjPWYuY3VycmVudDtkKGUsYSk7ZChmLGEpO2QoaCxhKTthPWEudHlwZS5fY29udGV4dDthLl9jdXJyZW50VmFsdWU9YzthLl9jaGFuZ2VkQml0cz1ifX19XG5mdW5jdGlvbiBrZigpe3ZhciBhPVtdLGI9LTE7cmV0dXJue2NyZWF0ZUN1cnNvcjpmdW5jdGlvbihhKXtyZXR1cm57Y3VycmVudDphfX0saXNFbXB0eTpmdW5jdGlvbigpe3JldHVybi0xPT09Yn0scG9wOmZ1bmN0aW9uKGMpezA+Ynx8KGMuY3VycmVudD1hW2JdLGFbYl09bnVsbCxiLS0pfSxwdXNoOmZ1bmN0aW9uKGMsZCl7YisrO2FbYl09Yy5jdXJyZW50O2MuY3VycmVudD1kfSxjaGVja1RoYXRTdGFja0lzRW1wdHk6ZnVuY3Rpb24oKXt9LHJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldjpmdW5jdGlvbigpe319fVxuZnVuY3Rpb24gbGYoYSl7ZnVuY3Rpb24gYigpe2lmKG51bGwhPT1JKWZvcih2YXIgYT1JW1wicmV0dXJuXCJdO251bGwhPT1hOylMYyhhKSxhPWFbXCJyZXR1cm5cIl07WWE9bnVsbDtaPTA7ST1udWxsO05jPSExfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIG51bGwhPT15YSYmeWEuaGFzKGEpfWZ1bmN0aW9uIGQoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWFbXCJyZXR1cm5cIl0sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXtiPUNiKGIsYSxaKTt2YXIgZT1hO2lmKDEwNzM3NDE4MjM9PT1afHwxMDczNzQxODIzIT09ZS5leHBpcmF0aW9uVGltZSl7Yjpzd2l0Y2goZS50YWcpe2Nhc2UgMzpjYXNlIDI6dmFyIGY9ZS51cGRhdGVRdWV1ZTtmPW51bGw9PT1mPzA6Zi5leHBpcmF0aW9uVGltZTticmVhayBiO2RlZmF1bHQ6Zj0wfWZvcih2YXIgZz1lLmNoaWxkO251bGwhPT1nOykwIT09Zy5leHBpcmF0aW9uVGltZSYmKDA9PT1mfHxmPmcuZXhwaXJhdGlvblRpbWUpJiYoZj1cbmcuZXhwaXJhdGlvblRpbWUpLGc9Zy5zaWJsaW5nO2UuZXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyY1MTIpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZXtOYz0hMDticmVha319ZWxzZXthPUtjKGEpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9MjU1OSxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9XG5udWxsLGMuZWZmZWN0VGFnfD01MTIpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBlKGEpe3ZhciBiPVdhKGEuYWx0ZXJuYXRlLGEsWik7bnVsbD09PWImJihiPWQoYSkpO25jLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBmKGEsYyxmKXtjYT9EKFwiMjQzXCIpOnZvaWQgMDtjYT0hMDtpZihjIT09Wnx8YSE9PVlhfHxudWxsPT09SSliKCksWWE9YSxaPWMsST16ZShZYS5jdXJyZW50LG51bGwsWiksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZz0hMTtkb3t0cnl7aWYoZilmb3IoO251bGwhPT1JJiYhUygpOylJPWUoSSk7ZWxzZSBmb3IoO251bGwhPT1JOylJPWUoSSl9Y2F0Y2goT2Mpe2lmKG51bGw9PT1JKXtnPSEwO3EoT2MpO2JyZWFrfWY9STt2YXIgaD1mW1wicmV0dXJuXCJdO2lmKG51bGw9PT1oKXtnPSEwO3EoT2MpO2JyZWFrfUpjKGgsZixPYyk7ST1kKGYpfWJyZWFrfXdoaWxlKDEpO1xuY2E9ITE7aWYoZ3x8bnVsbCE9PUkpcmV0dXJuIG51bGw7aWYoTmMpcmV0dXJuIGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5jdXJyZW50LmFsdGVybmF0ZTtEKFwiMjYyXCIpfWZ1bmN0aW9uIGgoYSxiLGMsZCl7YT17dmFsdWU6Yyxzb3VyY2U6YSxzdGFjazpCYyhhKX07UGUoYix7ZXhwaXJhdGlvblRpbWU6ZCxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpudWxsLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOmEsbmV4dDpudWxsfSk7dihiLGQpfWZ1bmN0aW9uIGcoYSxiKXthOntjYSYmIVphP0QoXCIyNjNcIik6dm9pZCAwO2Zvcih2YXIgZD1hW1wicmV0dXJuXCJdO251bGwhPT1kOyl7c3dpdGNoKGQudGFnKXtjYXNlIDI6dmFyIGU9ZC5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2h8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZENhdGNoJiYhYyhlKSl7aChhLGQsYixcbjEpO2E9dm9pZCAwO2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmgoYSxkLGIsMSk7YT12b2lkIDA7YnJlYWsgYX1kPWRbXCJyZXR1cm5cIl19Mz09PWEudGFnJiZoKGEsYSxiLDEpO2E9dm9pZCAwfXJldHVybiBhfWZ1bmN0aW9uIGsoYSl7YT0wIT09aWE/aWE6Y2E/WmE/MTpaOmEubW9kZSYxP3phPzEwKigoKGwoKSsxNSkvMTB8MCkrMSk6MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk6MTt6YSYmKDA9PT1kYXx8YT5kYSkmJihkYT1hKTtyZXR1cm4gYX1mdW5jdGlvbiB2KGEsYyl7YTp7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmMpYS5leHBpcmF0aW9uVGltZT1jO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU+YykmJihhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT1jKTtpZihudWxsPT09YVtcInJldHVyblwiXSlpZigzPT09YS50YWcpe3ZhciBkPVxuYS5zdGF0ZU5vZGU7IWNhJiYwIT09WiYmYzxaJiZiKCk7Y2EmJiFaYSYmWWE9PT1kfHxCKGQsYyk7RmI+eGcmJkQoXCIxODVcIil9ZWxzZXtjPXZvaWQgMDticmVhayBhfWE9YVtcInJldHVyblwiXX1jPXZvaWQgMH1yZXR1cm4gY31mdW5jdGlvbiBsKCl7eWU9SWMoKS1QYztyZXR1cm4geWc9KHllLzEwfDApKzJ9ZnVuY3Rpb24gcChhLGIsYyxkLGUpe3ZhciBmPWlhO2lhPTE7dHJ5e3JldHVybiBhKGIsYyxkLGUpfWZpbmFsbHl7aWE9Zn19ZnVuY3Rpb24geihhKXtpZigwIT09R2Ipe2lmKGE+R2IpcmV0dXJuO21nKFFjKX12YXIgYj1JYygpLVBjO0diPWE7UWM9bGcoUSx7dGltZW91dDoxMCooYS0yKS1ifSl9ZnVuY3Rpb24gQihhLGIpe2lmKG51bGw9PT1hLm5leHRTY2hlZHVsZWRSb290KWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YixudWxsPT09Sz8obGE9Sz1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KEs9Sy5uZXh0U2NoZWR1bGVkUm9vdD1hLEsubmV4dFNjaGVkdWxlZFJvb3Q9bGEpO1xuZWxzZXt2YXIgYz1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1jfHxiPGMpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifVR8fChKP0hiJiYoYWE9YSxQPTEsRyhhLDEsITEpKToxPT09Yj9uKCk6eihiKSl9ZnVuY3Rpb24gcigpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1LKWZvcih2YXIgYz1LLGQ9bGE7bnVsbCE9PWQ7KXt2YXIgZT1kLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PUs/RChcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe2xhPUs9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PWxhKWxhPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxLLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PUspe0s9YztLLm5leHRTY2hlZHVsZWRSb290PWxhO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9XG5kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09YXx8ZTxhKWE9ZSxiPWQ7aWYoZD09PUspYnJlYWs7Yz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19Yz1hYTtudWxsIT09YyYmYz09PWImJjE9PT1hP0ZiKys6RmI9MDthYT1iO1A9YX1mdW5jdGlvbiBRKGEpe3goMCwhMCxhKX1mdW5jdGlvbiBuKCl7eCgxLCExLG51bGwpfWZ1bmN0aW9uIHgoYSxiLGMpeyRhPWM7cigpO2lmKGIpZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApJiYoIUlifHxsKCk+PVApOylHKGFhLFAsIUliKSxyKCk7ZWxzZSBmb3IoO251bGwhPT1hYSYmMCE9PVAmJigwPT09YXx8YT49UCk7KUcoYWEsUCwhMSkscigpO251bGwhPT0kYSYmKEdiPTAsUWM9LTEpOzAhPT1QJiZ6KFApOyRhPW51bGw7SWI9ITE7WSgpfWZ1bmN0aW9uIFkoKXtGYj0wO2lmKG51bGwhPT1BYSl7dmFyIGE9QWE7QWE9bnVsbDtmb3IodmFyIGI9XG4wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2god2cpe0JhfHwoQmE9ITAsSmI9d2cpfX19aWYoQmEpdGhyb3cgYT1KYixKYj1udWxsLEJhPSExLGE7fWZ1bmN0aW9uIEcoYSxiLGMpe1Q/RChcIjI0NVwiKTp2b2lkIDA7VD0hMDtjPyhjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITApLG51bGwhPT1jJiYoUygpP2EuZmluaXNoZWRXb3JrPWM6UihhLGMsYikpKSk6KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/UihhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz1mKGEsYiwhMSksbnVsbCE9PWMmJlIoYSxjLGIpKSk7VD0hMX1mdW5jdGlvbiBSKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1jJiYobnVsbD09PUFhP0FhPVtkXTpBYS5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPVxuMDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDtaYT1jYT0hMDtjPWIuc3RhdGVOb2RlO2MuY3VycmVudD09PWI/RChcIjE3N1wiKTp2b2lkIDA7ZD1jLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09ZD9EKFwiMjYxXCIpOnZvaWQgMDtjLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPWwoKTtuYy5jdXJyZW50PW51bGw7aWYoMTxiLmVmZmVjdFRhZylpZihudWxsIT09Yi5sYXN0RWZmZWN0KXtiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iO3ZhciBmPWIuZmlyc3RFZmZlY3R9ZWxzZSBmPWI7ZWxzZSBmPWIuZmlyc3RFZmZlY3Q7emcoYy5jb250YWluZXJJbmZvKTtmb3Iodz1mO251bGwhPT13Oyl7dmFyIGg9ITEsaz12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXcuZWZmZWN0VGFnJjIwNDgmJkRiKHcuYWx0ZXJuYXRlLHcpLHc9dy5uZXh0RWZmZWN0fWNhdGNoKGFiKXtoPSEwLGs9YWJ9aCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxrKSxudWxsIT09XG53JiYodz13Lm5leHRFZmZlY3QpKX1mb3Iodz1mO251bGwhPT13Oyl7aD0hMTtrPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dzspe3ZhciBwPXcuZWZmZWN0VGFnO3AmMTYmJk1jKHcpO2lmKHAmMTI4KXt2YXIgbj13LmFsdGVybmF0ZTtudWxsIT09biYma2cobil9c3dpdGNoKHAmMTQpe2Nhc2UgMjpFYih3KTt3LmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OkViKHcpO3cuZWZmZWN0VGFnJj0tMzt3ZSh3LmFsdGVybmF0ZSx3KTticmVhaztjYXNlIDQ6d2Uody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA4OmdnKHcpfXc9dy5uZXh0RWZmZWN0fX1jYXRjaChhYil7aD0hMCxrPWFifWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfUFnKGMuY29udGFpbmVySW5mbyk7Yy5jdXJyZW50PWI7Zm9yKHc9ZjtudWxsIT09dzspe3A9ITE7bj12b2lkIDA7dHJ5e2ZvcihmPWMsaD1lLGs9ZDtudWxsIT09dzspe3ZhciByPXcuZWZmZWN0VGFnO1xuciYzNiYmaGcoZix3LmFsdGVybmF0ZSx3LGgsayk7ciYyNTYmJmlnKHcscSk7ciYxMjgmJmpnKHcpO3ZhciB0PXcubmV4dEVmZmVjdDt3Lm5leHRFZmZlY3Q9bnVsbDt3PXR9fWNhdGNoKGFiKXtwPSEwLG49YWJ9cCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxuKSxudWxsIT09dyYmKHc9dy5uZXh0RWZmZWN0KSl9Y2E9WmE9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIEllJiZJZShiLnN0YXRlTm9kZSk7Yj1jLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MD09PWImJih5YT1udWxsKTthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9ZnVuY3Rpb24gUygpe3JldHVybiBudWxsPT09JGF8fCRhLnRpbWVSZW1haW5pbmcoKT5CZz8hMTpJYj0hMH1mdW5jdGlvbiBxKGEpe251bGw9PT1hYT9EKFwiMjQ2XCIpOnZvaWQgMDthYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO0JhfHwoQmE9ITAsSmI9YSl9dmFyIHU9a2YoKSx0PWZmKGEsdSkseT1oZih1KTt1PWpmKHUpO3ZhciBIPWdmKGEpLFxuV2E9JGUoYSx0LHksdSxILHYsaykuYmVnaW5Xb3JrLENiPWFmKGEsdCx5LHUsSCkuY29tcGxldGVXb3JrO3Q9YmYodCx5LHUsdixjKTt2YXIgSmM9dC50aHJvd0V4Y2VwdGlvbixLYz10LnVud2luZFdvcmssTGM9dC51bndpbmRJbnRlcnJ1cHRlZFdvcms7dD1kZihhLGcsdixrLGZ1bmN0aW9uKGEpe251bGw9PT15YT95YT1uZXcgU2V0KFthXSk6eWEuYWRkKGEpfSxsKTt2YXIgRGI9dC5jb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMsTWM9dC5jb21taXRSZXNldFRleHRDb250ZW50LEViPXQuY29tbWl0UGxhY2VtZW50LGdnPXQuY29tbWl0RGVsZXRpb24sd2U9dC5jb21taXRXb3JrLGhnPXQuY29tbWl0TGlmZUN5Y2xlcyxpZz10LmNvbW1pdEVycm9yTG9nZ2luZyxqZz10LmNvbW1pdEF0dGFjaFJlZixrZz10LmNvbW1pdERldGFjaFJlZixJYz1hLm5vdyxsZz1hLnNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayxtZz1hLmNhbmNlbERlZmVycmVkQ2FsbGJhY2ssemc9YS5wcmVwYXJlRm9yQ29tbWl0LFxuQWc9YS5yZXNldEFmdGVyQ29tbWl0LFBjPUljKCkseWc9Mix5ZT1QYyxSYz0wLGlhPTAsY2E9ITEsST1udWxsLFlhPW51bGwsWj0wLHc9bnVsbCxaYT0hMSxOYz0hMSx5YT1udWxsLGxhPW51bGwsSz1udWxsLEdiPTAsUWM9LTEsVD0hMSxhYT1udWxsLFA9MCxkYT0wLEliPSExLEJhPSExLEpiPW51bGwsJGE9bnVsbCxKPSExLEhiPSExLHphPSExLEFhPW51bGwseGc9MUUzLEZiPTAsQmc9MTtyZXR1cm57cmVjYWxjdWxhdGVDdXJyZW50VGltZTpsLGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXI6ayxzY2hlZHVsZVdvcms6dixyZXF1ZXN0V29yazpCLGZsdXNoUm9vdDpmdW5jdGlvbihhLGIpe1Q/RChcIjI1M1wiKTp2b2lkIDA7YWE9YTtQPWI7RyhhLGIsITEpO24oKTtZKCl9LGJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhKPWMpfHxUfHxuKCl9fSx1bmJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7aWYoSiYmIUhiKXtIYj1cbiEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0hiPSExfX1yZXR1cm4gYShiKX0sZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7VD9EKFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1KO0o9ITA7dHJ5e3JldHVybiBwKGEsYil9ZmluYWxseXtKPWMsbigpfX0sZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPUo7Sj0hMDt0cnl7cChhKX1maW5hbGx5eyhKPWIpfHxUfHx4KDEsITEsbnVsbCl9fSxkZWZlcnJlZFVwZGF0ZXM6ZnVuY3Rpb24oYSl7dmFyIGI9aWE7aWE9MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtpYT1ifX0sc3luY1VwZGF0ZXM6cCxpbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oYSxiLGMpe2lmKHphKXJldHVybiBhKGIsYyk7Snx8VHx8MD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKTt2YXIgZD16YSxlPUo7Sj16YT0hMDt0cnl7cmV0dXJuIGEoYixjKX1maW5hbGx5e3phPWQsKEo9ZSl8fFR8fG4oKX19LGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKCl7VHx8XG4wPT09ZGF8fCh4KGRhLCExLG51bGwpLGRhPTApfSxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk7YTw9UmMmJihhPVJjKzEpO3JldHVybiBSYz1hfSxsZWdhY3lDb250ZXh0Onl9fVxuZnVuY3Rpb24gbWYoYSl7ZnVuY3Rpb24gYihhLGIsYyxkLGUsaCl7ZD1iLmN1cnJlbnQ7aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGw9ZyhjKTtjPWsoYyk/dihjLGwpOmx9ZWxzZSBjPWthO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9aDtQZShkLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTp7ZWxlbWVudDphfSxjYWxsYmFjazp2b2lkIDA9PT1iP251bGw6Yixpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2YoZCxlKTtyZXR1cm4gZX12YXIgYz1hLmdldFB1YmxpY0luc3RhbmNlO2E9bGYoYSk7dmFyIGQ9YS5yZWNhbGN1bGF0ZUN1cnJlbnRUaW1lLGU9YS5jb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyLGY9YS5zY2hlZHVsZVdvcmssaD1hLmxlZ2FjeUNvbnRleHQsZz1oLmZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0LGs9aC5pc0NvbnRleHRQcm92aWRlcix2PVxuaC5wcm9jZXNzQ2hpbGRDb250ZXh0O3JldHVybntjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiLGMpe2I9bmV3IHhlKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxyZW1haW5pbmdFeHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYi5zdGF0ZU5vZGU9YX0sdXBkYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYyxmLGgpe3ZhciBnPWMuY3VycmVudCxrPWQoKTtnPWUoZyk7cmV0dXJuIGIoYSxjLGYsayxnLGgpfSx1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lOmZ1bmN0aW9uKGEsYyxlLGYsZyl7dmFyIGg9ZCgpO3JldHVybiBiKGEsYyxlLGgsZixnKX0sZmx1c2hSb290OmEuZmx1c2hSb290LFxucmVxdWVzdFdvcms6YS5yZXF1ZXN0V29yayxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOmEuY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbixiYXRjaGVkVXBkYXRlczphLmJhdGNoZWRVcGRhdGVzLHVuYmF0Y2hlZFVwZGF0ZXM6YS51bmJhdGNoZWRVcGRhdGVzLGRlZmVycmVkVXBkYXRlczphLmRlZmVycmVkVXBkYXRlcyxzeW5jVXBkYXRlczphLnN5bmNVcGRhdGVzLGludGVyYWN0aXZlVXBkYXRlczphLmludGVyYWN0aXZlVXBkYXRlcyxmbHVzaEludGVyYWN0aXZlVXBkYXRlczphLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoQ29udHJvbGxlZDphLmZsdXNoQ29udHJvbGxlZCxmbHVzaFN5bmM6YS5mbHVzaFN5bmMsZ2V0UHVibGljUm9vdEluc3RhbmNlOmZ1bmN0aW9uKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBjKGEuY2hpbGQuc3RhdGVOb2RlKTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19LFxuZmluZEhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj9EKFwiMTg4XCIpOkQoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9QmQoYik7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9Q2QoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBIZShBKHt9LGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9QmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9fX1cbnZhciBuZj1PYmplY3QuZnJlZXplKHtkZWZhdWx0Om1mfSksb2Y9bmYmJm1mfHxuZixwZj1vZltcImRlZmF1bHRcIl0/b2ZbXCJkZWZhdWx0XCJdOm9mO2Z1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6cmMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319dmFyIHJmPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3csc2Y9dm9pZCAwO3NmPXJmP2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgdGY9dm9pZCAwLHVmPXZvaWQgMDtcbmlmKG0uY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdmY9bnVsbCx3Zj0hMSx4Zj0tMSx5Zj0hMSx6Zj0wLEFmPTMzLEJmPTMzLENmPXZvaWQgMDtDZj1yZj97ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9emYtcGVyZm9ybWFuY2Uubm93KCk7cmV0dXJuIDA8YT9hOjB9fTp7ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9emYtRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19O3ZhciBEZj1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PURmKXt3Zj0hMTthPXNmKCk7aWYoMD49emYtYSlpZigtMSE9PVxueGYmJnhmPD1hKUNmLmRpZFRpbWVvdXQ9ITA7ZWxzZXt5Znx8KHlmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShFZikpO3JldHVybn1lbHNlIENmLmRpZFRpbWVvdXQ9ITE7eGY9LTE7YT12Zjt2Zj1udWxsO251bGwhPT1hJiZhKENmKX19LCExKTt2YXIgRWY9ZnVuY3Rpb24oYSl7eWY9ITE7dmFyIGI9YS16ZitCZjtiPEJmJiZBZjxCZj8oOD5iJiYoYj04KSxCZj1iPEFmP0FmOmIpOkFmPWI7emY9YStCZjt3Znx8KHdmPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShEZixcIipcIikpfTt0Zj1mdW5jdGlvbihhLGIpe3ZmPWE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJih4Zj1zZigpK2IudGltZW91dCk7eWZ8fCh5Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRWYpKTtyZXR1cm4gMH07dWY9ZnVuY3Rpb24oKXt2Zj1udWxsO3dmPSExO3hmPS0xfX1lbHNlIHRmPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrLHVmPXdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7ZWxzZSB0Zj1cbmZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sZGlkVGltZW91dDohMX0pfSl9LHVmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07ZnVuY3Rpb24gRmYoYSl7dmFyIGI9XCJcIjtlYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdmKGEsYil7YT1BKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGYoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIElmKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBKZihhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpEKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBMZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBNZihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgTmY9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gT2YoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBQZihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/T2YoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUWY9dm9pZCAwLFJmPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU5mLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1FmPVFmfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1FmLmlubmVySFRNTD1cIlxceDNjc3ZnXFx4M2VcIitiK1wiXFx4M2Mvc3ZnXFx4M2VcIjtmb3IoYj1RZi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBTZihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIFRmPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFVmPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhUZikuZm9yRWFjaChmdW5jdGlvbihhKXtVZi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1RmW2JdPVRmW2FdfSl9KTtcbmZ1bmN0aW9uIFZmKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fFRmLmhhc093blByb3BlcnR5KGUpJiZUZltlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBXZj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gWGYoYSxiLGMpe2ImJihXZlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RChcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gWWYoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBaZj1DLnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gJGYoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9a2UoYSk7Yj12YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtjLmhhc093blByb3BlcnR5KGUpJiZjW2VdfHwoXCJ0b3BTY3JvbGxcIj09PWU/WmQoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLGEpOlwidG9wRm9jdXNcIj09PWV8fFwidG9wQmx1clwiPT09ZT8oWmQoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixhKSxaZChcInRvcEJsdXJcIixcImJsdXJcIixhKSxjLnRvcEJsdXI9ITAsYy50b3BGb2N1cz0hMCk6XCJ0b3BDYW5jZWxcIj09PWU/KGljKFwiY2FuY2VsXCIsITApJiZaZChcInRvcENhbmNlbFwiLFwiY2FuY2VsXCIsYSksYy50b3BDYW5jZWw9ITApOlwidG9wQ2xvc2VcIj09PWU/KGljKFwiY2xvc2VcIiwhMCkmJlpkKFwidG9wQ2xvc2VcIixcImNsb3NlXCIsYSksYy50b3BDbG9zZT0hMCk6ZmUuaGFzT3duUHJvcGVydHkoZSkmJlcoZSxmZVtlXSxhKSxjW2VdPSEwKX19XG5mdW5jdGlvbiBhZyhhLGIsYyxkKXtjPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2Q9PT1OZi5odG1sJiYoZD1PZihhKSk7ZD09PU5mLmh0bWw/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiXFx4M2NzY3JpcHRcXHgzZVxceDNjL3NjcmlwdFxceDNlXCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX1mdW5jdGlvbiBiZyhhLGIpe3JldHVybig5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoYSl9XG5mdW5jdGlvbiBjZyhhLGIsYyxkKXt2YXIgZT1ZZihiLGMpO3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlcoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7dmFyIGY9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZiBpbiBnZSlnZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGdlW2ZdLGEpO2Y9YzticmVhaztjYXNlIFwic291cmNlXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VyhcInRvcExvYWRcIixcImxvYWRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6VyhcInRvcFRvZ2dsZVwiLFwidG9nZ2xlXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOldjKGEsYyk7Zj1WYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXG5cImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9R2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6SWYoYSxjKTtmPUEoe30sYyx7dmFsdWU6dm9pZCAwfSk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKTtmPUpmKGEsYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpmPWN9WGYoYixmLFpmKTt2YXIgaD1mLGc7Zm9yKGcgaW4gaClpZihoLmhhc093blByb3BlcnR5KGcpKXt2YXIgaz1oW2ddO1wic3R5bGVcIj09PWc/VmYoYSxrLFpmKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJlJmKGEsaykpOlwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1ifHxcIlwiIT09aykmJlNmKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZcblNmKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWcmJlwiYXV0b0ZvY3VzXCIhPT1nJiYodWEuaGFzT3duUHJvcGVydHkoZyk/bnVsbCE9ayYmJGYoZCxnKTpudWxsIT1rJiZVYyhhLGcsayxlKSl9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmxjKGEpO2FkKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6bGMoYSk7TWYoYSxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9Yy52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMudmFsdWUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtiPWMudmFsdWU7bnVsbCE9Yj9IZihhLCEhYy5tdWx0aXBsZSxiLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmSGYoYSwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGEub25jbGljaz1DKX19XG5mdW5jdGlvbiBkZyhhLGIsYyxkLGUpe3ZhciBmPW51bGw7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmM9VmMoYSxjKTtkPVZjKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Yz1HZihhLGMpO2Q9R2YoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjPUEoe30sYyx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Yz1KZihhLGMpO2Q9SmYoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGMub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1DKX1YZihiLGQsWmYpO2I9YT12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYSBpbiBjKWlmKCFkLmhhc093blByb3BlcnR5KGEpJiZjLmhhc093blByb3BlcnR5KGEpJiZudWxsIT1jW2FdKWlmKFwic3R5bGVcIj09PWEpe3ZhciBnPWNbYV07Zm9yKGIgaW4gZylnLmhhc093blByb3BlcnR5KGIpJiYoaHx8XG4oaD17fSksaFtiXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YSYmXCJjaGlsZHJlblwiIT09YSYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiZcImF1dG9Gb2N1c1wiIT09YSYmKHVhLmhhc093blByb3BlcnR5KGEpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChhLG51bGwpKTtmb3IoYSBpbiBkKXt2YXIgaz1kW2FdO2c9bnVsbCE9Yz9jW2FdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGEpJiZrIT09ZyYmKG51bGwhPWt8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWEpaWYoZyl7Zm9yKGIgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShiKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShiKXx8KGh8fChoPXt9KSxoW2JdPVwiXCIpO2ZvcihiIGluIGspay5oYXNPd25Qcm9wZXJ0eShiKSYmZ1tiXSE9PWtbYl0mJihofHwoaD17fSksaFtiXT1rW2JdKX1lbHNlIGh8fChmfHwoZj1bXSksZi5wdXNoKGEsaCkpLFxuaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1hPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmZyE9PWsmJihmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09YT9nPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJih1YS5oYXNPd25Qcm9wZXJ0eShhKT8obnVsbCE9ayYmJGYoZSxhKSxmfHxnPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChhLGspKX1oJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsaCk7cmV0dXJuIGZ9XG5mdW5jdGlvbiBlZyhhLGIsYyxkLGUpe1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZZYyhhLGUpO1lmKGMsZCk7ZD1ZZihjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGg9YltmXSxnPWJbZisxXTtcInN0eWxlXCI9PT1oP1ZmKGEsZyxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD9SZihhLGcpOlwiY2hpbGRyZW5cIj09PWg/U2YoYSxnKTpVYyhhLGgsZyxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6WmMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpMZihhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlPXZvaWQgMCxiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP0hmKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9cbkhmKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLCEwKTpIZihhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19XG5mdW5jdGlvbiBmZyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlcoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKHZhciBmIGluIGdlKWdlLmhhc093blByb3BlcnR5KGYpJiZXKGYsZ2VbZl0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VyhcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwiZm9ybVwiOlcoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtXKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOldjKGEsYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOklmKGEsXG5jKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpLZihhLGMpLFcoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSksJGYoZSxcIm9uQ2hhbmdlXCIpfVhmKGIsYyxaZik7ZD1udWxsO2Zvcih2YXIgaCBpbiBjKWMuaGFzT3duUHJvcGVydHkoaCkmJihmPWNbaF0sXCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGY/YS50ZXh0Q29udGVudCE9PWYmJihkPVtcImNoaWxkcmVuXCIsZl0pOlwibnVtYmVyXCI9PT10eXBlb2YgZiYmYS50ZXh0Q29udGVudCE9PVwiXCIrZiYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ZdKTp1YS5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZiYmJGYoZSxoKSk7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmxjKGEpO2FkKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6bGMoYSk7TWYoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGMub25DbGljayYmXG4oYS5vbmNsaWNrPUMpfXJldHVybiBkfWZ1bmN0aW9uIG5nKGEsYil7cmV0dXJuIGEubm9kZVZhbHVlIT09Yn1cbnZhciBvZz1PYmplY3QuZnJlZXplKHtjcmVhdGVFbGVtZW50OmFnLGNyZWF0ZVRleHROb2RlOmJnLHNldEluaXRpYWxQcm9wZXJ0aWVzOmNnLGRpZmZQcm9wZXJ0aWVzOmRnLHVwZGF0ZVByb3BlcnRpZXM6ZWcsZGlmZkh5ZHJhdGVkUHJvcGVydGllczpmZyxkaWZmSHlkcmF0ZWRUZXh0Om5nLHdhcm5Gb3JVbm1hdGNoZWRUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOlpjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1cbmMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWVcXHgzZFwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZVxceDNkXCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9WGEoZCk7ZT92b2lkIDA6RChcIjkwXCIpO21jKGQpO1pjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpMZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGYoYSwhIWMubXVsdGlwbGUsYiwhMSl9fX0pO1RiLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQob2cpO3ZhciBwZz1udWxsLHFnPW51bGw7XG5mdW5jdGlvbiByZyhhKXt0aGlzLl9leHBpcmF0aW9uVGltZT1YLmNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24oKTt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfXJnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOkQoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBzZztYLnVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xucmcucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xucmcucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOkQoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/RChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtYLmZsdXNoUm9vdChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtyZy5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gc2coKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1zZy5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuc2cucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07ZnVuY3Rpb24gdGcoYSxiLGMpe3RoaXMuX2ludGVybmFsUm9vdD1YLmNyZWF0ZUNvbnRhaW5lcihhLGIsYyl9dGcucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBzZztiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7WC51cGRhdGVDb250YWluZXIoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnRnLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBzZzthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7WC51cGRhdGVDb250YWluZXIobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTt0Zy5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgc2c7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO1gudXBkYXRlQ29udGFpbmVyKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG50Zy5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcmcodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiB1ZyhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiB2ZyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG52YXIgWD1wZih7Z2V0Um9vdEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZVR5cGU7c3dpdGNoKGIpe2Nhc2UgOTpjYXNlIDExOmE9KGE9YS5kb2N1bWVudEVsZW1lbnQpP2EubmFtZXNwYWNlVVJJOlBmKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpiPTg9PT1iP2EucGFyZW50Tm9kZTphLGE9Yi5uYW1lc3BhY2VVUkl8fG51bGwsYj1iLnRhZ05hbWUsYT1QZihhLGIpfXJldHVybiBhfSxnZXRDaGlsZEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFBmKGEsYil9LGdldFB1YmxpY0luc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxwcmVwYXJlRm9yQ29tbWl0OmZ1bmN0aW9uKCl7cGc9VmQ7dmFyIGE9ZmEoKTtpZihuZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYj17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7dmFyIGM9d2luZG93LmdldFNlbGVjdGlvbiYmd2luZG93LmdldFNlbGVjdGlvbigpO1xuaWYoYyYmMCE9PWMucmFuZ2VDb3VudCl7Yj1jLmFuY2hvck5vZGU7dmFyIGQ9Yy5hbmNob3JPZmZzZXQsZT1jLmZvY3VzTm9kZTtjPWMuZm9jdXNPZmZzZXQ7dHJ5e2Iubm9kZVR5cGUsZS5ub2RlVHlwZX1jYXRjaChCKXtiPW51bGw7YnJlYWsgYX12YXIgZj0wLGg9LTEsZz0tMSxrPTAsdj0wLGw9YSxwPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgejs7KXtsIT09Ynx8MCE9PWQmJjMhPT1sLm5vZGVUeXBlfHwoaD1mK2QpO2whPT1lfHwwIT09YyYmMyE9PWwubm9kZVR5cGV8fChnPWYrYyk7Mz09PWwubm9kZVR5cGUmJihmKz1sLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oej1sLmZpcnN0Q2hpbGQpKWJyZWFrO3A9bDtsPXp9Zm9yKDs7KXtpZihsPT09YSlicmVhayBiO3A9PT1iJiYrK2s9PT1kJiYoaD1mKTtwPT09ZSYmKyt2PT09YyYmKGc9Zik7aWYobnVsbCE9PSh6PWwubmV4dFNpYmxpbmcpKWJyZWFrO2w9cDtwPWwucGFyZW50Tm9kZX1sPXp9Yj0tMT09PWh8fC0xPT09Zz9udWxsOlxue3N0YXJ0OmgsZW5kOmd9fWVsc2UgYj1udWxsfWI9Ynx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYj1udWxsO3FnPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmJ9O1dkKCExKX0scmVzZXRBZnRlckNvbW1pdDpmdW5jdGlvbigpe3ZhciBhPXFnLGI9ZmEoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZqYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYod2luZG93LmdldFNlbGVjdGlvbil7Yj13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Y1ttYigpXS5sZW5ndGg7YT1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/YTpNYXRoLm1pbihkLmVuZCxlKTshYi5leHRlbmQmJmE+XG5kJiYoZT1kLGQ9YSxhPWUpO2U9bWUoYyxhKTt2YXIgZj1tZShjLGQpO2lmKGUmJmYmJigxIT09Yi5yYW5nZUNvdW50fHxiLmFuY2hvck5vZGUhPT1lLm5vZGV8fGIuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGIuZm9jdXNOb2RlIT09Zi5ub2RlfHxiLmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpKXt2YXIgaD1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2guc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KTtiLnJlbW92ZUFsbFJhbmdlcygpO2E+ZD8oYi5hZGRSYW5nZShoKSxiLmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKTooaC5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSxiLmFkZFJhbmdlKGgpKX19Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7Yy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxcbmEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9cWc9bnVsbDtXZChwZyk7cGc9bnVsbH0sY3JlYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlKXthPWFnKGEsYixjLGQpO2FbRl09ZTthW1RhXT1iO3JldHVybiBhfSxhcHBlbmRJbml0aWFsQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbjpmdW5jdGlvbihhLGIsYyxkKXtjZyhhLGIsYyxkKTtyZXR1cm4gdmcoYixjKX0scHJlcGFyZVVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiBkZyhhLGIsYyxkLGUpfSxzaG91bGRTZXRUZXh0Q29udGVudDpmdW5jdGlvbihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcInN0cmluZ1wiPT09XG50eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9LHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4hIWIuaGlkZGVufSxjcmVhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCl7YT1iZyhhLGIpO2FbRl09ZDtyZXR1cm4gYX0sbm93OnNmLG11dGF0aW9uOntjb21taXRNb3VudDpmdW5jdGlvbihhLGIsYyl7dmcoYixjKSYmYS5mb2N1cygpfSxjb21taXRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXthW1RhXT1lO2VnKGEsYixjLGQsZSl9LHJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7U2YoYSxcIlwiKX0sY29tbWl0VGV4dFVwZGF0ZTpmdW5jdGlvbihhLGIsYyl7YS5ub2RlVmFsdWU9Y30sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxhcHBlbmRDaGlsZFRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGEpOmEuYXBwZW5kQ2hpbGQoYil9LFxuaW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGEsYixjKXthLmluc2VydEJlZm9yZShiLGMpfSxpbnNlcnRJbkNvbnRhaW5lckJlZm9yZTpmdW5jdGlvbihhLGIsYyl7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGMpOmEuaW5zZXJ0QmVmb3JlKGIsYyl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmVDaGlsZChiKX0scmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOmEucmVtb3ZlQ2hpbGQoYil9fSxoeWRyYXRpb246e2Nhbkh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVybiAxIT09YS5ub2RlVHlwZXx8Yi50b0xvd2VyQ2FzZSgpIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YX0sY2FuSHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVyblwiXCI9PT1ifHwzIT09YS5ub2RlVHlwZT9udWxsOmF9LGdldE5leHRIeWRyYXRhYmxlU2libGluZzpmdW5jdGlvbihhKXtmb3IoYT1cbmEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkOmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0saHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXthW0ZdPWY7YVtUYV09YztyZXR1cm4gZmcoYSxiLGMsZSxkKX0saHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7YVtGXT1jO3JldHVybiBuZyhhLGIpfSxkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbigpe30sXG5kaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9fSxzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2s6dGYsY2FuY2VsRGVmZXJyZWRDYWxsYmFjazp1Zn0pLENnPVg7YWM9Q2cuYmF0Y2hlZFVwZGF0ZXM7YmM9Q2cuaW50ZXJhY3RpdmVVcGRhdGVzO2NjPUNnLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzO1xuZnVuY3Rpb24gRGcoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyB0ZyhhLCExLGIpfVxuZnVuY3Rpb24gRWcoYSxiLGMsZCxlKXt1ZyhjKT92b2lkIDA6RChcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9RGcoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fVgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gWC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIEZnKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7dWcoYik/dm9pZCAwOkQoXCIyMDBcIik7cmV0dXJuIHFmKGEsYixudWxsLGMpfVxudmFyIEdnPXtjcmVhdGVQb3J0YWw6RmcsZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/bnVsbDoxPT09YS5ub2RlVHlwZT9hOlguZmluZEhvc3RJbnN0YW5jZShhKX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBFZyhudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP0QoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIEVnKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe3VnKGEpP3ZvaWQgMDpEKFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWC51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7RWcobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9XG5udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBGZy5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6WC5iYXRjaGVkVXBkYXRlcyx1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXM6WC5kZWZlcnJlZFVwZGF0ZXMsZmx1c2hTeW5jOlguZmx1c2hTeW5jLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpYLmZsdXNoQ29udHJvbGxlZCxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRQbHVnaW5IdWI6UmEsRXZlbnRQbHVnaW5SZWdpc3RyeTpDYSxFdmVudFByb3BhZ2F0b3JzOmtiLFJlYWN0Q29udHJvbGxlZENvbXBvbmVudDokYixSZWFjdERPTUNvbXBvbmVudFRyZWU6YmIsUmVhY3RET01FdmVudExpc3RlbmVyOiRkfSx1bnN0YWJsZV9jcmVhdGVSb290OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyB0ZyhhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX19O1xuWC5pbmplY3RJbnRvRGV2VG9vbHMoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOlVhLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMy4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIEhnPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6R2d9KSxJZz1IZyYmR2d8fEhnO21vZHVsZS5leHBvcnRzPUlnW1wiZGVmYXVsdFwiXT9JZ1tcImRlZmF1bHRcIl06SWc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHE9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sdD1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNix2PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdz1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx5PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx6PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxBPXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6XG42MDExMixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cImh0dHA6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsYz0wO2M8YjtjKyspZSs9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtuKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9dmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O1xuZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxEfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0MoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RH12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RzttKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEwoYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLGw9MDtsPGY7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6SS5jdXJyZW50fX1cbmZ1bmN0aW9uIE0oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXR9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIlxceDNkXCI6XCJcXHgzZDBcIixcIjpcIjpcIlxceDNkMlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTj0vXFwvKy9nLE89W107ZnVuY3Rpb24gUChhLGIsZSxjKXtpZihPLmxlbmd0aCl7dmFyIGQ9Ty5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fWZ1bmN0aW9uIFEoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5PLmxlbmd0aCYmTy5wdXNoKGEpfVxuZnVuY3Rpb24gUihhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgdDpjYXNlIHU6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrUyhhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitTKGQsaCk7Zys9UihkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksXG5oPTA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1MoZCxoKyspLGcrPVIoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsQyhcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gUyhhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVChhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBVKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGUscS50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoTShhKSYmKGI9ZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxjLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpO2I9UChiLGcsYyxkKTtudWxsPT1hfHxSKGEsXCJcIixVLGIpO1EoYil9XG52YXIgVz17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1QKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFIoYSxcIlwiLFQsYik7UShiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpSKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TShhKT92b2lkIDA6QyhcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnksXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jaGFuZ2VkQml0czowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOnosY3JlYXRlRWxlbWVudDpMLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7bnVsbD09PWF8fHZvaWQgMD09PWE/QyhcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZD1tKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUkuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBrPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJlxuKGs9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilKLmNhbGwoYixjKSYmIUsuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWs/a1tjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YylkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGMpe2s9QXJyYXkoYyk7Zm9yKHZhciBsPTA7bDxjO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31yZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1MLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6TSx2ZXJzaW9uOlwiMTYuMy4yXCIsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudE93bmVyOkksYXNzaWduOm19fSxYPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6V30pLFxuWT1YJiZXfHxYO21vZHVsZS5leHBvcnRzPVlbXCJkZWZhdWx0XCJdP1lbXCJkZWZhdWx0XCJdOlk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgQXBwIGZyb20gJy4vY29tcG9uZW50cy9BcHAnO1xuaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGFwcGx5TWlkZGxld2FyZSB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB0aHVuayBmcm9tICdyZWR1eC10aHVuayc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBzb2NrZXQgZnJvbSAnLi9Tb2NrZXQnO1xuaW1wb3J0IHJvb3RSZWR1Y2VyIGZyb20gJy4vcmVkdWNlcnMvaW5kZXgnO1xuaW1wb3J0IHsgcmV0cmlldmVSb29tc0xpc3QsIHJlY2VpdmVSb29tc0xpc3QgfSBmcm9tICcuL2FjdGlvbnMvaW5kZXgnO1xuXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBhcHBseU1pZGRsZXdhcmUodGh1bmspKTtcblxuLy8gc2V0dGluZyB1cCBzb2NrZXQgZXZlbnRzXG4vKlxuc29ja2V0Lm9uKCdSRUNFSVZFX1JPT01TX0xJU1QnLCBsaXN0ID0+IHtcbiAgc3RvcmUuZGlzcGF0Y2gocmVjZWl2ZVJvb21zTGlzdChKU09OLnBhcnNlKGxpc3QpKSk7XG59KTtcblxuc3RvcmUuZGlzcGF0Y2gocmV0cmlldmVSb29tc0xpc3QoKSk7XG4qL1xuXG5SZWFjdERPTS5yZW5kZXIoXG4gIDxQcm92aWRlciBzdG9yZT17c3RvcmV9ID5cbiAgICA8QXBwIC8+XG4gIDwvUHJvdmlkZXI+LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTsiLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiOWVlOTkxZmYyYmMxNjAzY2RjMDVjN2ZlYTUxZDQwMjAucG5nXCI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9DcmVhdGVSb29tQ29tcG9uZW50LnNjc3MnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGNyZWF0ZVJvb20gfSBmcm9tICcuLy4uL2FjdGlvbnMvaW5kZXgnO1xuXG5jbGFzcyBDcmVhdGVSb29tQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1c2Vyc0xpc3QsIGNsb3NlQ29tcG9uZW50IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgaWQ9J2NyZWF0ZS1yb29tLWNvbXAnPlxuICAgICAgICA8ZGl2IGNsYXNzPSdmbGV4LWNvbCc+XG4gICAgICAgICAgPGgxPkNyZWF0ZSBhIG5ldyByb29tIDxzdHJvbmcgc3R5bGU9e3tjdXJzb3I6ICdwb2ludGVyJywgY29sb3I6ICdyZWQnfX1cbiAgICAgICAgICBvbkNsaWNrPXtjbG9zZUNvbXBvbmVudH0gPlggQ2xvc2U8L3N0cm9uZz48L2gxPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2ZsZXgtcm93JyA+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17KGUpID0+IGUucHJldmVudERlZmF1bHQoKX0gPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0nTmFtZSBvZiB0aGUgcm9vbScgLz48YnIgLz5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgcGxhY2Vob2xkZXI9J1BhcnRpY2lwYW50cycgLz48YnIgLz5cbiAgICAgICAgICAgICAgICA8dGV4dGFyZWEgLz48YnIgLz5cbiAgICAgICAgICAgICAgICA8YnV0dG9uPkNyZWF0ZTwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+e3VzZXJzTGlzdC5tYXAodSA9PiA8cD4rIHt1Lm5hbWV9PC9wPil9PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiB7XG4gIHJldHVybiB7XG4gICAgdXNlcnNMaXN0OiBzdGF0ZS51c2Vyc0xpc3RcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IGRpc3BhdGNoID0+IHtcbiAgcmV0dXJuIHtcbiAgICBoYW5kbGVDcmVhdGVSb29tOiAoKSA9PiBkaXNwYXRjaChjcmVhdGVSb29tKCkpIC8vIEEgTU9ESUZJRVJcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShDcmVhdGVSb29tQ29tcG9uZW50KTsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBrZXlmcmFtZXMgcm90YXRpb24ge1xcbiAgZnJvbSB7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9XFxuICB0byB7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH0gfVxcblxcbi5mbGV4LXJvdyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdzsgfVxcblxcbi5mbGV4LWNvbCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgfVxcblxcbiNjcmVhdGUtcm9vbS1jb21wIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgei1pbmRleDogNTA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTsgfVxcbiAgI2NyZWF0ZS1yb29tLWNvbXAgZGl2IHtcXG4gICAgd2lkdGg6IDUwMHB4O1xcbiAgICBoZWlnaHQ6IDM1MHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0NyZWF0ZVJvb21Db21wb25lbnQuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9DcmVhdGVSb29tQ29tcG9uZW50LnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0NyZWF0ZVJvb21Db21wb25lbnQuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHNvY2tldCBmcm9tICcuLy4uL1NvY2tldCc7XG5pbXBvcnQgUm9vbXNMaXN0Q29tcG9uZW50IGZyb20gJy4vUm9vbXNMaXN0Q29tcG9uZW50JztcbmltcG9ydCBDb252ZXJzYXRpb25Db21wb25lbnQgZnJvbSAnLi9Db252ZXJzYXRpb25Db21wb25lbnQnO1xuaW1wb3J0IElucHV0Q29tcG9uZW50IGZyb20gJy4vSW5wdXRDb21wb25lbnQnO1xuaW1wb3J0IFByb2ZpbGVDb21wb25lbnQgZnJvbSAnLi9Qcm9maWxlQ29tcG9uZW50JztcbmltcG9ydCB7IHJldHJpZXZlVXNlcnNMaXN0IH0gZnJvbSAnLi8uLi9hY3Rpb25zL2luZGV4JztcblxuY2xhc3MgQ2hhdENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybihcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPGRpdiBpZD0nbGVmdC1jb250YWluZXInPlxuICAgICAgICAgIDxQcm9maWxlQ29tcG9uZW50IC8+XG4gICAgICAgICAgPFJvb21zTGlzdENvbXBvbmVudCAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD0ncmlnaHQtY29udGFpbmVyJz5cbiAgICAgICAgICA8Q29udmVyc2F0aW9uQ29tcG9uZW50IC8+XG4gICAgICAgICAgPElucHV0Q29tcG9uZW50IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApXG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgLy8gYmluZCBzb2NrZXRzIGV2ZW50c1xuICAgIHNvY2tldC5vbignUkVDRUlWRV9VU0VSU19MSVNUJywgbGlzdCA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhsaXN0KVxuICAgICAgLy9yZWNlaXZlXG4gICAgfSlcbiAgICAvLyAmJiByZXRyaWV2ZSBmaXJzdCB0aW1lXG4gICAgdGhpcy5wcm9wcy5yZXRyaWV2ZVVzZXJzTGlzdCgpO1xuICB9XG59XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+IHtcbiAgcmV0dXJuIHtcblxuICB9O1xufTtcblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4ge1xuICAgIHJldHJpZXZlVXNlcnNMaXN0OiAoKSA9PiBkaXNwYXRjaChyZXRyaWV2ZVVzZXJzTGlzdCgpKVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoQ2hhdENvbXBvbmVudCk7Il0sInNvdXJjZVJvb3QiOiIifQ==