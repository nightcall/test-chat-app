!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=87)}([function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){e.exports=n(69)()},function(e,t,n){"use strict";e.exports=n(86)},function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(63)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(i=++o)}),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(64))},function(e,t,n){(function(e){var r,o=n(56),i=n(23),a=n(50),s=n(49),u=n(48);e&&e.ArrayBuffer&&(r=n(46));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),l="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=c||l;t.protocol=3;var p=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},d=o(p),h={type:"error",data:"parser error"},y=n(45);function m(e,t,n){for(var r=new Array(e.length),o=s(e.length,n),i=function(e,n,o){t(n,function(t,n){r[e]=n,o(t,r)})},a=0;a<e.length;a++)i(a,e[a],o)}t.encodePacket=function(n,r,o,i){"function"==typeof r&&(i=r,r=!1),"function"==typeof o&&(i=o,o=null);var a=void 0===n.data?void 0:n.data.buffer||n.data;if(e.ArrayBuffer&&a instanceof ArrayBuffer)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=e.data,i=new Uint8Array(o),a=new Uint8Array(1+o.byteLength);a[0]=p[e.type];for(var s=0;s<i.length;s++)a[s+1]=i[s];return r(a.buffer)}(n,r,i);if(y&&a instanceof e.Blob)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);if(f)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=new FileReader;return o.onload=function(){e.data=o.result,t.encodePacket(e,n,!0,r)},o.readAsArrayBuffer(e.data)}(e,n,r);var o=new Uint8Array(1);o[0]=p[e.type];var i=new y([o.buffer,e.data]);return r(i)}(n,r,i);if(a&&a.base64)return function(e,n){var r="b"+t.packets[e.type]+e.data.data;return n(r)}(n,i);var s=p[n.type];return void 0!==n.data&&(s+=o?u.encode(String(n.data),{strict:!1}):String(n.data)),i(""+s)},t.encodeBase64Packet=function(n,r){var o,i="b"+t.packets[n.type];if(y&&n.data instanceof e.Blob){var a=new FileReader;return a.onload=function(){var e=a.result.split(",")[1];r(i+e)},a.readAsDataURL(n.data)}try{o=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(e){for(var s=new Uint8Array(n.data),u=new Array(s.length),c=0;c<s.length;c++)u[c]=s[c];o=String.fromCharCode.apply(null,u)}return i+=e.btoa(o),r(i)},t.decodePacket=function(e,n,r){if(void 0===e)return h;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(r&&!1===(e=function(e){try{e=u.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return h;var o=e.charAt(0);return Number(o)==o&&d[o]?e.length>1?{type:d[o],data:e.substring(1)}:{type:d[o]}:h}o=new Uint8Array(e)[0];var i=a(e,1);return y&&"blob"===n&&(i=new y([i])),{type:d[o],data:i}},t.decodeBase64Packet=function(e,t){var n=d[e.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:e.substr(1)}};var o=r.decode(e.substr(1));return"blob"===t&&y&&(o=new y([o])),{type:n,data:o}},t.encodePayload=function(e,n,r){"function"==typeof n&&(r=n,n=null);var o=i(e);if(n&&o)return y&&!f?t.encodePayloadAsBlob(e,r):t.encodePayloadAsArrayBuffer(e,r);if(!e.length)return r("0:");m(e,function(e,r){t.encodePacket(e,!!o&&n,!1,function(e){r(null,function(e){return e.length+":"+e}(e))})},function(e,t){return r(t.join(""))})},t.decodePayload=function(e,n,r){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===e)return r(h,0,1);for(var i,a,s="",u=0,c=e.length;u<c;u++){var l=e.charAt(u);if(":"===l){if(""===s||s!=(i=Number(s)))return r(h,0,1);if(s!=(a=e.substr(u+1,i)).length)return r(h,0,1);if(a.length){if(o=t.decodePacket(a,n,!1),h.type===o.type&&h.data===o.data)return r(h,0,1);if(!1===r(o,u+i,c))return}u+=i,s=""}else s+=l}return""!==s?r(h,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){if(!e.length)return n(new ArrayBuffer(0));m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){return n(null,e)})},function(e,t){var r=t.reduce(function(e,t){var n;return e+(n="string"==typeof t?t.length:t.byteLength).toString().length+n+2},0),o=new Uint8Array(r),i=0;return t.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),a=0;a<e.length;a++)r[a]=e.charCodeAt(a);n=r.buffer}o[i++]=t?0:1;var s=n.byteLength.toString();for(a=0;a<s.length;a++)o[i++]=parseInt(s[a]);o[i++]=255;for(r=new Uint8Array(n),a=0;a<r.length;a++)o[i++]=r[a]}),n(o.buffer)})},t.encodePayloadAsBlob=function(e,n){m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);e=r.buffer,t[0]=0}var i=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),a=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)a[o]=parseInt(i[o]);if(a[i.length]=255,y){var s=new y([t.buffer,a.buffer,e]);n(null,s)}})},function(e,t){return n(new y(t))})},t.decodePayloadAsBinary=function(e,n,r){"function"==typeof n&&(r=n,n=null);for(var o=e,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),u=0===s[0],c="",l=1;255!==s[l];l++){if(c.length>310)return r(h,0,1);c+=s[l]}o=a(o,2+c.length),c=parseInt(c);var f=a(o,0,c);if(u)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(e){var p=new Uint8Array(f);f="";for(l=0;l<p.length;l++)f+=String.fromCharCode(p[l])}i.push(f),o=a(o,c)}var d=i.length;i.forEach(function(e,o){r(t.decodePacket(e,n,!0),o,d)})}}).call(this,n(0))},function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t){e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,s],l=0;(u=new Error(t.replace(/%s/g,function(){return c[l++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";n.r(t);var r=n(2),o=n(1),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),s=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function u(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return i[t]=n.store,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:s.isRequired,children:i.a.element.isRequired},o.childContextTypes=((e={})[t]=s.isRequired,e[n]=a,e),o}var c=u(),l=n(36),f=n.n(l),p=n(8),d=n.n(p);var h=null,y={notify:function(){}};var m=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=y}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=y)},e}(),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var v=0,b={};function w(){}function C(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,u=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,c=o.methodName,l=void 0===c?"connectAdvanced":c,p=o.renderCountProp,h=void 0===p?void 0:p,y=o.shouldHandleStateChanges,C=void 0===y||y,E=o.storeKey,x=void 0===E?"store":E,k=o.withRef,S=void 0!==k&&k,T=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),_=x+"Subscription",P=v++,O=((t={})[x]=s,t[_]=a,t),A=((n={})[_]=a,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+l+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=u(n),i=g({},T,{getDisplayName:u,methodName:l,renderCountProp:h,shouldHandleStateChanges:C,storeKey:x,withRef:S,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=P,r.state={},r.renderCount=0,r.store=e[x]||t[x],r.propsMode=Boolean(e[x]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+x+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+x+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,n),a.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[_]=t||this.context[_],e},a.prototype.componentDidMount=function(){C&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=w,this.store=null,this.selector.run=w,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return d()(S,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+l+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},a.prototype.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(C){var e=(this.propsMode?this.props:this.context)[_];this.subscription=new m(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(e){if(!(S||h||this.propsMode&&this.subscription))return e;var t=g({},e);return S&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[_]=this.subscription),t},a.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=A,a.contextTypes=O,a.propTypes=O,f()(a,t)}}var E=Object.prototype.hasOwnProperty;function x(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function k(e,t){if(x(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!E.call(t,n[o])||!x(e[n[o]],t[n[o]]))return!1;return!0}var S=n(16),T=n(88),_="object"==typeof self&&self&&self.Object===Object&&self,P=(T.a||_||Function("return this")()).Symbol,O=Object.prototype;O.hasOwnProperty,O.toString,P&&P.toStringTag;Object.prototype.toString;P&&P.toStringTag;Object.getPrototypeOf,Object;var A=Function.prototype,R=Object.prototype,N=A.toString;R.hasOwnProperty,N.call(Object);function I(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function M(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function U(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=M(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=M(o),o=r(t,n)),o},r}}var B=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:I(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?I(function(t){return Object(S.bindActionCreators)(e,t)}):void 0}];var D=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:I(function(){return{}})}],j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function F(e,t,n){return j({},n,e,t)}var L=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(t,n,s){var u=e(t,n,s);return i?r&&o(u,a)||(a=u):(i=!0,a=u),a}}}(e):void 0},function(e){return e?void 0:function(){return F}}];function z(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function H(e,t,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,s=o.areStatePropsEqual,u=!1,c=void 0,l=void 0,f=void 0,p=void 0,d=void 0;function h(o,u){var h,y,m=!a(u,l),g=!i(o,c);return c=o,l=u,m&&g?(f=e(c,l),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):m?(e.dependsOnOwnProps&&(f=e(c,l)),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):g?(h=e(c,l),y=!s(h,f),f=h,y&&(d=n(f,p,l)),d):d}return function(o,i){return u?h(o,i):(f=e(c=o,l=i),p=t(r,l),d=n(f,p,l),u=!0,d)}}function q(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),s=r(e,i),u=o(e,i);return(i.pure?H:z)(a,s,u,e,i)}var V=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function W(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Y(e,t){return e===t}var K=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?C:t,r=e.mapStateToPropsFactories,o=void 0===r?D:r,i=e.mapDispatchToPropsFactories,a=void 0===i?B:i,s=e.mergePropsFactories,u=void 0===s?L:s,c=e.selectorFactory,l=void 0===c?q:c;return function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=i.pure,c=void 0===s||s,f=i.areStatesEqual,p=void 0===f?Y:f,d=i.areOwnPropsEqual,h=void 0===d?k:d,y=i.areStatePropsEqual,m=void 0===y?k:y,g=i.areMergedPropsEqual,v=void 0===g?k:g,b=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),w=W(e,o,"mapStateToProps"),C=W(t,a,"mapDispatchToProps"),E=W(r,u,"mergeProps");return n(l,V({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:w,initMapDispatchToProps:C,initMergeProps:E,pure:c,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:m,areMergedPropsEqual:v},b))}}();n.d(t,"Provider",function(){return c}),n.d(t,"createProvider",function(){return u}),n.d(t,"connectAdvanced",function(){return C}),n.d(t,"connect",function(){return K})},function(e,t,n){var r=n(4),o=n(5);function i(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=i,o(i.prototype),i.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},i.prototype.onPacket=function(e){this.emit("packet",e)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t,n){(function(t){var r=n(58);e.exports=function(e){var n=e.xdomain,o=e.xscheme,i=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!n||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(e){}if(!n)try{return new(t[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}}).call(this,n(0))},function(e,t,n){var r=n(3)("socket.io-parser"),o=n(5),i=n(61),a=n(28),s=n(27);function u(){}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=u,t.Decoder=f;var c=t.ERROR+'"encode error"';function l(e){var n=""+e.type;if(t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data){var o=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===o)return c;n+=o}return r("encoded %j as %s",e,n),n}function f(){this.reconstructor=null}function p(e){this.reconPack=e,this.buffers=[]}function d(e){return{type:t.ERROR,data:"parser error: "+e}}u.prototype.encode=function(e,n){(r("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){i.removeBlobs(e,function(e){var n=i.deconstructPacket(e),r=l(n.packet),o=n.buffers;o.unshift(r),t(o)})}(e,n):n([l(e)])},o(f.prototype),f.prototype.add=function(e){var n;if("string"==typeof e)n=function(e){var n=0,o={type:Number(e.charAt(0))};if(null==t.types[o.type])return d("unknown packet type "+o.type);if(t.BINARY_EVENT===o.type||t.BINARY_ACK===o.type){for(var i="";"-"!==e.charAt(++n)&&(i+=e.charAt(n),n!=e.length););if(i!=Number(i)||"-"!==e.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===e.charAt(n+1))for(o.nsp="";++n;){var s=e.charAt(n);if(","===s)break;if(o.nsp+=s,n===e.length)break}else o.nsp="/";var u=e.charAt(n+1);if(""!==u&&Number(u)==u){for(o.id="";++n;){var s=e.charAt(n);if(null==s||Number(s)!=s){--n;break}if(o.id+=e.charAt(n),n===e.length)break}o.id=Number(o.id)}if(e.charAt(++n)){var c=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(n)),l=!1!==c&&(o.type===t.ERROR||a(c));if(!l)return d("invalid payload");o.data=c}return r("decoded %s as %j",e,o),o}(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!s(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SEND_MESSAGE=t.RECEIVE_CONVERSATION=t.RETRIEVE_CONVERSATION=t.RECEIVE_MESSAGE=t.INPUT_CHANGE=void 0,t.sendMessage=function(e){return function(t){i.default.emit("SEND_MESSAGE",e),t({type:l,status:"Success"})}},t.receiveMessage=function(e){return{type:s,message:e}},t.retrieveConversation=function(){return function(e){e({type:u}),i.default.emit("RETRIEVE_CONVERSATION")}},t.receiveConversation=function(e){return{type:c,messages:e}},t.inputChange=function(e,t){return{type:a,name:e,value:t}};var r,o=n(30),i=(r=o)&&r.__esModule?r:{default:r};var a=t.INPUT_CHANGE="INPUT_CHANGE",s=t.RECEIVE_MESSAGE="RECEIVE_MESSAGE",u=t.RETRIEVE_CONVERSATION="RETRIEVE_CONVERSATION",c=t.RECEIVE_CONVERSATION="RECEIVE_CONVERSATION",l=t.SEND_MESSAGE="SEND_MESSAGE"},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,s,u){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,s,u],f=0;(c=new Error(t.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return u}),n.d(t,"combineReducers",function(){return l}),n.d(t,"bindActionCreators",function(){return p}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(17),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function s(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var a;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,l=t,f=[],p=f,d=!1;function h(){p===f&&(p=f.slice())}function y(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return l}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),p.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=p.indexOf(e);p.splice(n,1)}}}function g(e){if(!s(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,l=c(l,e)}finally{d=!1}for(var t=f=p,n=0;n<t.length;n++){(0,t[n])()}return e}return g({type:o.INIT}),(a={dispatch:g,subscribe:m,getState:y,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,g({type:o.REPLACE})}})[r.a]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(y())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},a}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a=Object.keys(n);var s=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){s=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(s)throw s;for(var r=!1,o={},i=0;i<a.length;i++){var u=a[i],l=n[u],f=e[u],p=l(f,t);if(void 0===p){var d=c(u,t);throw new Error(d)}o[u]=p,r=r||p!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":i(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],s=e[a];"function"==typeof s&&(r[a]=f(s,t))}return r}function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=e.apply(void 0,r),s=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},u={getState:i.getState,dispatch:function(){return s.apply(void 0,arguments)}},c=t.map(function(e){return e(u)});return s=d.apply(void 0,c)(i.dispatch),a({},i,{dispatch:s})}}}},function(e,t,n){"use strict";(function(e,r){var o,i=n(35);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(0),n(67)(e))},function(e,t){var n=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return t.apply(e,r.concat(n.call(arguments)))}}},function(e,t){e.exports=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},function(e,t,n){var r=n(12),o=n(5),i=n(41),a=n(19),s=n(18),u=n(3)("socket.io-client:socket"),c=n(7),l=n(23);e.exports=d;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},p=o.prototype.emit;function d(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}o(d.prototype),d.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[a(e,"open",s(this,"onopen")),a(e,"packet",s(this,"onpacket")),a(e,"close",s(this,"onclose"))]}},d.prototype.open=d.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},d.prototype.send=function(){var e=i(arguments);return e.unshift("message"),this.emit.apply(this,e),this},d.prototype.emit=function(e){if(f.hasOwnProperty(e))return p.apply(this,arguments),this;var t=i(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:l(t))?r.BINARY_EVENT:r.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},d.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},d.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},d.prototype.onclose=function(e){u("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},d.prototype.onpacket=function(e){var t=e.nsp===this.nsp,n=e.type===r.ERROR&&"/"===e.nsp;if(t||n)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},d.prototype.onevent=function(e){var t=e.data||[];u("emitting event %j",t),null!=e.id&&(u("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?p.apply(this,t):this.receiveBuffer.push(t)},d.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);u("sending ack %j",o),t.packet({type:l(o)?r.BINARY_ACK:r.ACK,id:e,data:o})}}},d.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(u("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):u("bad ack %s",e.id)},d.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},d.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)p.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},d.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},d.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},d.prototype.close=d.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},d.prototype.compress=function(e){return this.flags.compress=e,this},d.prototype.binary=function(e){return this.flags.binary=e,this}},function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}},function(e,t,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i=64,a={},s=0,u=0;function c(e){var t="";do{t=o[e%i]+t,e=Math.floor(e/i)}while(e>0);return t}function l(){var e=c(+new Date);return e!==r?(s=0,r=e):e+"."+c(s++)}for(;u<i;u++)a[o[u]]=u;l.encode=c,l.decode=function(e){var t=0;for(u=0;u<e.length;u++)t=t*i+a[e.charAt(u)];return t},e.exports=l},function(e,t,n){(function(t){var r=n(51),o=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);e.exports=function e(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var o=0,s=n.length;o<s;o++)if(e(n[o]))return!0;return!1}if("function"==typeof t&&t.isBuffer&&t.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||i&&n instanceof Blob||a&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return e(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&e(n[u]))return!0;return!1}}).call(this,n(55).Buffer)},function(e,t,n){var r=n(10),o=n(7),i=n(4),a=n(6),s=n(22),u=n(3)("engine.io-client:polling");e.exports=l;var c=null!=new(n(11))({xdomain:!1}).responseType;function l(e){var t=e&&e.forceBase64;c&&!t||(this.supportsBinary=!1),r.call(this,e)}a(l,r),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(e){var t=this;function n(){u("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||n()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||n()}))}else n()},l.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(e){var t=this;u("polling got data %s",e);i.decodePayload(e,this.socket.binaryType,function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var e=this;function t(){u("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t))},l.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};i.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},l.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=s()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},function(e,t,n){(function(e){var r=n(11),o=n(57),i=n(44),a=n(43);t.polling=function(t){var n=!1,a=!1,s=!1!==t.jsonp;if(e.location){var u="https:"===location.protocol,c=location.port;c||(c=u?443:80),n=t.hostname!==location.hostname||c!==t.port,a=t.secure!==u}if(t.xdomain=n,t.xscheme=a,"open"in new r(t)&&!t.forceJSONP)return new o(t);if(!s)throw new Error("JSONP disabled");return new i(t)},t.websocket=a}).call(this,n(0))},function(e,t,n){var r=n(60),o=n(20),i=n(5),a=n(12),s=n(19),u=n(18),c=n(3)("socket.io-client:manager"),l=n(21),f=n(40),p=Object.prototype.hasOwnProperty;function d(e,t){if(!(this instanceof d))return new d(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||a;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=d,d.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)p.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},d.prototype.updateSocketIds=function(){for(var e in this.nsps)p.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},d.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},i(d.prototype),d.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},d.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},d.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},d.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},d.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},d.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},d.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},d.prototype.open=d.prototype.connect=function(e,t){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=s(n,"open",function(){o.onopen(),e&&e()}),a=s(n,"error",function(t){if(c("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else o.maybeReconnectOnOpen()});if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var l=setTimeout(function(){c("connect attempt timed out after %d",u),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",u)},u);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(i),this.subs.push(a),this},d.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(s(e,"data",u(this,"ondata"))),this.subs.push(s(e,"ping",u(this,"onping"))),this.subs.push(s(e,"pong",u(this,"onpong"))),this.subs.push(s(e,"error",u(this,"onerror"))),this.subs.push(s(e,"close",u(this,"onclose"))),this.subs.push(s(this.decoder,"decoded",u(this,"ondecoded")))},d.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},d.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},d.prototype.ondata=function(e){this.decoder.add(e)},d.prototype.ondecoded=function(e){this.emit("packet",e)},d.prototype.onerror=function(e){c("error",e),this.emitAll("error",e)},d.prototype.socket=function(e,t){var n=this.nsps[e];if(!n){n=new o(this,e,t),this.nsps[e]=n;var r=this;n.on("connecting",i),n.on("connect",function(){n.id=r.generateId(e)}),this.autoConnect&&i()}function i(){~l(r.connecting,n)||r.connecting.push(n)}return n},d.prototype.destroy=function(e){var t=l(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},d.prototype.packet=function(e){c("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()}))},d.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},d.prototype.cleanup=function(){c("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},d.prototype.close=d.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},d.prototype.onclose=function(e){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},d.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();c("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(c("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(c("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(c("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},d.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t,n){(function(t){e.exports=function(e){return n&&t.Buffer.isBuffer(e)||r&&(e instanceof t.ArrayBuffer||o(e))};var n="function"==typeof t.Buffer&&"function"==typeof t.Buffer.isBuffer,r="function"==typeof t.ArrayBuffer,o=r&&"function"==typeof t.ArrayBuffer.isView?t.ArrayBuffer.isView:function(e){return e.buffer instanceof t.ArrayBuffer}}).call(this,n(0))},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,o=e.indexOf("["),i=e.indexOf("]");-1!=o&&-1!=i&&(e=e.substring(0,o)+e.substring(o,i).replace(/:/g,";")+e.substring(i,e.length));for(var a=n.exec(e||""),s={},u=14;u--;)s[r[u]]=a[u]||"";return-1!=o&&-1!=i&&(s.source=t,s.host=s.host.substring(1,s.host.length-1).replace(/;/g,":"),s.authority=s.authority.replace("[","").replace("]","").replace(/;/g,":"),s.ipv6uri=!0),s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=n(66)()},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,c=0,l=[],f=n(74);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(v(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function y(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),g(t,e.attrs),h(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=u||(u=m(t)),r=C.bind(null,n,a,!1),o=C.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){y(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var b,w=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function C(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))o.call(n,c)&&(s[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(s[a[l]]=n[a[l]])}}return s}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,s=a&&a(Object);return function u(c,l,f){if("string"!=typeof l){if(s){var p=a(l);p&&p!==s&&u(c,p,f)}var d=r(l);o&&(d=d.concat(o(l)));for(var h=0;h<d.length;++h){var y=d[h];if(!(e[y]||t[y]||f&&f[y])){var m=i(l,y);try{n(c,y,m)}catch(e){}}}return c}return c}}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(13);var i=(0,n(16).combineReducers)({currentInput:function(){var e,t,n,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{username:"",currentMessage:""},a=arguments[1];switch(a.type){case o.INPUT_CHANGE:return r({},i,(e={},t=a.name,n=a.value,t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e));case o.SEND_MESSAGE:return a.status&&"Success"===a.status?r({},i,{currentMessage:""}):i;default:return i}},messages:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1];switch(t.type){case o.RECEIVE_MESSAGE:return[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e),[t.message]);case o.RECEIVE_CONVERSATION:return t.messages;default:return e}}});t.default=i},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}t.__esModule=!0;var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=n(9);n(90);a(n(30));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=e.text,n=e.username,r=e.date;return o.default.createElement("p",null,"[",r,"] ",o.default.createElement("strong",null,n),": ",t)},u=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("div",{id:"message-list"},o.default.createElement("p",null,"Message list"),this.props.messages.map(function(e){return o.default.createElement(s,e)}))}}]),t}();t.default=(0,i.connect)(function(e){return{messages:e.messages}})(u)},function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},function(e,t){e.exports=function(e,t){for(var n=[],r=(t=t||0)||0;r<e.length;r++)n[r-t]=e[r];return n}},function(e,t){},function(e,t,n){(function(t){var r,o=n(10),i=n(4),a=n(7),s=n(6),u=n(22),c=n(3)("engine.io-client:websocket"),l=t.WebSocket||t.MozWebSocket;if("undefined"==typeof window)try{r=n(42)}catch(e){}var f=l;function p(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=l&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(f=r),o.call(this,e)}f||"undefined"!=typeof window||(f=r),e.exports=p,s(p,o),p.prototype.name="websocket",p.prototype.supportsBinary=!0,p.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?t?new f(e,t):new f(e):new f(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},p.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},p.prototype.write=function(e){var n=this;this.writable=!1;for(var r=e.length,o=0,a=r;o<a;o++)!function(e){i.encodePacket(e,n.supportsBinary,function(o){if(!n.usingBrowserWebSocket){var i={};if(e.options&&(i.compress=e.options.compress),n.perMessageDeflate)("string"==typeof o?t.Buffer.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(i.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,i)}catch(e){c("websocket closed before onclose event")}--r||s()})}(e[o]);function s(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},p.prototype.onClose=function(){o.prototype.onClose.call(this)},p.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},p.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=u()),this.supportsBinary||(e.b64=1),(e=a.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},p.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===p.prototype.name)}}).call(this,n(0))},function(e,t,n){(function(t){var r=n(24),o=n(6);e.exports=c;var i,a=/\n/g,s=/\\n/g;function u(){}function c(e){r.call(this,e),this.query=this.query||{},i||(t.___eio||(t.___eio=[]),i=t.___eio),this.index=i.length;var n=this;i.push(function(e){n.onData(e)}),this.query.j=this.index,t.document&&t.addEventListener&&t.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=u)},!1)}o(c,r),c.prototype.supportsBinary=!1,c.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},c.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},c.prototype.doWrite=function(e,t){var n=this;if(!this.form){var r,o=document.createElement("form"),i=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=u,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function c(){l(),t()}function l(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),l(),e=e.replace(s,"\\\n"),this.area.value=e.replace(a,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&c()}:this.iframe.onload=c}}).call(this,n(0))},function(e,t,n){(function(t){var n=t.BlobBuilder||t.WebKitBlobBuilder||t.MSBlobBuilder||t.MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),i=n&&n.prototype.append&&n.prototype.getBlob;function a(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}e[t]=r}}}function s(e,t){t=t||{};var r=new n;a(e);for(var o=0;o<e.length;o++)r.append(e[o]);return t.type?r.getBlob(t.type):r.getBlob()}function u(e,t){return a(e),new Blob(e,t||{})}e.exports=r?o?t.Blob:u:i?s:void 0}).call(this,n(0))},function(e,t){!function(){"use strict";for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<e.length;r++)n[e.charCodeAt(r)]=r;t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,i="";for(n=0;n<o;n+=3)i+=e[r[n]>>2],i+=e[(3&r[n])<<4|r[n+1]>>4],i+=e[(15&r[n+1])<<2|r[n+2]>>6],i+=e[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(e){var t,r,o,i,a,s=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var l=new ArrayBuffer(s),f=new Uint8Array(l);for(t=0;t<u;t+=4)r=n[e.charCodeAt(t)],o=n[e.charCodeAt(t+1)],i=n[e.charCodeAt(t+2)],a=n[e.charCodeAt(t+3)],f[c++]=r<<2|o>>4,f[c++]=(15&o)<<4|i>>2,f[c++]=(3&i)<<6|63&a;return l}}()},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){(function(e,r){var o;/*! https://mths.be/utf8js v2.1.2 by @mathias */!function(i){var a="object"==typeof t&&t,s=("object"==typeof e&&e&&e.exports,"object"==typeof r&&r);s.global!==s&&s.window;var u,c,l,f=String.fromCharCode;function p(e){for(var t,n,r=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function d(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function h(e,t){return f(e>>t&63|128)}function y(e,t){if(0==(4294967168&e))return f(e);var n="";return 0==(4294965248&e)?n=f(e>>6&31|192):0==(4294901760&e)?(d(e,t)||(e=65533),n=f(e>>12&15|224),n+=h(e,6)):0==(4292870144&e)&&(n=f(e>>18&7|240),n+=h(e,12),n+=h(e,6)),n+=f(63&e|128)}function m(){if(l>=c)throw Error("Invalid byte index");var e=255&u[l];if(l++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function g(e){var t,n;if(l>c)throw Error("Invalid byte index");if(l==c)return!1;if(t=255&u[l],l++,0==(128&t))return t;if(192==(224&t)){if((n=(31&t)<<6|m())>=128)return n;throw Error("Invalid continuation byte")}if(224==(240&t)){if((n=(15&t)<<12|m()<<6|m())>=2048)return d(n,e)?n:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(n=(7&t)<<18|m()<<12|m()<<6|m())>=65536&&n<=1114111)return n;throw Error("Invalid UTF-8 detected")}var v={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,r=p(e),o=r.length,i=-1,a="";++i<o;)a+=y(r[i],n);return a},decode:function(e,t){var n=!1!==(t=t||{}).strict;u=p(e),c=u.length,l=0;for(var r,o=[];!1!==(r=g(n));)o.push(r);return function(e){for(var t,n=e.length,r=-1,o="";++r<n;)(t=e[r])>65535&&(o+=f((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=f(t);return o}(o)}};void 0===(o=function(){return v}.call(t,n,t,e))||(e.exports=o)}()}).call(this,n(47)(e),n(0))},function(e,t){function n(){}e.exports=function(e,t,r){var o=!1;return r=r||n,i.count=e,0===e?t():i;function i(e,n){if(i.count<=0)throw new Error("after called too many times");--i.count,e?(o=!0,t(e),t=r):0!==i.count||o||t(null,n)}}},function(e,t){e.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(e),i=new Uint8Array(n-t),a=t,s=0;a<n;a++,s++)i[s]=o[a];return i.buffer}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){t.read=function(e,t,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,c=u>>1,l=-7,f=n?o-1:0,p=n?-1:1,d=e[t+f];for(f+=p,i=d&(1<<-l)-1,d>>=-l,l+=s;l>0;i=256*i+e[t+f],f+=p,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+e[t+f],f+=p,l-=8);if(0===i)i=1-c;else{if(i===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=c}return(d?-1:1)*a*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var a,s,u,c=8*i-o-1,l=(1<<c)-1,f=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,h=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=l?(s=0,a=l):a+f>=1?(s=(t*u-1)*Math.pow(2,o),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;e[n+d]=255&s,d+=h,s/=256,o-=8);for(a=a<<o|s,c+=o;c>0;e[n+d]=255&a,d+=h,a/=256,c-=8);e[n+d-h]|=128*y}},function(e,t,n){"use strict";t.byteLength=function(e){var t=c(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=c(e),r=n[0],a=n[1],s=new i(function(e,t,n){return 3*(t+n)/4-n}(0,r,a)),u=0,l=a>0?r-4:r,f=0;f<l;f+=4)t=o[e.charCodeAt(f)]<<18|o[e.charCodeAt(f+1)]<<12|o[e.charCodeAt(f+2)]<<6|o[e.charCodeAt(f+3)],s[u++]=t>>16&255,s[u++]=t>>8&255,s[u++]=255&t;2===a&&(t=o[e.charCodeAt(f)]<<2|o[e.charCodeAt(f+1)]>>4,s[u++]=255&t);1===a&&(t=o[e.charCodeAt(f)]<<10|o[e.charCodeAt(f+1)]<<4|o[e.charCodeAt(f+2)]>>2,s[u++]=t>>8&255,s[u++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],a=0,s=n-o;a<s;a+=16383)i.push(l(e,a,a+16383>s?s:a+16383));1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,n){for(var o,i,a=[],s=t;s<n;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(54),o=n(53),i=n(52);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return c(this,e,t,n)}function c(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),o=(e=s(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|d(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?s(e,0):p(e,t);if("Buffer"===t.type&&i(t.data))return p(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(l(t),e=s(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function p(e,t){var n=t.length<0?0:0|d(t.length);e=s(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function h(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return L(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(e).length;default:if(r)return L(e).length;t=(""+t).toLowerCase(),r=!0}}function y(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function m(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,o){var i,a=1,s=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,n/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var l=-1;for(i=n;i<s;i++)if(c(e,i)===c(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*a}else-1!==l&&(i-=i-l),l=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){for(var f=!0,p=0;p<u;p++)if(c(e,i+p)!==c(t,p)){f=!1;break}if(f)return i}return-1}function v(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function b(e,t,n,r){return H(L(t,e.length-n),e,n,r)}function w(e,t,n,r){return H(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function C(e,t,n,r){return w(e,t,n,r)}function E(e,t,n,r){return H(z(t),e,n,r)}function x(e,t,n,r){return H(function(e,t){for(var n,r,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function k(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function S(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,a,s,u,c=e[o],l=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(u=(15&c)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=e[o+1],a=e[o+2],s=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=f}return function(e){var t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=T));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return c(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?s(e,t):void 0!==n?"string"==typeof r?s(e,t).fill(n,r):s(e,t).fill(n):s(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},u.byteLength=h,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?S(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,n);case"utf8":case"utf-8":return S(this,t,n);case"ascii":return _(this,t,n);case"latin1":case"binary":return P(this,t,n);case"base64":return k(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,o>>>=0,this===e)return 0;for(var i=o-r,a=n-t,s=Math.min(i,a),c=this.slice(r,o),l=e.slice(t,n),f=0;f<s;++f)if(c[f]!==l[f]){i=c[f],a=l[f];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return m(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return m(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return b(this,e,t,n);case"ascii":return w(this,e,t,n);case"latin1":case"binary":return C(this,e,t,n);case"base64":return E(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function _(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function P(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function O(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=F(e[i]);return o}function A(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function R(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,n,r,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function I(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function M(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function U(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function B(e,t,n,r,i){return i||U(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function D(e,t,n,r,i){return i||U(e,0,n,8),o.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if(e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},u.prototype.readUInt8=function(e,t){return t||R(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||R(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||R(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||R(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||R(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||R(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||R(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||R(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||R(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||R(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||R(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||R(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||R(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||R(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):M(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=0,a=1,s=0;for(this[t]=255&e;++i<n&&(a*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):M(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return B(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return B(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return D(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return D(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var a=u.isBuffer(e)?e:L(new u(e,r).toString()),s=a.length;for(i=0;i<n-t;++i)this[i+t]=a[i%s]}return this};var j=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function L(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function z(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function H(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(0))},function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},function(e,t,n){(function(t){var r=n(11),o=n(24),i=n(5),a=n(6),s=n(3)("engine.io-client:polling-xhr");function u(){}function c(e){if(o.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,t.location){var n="https:"===location.protocol,r=location.port;r||(r=n?443:80),this.xd=e.hostname!==t.location.hostname||r!==e.port,this.xs=e.secure!==n}}function l(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}function f(){for(var e in l.requests)l.requests.hasOwnProperty(e)&&l.requests[e].abort()}e.exports=c,e.exports.Request=l,a(c,o),c.prototype.supportsBinary=!0,c.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new l(e)},c.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),o=this;r.on("success",t),r.on("error",function(e){o.onError("xhr post error",e)}),this.sendXhr=r},c.prototype.doPoll=function(){s("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},i(l.prototype),l.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new r(e),o=this;try{s("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&n.setRequestHeader(i,this.extraHeaders[i])}catch(e){}if("POST"===this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{n.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){o.onLoad()},n.onerror=function(){o.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState)try{var e=n.getResponseHeader("Content-Type");o.supportsBinary&&"application/octet-stream"===e&&(n.responseType="arraybuffer")}catch(e){}4===n.readyState&&(200===n.status||1223===n.status?o.onLoad():setTimeout(function(){o.onError(n.status)},0))},s("xhr data %s",this.data),n.send(this.data)}catch(e){return void setTimeout(function(){o.onError(e)},0)}t.document&&(this.index=l.requestsCount++,l.requests[this.index]=this)},l.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},l.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},l.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},l.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,e)try{this.xhr.abort()}catch(e){}t.document&&delete l.requests[this.index],this.xhr=null}},l.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},l.prototype.hasXDR=function(){return void 0!==t.XDomainRequest&&!this.xs&&this.enablesXDR},l.prototype.abort=function(){this.cleanup()},l.requestsCount=0,l.requests={},t.document&&(t.attachEvent?t.attachEvent("onunload",f):t.addEventListener&&t.addEventListener("beforeunload",f,!1))}).call(this,n(0))},function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t,n){(function(t){var r=n(25),o=n(5),i=n(3)("engine.io-client:socket"),a=n(21),s=n(4),u=n(29),c=n(7);function l(e,n){if(!(this instanceof l))return new l(e,n);n=n||{},e&&"object"==typeof e&&(n=e,e=null),e?(e=u(e),n.hostname=e.host,n.secure="https"===e.protocol||"wss"===e.protocol,n.port=e.port,e.query&&(n.query=e.query)):n.host&&(n.hostname=u(n.host).host),this.secure=null!=n.secure?n.secure:t.location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.agent=n.agent||!1,this.hostname=n.hostname||(t.location?location.hostname:"localhost"),this.port=n.port||(t.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.transportOptions=n.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var r="object"==typeof t&&t;r.global===r&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=l,l.priorWebsocketSuccess=!1,o(l.prototype),l.protocol=s.protocol,l.Socket=l,l.Transport=n(10),l.transports=n(25),l.parser=n(4),l.prototype.createTransport=function(e){i('creating transport "%s"',e);var t=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.query);t.EIO=s.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new r[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0})},l.prototype.open=function(){var e;if(this.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},l.prototype.setTransport=function(e){i("setting transport %s",e.name);var t=this;this.transport&&(i("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},l.prototype.probe=function(e){i('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(i('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(i('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;l.priorWebsocketSuccess="websocket"===t.name,i('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(i("changing transport and sending upgrade packet"),p(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())})}else{i('probe transport "%s" failed',e);var a=new Error("probe error");a.transport=t.name,r.emit("upgradeError",a)}}))}function a(){n||(n=!0,p(),t.close(),t=null)}function s(n){var o=new Error("probe error: "+n);o.transport=t.name,a(),i('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",o)}function u(){s("transport closed")}function c(){s("socket closed")}function f(e){t&&e.name!==t.name&&(i('"%s" works - aborting "%s"',e.name,t.name),a())}function p(){t.removeListener("open",o),t.removeListener("error",s),t.removeListener("close",u),r.removeListener("close",c),r.removeListener("upgrading",f)}l.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",s),t.once("close",u),this.once("close",c),this.once("upgrading",f),t.open()},l.prototype.onOpen=function(){if(i("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){i("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},l.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(i('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else i('packet received with socket readyState "%s"',this.readyState)},l.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},l.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},l.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){i("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},l.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},l.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},l.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(i("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},l.prototype.write=l.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},l.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},l.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t()}):this.upgrading?r():t()}function t(){e.onClose("forced close"),i("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return this},l.prototype.onError=function(e){i("socket error %j",e),l.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},l.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){i('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},l.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~a(this.transports,e[n])&&t.push(e[n]);return t}}).call(this,n(0))},function(e,t,n){e.exports=n(59),e.exports.parser=n(4)},function(e,t,n){(function(e){var r=n(28),o=n(27),i=Object.prototype.toString,a="function"==typeof e.Blob||"[object BlobConstructor]"===i.call(e.Blob),s="function"==typeof e.File||"[object FileConstructor]"===i.call(e.File);t.deconstructPacket=function(e){var t=[],n=e.data,i=e;return i.data=function e(t,n){if(!t)return t;if(o(t)){var i={_placeholder:!0,num:n.length};return n.push(t),i}if(r(t)){for(var a=new Array(t.length),s=0;s<t.length;s++)a[s]=e(t[s],n);return a}if("object"==typeof t&&!(t instanceof Date)){var a={};for(var u in t)a[u]=e(t[u],n);return a}return t}(n,t),i.attachments=t.length,{packet:i,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(r(t))for(var o=0;o<t.length;o++)t[o]=e(t[o],n);else if("object"==typeof t)for(var i in t)t[i]=e(t[i],n);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var n=0,i=e;!function e(u,c,l){if(!u)return u;if(a&&u instanceof Blob||s&&u instanceof File){n++;var f=new FileReader;f.onload=function(){l?l[c]=this.result:i=this.result,--n||t(i)},f.readAsArrayBuffer(u)}else if(r(u))for(var p=0;p<u.length;p++)e(u[p],p,u);else if("object"==typeof u&&!o(u))for(var d in u)e(u[d],d,u)}(i),n||t(i)}}).call(this,n(0))},function(e,t){var n=1e3,r=60*n,o=60*r,i=24*o,a=365.25*i;function s(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var u,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var s=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*a;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*o;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?s(u=e,i,"day")||s(u,o,"hour")||s(u,r,"minute")||s(u,n,"second")||u+" ms":function(e){if(e>=i)return Math.round(e/i)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var u=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=t.formatters[r];if("function"==typeof o){var i=a[u];n=o.call(e,i),a.splice(u,1),u--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var i=t.instances[n];i.enabled=t.enabled(i.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(62),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var e=s(p);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){(function(t){var r=n(29),o=n(3)("socket.io-client:url");e.exports=function(e,n){var i=e;n=n||t.location,null==e&&(e=n.protocol+"//"+n.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),o("parse %s",e),i=r(e));i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443"));i.path=i.path||"/";var a=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+a+":"+i.port,i.href=i.protocol+"://"+a+(n&&n.port===i.port?"":":"+i.port),i}}).call(this,n(0))},function(e,t,n){var r=n(65),o=n(12),i=n(26),a=n(3)("socket.io-client");e.exports=t=u;var s=t.managers={};function u(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o=r(e),u=o.source,c=o.id,l=o.path,f=s[c]&&l in s[c].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||f?(a("ignoring socket cache for %s",u),n=i(u,t)):(s[c]||(a("new io instance for %s",u),s[c]=i(u,t)),n=s[c]),o.query&&!t.query&&(t.query=o.query),n.socket(o.path,t)}t.protocol=o.protocol,t.connect=u,t.Manager=n(26),t.Socket=n(20)},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(14),o=n(15),i=n(68);e.exports=function(){function e(e,t,n,r,a,s){s!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){e.exports=n.p+"a2784608af0a520e0e8ed633abe697e9.png"},function(e,t,n){(e.exports=n(32)(!1)).push([e.i,"#input-component {\n  height: 200px;\n  flex: 0;\n  background-color: #97C0B7;\n  display: flex;\n  flex-direction: row;\n  justify-content: center; }\n  #input-component form {\n    font-family: Verdana;\n    padding: 20px; }\n    #input-component form button {\n      font-size: 20px;\n      padding: 10px;\n      height: 50px;\n      border: 2px solid white;\n      -webkit-border-radius: 10px;\n      -moz-border-radius: 10px;\n      -ms-border-radius: 10px;\n      border-radius: 10px;\n      color: #72A7A3;\n      font-size: 20px;\n      padding-right: 15px; }\n      #input-component form button img {\n        width: 30px;\n        height: 30px;\n        padding-right: 15px;\n        vertical-align: middle; }\n    #input-component form button:hover {\n      background-color: white; }\n    #input-component form textarea {\n      height: 150px; }\n    #input-component form input[type=text], #input-component form textarea {\n      margin-bottom: 20px;\n      border: 2px solid white;\n      -webkit-border-radius: 10px;\n      -moz-border-radius: 10px;\n      -ms-border-radius: 10px;\n      border-radius: 10px;\n      padding: 10px;\n      color: #72A7A3;\n      width: 400px;\n      font-size: 20px; }\n",""])},function(e,t,n){var r=n(71);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(31)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(2));n(72);var i=u(n(70)),a=n(9),s=n(13);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.submitMessage=function(e){var t=n.props,r=t.username,o=t.currentMessage,i=t.handleSubmit;e.preventDefault(),!o||!o.length||o.length>500?console.log("Message not valid"):i(o,r.length?r:"Anonymous",new Date(Date.now()).toLocaleTimeString())},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){var e=this.props,t=e.username,n=e.currentMessage,r=e.handleChange;e.handleSubmit;return o.default.createElement("div",{id:"input-component"},o.default.createElement("form",{onSubmit:this.submitMessage},o.default.createElement("input",{type:"text",value:t,onChange:function(e){return r("username",e.target.value)},placeholder:"Your username"}),o.default.createElement("br",null),o.default.createElement("textarea",{name:"currentMessage",value:n,onChange:function(e){return r("currentMessage",e.target.value)},placeholder:"Your message"}),o.default.createElement("br",null),o.default.createElement("button",null,o.default.createElement("img",{src:i.default,alt:"Send"}),"Send")))}}]),t}();t.default=(0,a.connect)(function(e){return{username:e.currentInput.username,currentMessage:e.currentInput.currentMessage}},function(e){return{handleChange:function(t,n){return e((0,s.inputChange)(t,n))},handleSubmit:function(t,n,r){return e((0,s.sendMessage)(JSON.stringify({text:t,username:n,date:r})))}}})(c)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(e.exports=n(32)(!1)).push([e.i,"* {\n  font-family: Verdana;\n  margin: 0;\n  padding: 0; }\n\n#container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh; }\n\nh1 {\n  color: #0A555C; }\n",""])},function(e,t,n){var r=n(75);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(31)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(2));n(76);var i=s(n(73)),a=s(n(39));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("div",{id:"container"},o.default.createElement(a.default,null),o.default.createElement(i.default,null))}}]),t}();t.default=u},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(78);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(79);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(15),o=n(2),i=n(83),a=n(34),s=n(14),u=n(82),c=n(81),l=n(80),f=n(33);function p(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,s,u){(function(e,t,n,r,o,i,a,s,u){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,s,u){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var c=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var e=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,e}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var e=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,e}p("198")}};var h=null,y={};function m(){if(h)for(var e in y){var t=y[e],n=h.indexOf(e);if(-1<n||p("96",e),!v[n])for(var r in t.extractEvents||p("97",e),v[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,s=r;b.hasOwnProperty(s)&&p("99",s),b[s]=i;var u=i.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&g(u[o],a,s);o=!0}else i.registrationName?(g(i.registrationName,a,s),o=!0):o=!1;o||p("98",r,e)}}}function g(e,t,n){w[e]&&p("100",e),w[e]=t,C[e]=t.eventTypes[n].dependencies}var v=[],b={},w={},C={};function E(e){h&&p("101"),h=Array.prototype.slice.call(e),m()}function x(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];y.hasOwnProperty(t)&&y[t]===r||(y[t]&&p("102",t),y[t]=r,n=!0)}n&&m()}var k=Object.freeze({plugins:v,eventNameDispatchConfigs:b,registrationNameModules:w,registrationNameDependencies:C,possibleRegistrationNames:null,injectEventPluginOrder:E,injectEventPluginsByName:x}),S=null,T=null,_=null;function P(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=_(r),d.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function O(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function A(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var R=null;function N(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)P(e,t,n[o],r[o]);else n&&P(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function I(e){return N(e,!0)}function M(e){return N(e,!1)}var U={injectEventPluginOrder:E,injectEventPluginsByName:x};function B(e,t){var n=e.stateNode;if(!n)return null;var r=S(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function D(e,t){null!==e&&(R=O(R,e)),e=R,R=null,e&&(A(e,t?I:M),R&&p("95"),d.rethrowCaughtError())}function j(e,t,n,r){for(var o=null,i=0;i<v.length;i++){var a=v[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=O(o,a))}D(o,!1)}var F=Object.freeze({injection:U,getListener:B,runEventsInBatch:D,runExtractedEventsInBatch:j}),L=Math.random().toString(36).slice(2),z="__reactInternalInstance$"+L,H="__reactEventHandlers$"+L;function q(e){if(e[z])return e[z];for(;!e[z];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[z]).tag||6===e.tag?e:null}function V(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function W(e){return e[H]||null}var Y=Object.freeze({precacheFiberNode:function(e,t){t[z]=e},getClosestInstanceFromNode:q,getInstanceFromNode:function(e){return!(e=e[z])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:V,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[H]=t}});function K(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var r=[];e;)r.push(e),e=K(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Q(e,t,n){(t=B(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function X(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,Q,e)}function G(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?K(t):null,Q,e)}}function J(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=B(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&J(e._targetInst,null,e)}function ee(e){A(e,X)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,s=o;s;s=K(s))a++;s=0;for(var u=i;u;u=K(u))s++;for(;0<a-s;)o=K(o),a--;for(;0<s-a;)i=K(i),s--;for(;a--;){if(o===i||o===i.alternate)break e;o=K(o),i=K(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=K(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=K(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",e);for(e=n.length;0<e--;)J(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){A(e,G)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){A(e,Z)}}),re=null;function oe(){return!re&&i.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var ie={_root:null,_startText:null,_fallbackText:null};function ae(){if(ie._fallbackText)return ie._fallbackText;var e,t,n=ie._startText,r=n.length,o=se(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ie._fallbackText=o.slice(e,1<t?1-t:void 0),ie._fallbackText}function se(){return"value"in ie._root?ie._root.value:ie._root[oe()]}var ue="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),ce={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function pe(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=fe,e.release=pe}a(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ue.length;t++)this[ue[t]]=null}}),le.Interface=ce,le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,de(n),n},de(le);var he=le.extend({data:null}),ye=le.extend({data:null}),me=[9,13,27,32],ge=i.canUseDOM&&"CompositionEvent"in window,ve=null;i.canUseDOM&&"documentMode"in document&&(ve=document.documentMode);var be=i.canUseDOM&&"TextEvent"in window&&!ve,we=i.canUseDOM&&(!ge||ve&&8<ve&&11>=ve),Ce=String.fromCharCode(32),Ee={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},xe=!1;function ke(e,t){switch(e){case"topKeyUp":return-1!==me.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Se(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Te=!1;var _e={eventTypes:Ee,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ge)e:{switch(e){case"topCompositionStart":o=Ee.compositionStart;break e;case"topCompositionEnd":o=Ee.compositionEnd;break e;case"topCompositionUpdate":o=Ee.compositionUpdate;break e}o=void 0}else Te?ke(e,n)&&(o=Ee.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=Ee.compositionStart);return o?(we&&(Te||o!==Ee.compositionStart?o===Ee.compositionEnd&&Te&&(i=ae()):(ie._root=r,ie._startText=se(),Te=!0)),o=he.getPooled(o,t,n,r),i?o.data=i:null!==(i=Se(n))&&(o.data=i),ee(o),i=o):i=null,(e=be?function(e,t){switch(e){case"topCompositionEnd":return Se(t);case"topKeyPress":return 32!==t.which?null:(xe=!0,Ce);case"topTextInput":return(e=t.data)===Ce&&xe?null:e;default:return null}}(e,n):function(e,t){if(Te)return"topCompositionEnd"===e||!ge&&ke(e,t)?(e=ae(),ie._root=null,ie._startText=null,ie._fallbackText=null,Te=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return we?null:t.data;default:return null}}(e,n))?((t=ye.getPooled(Ee.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Pe=null,Oe={injectFiberControlledHostComponent:function(e){Pe=e}},Ae=null,Re=null;function Ne(e){if(e=T(e)){Pe&&"function"==typeof Pe.restoreControlledState||p("194");var t=S(e.stateNode);Pe.restoreControlledState(e.stateNode,e.type,t)}}function Ie(e){Ae?Re?Re.push(e):Re=[e]:Ae=e}function Me(){return null!==Ae||null!==Re}function Ue(){if(Ae){var e=Ae,t=Re;if(Re=Ae=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}var Be=Object.freeze({injection:Oe,enqueueStateRestore:Ie,needsStateRestore:Me,restoreStateIfNeeded:Ue});function De(e,t){return e(t)}function je(e,t,n){return e(t,n)}function Fe(){}var Le=!1;function ze(e,t){if(Le)return e(t);Le=!0;try{return De(e,t)}finally{Le=!1,Me()&&(Fe(),Ue())}}var He={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!He[e.type]:"textarea"===t}function Ve(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function Ye(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ke(e){e._valueTracker||(e._valueTracker=function(e){var t=Ye(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ye(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Qe=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Xe="function"==typeof Symbol&&Symbol.for,Ge=Xe?Symbol.for("react.element"):60103,Je=Xe?Symbol.for("react.call"):60104,Ze=Xe?Symbol.for("react.return"):60105,et=Xe?Symbol.for("react.portal"):60106,tt=Xe?Symbol.for("react.fragment"):60107,nt=Xe?Symbol.for("react.strict_mode"):60108,rt=Xe?Symbol.for("react.provider"):60109,ot=Xe?Symbol.for("react.context"):60110,it=Xe?Symbol.for("react.async_mode"):60111,at=Xe?Symbol.for("react.forward_ref"):60112,st="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||void 0===e?null:"function"==typeof(e=st&&e[st]||e["@@iterator"])?e:null}function ct(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Je:return"ReactCall";case Ze:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function lt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=ct(e),i=null;n&&(i=ct(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt={},dt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var yt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){yt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];yt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){yt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){yt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){yt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){yt[e]=new ht(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){yt[e]=new ht(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){yt[e]=new ht(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){yt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var o=yt.hasOwnProperty(t)?yt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!dt.hasOwnProperty(e)||!pt.hasOwnProperty(e)&&(ft.test(e)?dt[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function wt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=St(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ct(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function Et(e,t){Ct(e,t);var n=St(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?kt(e,t.type,n):t.hasOwnProperty("defaultValue")&&kt(e,t.type,St(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function xt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function kt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function St(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),yt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var Tt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function _t(e,t,n){return(e=le.getPooled(Tt.change,e,t,n)).type="change",Ie(n),ee(e),e}var Pt=null,Ot=null;function At(e){D(e,!1)}function Rt(e){if($e(V(e)))return e}function Nt(e,t){if("topChange"===e)return t}var It=!1;function Mt(){Pt&&(Pt.detachEvent("onpropertychange",Ut),Ot=Pt=null)}function Ut(e){"value"===e.propertyName&&Rt(Ot)&&ze(At,e=_t(Ot,e,Ve(e)))}function Bt(e,t,n){"topFocus"===e?(Mt(),Ot=n,(Pt=t).attachEvent("onpropertychange",Ut)):"topBlur"===e&&Mt()}function Dt(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Rt(Ot)}function jt(e,t){if("topClick"===e)return Rt(t)}function Ft(e,t){if("topInput"===e||"topChange"===e)return Rt(t)}i.canUseDOM&&(It=We("input")&&(!document.documentMode||9<document.documentMode));var Lt={eventTypes:Tt,_isInputEventSupported:It,extractEvents:function(e,t,n,r){var o=t?V(t):window,i=void 0,a=void 0,s=o.nodeName&&o.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===o.type?i=Nt:qe(o)?It?i=Ft:(i=Dt,a=Bt):(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=jt),i&&(i=i(e,t)))return _t(i,n,r);a&&a(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&kt(o,"number",o.value)}},zt=le.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function qt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Vt(){return qt}var Wt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Vt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Kt={eventTypes:Yt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?q(t):null):e=null,e===t)return null;var i=null==e?o:V(e);o=null==t?o:V(t);var a=Wt.getPooled(Yt.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=Wt.getPooled(Yt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,te(a,n,e,t),[a,n]}};function $t(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Qt(e){return!!(e=e._reactInternalFiber)&&2===$t(e)}function Xt(e){2!==$t(e)&&p("188")}function Gt(e){var t=e.alternate;if(!t)return 3===(t=$t(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Xt(o),e;if(a===r)return Xt(o),t;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var s=o.child;s;){if(s===n){a=!0,n=o,r=i;break}if(s===r){a=!0,r=o,n=i;break}s=s.sibling}if(!a){for(s=i.child;s;){if(s===n){a=!0,n=i,r=o;break}if(s===r){a=!0,r=i,n=o;break}s=s.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function Jt(e){if(!(e=Gt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Zt=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=zt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=zt.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Vt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),sn=Wt.extend({dataTransfer:null}),un=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Vt}),cn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ln=Wt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},pn={};function dn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},fn[e]=t,pn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){dn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){dn(e,!1)});var hn={eventTypes:fn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=pn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=pn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Wt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=sn;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=un;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Zt;break;case"topTransitionEnd":e=cn;break;case"topScroll":e=zt;break;case"topWheel":e=ln;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=le}return ee(t=e.getPooled(o,t,n,r)),t}},yn=hn.isInteractiveTopLevelEventType,mn=[];function gn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=q(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],j(e.topLevelType,t,e.nativeEvent,Ve(e.nativeEvent))}var vn=!0;function bn(e){vn=!!e}function wn(e,t,n){if(!n)return null;e=(yn(e)?En:xn).bind(null,e),n.addEventListener(t,e,!1)}function Cn(e,t,n){if(!n)return null;e=(yn(e)?En:xn).bind(null,e),n.addEventListener(t,e,!0)}function En(e,t){je(xn,e,t)}function xn(e,t){if(vn){var n=Ve(t);if(null!==(n=q(n))&&"number"==typeof n.tag&&2!==$t(n)&&(n=null),mn.length){var r=mn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{ze(gn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>mn.length&&mn.push(e)}}}var kn=Object.freeze({get _enabled(){return vn},setEnabled:bn,isEnabled:function(){return vn},trapBubbledEvent:wn,trapCapturedEvent:Cn,dispatchEvent:xn});function Sn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var Tn={animationend:Sn("Animation","AnimationEnd"),animationiteration:Sn("Animation","AnimationIteration"),animationstart:Sn("Animation","AnimationStart"),transitionend:Sn("Transition","TransitionEnd")},_n={},Pn={};function On(e){if(_n[e])return _n[e];if(!Tn[e])return e;var t,n=Tn[e];for(t in n)if(n.hasOwnProperty(t)&&t in Pn)return _n[e]=n[t];return e}i.canUseDOM&&(Pn=document.createElement("div").style,"AnimationEvent"in window||(delete Tn.animationend.animation,delete Tn.animationiteration.animation,delete Tn.animationstart.animation),"TransitionEvent"in window||delete Tn.transitionend.transition);var An={topAnimationEnd:On("animationend"),topAnimationIteration:On("animationiteration"),topAnimationStart:On("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:On("transitionend"),topWheel:"wheel"},Rn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Nn={},In=0,Mn="_reactListenersID"+(""+Math.random()).slice(2);function Un(e){return Object.prototype.hasOwnProperty.call(e,Mn)||(e[Mn]=In++,Nn[e[Mn]]={}),Nn[e[Mn]]}function Bn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Dn(e,t){var n,r=Bn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Bn(r)}}function jn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Fn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Ln={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},zn=null,Hn=null,qn=null,Vn=!1;function Wn(e,t){if(Vn||null==zn||zn!==u())return null;var n=zn;return"selectionStart"in n&&jn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,qn&&c(qn,n)?null:(qn=n,(e=le.getPooled(Ln.select,Hn,e,t)).type="select",e.target=zn,ee(e),e)}var Yn={eventTypes:Ln,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Un(i),o=C.onSelect;for(var a=0;a<o.length;a++){var s=o[a];if(!i.hasOwnProperty(s)||!i[s]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?V(t):window,e){case"topFocus":(qe(i)||"true"===i.contentEditable)&&(zn=i,Hn=t,qn=null);break;case"topBlur":qn=Hn=zn=null;break;case"topMouseDown":Vn=!0;break;case"topContextMenu":case"topMouseUp":return Vn=!1,Wn(n,r);case"topSelectionChange":if(Fn)break;case"topKeyDown":case"topKeyUp":return Wn(n,r)}return null}};function Kn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function $n(e,t,n){var r=e.alternate;return null===r?((r=new Kn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Qn(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case tt:return Xn(e.children,t,n,o);case it:i=11,t|=3;break;case nt:i=11,t|=2;break;case Je:i=7;break;case Ze:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:i=13;break;case ot:i=12;break;case at:i=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;p("130",null==r?r:typeof r,"")}else p("130",null==r?r:typeof r,"")}return(t=new Kn(i,e,o,t)).type=r,t.expirationTime=n,t}function Xn(e,t,n,r){return(e=new Kn(10,e,r,t)).expirationTime=n,e}function Gn(e,t,n){return(e=new Kn(6,e,null,t)).expirationTime=n,e}function Jn(e,t,n){return(t=new Kn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}U.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),S=Y.getFiberCurrentPropsFromNode,T=Y.getInstanceFromNode,_=Y.getNodeFromInstance,U.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:Kt,ChangeEventPlugin:Lt,SelectEventPlugin:Yn,BeforeInputEventPlugin:_e});var Zn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Zn&&Zn(e)}function rr(e){"function"==typeof er&&er(e)}function or(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ir(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ar=void 0,sr=void 0;function ur(e){ar=sr=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=or(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=or(null)):e=null,ar=n,sr=e!==n?e:null}function cr(e,t){ur(e),e=ar;var n=sr;null===n?ir(e,t):null===e.last||null===n.last?(ir(e,t),ir(n,t)):(ir(e,t),n.last=t)}function lr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function fr(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var s=!0,u=n.first,c=!1;null!==u;){var l=u.expirationTime;if(l>i){var f=n.expirationTime;(0===f||f>l)&&(n.expirationTime=l),c||(c=!0,n.baseState=e)}else c||(n.first=u.next,null===n.first&&(n.last=null)),u.isReplace?(e=lr(u,r,e,o),s=!0):(l=lr(u,r,e,o))&&(e=s?a({},e,l):a(e,l),s=!1),u.isForced&&(n.hasForceUpdate=!0),null!==u.callback&&(null===(l=n.callbackList)&&(l=n.callbackList=[]),l.push(u)),null!==u.capturedValue&&(null===(l=n.capturedValues)?n.capturedValues=[u.capturedValue]:l.push(u.capturedValue));u=u.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),c||(n.baseState=e),e}function pr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&p("191",o),o.call(t)}}var dr=Array.isArray;function hr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function yr(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function mr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=$n(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Gn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function u(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=hr(e,t,n),r.return=e,r):((r=Qn(n,e.mode,r)).ref=hr(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function l(e,t,n,r,i){return null===t||10!==t.tag?((t=Xn(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Gn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ge:return(n=Qn(t,e.mode,n)).ref=hr(e,null,t),n.return=e,n;case et:return(t=Jn(t,e.mode,n)).return=e,t}if(dr(t)||ut(t))return(t=Xn(t,e.mode,n,null)).return=e,t;yr(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ge:return n.key===o?n.type===tt?l(e,t,n.props.children,r,o):u(e,t,n,r):null;case et:return n.key===o?c(e,t,n,r):null}if(dr(n)||ut(n))return null!==o?null:l(e,t,n,r,null);yr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ge:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?l(t,e,r.props.children,o,r.key):u(t,e,r,o);case et:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(dr(r)||ut(r))return l(t,e=e.get(n)||null,r,o,null);yr(t,r)}return null}function y(o,a,s,u){for(var c=null,l=null,p=a,y=a=0,m=null;null!==p&&y<s.length;y++){p.index>y?(m=p,p=null):m=p.sibling;var g=d(o,p,s[y],u);if(null===g){null===p&&(p=m);break}e&&p&&null===g.alternate&&t(o,p),a=i(g,a,y),null===l?c=g:l.sibling=g,l=g,p=m}if(y===s.length)return n(o,p),c;if(null===p){for(;y<s.length;y++)(p=f(o,s[y],u))&&(a=i(p,a,y),null===l?c=p:l.sibling=p,l=p);return c}for(p=r(o,p);y<s.length;y++)(m=h(p,o,y,s[y],u))&&(e&&null!==m.alternate&&p.delete(null===m.key?y:m.key),a=i(m,a,y),null===l?c=m:l.sibling=m,l=m);return e&&p.forEach(function(e){return t(o,e)}),c}function m(o,a,s,u){var c=ut(s);"function"!=typeof c&&p("150"),null==(s=c.call(s))&&p("151");for(var l=c=null,y=a,m=a=0,g=null,v=s.next();null!==y&&!v.done;m++,v=s.next()){y.index>m?(g=y,y=null):g=y.sibling;var b=d(o,y,v.value,u);if(null===b){y||(y=g);break}e&&y&&null===b.alternate&&t(o,y),a=i(b,a,m),null===l?c=b:l.sibling=b,l=b,y=g}if(v.done)return n(o,y),c;if(null===y){for(;!v.done;m++,v=s.next())null!==(v=f(o,v.value,u))&&(a=i(v,a,m),null===l?c=v:l.sibling=v,l=v);return c}for(y=r(o,y);!v.done;m++,v=s.next())null!==(v=h(y,o,m,v.value,u))&&(e&&null!==v.alternate&&y.delete(null===v.key?m:v.key),a=i(v,a,m),null===l?c=v:l.sibling=v,l=v);return e&&y.forEach(function(e){return t(o,e)}),c}return function(e,r,i,s){"object"==typeof i&&null!==i&&i.type===tt&&null===i.key&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case Ge:e:{var c=i.key;for(u=r;null!==u;){if(u.key===c){if(10===u.tag?i.type===tt:u.type===i.type){n(e,u.sibling),(r=o(u,i.type===tt?i.props.children:i.props,s)).ref=hr(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===tt?((r=Xn(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Qn(i,e.mode,s)).ref=hr(e,r,i),s.return=e,e=s)}return a(e);case et:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jn(i,e.mode,s)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,s)).return=e,e=r):(n(e,r),(r=Gn(i,e.mode,s)).return=e,e=r),a(e);if(dr(i))return y(e,r,i,s);if(ut(i))return m(e,r,i,s);if(u&&yr(e,i),void 0===i)switch(e.tag){case 2:case 1:p("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var gr=mr(!0),vr=mr(!1);function br(e,t,n,r,o,i,s){function u(e,t,n){l(e,t,n,t.expirationTime)}function l(e,t,n,r){t.child=null===e?vr(t,null,n,r):gr(t,e.child,n,r)}function d(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,i){if(d(e,t),!n&&!o)return r&&P(t,!1),g(e,t);n=t.stateNode,Qe.current=t;var a=o?null:n.render();return t.effectTag|=1,o&&(l(e,t,null,i),t.child=null),l(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,r&&P(t,!0),t.child}function y(e){var t=e.stateNode;t.pendingContext?_(e,t.pendingContext,t.pendingContext!==t.context):t.context&&_(e,t.context,!1),C(e,t.containerInfo)}function m(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function g(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=$n(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$n(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var v=e.shouldSetTextContent,b=e.shouldDeprioritizeSubtree,w=t.pushHostContext,C=t.pushHostContainer,E=r.pushProvider,x=n.getMaskedContext,k=n.getUnmaskedContext,S=n.hasContextChanged,T=n.pushContextProvider,_=n.pushTopLevelContextObject,P=n.invalidateContextProvider,O=o.enterHydrationState,A=o.resetHydrationState,R=o.tryToClaimNextHydratableInstance,N=(e=function(e,t,n,r,o){function i(e,t,n,r,o,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(e.prototype&&e.prototype.isPureReactComponent&&c(t,n)&&c(r,o))}function s(e,t){t.updater=g,e.stateNode=t,t._reactInternalFiber=e}function u(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&g.enqueueReplaceState(t,t.state,null)}function l(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var p=e.cacheContext,d=e.getMaskedContext,h=e.getUnmaskedContext,y=e.isContextConsumer,m=e.hasContextChanged,g={isMounted:Qt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);cr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);cr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);cr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:s,callGetDerivedStateFromProps:l,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=y(e),i=o?d(e,r):f,u=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return s(e,n),e.memoizedState=u,null!==(t=l(e,0,t,u))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&p(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,i=e.pendingProps,a=h(e);o.props=i,o.state=e.memoizedState,o.refs=f,o.context=d(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&g.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=fr(r,e,n,o,i,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,s=e.stateNode;s.props=e.memoizedProps,s.state=e.memoizedState;var c=e.memoizedProps,f=e.pendingProps,p=s.context,y=h(e);y=d(e,y),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(c!==f||p!==y)&&u(e,s,f,y),p=e.memoizedState,t=null!==e.updateQueue?fr(null,e,e.updateQueue,s,f,t):p;var g=void 0;if(c!==f&&(g=l(e,0,f,t)),null!==g&&void 0!==g){t=null===t||void 0===t?g:a({},t,g);var v=e.updateQueue;null!==v&&(v.baseState=a({},v.baseState,g))}return c!==f||p!==t||m()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((c=i(e,c,f,p,t,y))?(n||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(e.effectTag|=4)):("function"==typeof s.componentDidMount&&(e.effectTag|=4),r(e,f),o(e,t)),s.props=f,s.state=t,s.context=y,c):("function"==typeof s.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var s=t.type,c=t.stateNode;c.props=t.memoizedProps,c.state=t.memoizedState;var f=t.memoizedProps,p=t.pendingProps,y=c.context,g=h(t);g=d(t,g),(s="function"==typeof s.getDerivedStateFromProps||"function"==typeof c.getSnapshotBeforeUpdate)||"function"!=typeof c.UNSAFE_componentWillReceiveProps&&"function"!=typeof c.componentWillReceiveProps||(f!==p||y!==g)&&u(t,c,p,g),y=t.memoizedState,n=null!==t.updateQueue?fr(e,t,t.updateQueue,c,p,n):y;var v=void 0;if(f!==p&&(v=l(t,0,p,n)),null!==v&&void 0!==v){n=null===n||void 0===n?v:a({},n,v);var b=t.updateQueue;null!==b&&(b.baseState=a({},b.baseState,v))}return f!==p||y!==n||m()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((v=i(t,f,p,y,n,g))?(s||"function"!=typeof c.UNSAFE_componentWillUpdate&&"function"!=typeof c.componentWillUpdate||("function"==typeof c.componentWillUpdate&&c.componentWillUpdate(p,n,g),"function"==typeof c.UNSAFE_componentWillUpdate&&c.UNSAFE_componentWillUpdate(p,n,g)),"function"==typeof c.componentDidUpdate&&(t.effectTag|=4),"function"==typeof c.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof c.componentDidUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=2048),r(t,p),o(t,n)),c.props=p,c.state=n,c.context=g,v):("function"!=typeof c.componentDidUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,s,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,I=e.callGetDerivedStateFromProps,M=e.constructClassInstance,U=e.mountClassInstance,B=e.resumeMountClassInstance,D=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:y(t);break;case 2:T(t);break;case 4:C(t,t.stateNode.containerInfo);break;case 13:E(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,i=k(t);return r=r(o,i=x(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=I(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=T(t),N(t,r),U(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,u(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,S()||t.memoizedProps!==n?(r=k(t),o=o(n,r=x(t,r)),t.effectTag|=1,u(e,t,o),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 2:o=T(t),null===e?null===t.stateNode?(M(t,t.pendingProps),U(t,n),r=!0):r=B(t,n):r=D(e,t,n),i=!1;var s=t.updateQueue;return null!==s&&null!==s.capturedValues&&(i=r=!0),h(e,t,r,o,i,n);case 3:e:if(y(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=fr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){A(),e=g(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&O(t)?(t.effectTag|=2,t.child=vr(t,null,r,n)):(A(),u(e,t,r)),t.memoizedState=o,e=t.child}else A(),e=g(e,t);return e;case 5:return w(t),null===e&&R(t),o=t.type,s=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,S()||s!==r||((s=1&t.mode&&b(o,r))&&(t.expirationTime=1073741823),s&&1073741823===n)?(s=r.children,v(o,r)?s=null:i&&v(o,i)&&(t.effectTag|=16),d(e,t),1073741823!==n&&1&t.mode&&b(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(u(e,t,s),t.memoizedProps=r,e=t.child)):e=g(e,t),e;case 6:return null===e&&R(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,S()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?vr(t,t.stateNode,r,n):gr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return C(t,t.stateNode.containerInfo),o=t.pendingProps,S()||t.memoizedProps!==o?(null===e?t.child=gr(t,null,o,n):u(e,t,o),t.memoizedProps=o,e=t.child):e=g(e,t),e;case 14:return u(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,S()||t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 11:return n=t.pendingProps.children,S()||null!==n&&t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps;if(!S()&&i===o)return t.stateNode=0,E(t),g(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return t.stateNode=0,E(t),g(e,t);a=0}else{var s=i.value;if(s===a&&(0!==s||1/s==1/a)||s!=s&&a!=a){if(i.children===o.children)return t.stateNode=0,E(t),g(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823,0==(a|=0)){if(i.children===o.children)return t.stateNode=0,E(t),g(e,t)}else m(t,r,a,n)}return t.stateNode=a,E(t),u(e,t,o.children),t.child}(e,t,n);case 12:e:{r=t.type,i=t.pendingProps,s=t.memoizedProps,o=r._currentValue;var c=r._changedBits;if(S()||0!==c||s!==i){t.memoizedProps=i;var l=i.unstable_observedBits;if(void 0!==l&&null!==l||(l=1073741823),t.stateNode=l,0!=(c&l))m(t,r,c,n);else if(s===i){e=g(e,t);break e}u(e,t,n=(n=i.children)(o)),e=t.child}else e=g(e,t)}return e;default:p("156")}}}}function wr(e,t){var n=t.source;null===t.stack&&lt(n),null!==n&&ct(n),t=t.value,null!==e&&2===e.tag&&ct(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var Cr={};function Er(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)M(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=R(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ie=!0;break}e=n}else{if(null!==(e=I(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=A(e.alternate,e,ne);return null===t&&(t=r(e)),Qe.current=null,t}function i(e,n,i){Z&&p("243"),Z=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=$n((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!k();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){a=!0,S(e);break}var s=(i=ee).return;if(null===s){a=!0,S(e);break}N(s,i,e),ee=r(i)}break}return Z=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void p("262")}function s(e,t,n,r){cr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:lt(e)},next:null}),l(t,r)}function u(e,t){e:{Z&&!oe&&p("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){s(e,r,t,1),e=void 0;break e}break;case 3:s(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&s(e,e,t,1),e=void 0}return e}function c(e){return e=0!==J?J:Z?oe?1:ne:1&e.mode?Ce?10*(1+((d()+15)/10|0)):25*(1+((d()+500)/25|0)):1,Ce&&(0===he||e>he)&&(he=e),e}function l(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!Z&&0!==ne&&n<ne&&t(),Z&&!oe&&te===r||m(r,n),ke>xe&&p("185")}e=e.return}n=void 0}return n}function d(){return X=V()-Q,2+(X/10|0)}function h(e,t,n,r,o){var i=J;J=1;try{return e(t,n,r,o)}finally{J=i}}function y(e){if(0!==ce){if(e>ce)return;Y(le)}var t=V()-Q;ce=e,le=W(v,{timeout:10*(e-2)-t})}function m(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ue?(se=ue=e,e.nextScheduledRoot=e):(ue=ue.nextScheduledRoot=e).nextScheduledRoot=se;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(be?we&&(pe=e,de=1,E(e,1,!1)):1===t?b():y(t))}function g(){var e=0,t=null;if(null!==ue)for(var n=ue,r=se;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ue)&&p("244"),r===r.nextScheduledRoot){se=ue=r.nextScheduledRoot=null;break}if(r===se)se=o=r.nextScheduledRoot,ue.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ue){(ue=n).nextScheduledRoot=se,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ue)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?ke++:ke=0,pe=t,de=e}function v(e){w(0,!0,e)}function b(){w(1,!1,null)}function w(e,t,n){if(ve=n,g(),t)for(;null!==pe&&0!==de&&(0===e||e>=de)&&(!ye||d()>=de);)E(pe,de,!ye),g();else for(;null!==pe&&0!==de&&(0===e||e>=de);)E(pe,de,!1),g();null!==ve&&(ce=0,le=-1),0!==de&&y(de),ve=null,ye=!1,C()}function C(){if(ke=0,null!==Ee){var e=Ee;Ee=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){me||(me=!0,ge=e)}}}if(me)throw e=ge,ge=null,me=!1,e}function E(e,t,n){fe&&p("245"),fe=!0,n?null!==(n=e.finishedWork)?x(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(k()?e.finishedWork=n:x(e,n,t))):null!==(n=e.finishedWork)?x(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&x(e,n,t)),fe=!1}function x(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ee?Ee=[r]:Ee.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=Z=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0;var o=d();if(Qe.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(K(n.containerInfo),re=i;null!==re;){var a=!1,s=void 0;try{for(;null!==re;)2048&re.effectTag&&U(re.alternate,re),re=re.nextEffect}catch(e){a=!0,s=e}a&&(null===re&&p("178"),u(re,s),null!==re&&(re=re.nextEffect))}for(re=i;null!==re;){a=!1,s=void 0;try{for(;null!==re;){var c=re.effectTag;if(16&c&&B(re),128&c){var l=re.alternate;null!==l&&q(l)}switch(14&c){case 2:D(re),re.effectTag&=-3;break;case 6:D(re),re.effectTag&=-3,F(re.alternate,re);break;case 4:F(re.alternate,re);break;case 8:j(re)}re=re.nextEffect}}catch(e){a=!0,s=e}a&&(null===re&&p("178"),u(re,s),null!==re&&(re=re.nextEffect))}for($(n.containerInfo),n.current=t,re=i;null!==re;){c=!1,l=void 0;try{for(i=n,a=o,s=r;null!==re;){var f=re.effectTag;36&f&&L(i,re.alternate,re,a,s),256&f&&z(re,S),128&f&&H(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){c=!0,l=e}c&&(null===re&&p("178"),u(re,l),null!==re&&(re=re.nextEffect))}Z=oe=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function k(){return!(null===ve||ve.timeRemaining()>Se)&&(ye=!0)}function S(e){null===pe&&p("246"),pe.remainingExpirationTime=0,me||(me=!0,ge=e)}var T=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),_=function(e,t){function n(e){return e===Cr&&p("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,s=e(Cr),u=e(Cr),c=e(Cr);return{getHostContext:function(){return n(s.current)},getRootHostContainer:function(){return n(c.current)},popHostContainer:function(e){a(s,e),a(u,e),a(c,e)},popHostContext:function(e){u.current===e&&(a(s,e),a(u,e))},pushHostContainer:function(e,t){i(c,t,e),i(u,e,e),i(s,Cr,e),t=o(t),a(s,e),i(s,t,e)},pushHostContext:function(e){var t=n(c.current),o=n(s.current);o!==(t=r(o,e.type,t))&&(i(u,e,e),i(s,t,e))}}}(e,T),P=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",ct(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,s=e.pop,u=o(f),c=o(!1),l=f;return{getUnmaskedContext:function(e){return n(e)?l:u.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return f;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&t(e,n,a),a},hasContextChanged:function(){return c.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(s(c,e),s(u,e))},popTopLevelContextObject:function(e){s(c,e),s(u,e)},pushTopLevelContextObject:function(e,t,n){null!=u.cursor&&p("168"),i(u,t,e),i(c,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,l=u.current,i(u,t,e),i(c,c.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||p("169"),t){var o=r(e,l);n.__reactInternalMemoizedMergedChildContext=o,s(c,e),s(u,e),i(u,o,e)}else s(c,e);i(c,t,e)},findCurrentUnmaskedContext:function(e){for((2!==$t(e)||2!==e.tag)&&p("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||p("171")}return e.stateNode.context}}}(T);T=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;r(o,e),r(i,e),r(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(T);var O=function(e){function t(e,t){var n=new Kn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,s=e.getNextHydratableSibling,u=e.getFirstHydratableChild,c=e.hydrateInstance,l=e.hydrateTextInstance,f=null,d=null,h=!1;return{enterHydrationState:function(e){return d=u(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){d=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(!(r=s(r))||!n(e,r))return e.effectTag|=2,h=!1,void(f=e);t(f,d)}f=e,d=u(r)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=c(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return l(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=d;n;)t(e,n),n=s(n);return r(e),d=f?s(e.stateNode):null,!0}}}(e),A=br(e,_,P,T,O,l,c).beginWork,R=function(e,t,n,r,o){function i(e){e.effectTag|=4}var a=e.createInstance,s=e.createTextInstance,u=e.appendInitialChild,c=e.finalizeInitialChildren,l=e.prepareUpdate,f=e.persistence,d=t.getRootHostContainer,h=t.popHostContext,y=t.getHostContext,m=t.popHostContainer,g=n.popContextProvider,v=n.popTopLevelContextObject,b=r.popProvider,w=o.prepareToHydrateHostInstance,C=o.prepareToHydrateHostTextInstance,E=o.popHydrationState,x=void 0,k=void 0,S=void 0;return e.mutation?(x=function(){},k=function(e,t,n){(t.updateQueue=n)&&i(t)},S=function(e,t,n,r){n!==r&&i(t)}):p(f?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return g(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return m(t),v(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(E(t),t.effectTag&=-3),x(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=d();var o=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,T=t.stateNode,_=y();T=l(T,o,f,r,n,_),k(e,t,T,o,f,r,n,_),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&p("166"),null;if(e=y(),E(t))w(t,n,e)&&i(t);else{f=a(o,r,n,e,t);e:for(_=t.child;null!==_;){if(5===_.tag||6===_.tag)u(f,_.stateNode);else if(4!==_.tag&&null!==_.child){_.child.return=_,_=_.child;continue}if(_===t)break;for(;null===_.sibling;){if(null===_.return||_.return===t)break e;_=_.return}_.sibling.return=_.return,_=_.sibling}c(f,o,r,n,e)&&i(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)S(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&p("166"),null;e=d(),n=y(),E(t)?C(t)&&i(t):t.stateNode=s(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||p("165"),t.tag=8,o=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)p("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),t.child=gr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return m(t),x(t),null;case 13:return b(t),null;case 12:return null;case 0:p("167");default:p("156")}}}}(e,_,P,T,O).completeWork,N=(_=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,s=t.popContextProvider,u=t.popTopLevelContextObject,c=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:lt(t)};do{switch(e.tag){case 3:return ur(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){ur(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:s(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),u(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return c(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:s(e);break;case 3:i(e),u(e);break;case 5:a(e);break;case 4:i(e);break;case 13:c(e)}}}}(_,P,T,0,n)).throwException,I=_.unwindWork,M=_.unwindInterruptedWork,U=(_=function(e,t,n,r,o){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(rr(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:s(e.stateNode);break;case 4:f&&c(e)}}function s(e){for(var t=e;;)if(a(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function u(e){return 5===e.tag||3===e.tag||4===e.tag}function c(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)s(t),o?E(r,t.stateNode):C(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var l=e.getPublicInstance,f=e.mutation;e=e.persistence,f||p(e?"235":"236");var d=f.commitMount,h=f.commitUpdate,y=f.resetTextContent,m=f.commitTextUpdate,g=f.appendChild,v=f.appendChildToContainer,b=f.insertBefore,w=f.insertInContainerBefore,C=f.removeChild,E=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:p("163")}},commitResetTextContent:function(e){y(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(u(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(y(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||u(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?w(t,o.stateNode,n):b(t,o.stateNode,n):r?v(t,o.stateNode):g(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){c(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&h(n,i,o,e,r,t)}break;case 6:null===t.stateNode&&p("162"),n=t.memoizedProps,m(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:p("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&pr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=l(n.child.stateNode);break;case 2:e=n.child.stateNode}pr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&d(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:p("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&p("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,s=r.stack;wr(e,r),t.componentDidCatch(a,{componentStack:null!==s?s:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&p("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)wr(e,r=i[n]),t(r.value);break;default:p("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=l(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,u,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,B=_.commitResetTextContent,D=_.commitPlacement,j=_.commitDeletion,F=_.commitWork,L=_.commitLifeCycles,z=_.commitErrorLogging,H=_.commitAttachRef,q=_.commitDetachRef,V=e.now,W=e.scheduleDeferredCallback,Y=e.cancelDeferredCallback,K=e.prepareForCommit,$=e.resetAfterCommit,Q=V(),X=Q,G=0,J=0,Z=!1,ee=null,te=null,ne=0,re=null,oe=!1,ie=!1,ae=null,se=null,ue=null,ce=0,le=-1,fe=!1,pe=null,de=0,he=0,ye=!1,me=!1,ge=null,ve=null,be=!1,we=!1,Ce=!1,Ee=null,xe=1e3,ke=0,Se=1;return{recalculateCurrentTime:d,computeExpirationForFiber:c,scheduleWork:l,requestWork:m,flushRoot:function(e,t){fe&&p("253"),pe=e,de=t,E(e,t,!1),b(),C()},batchedUpdates:function(e,t){var n=be;be=!0;try{return e(t)}finally{(be=n)||fe||b()}},unbatchedUpdates:function(e,t){if(be&&!we){we=!0;try{return e(t)}finally{we=!1}}return e(t)},flushSync:function(e,t){fe&&p("187");var n=be;be=!0;try{return h(e,t)}finally{be=n,b()}},flushControlled:function(e){var t=be;be=!0;try{h(e)}finally{(be=t)||fe||w(1,!1,null)}},deferredUpdates:function(e){var t=J;J=25*(1+((d()+500)/25|0));try{return e()}finally{J=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(Ce)return e(t,n);be||fe||0===he||(w(he,!1,null),he=0);var r=Ce,o=be;be=Ce=!0;try{return e(t,n)}finally{Ce=r,(be=o)||fe||b()}},flushInteractiveUpdates:function(){fe||0===he||(w(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((d()+500)/25|0));return e<=G&&(e=G+1),G=e},legacyContext:P}}function xr(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var s=u(n);n=c(n)?l(n,s):s}else n=f;return null===t.context?t.context=n:t.pendingContext=n,cr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(r,o),o}var n=e.getPublicInstance,r=(e=Er(e)).recalculateCurrentTime,o=e.computeExpirationForFiber,i=e.scheduleWork,s=e.legacyContext,u=s.findCurrentUnmaskedContext,c=s.isContextProvider,l=s.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Kn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,i,a){var s=n.current;return t(e,n,i,r(),s=o(s),a)},updateContainerAtExpirationTime:function(e,n,o,i,a){return t(e,n,o,r(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=Jt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Gt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Zn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=Jt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var kr=Object.freeze({default:xr}),Sr=kr&&xr||kr,Tr=Sr.default?Sr.default:Sr;var _r="object"==typeof performance&&"function"==typeof performance.now,Pr=void 0;Pr=_r?function(){return performance.now()}:function(){return Date.now()};var Or=void 0,Ar=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Rr=null,Nr=!1,Ir=-1,Mr=!1,Ur=0,Br=33,Dr=33,jr=void 0;jr=_r?{didTimeout:!1,timeRemaining:function(){var e=Ur-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Ur-Date.now();return 0<e?e:0}};var Fr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Fr){if(Nr=!1,e=Pr(),0>=Ur-e){if(!(-1!==Ir&&Ir<=e))return void(Mr||(Mr=!0,requestAnimationFrame(Lr)));jr.didTimeout=!0}else jr.didTimeout=!1;Ir=-1,e=Rr,Rr=null,null!==e&&e(jr)}},!1);var Lr=function(e){Mr=!1;var t=e-Ur+Dr;t<Dr&&Br<Dr?(8>t&&(t=8),Dr=t<Br?Br:t):Br=t,Ur=e+Dr,Nr||(Nr=!0,window.postMessage(Fr,"*"))};Or=function(e,t){return Rr=e,null!=t&&"number"==typeof t.timeout&&(Ir=Pr()+t.timeout),Mr||(Mr=!0,requestAnimationFrame(Lr)),0},Ar=function(){Rr=null,Nr=!1,Ir=-1}}else Or=window.requestIdleCallback,Ar=window.cancelIdleCallback;else Or=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Ar=function(e){clearTimeout(e)};function zr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Hr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function qr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Vr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Yr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Kr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var $r={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Qr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Xr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Qr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Gr,Jr=void 0,Zr=(Gr=function(e,t){if(e.namespaceURI!==$r.svg||"innerHTML"in e)e.innerHTML=t;else{for((Jr=Jr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Jr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Gr(e,t)})}:Gr);function eo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var to={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||to.hasOwnProperty(o)&&to[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(to).forEach(function(e){no.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),to[t]=to[e]})});var oo=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(e,t,n){t&&(oo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var so=s.thatReturns("");function uo(e,t){var n=Un(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?Cn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(Cn("topFocus","focus",e),Cn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(We("cancel",!0)&&Cn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(We("close",!0)&&Cn("topClose","close",e),n.topClose=!0):An.hasOwnProperty(o)&&wn(o,An[o],e),n[o]=!0)}}function co(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===$r.html&&(r=Qr(e)),r===$r.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function lo(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":wn("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in Rn)Rn.hasOwnProperty(i)&&wn(i,Rn[i],e);i=n;break;case"source":wn("topError","error",e),i=n;break;case"img":case"image":case"link":wn("topError","error",e),wn("topLoad","load",e),i=n;break;case"form":wn("topReset","reset",e),wn("topSubmit","submit",e),i=n;break;case"details":wn("topToggle","toggle",e),i=n;break;case"input":wt(e,n),i=bt(e,n),wn("topInvalid","invalid",e),uo(r,"onChange");break;case"option":i=zr(e,n);break;case"select":qr(e,n),i=a({},n,{value:void 0}),wn("topInvalid","invalid",e),uo(r,"onChange");break;case"textarea":Wr(e,n),i=Vr(e,n),wn("topInvalid","invalid",e),uo(r,"onChange");break;default:i=n}io(t,i,so);var u,c=i;for(u in c)if(c.hasOwnProperty(u)){var l=c[u];"style"===u?ro(e,l):"dangerouslySetInnerHTML"===u?null!=(l=l?l.__html:void 0)&&Zr(e,l):"children"===u?"string"==typeof l?("textarea"!==t||""!==l)&&eo(e,l):"number"==typeof l&&eo(e,""+l):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(w.hasOwnProperty(u)?null!=l&&uo(r,u):null!=l&&vt(e,u,l,o))}switch(t){case"input":Ke(e),xt(e,n);break;case"textarea":Ke(e),Kr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Hr(e,!!n.multiple,t,!1):null!=n.defaultValue&&Hr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=s)}}function po(e,t,n,r,o){var i=null;switch(t){case"input":n=bt(e,n),r=bt(e,r),i=[];break;case"option":n=zr(e,n),r=zr(e,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=Vr(e,n),r=Vr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=s)}io(t,r,so),t=e=void 0;var u=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var c=n[e];for(t in c)c.hasOwnProperty(t)&&(u||(u={}),u[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(w.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var l=r[e];if(c=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&l!==c&&(null!=l||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||l&&l.hasOwnProperty(t)||(u||(u={}),u[t]="");for(t in l)l.hasOwnProperty(t)&&c[t]!==l[t]&&(u||(u={}),u[t]=l[t])}else u||(i||(i=[]),i.push(e,u)),u=l;else"dangerouslySetInnerHTML"===e?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(i=i||[]).push(e,""+l)):"children"===e?c===l||"string"!=typeof l&&"number"!=typeof l||(i=i||[]).push(e,""+l):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(w.hasOwnProperty(e)?(null!=l&&uo(o,e),i||c===l||(i=[])):(i=i||[]).push(e,l))}return u&&(i=i||[]).push("style",u),i}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Ct(e,o),ao(n,r),r=ao(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],s=t[i+1];"style"===a?ro(e,s):"dangerouslySetInnerHTML"===a?Zr(e,s):"children"===a?eo(e,s):vt(e,a,s,r)}switch(n){case"input":Et(e,o);break;case"textarea":Yr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Hr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Hr(e,!!o.multiple,o.defaultValue,!0):Hr(e,!!o.multiple,o.multiple?[]:"",!1))}}function yo(e,t,n,r,o){switch(t){case"iframe":case"object":wn("topLoad","load",e);break;case"video":case"audio":for(var i in Rn)Rn.hasOwnProperty(i)&&wn(i,Rn[i],e);break;case"source":wn("topError","error",e);break;case"img":case"image":case"link":wn("topError","error",e),wn("topLoad","load",e);break;case"form":wn("topReset","reset",e),wn("topSubmit","submit",e);break;case"details":wn("topToggle","toggle",e);break;case"input":wt(e,n),wn("topInvalid","invalid",e),uo(o,"onChange");break;case"select":qr(e,n),wn("topInvalid","invalid",e),uo(o,"onChange");break;case"textarea":Wr(e,n),wn("topInvalid","invalid",e),uo(o,"onChange")}for(var a in io(t,n,so),r=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):w.hasOwnProperty(a)&&null!=i&&uo(o,a));switch(t){case"input":Ke(e),xt(e,n);break;case"textarea":Ke(e),Kr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=s)}return r}function mo(e,t){return e.nodeValue!==t}var go=Object.freeze({createElement:co,createTextNode:lo,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:yo,diffHydratedText:mo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Et(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=W(r);o||p("90"),$e(r),Et(r,o)}}}break;case"textarea":Yr(e,n);break;case"select":null!=(t=n.value)&&Hr(e,!!n.multiple,t,!1)}}});Oe.injectFiberControlledHostComponent(go);var vo=null,bo=null;function wo(e){this._expirationTime=So.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Co(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Eo(e,t,n){this._internalRoot=So.createContainer(e,t,n)}function xo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ko(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}wo.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Co;return So.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},wo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},wo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,So.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},wo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Co.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Co.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},Eo.prototype.render=function(e,t){var n=this._internalRoot,r=new Co;return null!==(t=void 0===t?null:t)&&r.then(t),So.updateContainer(e,n,null,r._onCommit),r},Eo.prototype.unmount=function(e){var t=this._internalRoot,n=new Co;return null!==(e=void 0===e?null:e)&&n.then(e),So.updateContainer(null,t,null,n._onCommit),n},Eo.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Co;return null!==(n=void 0===n?null:n)&&o.then(n),So.updateContainer(t,r,e,o._onCommit),o},Eo.prototype.createBatch=function(){var e=new wo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var So=Tr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Xr(null,"");break;default:e=Xr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Xr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){vo=vn;var e=u();if(jn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,s=-1,c=0,l=0,f=e,p=null;t:for(;;){for(var d;f!==t||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==n&&3!==f.nodeType||(s=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===e)break t;if(p===t&&++c===r&&(a=i),p===o&&++l===n&&(s=i),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}t=-1===a||-1===s?null:{start:a,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;bo={focusedElem:e,selectionRange:t},bn(!1)},resetAfterCommit:function(){var e=bo,t=u(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&l(document.documentElement,n)){if(jn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[oe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Dn(n,e);var i=Dn(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}bo=null,bn(vo),vo=null},createInstance:function(e,t,n,r,o){return(e=co(e,t,n,r))[z]=o,e[H]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),ko(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=lo(e,t))[z]=r,e},now:Pr,mutation:{commitMount:function(e,t,n){ko(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[H]=o,ho(e,t,n,r,o)},resetTextContent:function(e){eo(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[z]=i,e[H]=n,yo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[z]=n,mo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Or,cancelDeferredCallback:Ar}),To=So;function _o(e,t,n,r,o){xo(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=So.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Eo(e,!1,t)}(n,r),"function"==typeof o){var s=o;o=function(){var e=So.getPublicRootInstance(i._internalRoot);s.call(e)}}So.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return So.getPublicRootInstance(i._internalRoot)}function Po(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return xo(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}De=To.batchedUpdates,je=To.interactiveUpdates,Fe=To.flushInteractiveUpdates;var Oo={createPortal:Po,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:So.findHostInstance(e)},hydrate:function(e,t,n){return _o(null,e,t,!0,n)},render:function(e,t,n){return _o(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),_o(e,t,n,!1,r)},unmountComponentAtNode:function(e){return xo(e)||p("40"),!!e._reactRootContainer&&(So.unbatchedUpdates(function(){_o(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Po.apply(void 0,arguments)},unstable_batchedUpdates:So.batchedUpdates,unstable_deferredUpdates:So.deferredUpdates,flushSync:So.flushSync,unstable_flushControlled:So.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:F,EventPluginRegistry:k,EventPropagators:ne,ReactControlledComponent:Be,ReactDOMComponentTree:Y,ReactDOMEventListener:kn},unstable_createRoot:function(e,t){return new Eo(e,!0,null!=t&&!0===t.hydrate)}};So.injectIntoDevTools({findFiberByHostInstance:q,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Ao=Object.freeze({default:Oo}),Ro=Ao&&Oo||Ao;e.exports=Ro.default?Ro.default:Ro},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(84)},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(34),o=n(15),i=n(33),a=n(14),s="function"==typeof Symbol&&Symbol.for,u=s?Symbol.for("react.element"):60103,c=s?Symbol.for("react.portal"):60106,l=s?Symbol.for("react.fragment"):60107,f=s?Symbol.for("react.strict_mode"):60108,p=s?Symbol.for("react.provider"):60109,d=s?Symbol.for("react.context"):60110,h=s?Symbol.for("react.async_mode"):60111,y=s?Symbol.for("react.forward_ref"):60112,m="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function b(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}function w(){}function C(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=b.prototype;var E=C.prototype=new w;E.constructor=C,r(E,b.prototype),E.isPureReactComponent=!0;var x={current:null},k=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!S.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),l=0;l<s;l++)c[l]=arguments[l+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:u,type:e,key:i,ref:a,props:o,_owner:x.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var P=/\/+/g,O=[];function A(e,t,n,r){if(O.length){var o=O.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function N(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case u:case c:i=!0}}if(i)return n(r,e,""===t?"."+I(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var s=t+I(o=e[a],a);i+=N(o,s,n,r)}else if(null===e||void 0===e?s=null:s="function"==typeof(s=m&&e[m]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),a=0;!(o=e.next()).done;)i+=N(o=o.value,s=t+I(o,a++),n,r);else"object"===o&&g("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function U(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?B(e,r,n,a.thatReturnsArgument):null!=e&&(_(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function B(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(P,"$&/")+"/"),t=A(t,i,r,o),null==e||N(e,"",U,t),R(t)}var D={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return B(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=A(null,null,t,n),null==e||N(e,"",M,t),R(t)},count:function(e){return null==e?0:N(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return B(e,t,null,a.thatReturnsArgument),t},only:function(e){return _(e)||g("143"),e}},createRef:function(){return{current:null}},Component:b,PureComponent:C,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:y,render:e}},Fragment:l,StrictMode:f,unstable_AsyncMode:h,createElement:T,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var o=void 0,i=r({},e.props),a=e.key,s=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,c=x.current),void 0!==t.key&&(a=""+t.key);var l=void 0;for(o in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),t)k.call(t,o)&&!S.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==l?l[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){l=Array(o);for(var f=0;f<o;f++)l[f]=arguments[f+2];i.children=l}return{$$typeof:u,type:e.type,key:a,ref:s,props:i,_owner:c}},createFactory:function(e){var t=T.bind(null,e);return t.type=e,t},isValidElement:_,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:r}},j=Object.freeze({default:D}),F=j&&D||j;e.exports=F.default?F.default:F},function(e,t,n){"use strict";var r=p(n(2)),o=p(n(85)),i=p(n(77)),a=n(16),s=p(n(38)),u=n(9),c=p(n(37)),l=p(n(30)),f=n(13);function p(e){return e&&e.__esModule?e:{default:e}}var d=(0,a.createStore)(c.default,(0,a.applyMiddleware)(s.default));l.default.on("RECEIVE_MESSAGE",function(e){d.dispatch((0,f.receiveMessage)(JSON.parse(e)))}),l.default.on("RECEIVE_CONVERSATION",function(e){d.dispatch((0,f.receiveConversation)([{text:e,username:"testi",date:"time fo dat"}]))}),d.dispatch((0,f.retrieveConversation)()),o.default.render(r.default.createElement(u.Provider,{store:d},r.default.createElement(i.default,null)),document.getElementById("root"))},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(0))},function(e,t,n){(e.exports=n(32)(!1)).push([e.i,"#message-list {\n  flex: 1;\n  overflow: scroll; }\n",""])},function(e,t,n){var r=n(89);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(31)(r,o);r.locals&&(e.exports=r.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWluaGVyaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi94bWxodHRwcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9hY3Rpb25zL2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveWVhc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvaXMtYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXVyaS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9Tb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9yZWR1Y2Vycy9yZWR1Y2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvTWVzc2FnZUxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhY2tvMi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG8tYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmctanNvbnAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jsb2IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1hcnJheWJ1ZmZlci9saWIvYmFzZTY0LWFycmF5YnVmZmVyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL3V0ZjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FmdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheWJ1ZmZlci5zbGljZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtY29ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL2ltZy9zZW5kLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0lucHV0Q29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9JbnB1dENvbXBvbmVudC5zY3NzP2M3MWMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9JbnB1dENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvQXBwLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9BcHAuc2Nzcz84ZjY1Iiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvQXBwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9NZXNzYWdlTGlzdC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvTWVzc2FnZUxpc3Quc2Nzcz8xZjcxIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnIiwidGhpcyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJwcm9jZXNzIiwibG9hZCIsInN0b3JhZ2UiLCJkZWJ1ZyIsImVudiIsIkRFQlVHIiwibG9nIiwiY29uc29sZSIsImFwcGx5IiwiYXJndW1lbnRzIiwiZm9ybWF0QXJncyIsImFyZ3MiLCJ1c2VDb2xvcnMiLCJuYW1lc3BhY2UiLCJodW1hbml6ZSIsImRpZmYiLCJjb2xvciIsInNwbGljZSIsImluZGV4IiwibGFzdEMiLCJyZXBsYWNlIiwibWF0Y2giLCJzYXZlIiwibmFtZXNwYWNlcyIsInJlbW92ZUl0ZW0iLCJ0eXBlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInN0eWxlIiwiV2Via2l0QXBwZWFyYW5jZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsInBhcnNlSW50IiwiUmVnRXhwIiwiJDEiLCJjaHJvbWUiLCJsb2NhbCIsImxvY2FsU3RvcmFnZSIsImxvY2Fsc3RvcmFnZSIsImNvbG9ycyIsImZvcm1hdHRlcnMiLCJqIiwidiIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnIiLCJtZXNzYWdlIiwiZW5hYmxlIiwiZ2xvYmFsIiwiYmFzZTY0ZW5jb2RlciIsImtleXMiLCJoYXNCaW5hcnkiLCJzbGljZUJ1ZmZlciIsImFmdGVyIiwidXRmOCIsIkFycmF5QnVmZmVyIiwiaXNBbmRyb2lkIiwidGVzdCIsImlzUGhhbnRvbUpTIiwiZG9udFNlbmRCbG9icyIsInByb3RvY29sIiwicGFja2V0cyIsIm9wZW4iLCJjbG9zZSIsInBpbmciLCJwb25nIiwidXBncmFkZSIsIm5vb3AiLCJwYWNrZXRzbGlzdCIsImRhdGEiLCJCbG9iIiwibWFwIiwiYXJ5IiwiZWFjaCIsImRvbmUiLCJyZXN1bHQiLCJBcnJheSIsImxlbmd0aCIsIm5leHQiLCJlYWNoV2l0aEluZGV4IiwiZWwiLCJjYiIsImVycm9yIiwibXNnIiwiZW5jb2RlUGFja2V0IiwicGFja2V0Iiwic3VwcG9ydHNCaW5hcnkiLCJ1dGY4ZW5jb2RlIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJidWZmZXIiLCJlbmNvZGVCYXNlNjRQYWNrZXQiLCJjb250ZW50QXJyYXkiLCJVaW50OEFycmF5IiwicmVzdWx0QnVmZmVyIiwiYnl0ZUxlbmd0aCIsImVuY29kZUFycmF5QnVmZmVyIiwiZnIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJlbmNvZGVCbG9iIiwiYmFzZTY0IiwiZW5jb2RlQmFzZTY0T2JqZWN0IiwiZW5jb2RlZCIsImVuY29kZSIsIlN0cmluZyIsInN0cmljdCIsImI2NGRhdGEiLCJiNjQiLCJzcGxpdCIsInJlYWRBc0RhdGFVUkwiLCJmcm9tQ2hhckNvZGUiLCJ0eXBlZCIsImJhc2ljIiwiYnRvYSIsImRlY29kZVBhY2tldCIsImJpbmFyeVR5cGUiLCJ1dGY4ZGVjb2RlIiwiY2hhckF0IiwiZGVjb2RlQmFzZTY0UGFja2V0Iiwic3Vic3RyIiwiZGVjb2RlIiwidHJ5RGVjb2RlIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwicmVzdCIsImVuY29kZVBheWxvYWQiLCJpc0JpbmFyeSIsImVuY29kZVBheWxvYWRBc0Jsb2IiLCJlbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciIsImRvbmVDYWxsYmFjayIsInNldExlbmd0aEhlYWRlciIsInJlc3VsdHMiLCJqb2luIiwiZGVjb2RlUGF5bG9hZCIsImRlY29kZVBheWxvYWRBc0JpbmFyeSIsImNociIsImVuY29kZWRQYWNrZXRzIiwidG90YWxMZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJsZW4iLCJ0b1N0cmluZyIsInJlc3VsdEFycmF5IiwiYnVmZmVySW5kZXgiLCJmb3JFYWNoIiwiaXNTdHJpbmciLCJhYiIsInZpZXciLCJjaGFyQ29kZUF0IiwibGVuU3RyIiwiYmluYXJ5SWRlbnRpZmllciIsInNpemUiLCJsZW5ndGhBcnkiLCJidWZmZXJUYWlsIiwiYnVmZmVycyIsInRhaWxBcnJheSIsIm1zZ0xlbmd0aCIsInB1c2giLCJ0b3RhbCIsIkVtaXR0ZXIiLCJvYmoiLCJrZXkiLCJtaXhpbiIsIm9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZm4iLCJfY2FsbGJhY2tzIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhbGxiYWNrcyIsImVtaXQiLCJzbGljZSIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsImEiLCJiIiwiY29uc3RydWN0b3IiLCJzdHIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsImNvbmRpdGlvbiIsImZvcm1hdCIsImYiLCJFcnJvciIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJzdWJzY3JpcHRpb25TaGFwZSIsInByb3BfdHlwZXNfZGVmYXVsdCIsInNoYXBlIiwidHJ5U3Vic2NyaWJlIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJ0cnlVbnN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJpc1N1YnNjcmliZWQiLCJzdG9yZVNoYXBlIiwic3Vic2NyaWJlIiwiZGlzcGF0Y2giLCJnZXRTdGF0ZSIsImNyZWF0ZVByb3ZpZGVyIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4Iiwic3RvcmVLZXkiLCJzdWJzY3JpcHRpb25LZXkiLCJQcm92aWRlciIsIl9Db21wb25lbnQiLCJwcm9wcyIsImNvbnRleHQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3RoaXMiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInN0b3JlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsImdldENoaWxkQ29udGV4dCIsIl9yZWYiLCJyZW5kZXIiLCJyZWFjdCIsIm9ubHkiLCJjaGlsZHJlbiIsInByb3BUeXBlcyIsImVsZW1lbnQiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJDTEVBUkVEIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsIlN1YnNjcmlwdGlvbiIsInBhcmVudFN1YiIsIm9uU3RhdGVDaGFuZ2UiLCJTdWJzY3JpcHRpb25fY2xhc3NDYWxsQ2hlY2siLCJ1bnN1YnNjcmliZSIsImFkZE5lc3RlZFN1YiIsImxpc3RlbmVyIiwiQm9vbGVhbiIsImN1cnJlbnQiLCJjbGVhciIsImluZGV4T2YiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsInNvdXJjZSIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX2NvbnRleHRUeXBlcyIsIl9jaGlsZENvbnRleHRUeXBlcyIsIl9yZWYkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYkc2hvdWxkSGFuZGxlU3RhdCIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsIl9yZWYkc3RvcmVLZXkiLCJfcmVmJHdpdGhSZWYiLCJ3aXRoUmVmIiwiY29ubmVjdE9wdGlvbnMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJ2ZXJzaW9uIiwiY29udGV4dFR5cGVzIiwiV3JhcHBlZENvbXBvbmVudCIsImJyb3dzZXJfZGVmYXVsdCIsIndyYXBwZWRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwiQ29ubmVjdCIsImNvbm5lY3RBZHZhbmNlZF9jbGFzc0NhbGxDaGVjayIsImNvbm5lY3RBZHZhbmNlZF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic3RhdGUiLCJyZW5kZXJDb3VudCIsInByb3BzTW9kZSIsInNldFdyYXBwZWRJbnN0YW5jZSIsImJpbmQiLCJpbml0U2VsZWN0b3IiLCJpbml0U3Vic2NyaXB0aW9uIiwiY29ubmVjdEFkdmFuY2VkX2luaGVyaXRzIiwiX3JlZjIiLCJzdWJzY3JpcHRpb24iLCJjb21wb25lbnREaWRNb3VudCIsInNlbGVjdG9yIiwicnVuIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRXcmFwcGVkSW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJyZWYiLCJzb3VyY2VTZWxlY3RvciIsIm1ha2VTZWxlY3RvclN0YXRlZnVsIiwiY29tcG9uZW50RGlkVXBkYXRlIiwibm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlIiwic2V0U3RhdGUiLCJhZGRFeHRyYVByb3BzIiwid2l0aEV4dHJhcyIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2RlZmF1bHQiLCJoYXNPd24iLCJpcyIsIngiLCJ5Iiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwiZnJlZVNlbGYiLCJfU3ltYm9sIiwiX2ZyZWVHbG9iYWwiLCJTeW1ib2wiLCJvYmplY3RQcm90byIsInRvU3RyaW5nVGFnIiwiZ2V0UHJvdG90eXBlT2YiLCJmdW5jUHJvdG8iLCJpc1BsYWluT2JqZWN0X29iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50Iiwib3B0aW9ucyIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImNvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwicmVkdXgiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRTdGF0ZSIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsInNlbGVjdG9yRmFjdG9yeV9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNvbm5lY3RfZXh0ZW5kcyIsImFyZyIsImZhY3RvcmllcyIsInN0cmljdEVxdWFsIiwiY29ubmVjdF9jb25uZWN0IiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyJHB1cmUiLCJfcmVmMiRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYyJGFyZU93blByb3BzRXF1YSIsIl9yZWYyJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYyJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsImNvbm5lY3Rfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJwYXJzZXIiLCJUcmFuc3BvcnQiLCJvcHRzIiwicGF0aCIsImhvc3RuYW1lIiwicG9ydCIsInNlY3VyZSIsInF1ZXJ5IiwidGltZXN0YW1wUGFyYW0iLCJ0aW1lc3RhbXBSZXF1ZXN0cyIsInJlYWR5U3RhdGUiLCJhZ2VudCIsInNvY2tldCIsImVuYWJsZXNYRFIiLCJwZngiLCJwYXNzcGhyYXNlIiwiY2VydCIsImNhIiwiY2lwaGVycyIsInJlamVjdFVuYXV0aG9yaXplZCIsImZvcmNlTm9kZSIsImV4dHJhSGVhZGVycyIsImxvY2FsQWRkcmVzcyIsIm9uRXJyb3IiLCJkZXNjIiwiZGVzY3JpcHRpb24iLCJkb09wZW4iLCJkb0Nsb3NlIiwib25DbG9zZSIsInNlbmQiLCJ3cml0ZSIsIm9uT3BlbiIsIm9uRGF0YSIsIm9uUGFja2V0IiwiaGFzQ09SUyIsInhkb21haW4iLCJ4c2NoZW1lIiwiWE1MSHR0cFJlcXVlc3QiLCJYRG9tYWluUmVxdWVzdCIsImNvbmNhdCIsImJpbmFyeSIsImlzQXJyYXkiLCJpc0J1ZiIsIkVuY29kZXIiLCJ0eXBlcyIsIkNPTk5FQ1QiLCJESVNDT05ORUNUIiwiRVZFTlQiLCJBQ0siLCJFUlJPUiIsIkJJTkFSWV9FVkVOVCIsIkJJTkFSWV9BQ0siLCJEZWNvZGVyIiwiRVJST1JfUEFDS0VUIiwiZW5jb2RlQXNTdHJpbmciLCJhdHRhY2htZW50cyIsIm5zcCIsImlkIiwicGF5bG9hZCIsInRyeVN0cmluZ2lmeSIsInJlY29uc3RydWN0b3IiLCJCaW5hcnlSZWNvbnN0cnVjdG9yIiwicmVjb25QYWNrIiwicmVtb3ZlQmxvYnMiLCJibG9ibGVzc0RhdGEiLCJkZWNvbnN0cnVjdGlvbiIsImRlY29uc3RydWN0UGFja2V0IiwicGFjayIsInVuc2hpZnQiLCJlbmNvZGVBc0JpbmFyeSIsImFkZCIsImJ1ZiIsInBhcnNlIiwidHJ5UGFyc2UiLCJpc1BheWxvYWRWYWxpZCIsImRlY29kZVN0cmluZyIsInRha2VCaW5hcnlEYXRhIiwiZGVzdHJveSIsImZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24iLCJiaW5EYXRhIiwicmVjb25zdHJ1Y3RQYWNrZXQiLCJzZW5kTWVzc2FnZSIsIlNvY2tldCIsIlNFTkRfTUVTU0FHRSIsInN0YXR1cyIsInJlY2VpdmVNZXNzYWdlIiwiUkVDRUlWRV9NRVNTQUdFIiwicmV0cmlldmVDb252ZXJzYXRpb24iLCJSRVRSSUVWRV9DT05WRVJTQVRJT04iLCJyZWNlaXZlQ29udmVyc2F0aW9uIiwibWVzc2FnZXMiLCJSRUNFSVZFX0NPTlZFUlNBVElPTiIsImlucHV0Q2hhbmdlIiwiSU5QVVRfQ0hBTkdFIiwiX1NvY2tldCIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJ2YWxpZGF0ZUZvcm1hdCIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIk1hdGgiLCJyYW5kb20iLCJSRVBMQUNFIiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsImFjdGlvbiIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJzeW1ib2xfb2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwiZmluYWxSZWR1Y2VyS2V5cyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwiX2kiLCJfa2V5IiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9sZW4yIiwiX2tleTIiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImV2IiwidG9BcnJheSIsInBhcnNlcXMiLCJoYXNCaW4iLCJldmVudHMiLCJjb25uZWN0IiwiY29ubmVjdF9lcnJvciIsImNvbm5lY3RfdGltZW91dCIsImNvbm5lY3RpbmciLCJkaXNjb25uZWN0IiwicmVjb25uZWN0IiwicmVjb25uZWN0X2F0dGVtcHQiLCJyZWNvbm5lY3RfZmFpbGVkIiwicmVjb25uZWN0X2Vycm9yIiwicmVjb25uZWN0aW5nIiwiaW8iLCJqc29uIiwiaWRzIiwiYWNrcyIsInJlY2VpdmVCdWZmZXIiLCJzZW5kQnVmZmVyIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiZmxhZ3MiLCJhdXRvQ29ubmVjdCIsInN1YkV2ZW50cyIsInN1YnMiLCJvbm9wZW4iLCJjb21wcmVzcyIsInBvcCIsIm9uY2xvc2UiLCJyZWFzb24iLCJvbnBhY2tldCIsInNhbWVOYW1lc3BhY2UiLCJyb290TmFtZXNwYWNlRXJyb3IiLCJvbmNvbm5lY3QiLCJvbmV2ZW50Iiwib25hY2siLCJvbmRpc2Nvbm5lY3QiLCJhY2siLCJzZW50IiwiZW1pdEJ1ZmZlcmVkIiwiYXJyIiwicHJldiIsImFscGhhYmV0Iiwic2VlZCIsIm51bSIsImZsb29yIiwieWVhc3QiLCJub3ciLCJEYXRlIiwiZGVjb2RlZCIsIkJ1ZmZlciIsIndpdGhOYXRpdmVCbG9iIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwiaXNCdWZmZXIiLCJ0b0pTT04iLCJpbmhlcml0IiwiUG9sbGluZyIsImhhc1hIUjIiLCJyZXNwb25zZVR5cGUiLCJmb3JjZUJhc2U2NCIsInBvbGwiLCJwYXVzZSIsIm9uUGF1c2UiLCJwb2xsaW5nIiwiZG9Qb2xsIiwiY2FsbGJhY2tmbiIsImRvV3JpdGUiLCJ1cmkiLCJzY2hlbWEiLCJzaWQiLCJYSFIiLCJKU09OUCIsIndlYnNvY2tldCIsInhkIiwieHMiLCJqc29ucCIsImxvY2F0aW9uIiwiaXNTU0wiLCJmb3JjZUpTT05QIiwiZWlvIiwiQmFja29mZiIsImhhcyIsIk1hbmFnZXIiLCJuc3BzIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJJbmZpbml0eSIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsIm1pbiIsIm1heCIsImppdHRlciIsInRpbWVvdXQiLCJsYXN0UGluZyIsImVuY29kaW5nIiwicGFja2V0QnVmZmVyIiwiX3BhcnNlciIsImVuY29kZXIiLCJkZWNvZGVyIiwiZW1pdEFsbCIsInVwZGF0ZVNvY2tldElkcyIsImdlbmVyYXRlSWQiLCJlbmdpbmUiLCJfcmVjb25uZWN0aW9uIiwiX3JlY29ubmVjdGlvbkF0dGVtcHRzIiwiX3JlY29ubmVjdGlvbkRlbGF5Iiwic2V0TWluIiwiX3JhbmRvbWl6YXRpb25GYWN0b3IiLCJzZXRKaXR0ZXIiLCJfcmVjb25uZWN0aW9uRGVsYXlNYXgiLCJzZXRNYXgiLCJfdGltZW91dCIsIm1heWJlUmVjb25uZWN0T25PcGVuIiwiYXR0ZW1wdHMiLCJza2lwUmVjb25uZWN0Iiwib3BlblN1YiIsImVycm9yU3ViIiwiY2xlYW51cCIsInRpbWVyIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsIm9ucGluZyIsIm9ucG9uZyIsIm9uZGF0YSIsIm9uZGVjb2RlZCIsIm9uZXJyb3IiLCJvbkNvbm5lY3RpbmciLCJwcm9jZXNzUGFja2V0UXVldWUiLCJzaGlmdCIsInN1YnNMZW5ndGgiLCJyZXNldCIsImRlbGF5IiwiZHVyYXRpb24iLCJvbnJlY29ubmVjdCIsImF0dGVtcHQiLCJ3aXRoTmF0aXZlQnVmZmVyIiwid2l0aE5hdGl2ZUFycmF5QnVmZmVyIiwiaXNWaWV3IiwicmUiLCJwYXJ0cyIsInNyYyIsImV4ZWMiLCJob3N0IiwiYXV0aG9yaXR5IiwiaXB2NnVyaSIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiaXRlbSIsImRvbVN0eWxlIiwicmVmcyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibGlzdCIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwiYWRkQXR0cnMiLCJzZXRBdHRyaWJ1dGUiLCJ1cGRhdGUiLCJyZW1vdmUiLCJ0cmFuc2Zvcm0iLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwidW5lc2NhcGUiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJ1c2VTb3VyY2VNYXAiLCJjb250ZW50IiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0ZXN0MSIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsInZhbCIsInRvT2JqZWN0Iiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwib2JzZXJ2YWJsZSIsIlJFQUNUX1NUQVRJQ1MiLCJkZWZhdWx0UHJvcHMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImRlc2NyaXB0b3IiLCJmYWN0b3J5IiwiX2FjdGlvbnMiLCJjaGF0QXBwIiwiY3VycmVudElucHV0IiwidXNlcm5hbWUiLCJjdXJyZW50TWVzc2FnZSIsIl90b0NvbnN1bWFibGVBcnJheSIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiX3JlYWN0UmVkdXgiLCJNZXNzYWdlIiwidGV4dCIsImRhdGUiLCJfcmVhY3QyIiwiZGVmYXVsdCIsIk1lc3NhZ2VMaXN0IiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwibXMiLCJmYWN0b3IiLCJwb3ciLCJyYW5kIiwiZGV2aWF0aW9uIiwiYXJyYXkiLCJOb2RlV2ViU29ja2V0IiwiQnJvd3NlcldlYlNvY2tldCIsIldlYlNvY2tldCIsIk1veldlYlNvY2tldCIsIldTIiwicGVyTWVzc2FnZURlZmxhdGUiLCJ1c2luZ0Jyb3dzZXJXZWJTb2NrZXQiLCJwcm90b2NvbHMiLCJjaGVjayIsImhlYWRlcnMiLCJ3cyIsInN1cHBvcnRzIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbm1lc3NhZ2UiLCJ0aHJlc2hvbGQiLCJKU09OUFBvbGxpbmciLCJyTmV3bGluZSIsInJFc2NhcGVkTmV3bGluZSIsImVtcHR5IiwiX19fZWlvIiwic2NyaXB0IiwiZm9ybSIsImlmcmFtZSIsImFzeW5jIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJib2R5IiwiYXJlYSIsImlmcmFtZUlkIiwiY2xhc3NOYW1lIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwibWV0aG9kIiwiY29tcGxldGUiLCJpbml0SWZyYW1lIiwiaHRtbCIsInN1Ym1pdCIsImF0dGFjaEV2ZW50Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsImJsb2JTdXBwb3J0ZWQiLCJibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXciLCJibG9iQnVpbGRlclN1cHBvcnRlZCIsImFwcGVuZCIsImdldEJsb2IiLCJtYXBBcnJheUJ1ZmZlclZpZXdzIiwiY2h1bmsiLCJjb3B5Iiwic2V0IiwiYnl0ZU9mZnNldCIsIkJsb2JCdWlsZGVyQ29uc3RydWN0b3IiLCJiYiIsIkJsb2JDb25zdHJ1Y3RvciIsImNoYXJzIiwibG9va3VwIiwiYXJyYXlidWZmZXIiLCJieXRlcyIsImVuY29kZWQxIiwiZW5jb2RlZDIiLCJlbmNvZGVkMyIsImVuY29kZWQ0IiwiYnVmZmVyTGVuZ3RoIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImZyZWVFeHBvcnRzIiwiZnJlZUdsb2JhbCIsImJ5dGVBcnJheSIsImJ5dGVDb3VudCIsImJ5dGVJbmRleCIsInN0cmluZ0Zyb21DaGFyQ29kZSIsInVjczJkZWNvZGUiLCJzdHJpbmciLCJleHRyYSIsIm91dHB1dCIsImNvdW50ZXIiLCJjaGVja1NjYWxhclZhbHVlIiwiY29kZVBvaW50IiwidG9VcHBlckNhc2UiLCJjcmVhdGVCeXRlIiwiZW5jb2RlQ29kZVBvaW50Iiwic3ltYm9sIiwicmVhZENvbnRpbnVhdGlvbkJ5dGUiLCJjb250aW51YXRpb25CeXRlIiwiZGVjb2RlU3ltYm9sIiwiYnl0ZTEiLCJjb2RlUG9pbnRzIiwiYnl0ZVN0cmluZyIsInRtcCIsInVjczJlbmNvZGUiLCJjb3VudCIsImVycl9jYiIsImJhaWwiLCJzdGFydCIsImVuZCIsImFidiIsImlpIiwicmVhZCIsIm9mZnNldCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJhYnMiLCJpc05hTiIsIkxOMiIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0b0J5dGVBcnJheSIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsImZyb21CeXRlQXJyYXkiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJjb2RlIiwiaWVlZTc1NCIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsImZyb21TdHJpbmciLCJjaGVja2VkIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NFNsaWNlIiwidXRmOFNsaWNlIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiYnl0ZXNQZXJTZXF1ZW5jZSIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImhleFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwidXRmMTZsZVNsaWNlIiwiZXF1YWxzIiwiaW5zcGVjdCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJsZWFkU3Vycm9nYXRlIiwidHJpbSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsImRzdCIsInJlcXVlc3RUaW1lb3V0IiwiUmVxdWVzdCIsInVubG9hZEhhbmRsZXIiLCJyZXF1ZXN0cyIsImFib3J0IiwicmVxdWVzdCIsInJlcSIsInNlbmRYaHIiLCJwb2xsWGhyIiwieGhyIiwic2V0RGlzYWJsZUhlYWRlckNoZWNrIiwic2V0UmVxdWVzdEhlYWRlciIsIndpdGhDcmVkZW50aWFscyIsImhhc1hEUiIsIm9uTG9hZCIsInJlc3BvbnNlVGV4dCIsImNvbnRlbnRUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJyZXF1ZXN0c0NvdW50Iiwib25TdWNjZXNzIiwiZnJvbUVycm9yIiwicmVzcG9uc2UiLCJ0cmFuc3BvcnRzIiwicGFyc2V1cmkiLCJ0cmFuc3BvcnRPcHRpb25zIiwid3JpdGVCdWZmZXIiLCJwcmV2QnVmZmVyTGVuIiwicG9saWN5UG9ydCIsInJlbWVtYmVyVXBncmFkZSIsIm9ubHlCaW5hcnlVcGdyYWRlcyIsInVwZ3JhZGVzIiwicGluZ0ludGVydmFsIiwicGluZ1RpbWVvdXQiLCJwaW5nSW50ZXJ2YWxUaW1lciIsInBpbmdUaW1lb3V0VGltZXIiLCJwcmlvcldlYnNvY2tldFN1Y2Nlc3MiLCJjcmVhdGVUcmFuc3BvcnQiLCJjbG9uZSIsIkVJTyIsInRyYW5zcG9ydCIsInNldFRyYW5zcG9ydCIsIm9uRHJhaW4iLCJwcm9iZSIsImZhaWxlZCIsIm9uVHJhbnNwb3J0T3BlbiIsInVwZ3JhZGVMb3Nlc0JpbmFyeSIsInVwZ3JhZGluZyIsImZsdXNoIiwiZnJlZXplVHJhbnNwb3J0Iiwib25UcmFuc3BvcnRDbG9zZSIsIm9udXBncmFkZSIsIm9uSGFuZHNoYWtlIiwic2V0UGluZyIsImZpbHRlclVwZ3JhZGVzIiwib25IZWFydGJlYXQiLCJzZW5kUGFja2V0Iiwid2FpdEZvclVwZ3JhZGUiLCJjbGVhbnVwQW5kQ2xvc2UiLCJmaWx0ZXJlZFVwZ3JhZGVzIiwicGFja2V0RGF0YSIsIl9kZWNvbnN0cnVjdFBhY2tldCIsInBsYWNlaG9sZGVyIiwiX3BsYWNlaG9sZGVyIiwibmV3RGF0YSIsIl9yZWNvbnN0cnVjdFBhY2tldCIsInBlbmRpbmdCbG9icyIsIl9yZW1vdmVCbG9icyIsImN1cktleSIsImNvbnRhaW5pbmdPYmplY3QiLCJmaWxlUmVhZGVyIiwiaCIsInBsdXJhbCIsImNlaWwiLCJwYXJzZUZsb2F0IiwibG9uZyIsInJvdW5kIiwiZm10U2hvcnQiLCJjcmVhdGVEZWJ1ZyIsInByZXZUaW1lIiwiZW5hYmxlZCIsImN1cnIiLCJjb2VyY2UiLCJmb3JtYXR0ZXIiLCJoYXNoIiwic2VsZWN0Q29sb3IiLCJpbml0IiwiaW5zdGFuY2VzIiwic3RhY2siLCJkaXNhYmxlIiwibmFtZXMiLCJza2lwcyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImxvYyIsInVybCIsImNhY2hlIiwibWFuYWdlcnMiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsIm9yaWdpbmFsTW9kdWxlIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsIm51bWJlciIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwibm9kZSIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiaG1yIiwibG9jYWxzIiwiSW5wdXRDb21wb25lbnQiLCJzdWJtaXRNZXNzYWdlIiwiX3RoaXMkcHJvcHMiLCJoYW5kbGVTdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsInRvTG9jYWxlVGltZVN0cmluZyIsIl9wcm9wcyIsImhhbmRsZUNoYW5nZSIsIm9uU3VibWl0Iiwib25DaGFuZ2UiLCJzZW5kSW1nIiwiYWx0IiwiYmFzZVVybCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCJBcHAiLCJDb21wb25lbnQiLCJfTWVzc2FnZUxpc3QyIiwiX0lucHV0Q29tcG9uZW50MiIsImRlZmF1bHRWaWV3Iiwib3duZXJEb2N1bWVudCIsIk5vZGUiLCJub2RlVHlwZSIsIm5vZGVOYW1lIiwiaXNOb2RlIiwiaXNUZXh0Tm9kZSIsImNvbnRhaW5zTm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiY2FuVXNlRE9NIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJiYSIsImVhIiwiQSIsIkMiLCJmYSIsImhhIiwiamEiLCJrYSIsIkQiLCJFIiwiX2NhdWdodEVycm9yIiwiX2hhc0NhdWdodEVycm9yIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJrIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yIiwiaGFzQ2F1Z2h0RXJyb3IiLCJjbGVhckNhdWdodEVycm9yIiwicmV0aHJvd0NhdWdodEVycm9yIiwib2EiLCJwYSIsInFhIiwicmEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInNhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJ0YSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ1YSIsInZhIiwiZGVwZW5kZW5jaWVzIiwid2EiLCJ4YSIsIkNhIiwiZnJlZXplIiwicGx1Z2lucyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJjdXJyZW50VGFyZ2V0IiwiSGEiLCJJYSIsIkphIiwiS2EiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJMYSIsIk1hIiwiTmEiLCJPYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiUGEiLCJRYSIsIlJhIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIlNhIiwiRiIsIlRhIiwiVWEiLCJ0YWciLCJWYSIsIlhhIiwicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJMIiwiZGIiLCJkaXNwYXRjaENvbmZpZyIsImViIiwiX3RhcmdldEluc3QiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwiYWx0ZXJuYXRlIiwia2IiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImxiIiwibWIiLCJNIiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm5iIiwib2IiLCJwYiIsInFiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIk4iLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwic2IiLCJldmVudFBvb2wiLCJ0YiIsImRlc3RydWN0b3IiLCJyYiIsImdldFBvb2xlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJleHRlbmQiLCJ1YiIsInZiIiwid2IiLCJ4YiIsInliIiwiZG9jdW1lbnRNb2RlIiwiemIiLCJBYiIsIkJiIiwiS2IiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiTGIiLCJNYiIsImtleUNvZGUiLCJOYiIsImRldGFpbCIsIk9iIiwiUmIiLCJ3aGljaCIsIlBiIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwiUWIiLCJTYiIsIlRiIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsIlViIiwiVmIiLCJXYiIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJYYiIsIlliIiwiWmIiLCIkYiIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGltZSIsIndlZWsiLCJnYyIsImhjIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJpYyIsImpjIiwibGMiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsImtjIiwibWMiLCJuYyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJPIiwib2MiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCIkJHR5cGVvZiIsIkJjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJDYyIsIkRjIiwiRWMiLCJVIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIlYiLCJTYyIsIlRjIiwiVWMiLCJHYyIsIkhjIiwiRmMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIlZjIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJXYyIsIlhjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIlljIiwiWmMiLCIkYyIsImFkIiwidGFiSW5kZXgiLCJiZCIsImNoYW5nZSIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImpkIiwiZGV0YWNoRXZlbnQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwicGQiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwicWQiLCJyZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJzZCIsImdldE1vZGlmaWVyU3RhdGUiLCJ0ZCIsInVkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwidmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsIndkIiwicGFyZW50V2luZG93IiwiZWZmZWN0VGFnIiwieWQiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiemQiLCJBZCIsImNoaWxkIiwic2libGluZyIsIkJkIiwiRGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiRWQiLCJjbGlwYm9hcmREYXRhIiwiRmQiLCJHZCIsImNoYXJDb2RlIiwiSGQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiSWQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiSmQiLCJyZXBlYXQiLCJsb2NhbGUiLCJLZCIsImRhdGFUcmFuc2ZlciIsIkxkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIk1kIiwiTmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIk9kIiwiUGQiLCJRZCIsImlzSW50ZXJhY3RpdmUiLCJSZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIlNkIiwiVGQiLCJVZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiVmQiLCJXZCIsIlciLCJYZCIsIllkIiwiWmQiLCIkZCIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJhZSIsImJlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiY2UiLCJkZSIsImVlIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsImZlIiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wU2Nyb2xsIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wVGV4dElucHV0IiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wV2hlZWwiLCJnZSIsInRvcEFib3J0IiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsImhlIiwiaWUiLCJqZSIsImtlIiwibGUiLCJtZSIsInRleHRDb250ZW50IiwibmUiLCJjb250ZW50RWRpdGFibGUiLCJvZSIsInBlIiwic2VsZWN0IiwicWUiLCJzZSIsInRlIiwidWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsInZlIiwib25TZWxlY3QiLCJ4ZSIsInBlbmRpbmdQcm9wcyIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJtb2RlIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImV4cGlyYXRpb25UaW1lIiwiemUiLCJBZSIsImlzUmVhY3RDb21wb25lbnQiLCJCZSIsIkNlIiwiRGUiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJFZSIsIkZlIiwiR2UiLCJJZSIsIkplIiwiS2UiLCJiYXNlU3RhdGUiLCJmaXJzdCIsImxhc3QiLCJjYWxsYmFja0xpc3QiLCJoYXNGb3JjZVVwZGF0ZSIsImlzSW5pdGlhbGl6ZWQiLCJjYXB0dXJlZFZhbHVlcyIsIkxlIiwiU2V0IiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJRZSIsInBhcnRpYWxTdGF0ZSIsIlJlIiwiaXNSZXBsYWNlIiwiaXNGb3JjZWQiLCJjYXB0dXJlZFZhbHVlIiwiU2UiLCJVZSIsIlZlIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIldlIiwiWGUiLCJNYXAiLCJ6IiwiQiIsInEiLCJ1IiwidCIsIlEiLCJIIiwiWWUiLCJaZSIsIiRlIiwicGVuZGluZ0NvbnRleHQiLCJZIiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlIiwicHVzaEhvc3RDb250ZXh0IiwicHVzaEhvc3RDb250YWluZXIiLCJHIiwicHVzaFByb3ZpZGVyIiwiUiIsImdldE1hc2tlZENvbnRleHQiLCJTIiwiZ2V0VW5tYXNrZWRDb250ZXh0IiwiaGFzQ29udGV4dENoYW5nZWQiLCJwdXNoQ29udGV4dFByb3ZpZGVyIiwicHVzaFRvcExldmVsQ29udGV4dE9iamVjdCIsImludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIiLCJlbnRlckh5ZHJhdGlvblN0YXRlIiwiV2EiLCJyZXNldEh5ZHJhdGlvblN0YXRlIiwiQ2IiLCJ0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsIkpjIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJ1cGRhdGVyIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiY2FjaGVDb250ZXh0IiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc01vdW50ZWQiLCJlbnF1ZXVlU2V0U3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJhZG9wdENsYXNzSW5zdGFuY2UiLCJjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29uc3RydWN0Q2xhc3NJbnN0YW5jZSIsIm1vdW50Q2xhc3NJbnN0YW5jZSIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsInJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSIsInVwZGF0ZUNsYXNzSW5zdGFuY2UiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJUZSIsIktjIiwiTGMiLCJEYiIsIk1jIiwiRWIiLCJiZWdpbldvcmsiLCJoeWRyYXRlIiwiX2NvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2NoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiY2YiLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiZWYiLCJsZiIsIkkiLCJZYSIsIloiLCJOYyIsInlhIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiT2MiLCJaYSIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsImNvbXBvbmVudERpZENhdGNoIiwiaWEiLCJ6YSIsImRhIiwiRmIiLCJ4ZyIsInllIiwiSWMiLCJQYyIsIkdiIiwibWciLCJRYyIsImxnIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsIksiLCJsYSIsIlQiLCJKIiwiSGIiLCJhYSIsIlAiLCIkYSIsIkliIiwiQWEiLCJfb25Db21wbGV0ZSIsIndnIiwiQmEiLCJKYiIsImZpbmlzaGVkV29yayIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJ6ZyIsInciLCJrZyIsIndlIiwiZ2ciLCJBZyIsImhnIiwiaWciLCJqZyIsInRpbWVSZW1haW5pbmciLCJCZyIsImNyZWF0ZUN1cnNvciIsImlzRW1wdHkiLCJjaGVja1RoYXRTdGFja0lzRW1wdHkiLCJyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXYiLCJrZiIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwiZmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciIsInBvcENvbnRleHRQcm92aWRlciIsInBvcFRvcExldmVsQ29udGV4dE9iamVjdCIsImN1cnNvciIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0IiwiaGYiLCJwb3BQcm92aWRlciIsImpmIiwiaHlkcmF0aW9uIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwicG9wSHlkcmF0aW9uU3RhdGUiLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2YiLCJjcmVhdGVJbnN0YW5jZSIsImNyZWF0ZVRleHRJbnN0YW5jZSIsImFwcGVuZEluaXRpYWxDaGlsZCIsImZpbmFsaXplSW5pdGlhbENoaWxkcmVuIiwicHJlcGFyZVVwZGF0ZSIsInBlcnNpc3RlbmNlIiwibXV0YXRpb24iLCJjb21wbGV0ZVdvcmsiLCJoYW5kbGVyIiwiYWYiLCJ0aHJvd0V4Y2VwdGlvbiIsInVud2luZFdvcmsiLCJ1bndpbmRJbnRlcnJ1cHRlZFdvcmsiLCJiZiIsImdldFB1YmxpY0luc3RhbmNlIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tbWl0UmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdExpZmVDeWNsZXMiLCJjb21taXRFcnJvckxvZ2dpbmciLCJjb21wb25lbnRTdGFjayIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImRmIiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwiY2FuY2VsRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiUmMiLCJyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsInJlcXVlc3RXb3JrIiwiZmx1c2hSb290IiwiYmF0Y2hlZFVwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmx1c2hDb250cm9sbGVkIiwiZGVmZXJyZWRVcGRhdGVzIiwic3luY1VwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJsZWdhY3lDb250ZXh0IiwibWYiLCJjcmVhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lIiwiZ2V0UHVibGljUm9vdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzIiwiQ2QiLCJpbmplY3RJbnRvRGV2VG9vbHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIkhlIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJuZiIsIm9mIiwicGYiLCJyZiIsInBlcmZvcm1hbmNlIiwic2YiLCJ0ZiIsInVmIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJkaWRUaW1lb3V0IiwiRGYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJFZiIsInBvc3RNZXNzYWdlIiwiR2YiLCJDaGlsZHJlbiIsIkZmIiwiSGYiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIklmIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIkpmIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIm1hdGhtbCIsInN2ZyIsIk9mIiwiUGYiLCJRZiIsIlJmIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIlNmIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiVGYiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJVZiIsIlZmIiwic2V0UHJvcGVydHkiLCJXZiIsIm1lbnVpdGVtIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJjcmVhdGVFbGVtZW50TlMiLCJiZyIsImNnIiwiX19odG1sIiwib25DbGljayIsIm9uY2xpY2siLCJkZyIsImVnIiwiZmciLCJuZyIsIm9nIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJkaWZmUHJvcGVydGllcyIsInVwZGF0ZVByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkVGV4dCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicGciLCJxZyIsInJnIiwiWCIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwic2ciLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwidGciLCJfaW50ZXJuYWxSb290IiwidWciLCJ2ZyIsImF1dG9Gb2N1cyIsInRoZW4iLCJjb21taXQiLCJ1bm1vdW50IiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY3JlYXRlQmF0Y2giLCJ0YWdOYW1lIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJoaWRkZW4iLCJkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZSIsIkNnIiwiRWciLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiRGciLCJGZyIsInFmIiwiR2ciLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIkhnIiwiSWciLCJjaGVja0RDRSIsIl9fc2VsZiIsIl9fc291cmNlIiwia2V5UHJlZml4IiwiPSIsIjoiLCJlc2NhcGUiLCJjcmVhdGVSZWYiLCJjcmVhdGVDb250ZXh0IiwiX2RlZmF1bHRWYWx1ZSIsIkNvbnN1bWVyIiwiZm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsInVuc3RhYmxlX0FzeW5jTW9kZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsIl9yZWR1eCIsIlJlYWN0RE9NIiwiX0FwcDIiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BWixFQUFBbUIsRUFBQSxTQUFBakIsR0FDQVksT0FBQUMsZUFBQWIsRUFBQSxjQUFpRGtCLE9BQUEsS0FJakRwQixFQUFBcUIsRUFBQSxTQUFBbEIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBbUIsV0FDQSxXQUEyQixPQUFBbkIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQVUsRUFBQUMsR0FBc0QsT0FBQVYsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUFnQixFQUFBQyxJQUd0RHhCLEVBQUEyQixFQUFBLEdBSUEzQixJQUFBNEIsRUFBQSxvQkNuRUEsSUFBQUMsRUFHQUEsRUFBQSxXQUNBLE9BQUFDLEtBREEsR0FJQSxJQUVBRCxLQUFBRSxTQUFBLGNBQUFBLEtBQUEsRUFBQUMsTUFBQSxRQUNDLE1BQUFDLEdBRUQsaUJBQUFDLFNBQUFMLEVBQUFLLFFBT0EvQixFQUFBRCxRQUFBMkIsbUJDT0Ex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R0FBQUEsRUFBQSxJQUtBd00sTUFBQXJNLEVBQUFDLEVBQUEsdURBQTRFLHNCQ0o1RSxJQUFBaTBCLEVBQUFyMEIsRUFBQSxJQUVBLGlCQUFBcTBCLFFBQUFsMEIsRUFBQUMsRUFBQWkwQixFQUFBLE1BT0EsSUFBQXhjLEdBQWVrN0IsS0FBQSxFQUVmcmdCLGVBUEFBLEVBUUFuQixnQkFBQXZwQixHQUVBaEksRUFBQSxHQUFBQSxDQUFBcTBCLEVBQUF4YyxHQUVBd2MsRUFBQTJlLFNBQUE3eUMsRUFBQUQsUUFBQW0wQixFQUFBMmUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA4Nyk7XG4iLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xudmFyIGhhc0JpbmFyeSA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG52YXIgc2xpY2VCdWZmZXIgPSByZXF1aXJlKCdhcnJheWJ1ZmZlci5zbGljZScpO1xudmFyIGFmdGVyID0gcmVxdWlyZSgnYWZ0ZXInKTtcbnZhciB1dGY4ID0gcmVxdWlyZSgnLi91dGY4Jyk7XG5cbnZhciBiYXNlNjRlbmNvZGVyO1xuaWYgKGdsb2JhbCAmJiBnbG9iYWwuQXJyYXlCdWZmZXIpIHtcbiAgYmFzZTY0ZW5jb2RlciA9IHJlcXVpcmUoJ2Jhc2U2NC1hcnJheWJ1ZmZlcicpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGFuIGFuZHJvaWQgYnJvd3Nlci4gVGhhdCByZXF1aXJlcyB1cyB0byB1c2VcbiAqIEFycmF5QnVmZmVyIHdpdGggcG9sbGluZyB0cmFuc3BvcnRzLi4uXG4gKlxuICogaHR0cDovL2doaW5kYS5uZXQvanBlZy1ibG9iLWFqYXgtYW5kcm9pZC9cbiAqL1xuXG52YXIgaXNBbmRyb2lkID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL0FuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGluIFBoYW50b21KUy5cbiAqIFVwbG9hZGluZyBhIEJsb2Igd2l0aCBQaGFudG9tSlMgZG9lcyBub3Qgd29yayBjb3JyZWN0bHksIGFzIHJlcG9ydGVkIGhlcmU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYXJpeWEvcGhhbnRvbWpzL2lzc3Vlcy8xMTM5NVxuICogQHR5cGUgYm9vbGVhblxuICovXG52YXIgaXNQaGFudG9tSlMgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvUGhhbnRvbUpTL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBXaGVuIHRydWUsIGF2b2lkcyB1c2luZyBCbG9icyB0byBlbmNvZGUgcGF5bG9hZHMuXG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBkb250U2VuZEJsb2JzID0gaXNBbmRyb2lkIHx8IGlzUGhhbnRvbUpTO1xuXG4vKipcbiAqIEN1cnJlbnQgcHJvdG9jb2wgdmVyc2lvbi5cbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gMztcblxuLyoqXG4gKiBQYWNrZXQgdHlwZXMuXG4gKi9cblxudmFyIHBhY2tldHMgPSBleHBvcnRzLnBhY2tldHMgPSB7XG4gICAgb3BlbjogICAgIDAgICAgLy8gbm9uLXdzXG4gICwgY2xvc2U6ICAgIDEgICAgLy8gbm9uLXdzXG4gICwgcGluZzogICAgIDJcbiAgLCBwb25nOiAgICAgM1xuICAsIG1lc3NhZ2U6ICA0XG4gICwgdXBncmFkZTogIDVcbiAgLCBub29wOiAgICAgNlxufTtcblxudmFyIHBhY2tldHNsaXN0ID0ga2V5cyhwYWNrZXRzKTtcblxuLyoqXG4gKiBQcmVtYWRlIGVycm9yIHBhY2tldC5cbiAqL1xuXG52YXIgZXJyID0geyB0eXBlOiAnZXJyb3InLCBkYXRhOiAncGFyc2VyIGVycm9yJyB9O1xuXG4vKipcbiAqIENyZWF0ZSBhIGJsb2IgYXBpIGV2ZW4gZm9yIGJsb2IgYnVpbGRlciB3aGVuIHZlbmRvciBwcmVmaXhlcyBleGlzdFxuICovXG5cbnZhciBCbG9iID0gcmVxdWlyZSgnYmxvYicpO1xuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQuXG4gKlxuICogICAgIDxwYWNrZXQgdHlwZSBpZD4gWyA8ZGF0YT4gXVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDVoZWxsbyB3b3JsZFxuICogICAgIDNcbiAqICAgICA0XG4gKlxuICogQmluYXJ5IGlzIGVuY29kZWQgaW4gYW4gaWRlbnRpY2FsIHByaW5jaXBsZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIHV0ZjhlbmNvZGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIHV0ZjhlbmNvZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHV0ZjhlbmNvZGU7XG4gICAgdXRmOGVuY29kZSA9IG51bGw7XG4gIH1cblxuICB2YXIgZGF0YSA9IChwYWNrZXQuZGF0YSA9PT0gdW5kZWZpbmVkKVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiBwYWNrZXQuZGF0YS5idWZmZXIgfHwgcGFja2V0LmRhdGE7XG5cbiAgaWYgKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKEJsb2IgJiYgZGF0YSBpbnN0YW5jZW9mIGdsb2JhbC5CbG9iKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gbWlnaHQgYmUgYW4gb2JqZWN0IHdpdGggeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9XG4gIGlmIChkYXRhICYmIGRhdGEuYmFzZTY0KSB7XG4gICAgcmV0dXJuIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFNlbmRpbmcgZGF0YSBhcyBhIHV0Zi04IHN0cmluZ1xuICB2YXIgZW5jb2RlZCA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuXG4gIC8vIGRhdGEgZnJhZ21lbnQgaXMgb3B0aW9uYWxcbiAgaWYgKHVuZGVmaW5lZCAhPT0gcGFja2V0LmRhdGEpIHtcbiAgICBlbmNvZGVkICs9IHV0ZjhlbmNvZGUgPyB1dGY4LmVuY29kZShTdHJpbmcocGFja2V0LmRhdGEpLCB7IHN0cmljdDogZmFsc2UgfSkgOiBTdHJpbmcocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKCcnICsgZW5jb2RlZCk7XG5cbn07XG5cbmZ1bmN0aW9uIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKSB7XG4gIC8vIHBhY2tldCBkYXRhIGlzIGFuIG9iamVjdCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdICsgcGFja2V0LmRhdGEuZGF0YTtcbiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpO1xufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgaGVscGVycyBmb3IgYmluYXJ5IHR5cGVzXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHJlc3VsdEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDEgKyBkYXRhLmJ5dGVMZW5ndGgpO1xuXG4gIHJlc3VsdEJ1ZmZlclswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRlbnRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdEJ1ZmZlcltpKzFdID0gY29udGVudEFycmF5W2ldO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEJ1ZmZlci5idWZmZXIpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgcGFja2V0LmRhdGEgPSBmci5yZXN1bHQ7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgdHJ1ZSwgY2FsbGJhY2spO1xuICB9O1xuICByZXR1cm4gZnIucmVhZEFzQXJyYXlCdWZmZXIocGFja2V0LmRhdGEpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoZG9udFNlbmRCbG9icykge1xuICAgIHJldHVybiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gIGxlbmd0aFswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtsZW5ndGguYnVmZmVyLCBwYWNrZXQuZGF0YV0pO1xuXG4gIHJldHVybiBjYWxsYmFjayhibG9iKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgcGFja2V0IHdpdGggYmluYXJ5IGRhdGEgaW4gYSBiYXNlNjQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCwgaGFzIGB0eXBlYCBhbmQgYGRhdGFgXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIG1lc3NhZ2VcbiAqL1xuXG5leHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgY2FsbGJhY2spIHtcbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBpZiAoQmxvYiAmJiBwYWNrZXQuZGF0YSBpbnN0YW5jZW9mIGdsb2JhbC5CbG9iKSB7XG4gICAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiNjQgPSBmci5yZXN1bHQuc3BsaXQoJywnKVsxXTtcbiAgICAgIGNhbGxiYWNrKG1lc3NhZ2UgKyBiNjQpO1xuICAgIH07XG4gICAgcmV0dXJuIGZyLnJlYWRBc0RhdGFVUkwocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgdmFyIGI2NGRhdGE7XG4gIHRyeSB7XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHdpdGggdHlwZWQgYXJyYXlzXG4gICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpO1xuICAgIHZhciBiYXNpYyA9IG5ldyBBcnJheSh0eXBlZC5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJhc2ljW2ldID0gdHlwZWRbaV07XG4gICAgfVxuICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJhc2ljKTtcbiAgfVxuICBtZXNzYWdlICs9IGdsb2JhbC5idG9hKGI2NGRhdGEpO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59O1xuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQuIENoYW5nZXMgZm9ybWF0IHRvIEJsb2IgaWYgcmVxdWVzdGVkLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBgdHlwZWAgYW5kIGBkYXRhYCAoaWYgYW55KVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYWNrZXQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgdXRmOGRlY29kZSkge1xuICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGVycjtcbiAgfVxuICAvLyBTdHJpbmcgZGF0YVxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGRhdGEuY2hhckF0KDApID09PSAnYicpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldChkYXRhLnN1YnN0cigxKSwgYmluYXJ5VHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHV0ZjhkZWNvZGUpIHtcbiAgICAgIGRhdGEgPSB0cnlEZWNvZGUoZGF0YSk7XG4gICAgICBpZiAoZGF0YSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHR5cGUgPSBkYXRhLmNoYXJBdCgwKTtcblxuICAgIGlmIChOdW1iZXIodHlwZSkgIT0gdHlwZSB8fCAhcGFja2V0c2xpc3RbdHlwZV0pIHtcbiAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IGRhdGEuc3Vic3RyaW5nKDEpIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIGFzQXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHR5cGUgPSBhc0FycmF5WzBdO1xuICB2YXIgcmVzdCA9IHNsaWNlQnVmZmVyKGRhdGEsIDEpO1xuICBpZiAoQmxvYiAmJiBiaW5hcnlUeXBlID09PSAnYmxvYicpIHtcbiAgICByZXN0ID0gbmV3IEJsb2IoW3Jlc3RdKTtcbiAgfVxuICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogcmVzdCB9O1xufTtcblxuZnVuY3Rpb24gdHJ5RGVjb2RlKGRhdGEpIHtcbiAgdHJ5IHtcbiAgICBkYXRhID0gdXRmOC5kZWNvZGUoZGF0YSwgeyBzdHJpY3Q6IGZhbHNlIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQgZW5jb2RlZCBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihtc2csIGJpbmFyeVR5cGUpIHtcbiAgdmFyIHR5cGUgPSBwYWNrZXRzbGlzdFttc2cuY2hhckF0KDApXTtcbiAgaWYgKCFiYXNlNjRlbmNvZGVyKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogeyBiYXNlNjQ6IHRydWUsIGRhdGE6IG1zZy5zdWJzdHIoMSkgfSB9O1xuICB9XG5cbiAgdmFyIGRhdGEgPSBiYXNlNjRlbmNvZGVyLmRlY29kZShtc2cuc3Vic3RyKDEpKTtcblxuICBpZiAoYmluYXJ5VHlwZSA9PT0gJ2Jsb2InICYmIEJsb2IpIHtcbiAgICBkYXRhID0gbmV3IEJsb2IoW2RhdGFdKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IGRhdGEgfTtcbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkuXG4gKlxuICogICAgIDxsZW5ndGg+OmRhdGFcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICAxMTpoZWxsbyB3b3JsZDI6aGlcbiAqXG4gKiBJZiBhbnkgY29udGVudHMgYXJlIGJpbmFyeSwgdGhleSB3aWxsIGJlIGVuY29kZWQgYXMgYmFzZTY0IHN0cmluZ3MuIEJhc2U2NFxuICogZW5jb2RlZCBzdHJpbmdzIGFyZSBtYXJrZWQgd2l0aCBhIGIgYmVmb3JlIHRoZSBsZW5ndGggc3BlY2lmaWVyXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKHBhY2tldHMsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHN1cHBvcnRzQmluYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcbiAgICBzdXBwb3J0c0JpbmFyeSA9IG51bGw7XG4gIH1cblxuICB2YXIgaXNCaW5hcnkgPSBoYXNCaW5hcnkocGFja2V0cyk7XG5cbiAgaWYgKHN1cHBvcnRzQmluYXJ5ICYmIGlzQmluYXJ5KSB7XG4gICAgaWYgKEJsb2IgJiYgIWRvbnRTZW5kQmxvYnMpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IocGFja2V0cywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyKHBhY2tldHMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soJzA6Jyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkge1xuICAgIHJldHVybiBtZXNzYWdlLmxlbmd0aCArICc6JyArIG1lc3NhZ2U7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsICFpc0JpbmFyeSA/IGZhbHNlIDogc3VwcG9ydHNCaW5hcnksIGZhbHNlLCBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICBkb25lQ2FsbGJhY2sobnVsbCwgc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRzLmpvaW4oJycpKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEFzeW5jIGFycmF5IG1hcCB1c2luZyBhZnRlclxuICovXG5cbmZ1bmN0aW9uIG1hcChhcnksIGVhY2gsIGRvbmUpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShhcnkubGVuZ3RoKTtcbiAgdmFyIG5leHQgPSBhZnRlcihhcnkubGVuZ3RoLCBkb25lKTtcblxuICB2YXIgZWFjaFdpdGhJbmRleCA9IGZ1bmN0aW9uKGksIGVsLCBjYikge1xuICAgIGVhY2goZWwsIGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1zZztcbiAgICAgIGNiKGVycm9yLCByZXN1bHQpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgZWFjaFdpdGhJbmRleChpLCBhcnlbaV0sIG5leHQpO1xuICB9XG59XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFBvc3NpYmxlIGJpbmFyeSBjb250ZW50cyBhcmVcbiAqIGRlY29kZWQgZnJvbSB0aGVpciBiYXNlNjQgcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSwgY2FsbGJhY2sgbWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5KGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gYmluYXJ5VHlwZTtcbiAgICBiaW5hcnlUeXBlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBwYWNrZXQ7XG4gIGlmIChkYXRhID09PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSAnJywgbiwgbXNnO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gZGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hyID0gZGF0YS5jaGFyQXQoaSk7XG5cbiAgICBpZiAoY2hyICE9PSAnOicpIHtcbiAgICAgIGxlbmd0aCArPSBjaHI7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSAnJyB8fCAobGVuZ3RoICE9IChuID0gTnVtYmVyKGxlbmd0aCkpKSkge1xuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgfVxuXG4gICAgbXNnID0gZGF0YS5zdWJzdHIoaSArIDEsIG4pO1xuXG4gICAgaWYgKGxlbmd0aCAhPSBtc2cubGVuZ3RoKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBpZiAobXNnLmxlbmd0aCkge1xuICAgICAgcGFja2V0ID0gZXhwb3J0cy5kZWNvZGVQYWNrZXQobXNnLCBiaW5hcnlUeXBlLCBmYWxzZSk7XG5cbiAgICAgIGlmIChlcnIudHlwZSA9PT0gcGFja2V0LnR5cGUgJiYgZXJyLmRhdGEgPT09IHBhY2tldC5kYXRhKSB7XG4gICAgICAgIC8vIHBhcnNlciBlcnJvciBpbiBpbmRpdmlkdWFsIHBhY2tldCAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXQgPSBjYWxsYmFjayhwYWNrZXQsIGkgKyBuLCBsKTtcbiAgICAgIGlmIChmYWxzZSA9PT0gcmV0KSByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWR2YW5jZSBjdXJzb3JcbiAgICBpICs9IG47XG4gICAgbGVuZ3RoID0gJyc7XG4gIH1cblxuICBpZiAobGVuZ3RoICE9PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpIGFzIGJpbmFyeS5cbiAqXG4gKiA8MSA9IGJpbmFyeSwgMCA9IHN0cmluZz48bnVtYmVyIGZyb20gMC05PjxudW1iZXIgZnJvbSAwLTk+Wy4uLl08bnVtYmVyXG4gKiAyNTU+PGRhdGE+XG4gKlxuICogRXhhbXBsZTpcbiAqIDEgMyAyNTUgMSAyIDMsIGlmIHRoZSBiaW5hcnkgY29udGVudHMgYXJlIGludGVycHJldGVkIGFzIDggYml0IGludGVnZXJzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQHJldHVybiB7QXJyYXlCdWZmZXJ9IGVuY29kZWQgcGF5bG9hZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEFycmF5QnVmZmVyKDApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIGRvbmVDYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgZW5jb2RlZFBhY2tldHMpIHtcbiAgICB2YXIgdG90YWxMZW5ndGggPSBlbmNvZGVkUGFja2V0cy5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBwKSB7XG4gICAgICB2YXIgbGVuO1xuICAgICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJyl7XG4gICAgICAgIGxlbiA9IHAubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVuID0gcC5ieXRlTGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYyArIGxlbi50b1N0cmluZygpLmxlbmd0aCArIGxlbiArIDI7IC8vIHN0cmluZy9iaW5hcnkgaWRlbnRpZmllciArIHNlcGFyYXRvciA9IDJcbiAgICB9LCAwKTtcblxuICAgIHZhciByZXN1bHRBcnJheSA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcblxuICAgIHZhciBidWZmZXJJbmRleCA9IDA7XG4gICAgZW5jb2RlZFBhY2tldHMuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICB2YXIgaXNTdHJpbmcgPSB0eXBlb2YgcCA9PT0gJ3N0cmluZyc7XG4gICAgICB2YXIgYWIgPSBwO1xuICAgICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkocC5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2aWV3W2ldID0gcC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGFiID0gdmlldy5idWZmZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZykgeyAvLyBub3QgdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAwO1xuICAgICAgfSBlbHNlIHsgLy8gdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuU3RyID0gYWIuYnl0ZUxlbmd0aC50b1N0cmluZygpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAyNTU7XG5cbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gdmlld1tpXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRBcnJheS5idWZmZXIpO1xuICB9KTtcbn07XG5cbi8qKlxuICogRW5jb2RlIGFzIEJsb2JcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IgPSBmdW5jdGlvbihwYWNrZXRzLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGVuY29kZWQpIHtcbiAgICAgIHZhciBiaW5hcnlJZGVudGlmaWVyID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMTtcbiAgICAgIGlmICh0eXBlb2YgZW5jb2RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShlbmNvZGVkLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jb2RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBlbmNvZGVkLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RlZCA9IHZpZXcuYnVmZmVyO1xuICAgICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlbiA9IChlbmNvZGVkIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXG4gICAgICAgID8gZW5jb2RlZC5ieXRlTGVuZ3RoXG4gICAgICAgIDogZW5jb2RlZC5zaXplO1xuXG4gICAgICB2YXIgbGVuU3RyID0gbGVuLnRvU3RyaW5nKCk7XG4gICAgICB2YXIgbGVuZ3RoQXJ5ID0gbmV3IFVpbnQ4QXJyYXkobGVuU3RyLmxlbmd0aCArIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGVuZ3RoQXJ5W2ldID0gcGFyc2VJbnQobGVuU3RyW2ldKTtcbiAgICAgIH1cbiAgICAgIGxlbmd0aEFyeVtsZW5TdHIubGVuZ3RoXSA9IDI1NTtcblxuICAgICAgaWYgKEJsb2IpIHtcbiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbYmluYXJ5SWRlbnRpZmllci5idWZmZXIsIGxlbmd0aEFyeS5idWZmZXIsIGVuY29kZWRdKTtcbiAgICAgICAgZG9uZUNhbGxiYWNrKG51bGwsIGJsb2IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBCbG9iKHJlc3VsdHMpKTtcbiAgfSk7XG59O1xuXG4vKlxuICogRGVjb2RlcyBkYXRhIHdoZW4gYSBwYXlsb2FkIGlzIG1heWJlIGV4cGVjdGVkLiBTdHJpbmdzIGFyZSBkZWNvZGVkIGJ5XG4gKiBpbnRlcnByZXRpbmcgZWFjaCBieXRlIGFzIGEga2V5IGNvZGUgZm9yIGVudHJpZXMgbWFya2VkIHRvIHN0YXJ0IHdpdGggMC4gU2VlXG4gKiBkZXNjcmlwdGlvbiBvZiBlbmNvZGVQYXlsb2FkQXNCaW5hcnlcbiAqXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIGJ1ZmZlclRhaWwgPSBkYXRhO1xuICB2YXIgYnVmZmVycyA9IFtdO1xuXG4gIHdoaWxlIChidWZmZXJUYWlsLmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgdmFyIHRhaWxBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclRhaWwpO1xuICAgIHZhciBpc1N0cmluZyA9IHRhaWxBcnJheVswXSA9PT0gMDtcbiAgICB2YXIgbXNnTGVuZ3RoID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgOyBpKyspIHtcbiAgICAgIGlmICh0YWlsQXJyYXlbaV0gPT09IDI1NSkgYnJlYWs7XG5cbiAgICAgIC8vIDMxMCA9IGNoYXIgbGVuZ3RoIG9mIE51bWJlci5NQVhfVkFMVUVcbiAgICAgIGlmIChtc2dMZW5ndGgubGVuZ3RoID4gMzEwKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICBtc2dMZW5ndGggKz0gdGFpbEFycmF5W2ldO1xuICAgIH1cblxuICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAyICsgbXNnTGVuZ3RoLmxlbmd0aCk7XG4gICAgbXNnTGVuZ3RoID0gcGFyc2VJbnQobXNnTGVuZ3RoKTtcblxuICAgIHZhciBtc2cgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAwLCBtc2dMZW5ndGgpO1xuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbXNnID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShtc2cpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgdG8gdHlwZWQgYXJyYXlzXG4gICAgICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KG1zZyk7XG4gICAgICAgIG1zZyA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbXNnICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodHlwZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYnVmZmVycy5wdXNoKG1zZyk7XG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIG1zZ0xlbmd0aCk7XG4gIH1cblxuICB2YXIgdG90YWwgPSBidWZmZXJzLmxlbmd0aDtcbiAgYnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uKGJ1ZmZlciwgaSkge1xuICAgIGNhbGxiYWNrKGV4cG9ydHMuZGVjb2RlUGFja2V0KGJ1ZmZlciwgYmluYXJ5VHlwZSwgdHJ1ZSksIGksIHRvdGFsKTtcbiAgfSk7XG59O1xuIiwiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxyXG4gKi9cclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XHJcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XHJcbn07XHJcblxyXG4vKipcclxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1peGluKG9iaikge1xyXG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xyXG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub24gPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxyXG4gICAgLnB1c2goZm4pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxyXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICBmdW5jdGlvbiBvbigpIHtcclxuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XHJcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgb24uZm4gPSBmbjtcclxuICB0aGlzLm9uKGV2ZW50LCBvbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICAvLyBhbGxcclxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XHJcblxyXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcclxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcclxuICB2YXIgY2I7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcclxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtNaXhlZH0gLi4uXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGEsIGIpe1xuICB2YXIgZm4gPSBmdW5jdGlvbigpe307XG4gIGZuLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO1xuICBhLnByb3RvdHlwZSA9IG5ldyBmbjtcbiAgYS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBhO1xufTsiLCIvKipcclxuICogQ29tcGlsZXMgYSBxdWVyeXN0cmluZ1xyXG4gKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuICB2YXIgc3RyID0gJyc7XHJcblxyXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XHJcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICAgIGlmIChzdHIubGVuZ3RoKSBzdHIgKz0gJyYnO1xyXG4gICAgICBzdHIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RyO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBhIHNpbXBsZSBxdWVyeXN0cmluZyBpbnRvIGFuIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcXNcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbihxcyl7XHJcbiAgdmFyIHFyeSA9IHt9O1xyXG4gIHZhciBwYWlycyA9IHFzLnNwbGl0KCcmJyk7XHJcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoJz0nKTtcclxuICAgIHFyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xyXG4gIH1cclxuICByZXR1cm4gcXJ5O1xyXG59O1xyXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgdmFyIHN1YnNjcmlwdGlvblNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgdHJ5U3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0cnlVbnN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbm90aWZ5TmVzdGVkU3ViczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTdWJzY3JpYmVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTtcblxuZXhwb3J0IHZhciBzdG9yZVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcblxudmFyIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpIHtcbiAgaWYgKGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gdHJ1ZTtcblxuICB3YXJuaW5nKCc8UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgY2hhbmdpbmcgYHN0b3JlYCBvbiB0aGUgZmx5LiAnICsgJ0l0IGlzIG1vc3QgbGlrZWx5IHRoYXQgeW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IHVwZGF0ZWQgdG8gJyArICdSZWR1eCAyLnggYW5kIFJlYWN0IFJlZHV4IDIueCB3aGljaCBubyBsb25nZXIgaG90IHJlbG9hZCByZWR1Y2VycyAnICsgJ2F1dG9tYXRpY2FsbHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yZWR1eC9yZWxlYXNlcy8nICsgJ3RhZy92Mi4wLjAgZm9yIHRoZSBtaWdyYXRpb24gaW5zdHJ1Y3Rpb25zLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXg7XG5cbiAgdmFyIHN0b3JlS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnc3RvcmUnO1xuICB2YXIgc3ViS2V5ID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdWJLZXkgfHwgc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbc3RvcmVLZXldID0gdGhpc1tzdG9yZUtleV0sIF9yZWZbc3Vic2NyaXB0aW9uS2V5XSA9IG51bGwsIF9yZWY7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgX3RoaXNbc3RvcmVLZXldID0gcHJvcHMuc3RvcmU7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBDaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXNbc3RvcmVLZXldICE9PSBuZXh0UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbiAgfTtcbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdG9yZUtleV0gPSBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcm92aWRlcigpOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cbiAgdmFyIGN1cnJlbnQgPSBbXTtcbiAgdmFyIG5leHQgPSBbXTtcblxuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yiwgb25TdGF0ZUNoYW5nZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJzY3JpcHRpb24pO1xuXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSA9IG9uU3RhdGVDaGFuZ2U7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICB9XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5vblN0YXRlQ2hhbmdlKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMub25TdGF0ZUNoYW5nZSk7XG5cbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuXG52YXIgaG90UmVsb2FkaW5nVmVyc2lvbiA9IDA7XG52YXIgZHVtbXlTdGF0ZSA9IHt9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3Rvciwgc3RvcmUpIHtcbiAgLy8gd3JhcCB0aGUgc2VsZWN0b3IgaW4gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGl0cyByZXN1bHRzIGJldHdlZW4gcnVucy5cbiAgdmFyIHNlbGVjdG9yID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuQ29tcG9uZW50U2VsZWN0b3IocHJvcHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG4gICAgICAgIGlmIChuZXh0UHJvcHMgIT09IHNlbGVjdG9yLnByb3BzIHx8IHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBzZWxlY3Rvci5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgICAgICBzZWxlY3Rvci5lcnJvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHNlbGVjdG9yLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnkpIHtcbiAgdmFyIF9jb250ZXh0VHlwZXMsIF9jaGlsZENvbnRleHRUeXBlcztcblxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJGdldERpc3BsYXlOYW1lID0gX3JlZi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZiRnZXREaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gJ0Nvbm5lY3RBZHZhbmNlZCgnICsgbmFtZSArICcpJztcbiAgfSA6IF9yZWYkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmJG1ldGhvZE5hbWUgPSBfcmVmLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZiRtZXRob2ROYW1lID09PSB1bmRlZmluZWQgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYkcmVuZGVyQ291bnRQcm9wID0gX3JlZi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmJHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX3JlZiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPSBfcmVmLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCxcbiAgICAgIF9yZWYkc3RvcmVLZXkgPSBfcmVmLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmJHN0b3JlS2V5ID09PSB1bmRlZmluZWQgPyAnc3RvcmUnIDogX3JlZiRzdG9yZUtleSxcbiAgICAgIF9yZWYkd2l0aFJlZiA9IF9yZWYud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmJHdpdGhSZWYgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiR3aXRoUmVmLFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydnZXREaXNwbGF5TmFtZScsICdtZXRob2ROYW1lJywgJ3JlbmRlckNvdW50UHJvcCcsICdzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMnLCAnc3RvcmVLZXknLCAnd2l0aFJlZiddKTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcbiAgdmFyIHZlcnNpb24gPSBob3RSZWxvYWRpbmdWZXJzaW9uKys7XG5cbiAgdmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbc3RvcmVLZXldID0gc3RvcmVTaGFwZSwgX2NvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jb250ZXh0VHlwZXMpO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSAoX2NoaWxkQ29udGV4dFR5cGVzID0ge30sIF9jaGlsZENvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jaGlsZENvbnRleHRUeXBlcyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaW52YXJpYW50KHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09ICdmdW5jdGlvbicsICdZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSAnICsgKG1ldGhvZE5hbWUgKyAnLiBJbnN0ZWFkIHJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShXcmFwcGVkQ29tcG9uZW50KSkpO1xuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICB3aXRoUmVmOiB3aXRoUmVmLFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIENvbm5lY3QgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzKENvbm5lY3QsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMucmVuZGVyQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHByb3BzW3N0b3JlS2V5XSB8fCBjb250ZXh0W3N0b3JlS2V5XTtcbiAgICAgICAgX3RoaXMucHJvcHNNb2RlID0gQm9vbGVhbihwcm9wc1tzdG9yZUtleV0pO1xuICAgICAgICBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UgPSBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UuYmluZChfdGhpcyk7XG5cbiAgICAgICAgaW52YXJpYW50KF90aGlzLnN0b3JlLCAnQ291bGQgbm90IGZpbmQgXCInICsgc3RvcmVLZXkgKyAnXCIgaW4gZWl0aGVyIHRoZSBjb250ZXh0IG9yIHByb3BzIG9mICcgKyAoJ1wiJyArIGRpc3BsYXlOYW1lICsgJ1wiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCAnKSArICgnb3IgZXhwbGljaXRseSBwYXNzIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGFzIGEgcHJvcCB0byBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nKSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFNlbGVjdG9yKCk7XG4gICAgICAgIF90aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCByZWNlaXZlZCBzdG9yZSBmcm9tIHByb3BzLCBpdHMgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSB0cmFuc3BhcmVudFxuICAgICAgICAvLyB0byBhbnkgZGVzY2VuZGFudHMgcmVjZWl2aW5nIHN0b3JlK3N1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQ7IGl0IHBhc3NlcyBhbG9uZ1xuICAgICAgICAvLyBzdWJzY3JpcHRpb24gcGFzc2VkIHRvIGl0LiBPdGhlcndpc2UsIGl0IHNoYWRvd3MgdGhlIHBhcmVudCBzdWJzY3JpcHRpb24sIHdoaWNoIGFsbG93c1xuICAgICAgICAvLyBDb25uZWN0IHRvIGNvbnRyb2wgb3JkZXJpbmcgb2Ygbm90aWZpY2F0aW9ucyB0byBmbG93IHRvcC1kb3duLlxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wc01vZGUgPyBudWxsIDogdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfcmVmMiA9IHt9LCBfcmVmMltzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uIHx8IHRoaXMuY29udGV4dFtzdWJzY3JpcHRpb25LZXldLCBfcmVmMjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGZpcmVzIGR1cmluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGJ1dCBjb21wb25lbnREaWRNb3VudCBhbmRcbiAgICAgICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgZG8gbm90LiBCZWNhdXNlIG9mIHRoaXMsIHRyeVN1YnNjcmliZSBoYXBwZW5zIGR1cmluZyAuLi5kaWRNb3VudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB1bnN1YnNjcmlwdGlvbiB3b3VsZCBuZXZlciB0YWtlIHBsYWNlIGR1cmluZyBTU1IsIGNhdXNpbmcgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gVG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgY2hpbGQgY29tcG9uZW50IG1heSBoYXZlIHRyaWdnZXJlZCBhIHN0YXRlIGNoYW5nZSBieVxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhbiBhY3Rpb24gaW4gaXRzIGNvbXBvbmVudFdpbGxNb3VudCwgd2UgaGF2ZSB0byByZS1ydW4gdGhlIHNlbGVjdCBhbmQgbWF5YmVcbiAgICAgICAgLy8gcmUtcmVuZGVyLlxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4gPSBub29wO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0V3JhcHBlZEluc3RhbmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQod2l0aFJlZiwgJ1RvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgeW91IG5lZWQgdG8gc3BlY2lmeSAnICsgKCd7IHdpdGhSZWY6IHRydWUgfSBpbiB0aGUgb3B0aW9ucyBhcmd1bWVudCBvZiB0aGUgJyArIG1ldGhvZE5hbWUgKyAnKCkgY2FsbC4nKSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIHNldFdyYXBwZWRJbnN0YW5jZShyZWYpIHtcbiAgICAgICAgdGhpcy53cmFwcGVkSW5zdGFuY2UgPSByZWY7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbiBpbml0U2VsZWN0b3IoKSB7XG4gICAgICAgIHZhciBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeSh0aGlzLnN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCB0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gaW5pdFN1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBwYXJlbnRTdWIncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHBhcmVudFN1YiA9ICh0aGlzLnByb3BzTW9kZSA/IHRoaXMucHJvcHMgOiB0aGlzLmNvbnRleHQpW3N1YnNjcmlwdGlvbktleV07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnN0b3JlLCBwYXJlbnRTdWIsIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyAgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgdGhpcy5zdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBBblxuICAgICAgICAvLyBleHRyYSBudWxsIGNoZWNrIGV2ZXJ5IGNoYW5nZSBjYW4gYmUgYXZvaWRlZCBieSBjb3B5aW5nIHRoZSBtZXRob2Qgb250byBgdGhpc2AgYW5kIHRoZW5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGl0IHdpdGggYSBuby1vcCBvbiB1bm1vdW50LiBUaGlzIGNhbiBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzXG4gICAgICAgIC8vIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlXG4gICAgICAgIC8vIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IHRoaXMuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZCh0aGlzLnN1YnNjcmlwdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkdW1teVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAvLyBgY29tcG9uZW50RGlkVXBkYXRlYCBpcyBjb25kaXRpb25hbGx5IGltcGxlbWVudGVkIHdoZW4gYG9uU3RhdGVDaGFuZ2VgIGRldGVybWluZXMgaXRcbiAgICAgICAgLy8gbmVlZHMgdG8gbm90aWZ5IG5lc3RlZCBzdWJzLiBPbmNlIGNhbGxlZCwgaXQgdW5pbXBsZW1lbnRzIGl0c2VsZiB1bnRpbCBmdXJ0aGVyIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZXMgb2NjdXIuIERvaW5nIGl0IHRoaXMgd2F5IHZzIGhhdmluZyBhIHBlcm1hbmVudCBgY29tcG9uZW50RGlkVXBkYXRlYCB0aGF0IGRvZXNcbiAgICAgICAgLy8gYSBib29sZWFuIGNoZWNrIGV2ZXJ5IHRpbWUgYXZvaWRzIGFuIGV4dHJhIG1ldGhvZCBjYWxsIG1vc3Qgb2YgdGhlIHRpbWUsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBzb21lIHBlcmYgYm9vc3QuXG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5zdWJzY3JpcHRpb24pICYmIHRoaXMuc3Vic2NyaXB0aW9uLmlzU3Vic2NyaWJlZCgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuYWRkRXh0cmFQcm9wcyA9IGZ1bmN0aW9uIGFkZEV4dHJhUHJvcHMocHJvcHMpIHtcbiAgICAgICAgaWYgKCF3aXRoUmVmICYmICFyZW5kZXJDb3VudFByb3AgJiYgISh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikpIHJldHVybiBwcm9wcztcbiAgICAgICAgLy8gbWFrZSBhIHNoYWxsb3cgY29weSBzbyB0aGF0IGZpZWxkcyBhZGRlZCBkb24ndCBsZWFrIHRvIHRoZSBvcmlnaW5hbCBzZWxlY3Rvci5cbiAgICAgICAgLy8gdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBmb3IgJ3JlZicgc2luY2UgdGhhdCdzIGEgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpbnN0YW5jZS4gYSBzaW5nbGV0b24gbWVtb2l6ZWQgc2VsZWN0b3Igd291bGQgdGhlbiBiZSBob2xkaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgICAgICAvLyBpbnN0YW5jZSwgcHJldmVudGluZyB0aGUgaW5zdGFuY2UgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZCwgYW5kIHRoYXQgd291bGQgYmUgYmFkXG4gICAgICAgIHZhciB3aXRoRXh0cmFzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgICAgICAgaWYgKHdpdGhSZWYpIHdpdGhFeHRyYXMucmVmID0gdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2U7XG4gICAgICAgIGlmIChyZW5kZXJDb3VudFByb3ApIHdpdGhFeHRyYXNbcmVuZGVyQ291bnRQcm9wXSA9IHRoaXMucmVuZGVyQ291bnQrKztcbiAgICAgICAgaWYgKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSB3aXRoRXh0cmFzW3N1YnNjcmlwdGlvbktleV0gPSB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIHdpdGhFeHRyYXM7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHRocm93IHNlbGVjdG9yLmVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHRoaXMuYWRkRXh0cmFQcm9wcyhzZWxlY3Rvci5wcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICBDb25uZWN0LmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5wcm9wVHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIC8vIFdlIGFyZSBob3QgcmVsb2FkaW5nIVxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICB0aGlzLmluaXRTZWxlY3RvcigpO1xuXG4gICAgICAgICAgLy8gSWYgYW55IGNvbm5lY3RlZCBkZXNjZW5kYW50cyBkb24ndCBob3QgcmVsb2FkIChhbmQgcmVzdWJzY3JpYmUgaW4gdGhlIHByb2Nlc3MpLCB0aGVpclxuICAgICAgICAgIC8vIGxpc3RlbmVycyB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSB1bnN1YnNjcmliZS4gVW5mb3J0dW5hdGVseSwgYnkgY29weWluZyBvdmVyIGFsbFxuICAgICAgICAgIC8vIGxpc3RlbmVycywgdGhpcyBkb2VzIG1lYW4gdGhhdCB0aGUgb2xkIHZlcnNpb25zIG9mIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgb2Ygc3RhdGUgY2hhbmdlczsgaG93ZXZlciwgdGhlaXIgb25TdGF0ZUNoYW5nZSBmdW5jdGlvbiBpcyBhIG5vLW9wIHNvIHRoaXNcbiAgICAgICAgICAvLyBpc24ndCBhIGh1Z2UgZGVhbC5cbiAgICAgICAgICB2YXIgb2xkTGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycyA9IHRoaXMuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5nZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG90eXBlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQbGFpbk9iamVjdDtcbiIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn1cblxuLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vLyBcbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59XG5cbi8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vIFxuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy8gICAgXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07XG5cbiAgICAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuXG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4geyBkaXNwYXRjaDogZGlzcGF0Y2ggfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuXG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuXG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGUgPSB2b2lkIDA7XG4gIHZhciBvd25Qcm9wcyA9IHZvaWQgMDtcbiAgdmFyIHN0YXRlUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBkaXNwYXRjaFByb3BzID0gdm9pZCAwO1xuICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcblxuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuXG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG5cbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufVxuXG4vLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ2luaXRNYXBTdGF0ZVRvUHJvcHMnLCAnaW5pdE1hcERpc3BhdGNoVG9Qcm9wcycsICdpbml0TWVyZ2VQcm9wcyddKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuXG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgb2YgdHlwZSAnICsgdHlwZW9mIGFyZyArICcgZm9yICcgKyBuYW1lICsgJyBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50ICcgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgJy4nKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdW5kZWZpbmVkID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpIHtcbiAgICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9LFxuICAgICAgICBfcmVmMiRwdXJlID0gX3JlZjIucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYyJHB1cmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmMiRwdXJlLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlc0VxdWFsID09PSB1bmRlZmluZWQgPyBzdHJpY3RFcXVhbCA6IF9yZWYyJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMiRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjIkYXJlT3duUHJvcHNFcXVhID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYyLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjIkYXJlU3RhdGVQcm9wc0VxID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYyJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYyLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ3B1cmUnLCAnYXJlU3RhdGVzRXF1YWwnLCAnYXJlT3duUHJvcHNFcXVhbCcsICdhcmVTdGF0ZVByb3BzRXF1YWwnLCAnYXJlTWVyZ2VkUHJvcHNFcXVhbCddKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcblxuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gJ0Nvbm5lY3QoJyArIG5hbWUgKyAnKSc7XG4gICAgICB9LFxuXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcblxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG5cbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNwb3J0O1xuXG4vKipcbiAqIFRyYW5zcG9ydCBhYnN0cmFjdCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFRyYW5zcG9ydCAob3B0cykge1xuICB0aGlzLnBhdGggPSBvcHRzLnBhdGg7XG4gIHRoaXMuaG9zdG5hbWUgPSBvcHRzLmhvc3RuYW1lO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQ7XG4gIHRoaXMuc2VjdXJlID0gb3B0cy5zZWN1cmU7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbTtcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICcnO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5zb2NrZXQgPSBvcHRzLnNvY2tldDtcbiAgdGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgdGhpcy5mb3JjZU5vZGUgPSBvcHRzLmZvcmNlTm9kZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihUcmFuc3BvcnQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBFbWl0cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCBkZXNjKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgZXJyLnR5cGUgPSAnVHJhbnNwb3J0RXJyb3InO1xuICBlcnIuZGVzY3JpcHRpb24gPSBkZXNjO1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gICAgdGhpcy5kb09wZW4oKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgbm90IG9wZW4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBvcGVuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBwYWNrZXQgPSBwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xuICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG59O1xuIiwiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxudmFyIGhhc0NPUlMgPSByZXF1aXJlKCdoYXMtY29ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHZhciB4ZG9tYWluID0gb3B0cy54ZG9tYWluO1xuXG4gIC8vIHNjaGVtZSBtdXN0IGJlIHNhbWUgd2hlbiB1c2lnbiBYRG9tYWluUmVxdWVzdFxuICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZWludGVybmFscy9hcmNoaXZlLzIwMTAvMDUvMTMveGRvbWFpbnJlcXVlc3QtcmVzdHJpY3Rpb25zLWxpbWl0YXRpb25zLWFuZC13b3JrYXJvdW5kcy5hc3B4XG4gIHZhciB4c2NoZW1lID0gb3B0cy54c2NoZW1lO1xuXG4gIC8vIFhEb21haW5SZXF1ZXN0IGhhcyBhIGZsb3cgb2Ygbm90IHNlbmRpbmcgY29va2llLCB0aGVyZWZvcmUgaXQgc2hvdWxkIGJlIGRpc2FibGVkIGFzIGEgZGVmYXVsdC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvZW5naW5lLmlvLWNsaWVudC9wdWxsLzIxN1xuICB2YXIgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIC8vIFVzZSBYRG9tYWluUmVxdWVzdCBmb3IgSUU4IGlmIGVuYWJsZXNYRFIgaXMgdHJ1ZVxuICAvLyBiZWNhdXNlIGxvYWRpbmcgYmFyIGtlZXBzIGZsYXNoaW5nIHdoZW4gdXNpbmcganNvbnAtcG9sbGluZ1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20veXVqaW9zYWthL3NvY2tlLmlvLWllOC1sb2FkaW5nLWV4YW1wbGVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYRG9tYWluUmVxdWVzdCAmJiAheHNjaGVtZSAmJiBlbmFibGVzWERSKSB7XG4gICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICBpZiAoIXhkb21haW4pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBnbG9iYWxbWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKV0oJ01pY3Jvc29mdC5YTUxIVFRQJyk7XG4gICAgfSBjYXRjaCAoZSkgeyB9XG4gIH1cbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgYmluYXJ5ID0gcmVxdWlyZSgnLi9iaW5hcnknKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy50eXBlcyA9IFtcbiAgJ0NPTk5FQ1QnLFxuICAnRElTQ09OTkVDVCcsXG4gICdFVkVOVCcsXG4gICdBQ0snLFxuICAnRVJST1InLFxuICAnQklOQVJZX0VWRU5UJyxcbiAgJ0JJTkFSWV9BQ0snXG5dO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQ09OTkVDVCA9IDA7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGRpc2Nvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5ESVNDT05ORUNUID0gMTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXZlbnRgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FVkVOVCA9IDI7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGFja2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkFDSyA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGVycm9yYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVJST1IgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlICdiaW5hcnkgZXZlbnQnXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9FVkVOVCA9IDU7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGJpbmFyeSBhY2tgLiBGb3IgYWNrcyB3aXRoIGJpbmFyeSBhcmd1bWVudHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9BQ0sgPSA2O1xuXG4vKipcbiAqIEVuY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVuY29kZXIgPSBFbmNvZGVyO1xuXG4vKipcbiAqIERlY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRlY29kZXIgPSBEZWNvZGVyO1xuXG4vKipcbiAqIEEgc29ja2V0LmlvIEVuY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEVuY29kZXIoKSB7fVxuXG52YXIgRVJST1JfUEFDS0VUID0gZXhwb3J0cy5FUlJPUiArICdcImVuY29kZSBlcnJvclwiJztcblxuLyoqXG4gKiBFbmNvZGUgYSBwYWNrZXQgYXMgYSBzaW5nbGUgc3RyaW5nIGlmIG5vbi1iaW5hcnksIG9yIGFzIGFcbiAqIGJ1ZmZlciBzZXF1ZW5jZSwgZGVwZW5kaW5nIG9uIHBhY2tldCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBwYWNrZXQgb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGhhbmRsZSBlbmNvZGluZ3MgKGxpa2VseSBlbmdpbmUud3JpdGUpXG4gKiBAcmV0dXJuIENhbGxzIGNhbGxiYWNrIHdpdGggQXJyYXkgb2YgZW5jb2RpbmdzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spe1xuICBkZWJ1ZygnZW5jb2RpbmcgcGFja2V0ICVqJywgb2JqKTtcblxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBlbmNvZGVBc1N0cmluZyhvYmopO1xuICAgIGNhbGxiYWNrKFtlbmNvZGluZ10pO1xuICB9XG59O1xuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge1N0cmluZ30gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNTdHJpbmcob2JqKSB7XG5cbiAgLy8gZmlyc3QgaXMgdHlwZVxuICB2YXIgc3RyID0gJycgKyBvYmoudHlwZTtcblxuICAvLyBhdHRhY2htZW50cyBpZiB3ZSBoYXZlIHRoZW1cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgc3RyICs9IG9iai5hdHRhY2htZW50cyArICctJztcbiAgfVxuXG4gIC8vIGlmIHdlIGhhdmUgYSBuYW1lc3BhY2Ugb3RoZXIgdGhhbiBgL2BcbiAgLy8gd2UgYXBwZW5kIGl0IGZvbGxvd2VkIGJ5IGEgY29tbWEgYCxgXG4gIGlmIChvYmoubnNwICYmICcvJyAhPT0gb2JqLm5zcCkge1xuICAgIHN0ciArPSBvYmoubnNwICsgJywnO1xuICB9XG5cbiAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgdGhlIGlkXG4gIGlmIChudWxsICE9IG9iai5pZCkge1xuICAgIHN0ciArPSBvYmouaWQ7XG4gIH1cblxuICAvLyBqc29uIGRhdGFcbiAgaWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVN0cmluZ2lmeShvYmouZGF0YSk7XG4gICAgaWYgKHBheWxvYWQgIT09IGZhbHNlKSB7XG4gICAgICBzdHIgKz0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEVSUk9SX1BBQ0tFVDtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZW5jb2RlZCAlaiBhcyAlcycsIG9iaiwgc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gdHJ5U3RyaW5naWZ5KHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgJ2J1ZmZlciBzZXF1ZW5jZScgYnkgcmVtb3ZpbmcgYmxvYnMsIGFuZFxuICogZGVjb25zdHJ1Y3RpbmcgcGFja2V0IGludG8gb2JqZWN0IHdpdGggcGxhY2Vob2xkZXJzIGFuZFxuICogYSBsaXN0IG9mIGJ1ZmZlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QnVmZmVyfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKSB7XG5cbiAgZnVuY3Rpb24gd3JpdGVFbmNvZGluZyhibG9ibGVzc0RhdGEpIHtcbiAgICB2YXIgZGVjb25zdHJ1Y3Rpb24gPSBiaW5hcnkuZGVjb25zdHJ1Y3RQYWNrZXQoYmxvYmxlc3NEYXRhKTtcbiAgICB2YXIgcGFjayA9IGVuY29kZUFzU3RyaW5nKGRlY29uc3RydWN0aW9uLnBhY2tldCk7XG4gICAgdmFyIGJ1ZmZlcnMgPSBkZWNvbnN0cnVjdGlvbi5idWZmZXJzO1xuXG4gICAgYnVmZmVycy51bnNoaWZ0KHBhY2spOyAvLyBhZGQgcGFja2V0IGluZm8gdG8gYmVnaW5uaW5nIG9mIGRhdGEgbGlzdFxuICAgIGNhbGxiYWNrKGJ1ZmZlcnMpOyAvLyB3cml0ZSBhbGwgdGhlIGJ1ZmZlcnNcbiAgfVxuXG4gIGJpbmFyeS5yZW1vdmVCbG9icyhvYmosIHdyaXRlRW5jb2RpbmcpO1xufVxuXG4vKipcbiAqIEEgc29ja2V0LmlvIERlY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlY29kZXJcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRGVjb2RlcigpIHtcbiAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgIHdpdGggRGVjb2Rlci5cbiAqL1xuXG5FbWl0dGVyKERlY29kZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZWNvZGVzIGFuIGVjb2RlZCBwYWNrZXQgc3RyaW5nIGludG8gcGFja2V0IEpTT04uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG9iaiAtIGVuY29kZWQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHBhY2tldDtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgcGFja2V0ID0gZGVjb2RlU3RyaW5nKG9iaik7XG4gICAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwYWNrZXQudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHBhY2tldC50eXBlKSB7IC8vIGJpbmFyeSBwYWNrZXQncyBqc29uXG4gICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBuZXcgQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpO1xuXG4gICAgICAvLyBubyBhdHRhY2htZW50cywgbGFiZWxlZCBiaW5hcnkgYnV0IG5vIGJpbmFyeSBkYXRhIHRvIGZvbGxvd1xuICAgICAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvci5yZWNvblBhY2suYXR0YWNobWVudHMgPT09IDApIHtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgeyAvLyBub24tYmluYXJ5IGZ1bGwgcGFja2V0XG4gICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmIChpc0J1ZihvYmopIHx8IG9iai5iYXNlNjQpIHsgLy8gcmF3IGJpbmFyeSBkYXRhXG4gICAgaWYgKCF0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhY2tldCA9IHRoaXMucmVjb25zdHJ1Y3Rvci50YWtlQmluYXJ5RGF0YShvYmopO1xuICAgICAgaWYgKHBhY2tldCkgeyAvLyByZWNlaXZlZCBmaW5hbCBidWZmZXJcbiAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHR5cGU6ICcgKyBvYmopO1xuICB9XG59O1xuXG4vKipcbiAqIERlY29kZSBhIHBhY2tldCBTdHJpbmcgKEpTT04gZGF0YSlcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHN0cikge1xuICB2YXIgaSA9IDA7XG4gIC8vIGxvb2sgdXAgdHlwZVxuICB2YXIgcCA9IHtcbiAgICB0eXBlOiBOdW1iZXIoc3RyLmNoYXJBdCgwKSlcbiAgfTtcblxuICBpZiAobnVsbCA9PSBleHBvcnRzLnR5cGVzW3AudHlwZV0pIHtcbiAgICByZXR1cm4gZXJyb3IoJ3Vua25vd24gcGFja2V0IHR5cGUgJyArIHAudHlwZSk7XG4gIH1cblxuICAvLyBsb29rIHVwIGF0dGFjaG1lbnRzIGlmIHR5cGUgYmluYXJ5XG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcC50eXBlKSB7XG4gICAgdmFyIGJ1ZiA9ICcnO1xuICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT09ICctJykge1xuICAgICAgYnVmICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoaSA9PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgaWYgKGJ1ZiAhPSBOdW1iZXIoYnVmKSB8fCBzdHIuY2hhckF0KGkpICE9PSAnLScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBhdHRhY2htZW50cycpO1xuICAgIH1cbiAgICBwLmF0dGFjaG1lbnRzID0gTnVtYmVyKGJ1Zik7XG4gIH1cblxuICAvLyBsb29rIHVwIG5hbWVzcGFjZSAoaWYgYW55KVxuICBpZiAoJy8nID09PSBzdHIuY2hhckF0KGkgKyAxKSkge1xuICAgIHAubnNwID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKCcsJyA9PT0gYykgYnJlYWs7XG4gICAgICBwLm5zcCArPSBjO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwLm5zcCA9ICcvJztcbiAgfVxuXG4gIC8vIGxvb2sgdXAgaWRcbiAgdmFyIG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtcbiAgaWYgKCcnICE9PSBuZXh0ICYmIE51bWJlcihuZXh0KSA9PSBuZXh0KSB7XG4gICAgcC5pZCA9ICcnO1xuICAgIHdoaWxlICgrK2kpIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChudWxsID09IGMgfHwgTnVtYmVyKGMpICE9IGMpIHtcbiAgICAgICAgLS1pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHAuaWQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgcC5pZCA9IE51bWJlcihwLmlkKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAganNvbiBkYXRhXG4gIGlmIChzdHIuY2hhckF0KCsraSkpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVBhcnNlKHN0ci5zdWJzdHIoaSkpO1xuICAgIHZhciBpc1BheWxvYWRWYWxpZCA9IHBheWxvYWQgIT09IGZhbHNlICYmIChwLnR5cGUgPT09IGV4cG9ydHMuRVJST1IgfHwgaXNBcnJheShwYXlsb2FkKSk7XG4gICAgaWYgKGlzUGF5bG9hZFZhbGlkKSB7XG4gICAgICBwLmRhdGEgPSBwYXlsb2FkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXJyb3IoJ2ludmFsaWQgcGF5bG9hZCcpO1xuICAgIH1cbiAgfVxuXG4gIGRlYnVnKCdkZWNvZGVkICVzIGFzICVqJywgc3RyLCBwKTtcbiAgcmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIHRyeVBhcnNlKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRGVhbGxvY2F0ZXMgYSBwYXJzZXIncyByZXNvdXJjZXNcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgIHRoaXMucmVjb25zdHJ1Y3Rvci5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQSBtYW5hZ2VyIG9mIGEgYmluYXJ5IGV2ZW50J3MgJ2J1ZmZlciBzZXF1ZW5jZScuIFNob3VsZFxuICogYmUgY29uc3RydWN0ZWQgd2hlbmV2ZXIgYSBwYWNrZXQgb2YgdHlwZSBCSU5BUllfRVZFTlQgaXNcbiAqIGRlY29kZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QmluYXJ5UmVjb25zdHJ1Y3Rvcn0gaW5pdGlhbGl6ZWQgcmVjb25zdHJ1Y3RvclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBwYWNrZXQ7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufVxuXG4vKipcbiAqIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiBiaW5hcnkgZGF0YSByZWNlaXZlZCBmcm9tIGNvbm5lY3Rpb25cbiAqIGFmdGVyIGEgQklOQVJZX0VWRU5UIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlciB8IEFycmF5QnVmZmVyfSBiaW5EYXRhIC0gdGhlIHJhdyBiaW5hcnkgZGF0YSByZWNlaXZlZFxuICogQHJldHVybiB7bnVsbCB8IE9iamVjdH0gcmV0dXJucyBudWxsIGlmIG1vcmUgYmluYXJ5IGRhdGEgaXMgZXhwZWN0ZWQgb3JcbiAqICAgYSByZWNvbnN0cnVjdGVkIHBhY2tldCBvYmplY3QgaWYgYWxsIGJ1ZmZlcnMgaGF2ZSBiZWVuIHJlY2VpdmVkLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUudGFrZUJpbmFyeURhdGEgPSBmdW5jdGlvbihiaW5EYXRhKSB7XG4gIHRoaXMuYnVmZmVycy5wdXNoKGJpbkRhdGEpO1xuICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA9PT0gdGhpcy5yZWNvblBhY2suYXR0YWNobWVudHMpIHsgLy8gZG9uZSB3aXRoIGJ1ZmZlciBsaXN0XG4gICAgdmFyIHBhY2tldCA9IGJpbmFyeS5yZWNvbnN0cnVjdFBhY2tldCh0aGlzLnJlY29uUGFjaywgdGhpcy5idWZmZXJzKTtcbiAgICB0aGlzLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgICByZXR1cm4gcGFja2V0O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgYmluYXJ5IHBhY2tldCByZWNvbnN0cnVjdGlvbiB2YXJpYWJsZXMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUuZmluaXNoZWRSZWNvbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlY29uUGFjayA9IG51bGw7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufTtcblxuZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogZXhwb3J0cy5FUlJPUixcbiAgICBkYXRhOiAncGFyc2VyIGVycm9yOiAnICsgbXNnXG4gIH07XG59XG4iLCJpbXBvcnQgU29ja2V0IGZyb20gJy4uL1NvY2tldCc7XG5cbmV4cG9ydCBjb25zdCBJTlBVVF9DSEFOR0UgPSAnSU5QVVRfQ0hBTkdFJztcbmV4cG9ydCBjb25zdCBSRUNFSVZFX01FU1NBR0UgPSAnUkVDRUlWRV9NRVNTQUdFJztcbmV4cG9ydCBjb25zdCBSRVRSSUVWRV9DT05WRVJTQVRJT04gPSAnUkVUUklFVkVfQ09OVkVSU0FUSU9OJztcbmV4cG9ydCBjb25zdCBSRUNFSVZFX0NPTlZFUlNBVElPTiA9ICdSRUNFSVZFX0NPTlZFUlNBVElPTic7XG5leHBvcnQgY29uc3QgU0VORF9NRVNTQUdFID0gJ1NFTkRfTUVTU0FHRSc7XG5cbi8vIFRIVU5LXG5leHBvcnQgZnVuY3Rpb24gc2VuZE1lc3NhZ2UobWVzc2FnZSkge1xuICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG5cbiAgICAvLyBTZW5kaW5nIG1lc3NhZ2VcbiAgICBTb2NrZXQuZW1pdCgnU0VORF9NRVNTQUdFJywgbWVzc2FnZSk7XG4gICAgZGlzcGF0Y2goe3R5cGU6IFNFTkRfTUVTU0FHRSwgc3RhdHVzOiAnU3VjY2Vzcyd9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY2VpdmVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSRUNFSVZFX01FU1NBR0UsXG4gICAgbWVzc2FnZVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmV0cmlldmVDb252ZXJzYXRpb24oKSB7XG4gIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgZGlzcGF0Y2goe3R5cGU6IFJFVFJJRVZFX0NPTlZFUlNBVElPTn0pO1xuXG4gICAgU29ja2V0LmVtaXQoJ1JFVFJJRVZFX0NPTlZFUlNBVElPTicpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWNlaXZlQ29udmVyc2F0aW9uKG1lc3NhZ2VzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogUkVDRUlWRV9DT05WRVJTQVRJT04sXG4gICAgbWVzc2FnZXNcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlucHV0Q2hhbmdlKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogSU5QVVRfQ0hBTkdFLFxuICAgIG5hbWUsXG4gICAgdmFsdWVcbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6ICdAQHJlZHV4L0lOSVQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyksXG4gIFJFUExBQ0U6ICdAQHJlZHV4L1JFUExBQ0UnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJylcbn07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAoKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgcHJvdG8gPSBvYmo7XG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG5cbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAoKHR5cGVvZiBvYnNlcnZlciA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JzZXJ2ZXIpKSAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4geyB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmUgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9XG5cbiAgLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG4gIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgJ2FjdGlvbiBcIicgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyAnXCInIHx8ICdhbiBhY3Rpb24nO1xuXG4gIHJldHVybiAnR2l2ZW4gJyArIGFjdGlvbkRlc2NyaXB0aW9uICsgJywgcmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiAnICsgJ1RvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gJyArICdJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gJ1RoZSAnICsgYXJndW1lbnROYW1lICsgJyBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFwiJyArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgJ1wiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nICcgKyAoJ2tleXM6IFwiJyArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgJ1wiJyk7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuXG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuICdVbmV4cGVjdGVkICcgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArICcgJyArICgnXCInICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyAnXCIgZm91bmQgaW4gJyArIGFyZ3VtZW50TmFtZSArICcuICcpICsgJ0V4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogJyArICgnXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gJyArICdJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgJyArICdleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5ICcgKyAnbm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvblxcJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCAnICsgJ3lvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSAnQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTl8nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiB0eXBlIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiAnICsgKCdEb25cXCd0IHRyeSB0byBoYW5kbGUgJyArIEFjdGlvblR5cGVzLklOSVQgKyAnIG9yIG90aGVyIGFjdGlvbnMgaW4gXCJyZWR1eC8qXCIgJykgKyAnbmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgJyArICdjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCAnICsgJ2luIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSAnICsgJ2FjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLicpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoJ05vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcIicgKyBrZXkgKyAnXCInKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHZvaWQgMDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yID0gdm9pZCAwO1xuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKCkge1xuICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYWN0aW9uQ3JlYXRvcnMpKSAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCAnICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICsgJy4gJyArICdEaWQgeW91IHdyaXRlIFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cIiBpbnN0ZWFkIG9mIFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiPycpO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhY3Rpb25DcmVhdG9ycyk7XG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cblxuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh1bmRlZmluZWQsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZyhcIllvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nLiBcIiArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIERlZmluZVBsdWdpbiBmb3Igd2VicGFjayAoaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDAzMDAzMSkgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSwgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcyB9O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9uO1xuXG4vKipcbiAqIEhlbHBlciBmb3Igc3Vic2NyaXB0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikge1xuICBvYmoub24oZXYsIGZuKTtcbiAgcmV0dXJuIHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTtcbiAgICB9XG4gIH07XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIHRvQXJyYXkgPSByZXF1aXJlKCd0by1hcnJheScpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDpzb2NrZXQnKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIGhhc0JpbiA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIEludGVybmFsIGV2ZW50cyAoYmxhY2tsaXN0ZWQpLlxuICogVGhlc2UgZXZlbnRzIGNhbid0IGJlIGVtaXR0ZWQgYnkgdGhlIHVzZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIGV2ZW50cyA9IHtcbiAgY29ubmVjdDogMSxcbiAgY29ubmVjdF9lcnJvcjogMSxcbiAgY29ubmVjdF90aW1lb3V0OiAxLFxuICBjb25uZWN0aW5nOiAxLFxuICBkaXNjb25uZWN0OiAxLFxuICBlcnJvcjogMSxcbiAgcmVjb25uZWN0OiAxLFxuICByZWNvbm5lY3RfYXR0ZW1wdDogMSxcbiAgcmVjb25uZWN0X2ZhaWxlZDogMSxcbiAgcmVjb25uZWN0X2Vycm9yOiAxLFxuICByZWNvbm5lY3Rpbmc6IDEsXG4gIHBpbmc6IDEsXG4gIHBvbmc6IDFcbn07XG5cbi8qKlxuICogU2hvcnRjdXQgdG8gYEVtaXR0ZXIjZW1pdGAuXG4gKi9cblxudmFyIGVtaXQgPSBFbWl0dGVyLnByb3RvdHlwZS5lbWl0O1xuXG4vKipcbiAqIGBTb2NrZXRgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0IChpbywgbnNwLCBvcHRzKSB7XG4gIHRoaXMuaW8gPSBpbztcbiAgdGhpcy5uc3AgPSBuc3A7XG4gIHRoaXMuanNvbiA9IHRoaXM7IC8vIGNvbXBhdFxuICB0aGlzLmlkcyA9IDA7XG4gIHRoaXMuYWNrcyA9IHt9O1xuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgdGhpcy5mbGFncyA9IHt9O1xuICBpZiAob3B0cyAmJiBvcHRzLnF1ZXJ5KSB7XG4gICAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIH1cbiAgaWYgKHRoaXMuaW8uYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihTb2NrZXQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gb3BlbiwgY2xvc2UgYW5kIHBhY2tldCBldmVudHNcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnN1YkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc3VicykgcmV0dXJuO1xuXG4gIHZhciBpbyA9IHRoaXMuaW87XG4gIHRoaXMuc3VicyA9IFtcbiAgICBvbihpbywgJ29wZW4nLCBiaW5kKHRoaXMsICdvbm9wZW4nKSksXG4gICAgb24oaW8sICdwYWNrZXQnLCBiaW5kKHRoaXMsICdvbnBhY2tldCcpKSxcbiAgICBvbihpbywgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKVxuICBdO1xufTtcblxuLyoqXG4gKiBcIk9wZW5zXCIgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUub3BlbiA9XG5Tb2NrZXQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkgcmV0dXJuIHRoaXM7XG5cbiAgdGhpcy5zdWJFdmVudHMoKTtcbiAgdGhpcy5pby5vcGVuKCk7IC8vIGVuc3VyZSBvcGVuXG4gIGlmICgnb3BlbicgPT09IHRoaXMuaW8ucmVhZHlTdGF0ZSkgdGhpcy5vbm9wZW4oKTtcbiAgdGhpcy5lbWl0KCdjb25uZWN0aW5nJyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIGBtZXNzYWdlYCBldmVudC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgYXJncy51bnNoaWZ0KCdtZXNzYWdlJyk7XG4gIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlIGBlbWl0YC5cbiAqIElmIHRoZSBldmVudCBpcyBpbiBgZXZlbnRzYCwgaXQncyBlbWl0dGVkIG5vcm1hbGx5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBuYW1lXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKGV2KSB7XG4gIGlmIChldmVudHMuaGFzT3duUHJvcGVydHkoZXYpKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogKHRoaXMuZmxhZ3MuYmluYXJ5ICE9PSB1bmRlZmluZWQgPyB0aGlzLmZsYWdzLmJpbmFyeSA6IGhhc0JpbihhcmdzKSkgPyBwYXJzZXIuQklOQVJZX0VWRU5UIDogcGFyc2VyLkVWRU5ULFxuICAgIGRhdGE6IGFyZ3NcbiAgfTtcblxuICBwYWNrZXQub3B0aW9ucyA9IHt9O1xuICBwYWNrZXQub3B0aW9ucy5jb21wcmVzcyA9ICF0aGlzLmZsYWdzIHx8IGZhbHNlICE9PSB0aGlzLmZsYWdzLmNvbXByZXNzO1xuXG4gIC8vIGV2ZW50IGFjayBjYWxsYmFja1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSkge1xuICAgIGRlYnVnKCdlbWl0dGluZyBwYWNrZXQgd2l0aCBhY2sgaWQgJWQnLCB0aGlzLmlkcyk7XG4gICAgdGhpcy5hY2tzW3RoaXMuaWRzXSA9IGFyZ3MucG9wKCk7XG4gICAgcGFja2V0LmlkID0gdGhpcy5pZHMrKztcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZW5kQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgfVxuXG4gIHRoaXMuZmxhZ3MgPSB7fTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHBhY2tldC5uc3AgPSB0aGlzLm5zcDtcbiAgdGhpcy5pby5wYWNrZXQocGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBvcGVuYC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3RyYW5zcG9ydCBpcyBvcGVuIC0gY29ubmVjdGluZycpO1xuXG4gIC8vIHdyaXRlIGNvbm5lY3QgcGFja2V0IGlmIG5lY2Vzc2FyeVxuICBpZiAoJy8nICE9PSB0aGlzLm5zcCkge1xuICAgIGlmICh0aGlzLnF1ZXJ5KSB7XG4gICAgICB2YXIgcXVlcnkgPSB0eXBlb2YgdGhpcy5xdWVyeSA9PT0gJ29iamVjdCcgPyBwYXJzZXFzLmVuY29kZSh0aGlzLnF1ZXJ5KSA6IHRoaXMucXVlcnk7XG4gICAgICBkZWJ1Zygnc2VuZGluZyBjb25uZWN0IHBhY2tldCB3aXRoIHF1ZXJ5ICVzJywgcXVlcnkpO1xuICAgICAgdGhpcy5wYWNrZXQoe3R5cGU6IHBhcnNlci5DT05ORUNULCBxdWVyeTogcXVlcnl9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYWNrZXQoe3R5cGU6IHBhcnNlci5DT05ORUNUfSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBgY2xvc2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb25cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgZGVidWcoJ2Nsb3NlICglcyknLCByZWFzb24pO1xuICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gIGRlbGV0ZSB0aGlzLmlkO1xuICB0aGlzLmVtaXQoJ2Rpc2Nvbm5lY3QnLCByZWFzb24pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBzb2NrZXQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gcGFja2V0Lm5zcCA9PT0gdGhpcy5uc3A7XG4gIHZhciByb290TmFtZXNwYWNlRXJyb3IgPSBwYWNrZXQudHlwZSA9PT0gcGFyc2VyLkVSUk9SICYmIHBhY2tldC5uc3AgPT09ICcvJztcblxuICBpZiAoIXNhbWVOYW1lc3BhY2UgJiYgIXJvb3ROYW1lc3BhY2VFcnJvcikgcmV0dXJuO1xuXG4gIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICBjYXNlIHBhcnNlci5DT05ORUNUOlxuICAgICAgdGhpcy5vbmNvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQklOQVJZX0VWRU5UOlxuICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkFDSzpcbiAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQklOQVJZX0FDSzpcbiAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRElTQ09OTkVDVDpcbiAgICAgIHRoaXMub25kaXNjb25uZWN0KCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkVSUk9SOlxuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHBhY2tldC5kYXRhKTtcbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25ldmVudCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIGFyZ3MgPSBwYWNrZXQuZGF0YSB8fCBbXTtcbiAgZGVidWcoJ2VtaXR0aW5nIGV2ZW50ICVqJywgYXJncyk7XG5cbiAgaWYgKG51bGwgIT0gcGFja2V0LmlkKSB7XG4gICAgZGVidWcoJ2F0dGFjaGluZyBhY2sgY2FsbGJhY2sgdG8gZXZlbnQnKTtcbiAgICBhcmdzLnB1c2godGhpcy5hY2socGFja2V0LmlkKSk7XG4gIH1cblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5wdXNoKGFyZ3MpO1xuICB9XG59O1xuXG4vKipcbiAqIFByb2R1Y2VzIGFuIGFjayBjYWxsYmFjayB0byBlbWl0IHdpdGggYW4gZXZlbnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5hY2sgPSBmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2VudCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIC8vIHByZXZlbnQgZG91YmxlIGNhbGxiYWNrc1xuICAgIGlmIChzZW50KSByZXR1cm47XG4gICAgc2VudCA9IHRydWU7XG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgZGVidWcoJ3NlbmRpbmcgYWNrICVqJywgYXJncyk7XG5cbiAgICBzZWxmLnBhY2tldCh7XG4gICAgICB0eXBlOiBoYXNCaW4oYXJncykgPyBwYXJzZXIuQklOQVJZX0FDSyA6IHBhcnNlci5BQ0ssXG4gICAgICBpZDogaWQsXG4gICAgICBkYXRhOiBhcmdzXG4gICAgfSk7XG4gIH07XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGFja25vd2xlZ2VtZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25hY2sgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhY2spIHtcbiAgICBkZWJ1ZygnY2FsbGluZyBhY2sgJXMgd2l0aCAlaicsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgIGFjay5hcHBseSh0aGlzLCBwYWNrZXQuZGF0YSk7XG4gICAgZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICB9IGVsc2Uge1xuICAgIGRlYnVnKCdiYWQgYWNrICVzJywgcGFja2V0LmlkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3QnKTtcbiAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbn07XG5cbi8qKlxuICogRW1pdCBidWZmZXJlZCBldmVudHMgKHJlY2VpdmVkIGFuZCBlbWl0dGVkKS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXRCdWZmZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnJlY2VpdmVCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIHRoaXMucmVjZWl2ZUJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucGFja2V0KHRoaXMuc2VuZEJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnc2VydmVyIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgdGhpcy5kZXN0cm95KCk7XG4gIHRoaXMub25jbG9zZSgnaW8gc2VydmVyIGRpc2Nvbm5lY3QnKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZm9yY2VkIGNsaWVudC9zZXJ2ZXIgc2lkZSBkaXNjb25uZWN0aW9ucyxcbiAqIHRoaXMgbWV0aG9kIGVuc3VyZXMgdGhlIG1hbmFnZXIgc3RvcHMgdHJhY2tpbmcgdXMgYW5kXG4gKiB0aGF0IHJlY29ubmVjdGlvbnMgZG9uJ3QgZ2V0IHRyaWdnZXJlZCBmb3IgdGhpcy5cbiAqXG4gKiBAYXBpIHByaXZhdGUuXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSB7XG4gICAgLy8gY2xlYW4gc3Vic2NyaXB0aW9ucyB0byBhdm9pZCByZWNvbm5lY3Rpb25zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc3Vic1tpXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuc3VicyA9IG51bGw7XG4gIH1cblxuICB0aGlzLmlvLmRlc3Ryb3kodGhpcyk7XG59O1xuXG4vKipcbiAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXQgbWFudWFsbHkuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY2xvc2UgPVxuU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBkZWJ1ZygncGVyZm9ybWluZyBkaXNjb25uZWN0ICglcyknLCB0aGlzLm5zcCk7XG4gICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBwYXJzZXIuRElTQ09OTkVDVCB9KTtcbiAgfVxuXG4gIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gIHRoaXMuZGVzdHJveSgpO1xuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgdGhpcy5vbmNsb3NlKCdpbyBjbGllbnQgZGlzY29ubmVjdCcpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb21wcmVzcyBmbGFnLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaWYgYHRydWVgLCBjb21wcmVzc2VzIHRoZSBzZW5kaW5nIGRhdGFcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNvbXByZXNzID0gZnVuY3Rpb24gKGNvbXByZXNzKSB7XG4gIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSBjb21wcmVzcztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGJpbmFyeSBmbGFnXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB3aGV0aGVyIHRoZSBlbWl0dGVkIGRhdGEgY29udGFpbnMgYmluYXJ5XG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5iaW5hcnkgPSBmdW5jdGlvbiAoYmluYXJ5KSB7XG4gIHRoaXMuZmxhZ3MuYmluYXJ5ID0gYmluYXJ5O1xuICByZXR1cm4gdGhpcztcbn07XG4iLCJcbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXycuc3BsaXQoJycpXG4gICwgbGVuZ3RoID0gNjRcbiAgLCBtYXAgPSB7fVxuICAsIHNlZWQgPSAwXG4gICwgaSA9IDBcbiAgLCBwcmV2O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBlbmNvZGUobnVtKSB7XG4gIHZhciBlbmNvZGVkID0gJyc7XG5cbiAgZG8ge1xuICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcbiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIGxlbmd0aCk7XG4gIH0gd2hpbGUgKG51bSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50ZWdlciB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBpbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIHZhciBkZWNvZGVkID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XG4gIH1cblxuICByZXR1cm4gZGVjb2RlZDtcbn1cblxuLyoqXG4gKiBZZWFzdDogQSB0aW55IGdyb3dpbmcgaWQgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24geWVhc3QoKSB7XG4gIHZhciBub3cgPSBlbmNvZGUoK25ldyBEYXRlKCkpO1xuXG4gIGlmIChub3cgIT09IHByZXYpIHJldHVybiBzZWVkID0gMCwgcHJldiA9IG5vdztcbiAgcmV0dXJuIG5vdyArJy4nKyBlbmNvZGUoc2VlZCsrKTtcbn1cblxuLy9cbi8vIE1hcCBlYWNoIGNoYXJhY3RlciB0byBpdHMgaW5kZXguXG4vL1xuZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgbWFwW2FscGhhYmV0W2ldXSA9IGk7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIGB5ZWFzdGAsIGBlbmNvZGVgIGFuZCBgZGVjb2RlYCBmdW5jdGlvbnMuXG4vL1xueWVhc3QuZW5jb2RlID0gZW5jb2RlO1xueWVhc3QuZGVjb2RlID0gZGVjb2RlO1xubW9kdWxlLmV4cG9ydHMgPSB5ZWFzdDtcbiIsIi8qIGdsb2JhbCBCbG9iIEZpbGUgKi9cblxuLypcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJztcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0JpbmFyeTtcblxuLyoqXG4gKiBDaGVja3MgZm9yIGJpbmFyeSBkYXRhLlxuICpcbiAqIFN1cHBvcnRzIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEJsb2IgYW5kIEZpbGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFueXRoaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGhhc0JpbmFyeSAob2JqKSB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgQnVmZmVyLmlzQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8XG4gICAgKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpXG4gICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9oYXMtYmluYXJ5L3B1bGwvNFxuICBpZiAob2JqLnRvSlNPTiAmJiB0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGhhc0JpbmFyeShvYmoudG9KU09OKCksIHRydWUpO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG4vKipcbiAqIElzIFhIUjIgc3VwcG9ydGVkP1xuICovXG5cbnZhciBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbi8qKlxuICogUG9sbGluZyBpbnRlcmZhY2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmICghaGFzWEhSMiB8fCBmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFBvbGxpbmcsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucG9sbCgpO1xufTtcblxuLyoqXG4gKiBQYXVzZXMgcG9sbGluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9uUGF1c2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdwYXVzaW5nJztcblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgZGVidWcoJ3BhdXNlZCcpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdwYXVzZWQnO1xuICAgIG9uUGF1c2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ3BvbGxDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhdXNlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygncG9sbGluZycpO1xuICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICB0aGlzLmRvUG9sbCgpO1xuICB0aGlzLmVtaXQoJ3BvbGwnKTtcbn07XG5cbi8qKlxuICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkZWJ1ZygncG9sbGluZyBnb3QgZGF0YSAlcycsIGRhdGEpO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgaWYgKCdvcGVuaW5nJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICBzZWxmLm9uT3BlbigpO1xuICAgIH1cblxuICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICBpZiAoJ2Nsb3NlJyA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH07XG5cbiAgLy8gZGVjb2RlIHBheWxvYWRcbiAgcGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuXG4gIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BvbGxDb21wbGV0ZScpO1xuXG4gICAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnBvbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGNsb3NlICgpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBjbG9zZSBwYWNrZXQnKTtcbiAgICBzZWxmLndyaXRlKFt7IHR5cGU6ICdjbG9zZScgfV0pO1xuICB9XG5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBvcGVuIC0gY2xvc2luZycpO1xuICAgIGNsb3NlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgIGRlYnVnKCd0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2UnKTtcbiAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHZhciBjYWxsYmFja2ZuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfTtcblxuICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gIGlmIChmYWxzZSAhPT0gdGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnaHR0cHMnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgKCdodHRwJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBYSFIgPSByZXF1aXJlKCcuL3BvbGxpbmcteGhyJyk7XG52YXIgSlNPTlAgPSByZXF1aXJlKCcuL3BvbGxpbmctanNvbnAnKTtcbnZhciB3ZWJzb2NrZXQgPSByZXF1aXJlKCcuL3dlYnNvY2tldCcpO1xuXG4vKipcbiAqIEV4cG9ydCB0cmFuc3BvcnRzLlxuICovXG5cbmV4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7XG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcblxuLyoqXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqIERlY2lkZXMgb24geGhyIHZzIGpzb25wIGJhc2VkIG9uIGZlYXR1cmUgZGV0ZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIHhocjtcbiAgdmFyIHhkID0gZmFsc2U7XG4gIHZhciB4cyA9IGZhbHNlO1xuICB2YXIganNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtcblxuICBpZiAoZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHhkID0gb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG5cbiAgb3B0cy54ZG9tYWluID0geGQ7XG4gIG9wdHMueHNjaGVtZSA9IHhzO1xuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG5cbiAgaWYgKCdvcGVuJyBpbiB4aHIgJiYgIW9wdHMuZm9yY2VKU09OUCkge1xuICAgIHJldHVybiBuZXcgWEhSKG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghanNvbnApIHRocm93IG5ldyBFcnJvcignSlNPTlAgZGlzYWJsZWQnKTtcbiAgICByZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICB9XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZWlvID0gcmVxdWlyZSgnZW5naW5lLmlvLWNsaWVudCcpO1xudmFyIFNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDptYW5hZ2VyJyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBCYWNrb2ZmID0gcmVxdWlyZSgnYmFja28yJyk7XG5cbi8qKlxuICogSUU2KyBoYXNPd25Qcm9wZXJ0eVxuICovXG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNYW5hZ2VyO1xuXG4vKipcbiAqIGBNYW5hZ2VyYCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5naW5lIGluc3RhbmNlIG9yIGVuZ2luZSB1cmkvb3B0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWFuYWdlciAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYW5hZ2VyKSkgcmV0dXJuIG5ldyBNYW5hZ2VyKHVyaSwgb3B0cyk7XG4gIGlmICh1cmkgJiYgKCdvYmplY3QnID09PSB0eXBlb2YgdXJpKSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCAnL3NvY2tldC5pbyc7XG4gIHRoaXMubnNwcyA9IHt9O1xuICB0aGlzLnN1YnMgPSBbXTtcbiAgdGhpcy5vcHRzID0gb3B0cztcbiAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgIG1pbjogdGhpcy5yZWNvbm5lY3Rpb25EZWxheSgpLFxuICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKClcbiAgfSk7XG4gIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMudXJpID0gdXJpO1xuICB0aGlzLmNvbm5lY3RpbmcgPSBbXTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdmFyIF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gIHRoaXMuZW5jb2RlciA9IG5ldyBfcGFyc2VyLkVuY29kZXIoKTtcbiAgdGhpcy5kZWNvZGVyID0gbmV3IF9wYXJzZXIuRGVjb2RlcigpO1xuICB0aGlzLmF1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBQcm9wYWdhdGUgZ2l2ZW4gZXZlbnQgdG8gc29ja2V0cyBhbmQgZW1pdCBvbiBgdGhpc2BcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5lbWl0QWxsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmVtaXQuYXBwbHkodGhpcy5uc3BzW25zcF0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBgc29ja2V0LmlkYCBvZiBhbGwgc29ja2V0c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVNvY2tldElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmlkID0gdGhpcy5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGdlbmVyYXRlIGBzb2NrZXQuaWRgIGZvciB0aGUgZ2l2ZW4gYG5zcGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbnNwXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKG5zcCkge1xuICByZXR1cm4gKG5zcCA9PT0gJy8nID8gJycgOiAobnNwICsgJyMnKSkgKyB0aGlzLmVuZ2luZS5pZDtcbn07XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKE1hbmFnZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgcmVjb25uZWN0aW9uYCBjb25maWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB0cnVlL2ZhbHNlIGlmIGl0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHJlY29ubmVjdFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb24gPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBjb25maWcuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYmVmb3JlIGdpdmluZyB1cFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xuICB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNaW4odik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuTWFuYWdlci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3RvciA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldEppdHRlcih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1heGltdW0gZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWF4KHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29ubmVjdGlvbiB0aW1lb3V0LiBgZmFsc2VgIHRvIGRpc2FibGVcbiAqXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUubWF5YmVSZWNvbm5lY3RPbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgaWYgKCF0aGlzLnJlY29ubmVjdGluZyAmJiB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9uYWwsIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9wZW4gPVxuTWFuYWdlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChmbiwgb3B0cykge1xuICBkZWJ1ZygncmVhZHlTdGF0ZSAlcycsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIGlmICh+dGhpcy5yZWFkeVN0YXRlLmluZGV4T2YoJ29wZW4nKSkgcmV0dXJuIHRoaXM7XG5cbiAgZGVidWcoJ29wZW5pbmcgJXMnLCB0aGlzLnVyaSk7XG4gIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSBmYWxzZTtcblxuICAvLyBlbWl0IGBvcGVuYFxuICB2YXIgb3BlblN1YiA9IG9uKHNvY2tldCwgJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbm9wZW4oKTtcbiAgICBmbiAmJiBmbigpO1xuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X2Vycm9yYFxuICB2YXIgZXJyb3JTdWIgPSBvbihzb2NrZXQsICdlcnJvcicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGVidWcoJ2Nvbm5lY3RfZXJyb3InKTtcbiAgICBzZWxmLmNsZWFudXAoKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfZXJyb3InLCBkYXRhKTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gZXJyb3InKTtcbiAgICAgIGVyci5kYXRhID0gZGF0YTtcbiAgICAgIGZuKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICBzZWxmLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X3RpbWVvdXRgXG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuXG4gICAgLy8gc2V0IHRpbWVyXG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7XG4gICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsICd0aW1lb3V0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfdGltZW91dCcsIHRpbWVvdXQpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5zdWJzLnB1c2gob3BlblN1Yik7XG4gIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnb3BlbicpO1xuXG4gIC8vIGNsZWFyIG9sZCBzdWJzXG4gIHRoaXMuY2xlYW51cCgpO1xuXG4gIC8vIG1hcmsgYXMgb3BlblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuXG4gIC8vIGFkZCBuZXcgc3Vic1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2RhdGEnLCBiaW5kKHRoaXMsICdvbmRhdGEnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwaW5nJywgYmluZCh0aGlzLCAnb25waW5nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncG9uZycsIGJpbmQodGhpcywgJ29ucG9uZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Vycm9yJywgYmluZCh0aGlzLCAnb25lcnJvcicpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgJ2RlY29kZWQnLCBiaW5kKHRoaXMsICdvbmRlY29kZWQnKSkpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTtcbiAgdGhpcy5lbWl0QWxsKCdwaW5nJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0QWxsKCdwb25nJywgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5lbWl0QWxsKCdlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAobnNwLCBvcHRzKSB7XG4gIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNvY2tldC5vbignY29ubmVjdGluZycsIG9uQ29ubmVjdGluZyk7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc29ja2V0LmlkID0gc2VsZi5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvQ29ubmVjdCkge1xuICAgICAgLy8gbWFudWFsbHkgY2FsbCBoZXJlIHNpbmNlIGNvbm5lY3RpbmcgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGxpc3RlbmluZ1xuICAgICAgb25Db25uZWN0aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBpZiAoIX5pbmRleE9mKHNlbGYuY29ubmVjdGluZywgc29ja2V0KSkge1xuICAgICAgc2VsZi5jb25uZWN0aW5nLnB1c2goc29ja2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ja2V0O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgdmFyIGluZGV4ID0gaW5kZXhPZih0aGlzLmNvbm5lY3RpbmcsIHNvY2tldCk7XG4gIGlmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO1xuICBpZiAodGhpcy5jb25uZWN0aW5nLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHRoaXMuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAocGFja2V0LnF1ZXJ5ICYmIHBhY2tldC50eXBlID09PSAwKSBwYWNrZXQubnNwICs9ICc/JyArIHBhY2tldC5xdWVyeTtcblxuICBpZiAoIXNlbGYuZW5jb2RpbmcpIHtcbiAgICAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgdG8gZW5naW5lIHdpdGggcmVzdWx0XG4gICAgc2VsZi5lbmNvZGluZyA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2VsZi5lbmNvZGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5wcm9jZXNzUGFja2V0UXVldWUoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHsgLy8gYWRkIHBhY2tldCB0byB0aGUgcXVldWVcbiAgICBzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cbn07XG5cbi8qKlxuICogSWYgcGFja2V0IGJ1ZmZlciBpcyBub24tZW1wdHksIGJlZ2lucyBlbmNvZGluZyB0aGVcbiAqIG5leHQgcGFja2V0IGluIGxpbmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1BhY2tldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRCdWZmZXIubGVuZ3RoID4gMCAmJiAhdGhpcy5lbmNvZGluZykge1xuICAgIHZhciBwYWNrID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTtcbiAgICB0aGlzLnBhY2tldChwYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuXG4gIHZhciBzdWJzTGVuZ3RoID0gdGhpcy5zdWJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzLnNoaWZ0KCk7XG4gICAgc3ViLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG5cbiAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlID1cbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdkaXNjb25uZWN0Jyk7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGBvbmNsb3NlYCB3aWxsIG5vdCBmaXJlIGJlY2F1c2VcbiAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICBpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1Zygnb25jbG9zZScpO1xuXG4gIHRoaXMuY2xlYW51cCgpO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24pO1xuXG4gIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgZGVidWcoJ3JlY29ubmVjdCBmYWlsZWQnKTtcbiAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdF9mYWlsZWQnKTtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgIGRlYnVnKCd3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQnLCBkZWxheSk7XG5cbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfYXR0ZW1wdCcsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdGluZycsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG5cbiAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBzZWxmLm9wZW4oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBhdHRlbXB0IGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2Vycm9yJywgZXJyLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3Qgc3VjY2VzcycpO1xuICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVsYXkpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMudXBkYXRlU29ja2V0SWRzKCk7XG4gIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0JywgYXR0ZW1wdCk7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG52YXIgd2l0aE5hdGl2ZUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nO1xudmFyIHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc1ZpZXcgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5BcnJheUJ1ZmZlci5pc1ZpZXc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iai5idWZmZXIgaW5zdGFuY2VvZiBnbG9iYWwuQXJyYXlCdWZmZXI7IH07XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAgICAgICAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBnbG9iYWwuQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKTtcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXHJcbiAqIFBhcnNlcyBhbiBVUklcclxuICpcclxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcclxuXHJcbnZhciBwYXJ0cyA9IFtcclxuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xyXG5dO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcclxuICAgIHZhciBzcmMgPSBzdHIsXHJcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXHJcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXHJcbiAgICAgICAgdXJpID0ge30sXHJcbiAgICAgICAgaSA9IDE0O1xyXG5cclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcclxuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVyaTtcclxufTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgcmVxdWlyZSgnc29ja2V0LmlvLWNsaWVudCcpKCk7IiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbC5ob2lzdE5vblJlYWN0U3RhdGljcyA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIFxuICAgIHZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgICAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgICAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICAgICAgbWl4aW5zOiB0cnVlLFxuICAgICAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgICAgIHR5cGU6IHRydWVcbiAgICB9O1xuICAgIFxuICAgIHZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICBsZW5ndGg6IHRydWUsXG4gICAgICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICAgICAgY2FsbGVyOiB0cnVlLFxuICAgICAgICBjYWxsZWU6IHRydWUsXG4gICAgICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICAgICAgYXJpdHk6IHRydWVcbiAgICB9O1xuICAgIFxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIHZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgICB2YXIgb2JqZWN0UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoT2JqZWN0KTtcbiAgICBcbiAgICByZXR1cm4gZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHsgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7IC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfTtcbn0pKSk7XG4iLCJpbXBvcnQge1xuICBJTlBVVF9DSEFOR0UsXG4gIFNFTkRfTUVTU0FHRSxcbiAgUkVDRUlWRV9NRVNTQUdFLFxuICBSRVRSSUVWRV9DT05WRVJTQVRJT04sXG4gIFJFQ0VJVkVfQ09OVkVSU0FUSU9OLFxuICBNRVNTQUdFX1NFTlRcbn0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb25zJztcbmltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gJ3JlZHV4JztcblxuZnVuY3Rpb24gY3VycmVudElucHV0KHN0YXRlID0ge1xuICB1c2VybmFtZTogJycsXG4gIGN1cnJlbnRNZXNzYWdlOiAnJ1xufSwgYWN0aW9uKSB7XG4gIHN3aXRjaChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgSU5QVVRfQ0hBTkdFOlxuICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgW2FjdGlvbi5uYW1lXTogYWN0aW9uLnZhbHVlfTtcbiAgICBjYXNlIFNFTkRfTUVTU0FHRTpcbiAgICAgIGlmKGFjdGlvbi5zdGF0dXMgJiYgYWN0aW9uLnN0YXR1cyA9PT0gJ1N1Y2Nlc3MnKXtcbiAgICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgY3VycmVudE1lc3NhZ2U6ICcnfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtZXNzYWdlcyhzdGF0ZSA9IFtdLCBhY3Rpb24pIHtcbiAgc3dpdGNoKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBSRUNFSVZFX01FU1NBR0U6XG4gICAgICByZXR1cm4gWy4uLnN0YXRlLCBhY3Rpb24ubWVzc2FnZV07XG4gICAgY2FzZSBSRUNFSVZFX0NPTlZFUlNBVElPTjpcbiAgICAgIHJldHVybiBhY3Rpb24ubWVzc2FnZXM7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5jb25zdCBjaGF0QXBwID0gY29tYmluZVJlZHVjZXJzKHtcbiAgY3VycmVudElucHV0LFxuICBtZXNzYWdlc1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNoYXRBcHA7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSB0aHVuazsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCAnLi9NZXNzYWdlTGlzdC5zY3NzJztcbmltcG9ydCBTb2NrZXQgZnJvbSAnLi4vU29ja2V0JztcblxuY29uc3QgTWVzc2FnZSA9ICh7dGV4dCwgdXNlcm5hbWUsIGRhdGV9KSA9PiAoXG4gIDxwPlt7ZGF0ZX1dIDxzdHJvbmc+e3VzZXJuYW1lfTwvc3Ryb25nPjoge3RleHR9PC9wPlxuKTtcblxuY2xhc3MgTWVzc2FnZUxpc3QgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBpZD0nbWVzc2FnZS1saXN0Jz5cbiAgICAgICAgPHA+TWVzc2FnZSBsaXN0PC9wPlxuICAgICAgICB7dGhpcy5wcm9wcy5tZXNzYWdlcy5tYXAobSA9PiA8TWVzc2FnZSB7Li4ubX0gLz4pfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiB7XG4gIHJldHVybiB7XG4gICAgbWVzc2FnZXM6IHN0YXRlLm1lc3NhZ2VzXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoTWVzc2FnZUxpc3QpOyIsIlxuLyoqXG4gKiBFeHBvc2UgYEJhY2tvZmZgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQmFja29mZjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGJhY2tvZmYgdGltZXIgd2l0aCBgb3B0c2AuXG4gKlxuICogLSBgbWluYCBpbml0aWFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIFsxMDBdXG4gKiAtIGBtYXhgIG1heCB0aW1lb3V0IFsxMDAwMF1cbiAqIC0gYGppdHRlcmAgWzBdXG4gKiAtIGBmYWN0b3JgIFsyXVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEJhY2tvZmYob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdGhpcy5tcyA9IG9wdHMubWluIHx8IDEwMDtcbiAgdGhpcy5tYXggPSBvcHRzLm1heCB8fCAxMDAwMDtcbiAgdGhpcy5mYWN0b3IgPSBvcHRzLmZhY3RvciB8fCAyO1xuICB0aGlzLmppdHRlciA9IG9wdHMuaml0dGVyID4gMCAmJiBvcHRzLmppdHRlciA8PSAxID8gb3B0cy5qaXR0ZXIgOiAwO1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtcyA9IHRoaXMubXMgKiBNYXRoLnBvdyh0aGlzLmZhY3RvciwgdGhpcy5hdHRlbXB0cysrKTtcbiAgaWYgKHRoaXMuaml0dGVyKSB7XG4gICAgdmFyIHJhbmQgPSAgTWF0aC5yYW5kb20oKTtcbiAgICB2YXIgZGV2aWF0aW9uID0gTWF0aC5mbG9vcihyYW5kICogdGhpcy5qaXR0ZXIgKiBtcyk7XG4gICAgbXMgPSAoTWF0aC5mbG9vcihyYW5kICogMTApICYgMSkgPT0gMCAgPyBtcyAtIGRldmlhdGlvbiA6IG1zICsgZGV2aWF0aW9uO1xuICB9XG4gIHJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIG51bWJlciBvZiBhdHRlbXB0cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWluaW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWluID0gZnVuY3Rpb24obWluKXtcbiAgdGhpcy5tcyA9IG1pbjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtYXhpbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbihtYXgpe1xuICB0aGlzLm1heCA9IG1heDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBqaXR0ZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldEppdHRlciA9IGZ1bmN0aW9uKGppdHRlcil7XG4gIHRoaXMuaml0dGVyID0gaml0dGVyO1xufTtcblxuIiwibW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5XG5cbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCwgaW5kZXgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXVxuXG4gICAgaW5kZXggPSBpbmRleCB8fCAwXG5cbiAgICBmb3IgKHZhciBpID0gaW5kZXggfHwgMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlcbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDp3ZWJzb2NrZXQnKTtcbnZhciBCcm93c2VyV2ViU29ja2V0ID0gZ2xvYmFsLldlYlNvY2tldCB8fCBnbG9iYWwuTW96V2ViU29ja2V0O1xudmFyIE5vZGVXZWJTb2NrZXQ7XG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdHJ5IHtcbiAgICBOb2RlV2ViU29ja2V0ID0gcmVxdWlyZSgnd3MnKTtcbiAgfSBjYXRjaCAoZSkgeyB9XG59XG5cbi8qKlxuICogR2V0IGVpdGhlciB0aGUgYFdlYlNvY2tldGAgb3IgYE1veldlYlNvY2tldGAgZ2xvYmFsc1xuICogaW4gdGhlIGJyb3dzZXIgb3IgdHJ5IHRvIHJlc29sdmUgV2ViU29ja2V0LWNvbXBhdGlibGVcbiAqIGludGVyZmFjZSBleHBvc2VkIGJ5IGB3c2AgZm9yIE5vZGUtbGlrZSBlbnZpcm9ubWVudC5cbiAqL1xuXG52YXIgV2ViU29ja2V0ID0gQnJvd3NlcldlYlNvY2tldDtcbmlmICghV2ViU29ja2V0ICYmIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIFdlYlNvY2tldCA9IE5vZGVXZWJTb2NrZXQ7XG59XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBXUztcblxuLyoqXG4gKiBXZWJTb2NrZXQgdHJhbnNwb3J0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkge09iamVjdH0gY29ubmVjdGlvbiBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFdTIChvcHRzKSB7XG4gIHZhciBmb3JjZUJhc2U2NCA9IChvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQpO1xuICBpZiAoZm9yY2VCYXNlNjQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IG9wdHMucGVyTWVzc2FnZURlZmxhdGU7XG4gIHRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0ID0gQnJvd3NlcldlYlNvY2tldCAmJiAhb3B0cy5mb3JjZU5vZGU7XG4gIHRoaXMucHJvdG9jb2xzID0gb3B0cy5wcm90b2NvbHM7XG4gIGlmICghdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICBXZWJTb2NrZXQgPSBOb2RlV2ViU29ja2V0O1xuICB9XG4gIFRyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxuICovXG5cbmluaGVyaXQoV1MsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XUy5wcm90b3R5cGUubmFtZSA9ICd3ZWJzb2NrZXQnO1xuXG4vKlxuICogV2ViU29ja2V0cyBzdXBwb3J0IGJpbmFyeVxuICovXG5cbldTLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogT3BlbnMgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgLy8gbGV0IHByb2JlIHRpbWVvdXRcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdXJpID0gdGhpcy51cmkoKTtcbiAgdmFyIHByb3RvY29scyA9IHRoaXMucHJvdG9jb2xzO1xuICB2YXIgb3B0cyA9IHtcbiAgICBhZ2VudDogdGhpcy5hZ2VudCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZVxuICB9O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgb3B0cy5oZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG4gIH1cbiAgaWYgKHRoaXMubG9jYWxBZGRyZXNzKSB7XG4gICAgb3B0cy5sb2NhbEFkZHJlc3MgPSB0aGlzLmxvY2FsQWRkcmVzcztcbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy53cyA9IHRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0ID8gKHByb3RvY29scyA/IG5ldyBXZWJTb2NrZXQodXJpLCBwcm90b2NvbHMpIDogbmV3IFdlYlNvY2tldCh1cmkpKSA6IG5ldyBXZWJTb2NrZXQodXJpLCBwcm90b2NvbHMsIG9wdHMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIH1cblxuICBpZiAodGhpcy53cy5iaW5hcnlUeXBlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy53cy5zdXBwb3J0cyAmJiB0aGlzLndzLnN1cHBvcnRzLmJpbmFyeSkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdub2RlYnVmZmVyJztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICB9XG5cbiAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xufTtcblxuLyoqXG4gKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc29ja2V0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy53cy5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbk9wZW4oKTtcbiAgfTtcbiAgdGhpcy53cy5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25DbG9zZSgpO1xuICB9O1xuICB0aGlzLndzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldikge1xuICAgIHNlbGYub25EYXRhKGV2LmRhdGEpO1xuICB9O1xuICB0aGlzLndzLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcignd2Vic29ja2V0IGVycm9yJywgZSk7XG4gIH07XG59O1xuXG4vKipcbiAqIFdyaXRlcyBkYXRhIHRvIHNvY2tldC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBvZiBwYWNrZXRzLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgLy8gZW5jb2RlUGFja2V0IGVmZmljaWVudCBhcyBpdCB1c2VzIFdTIGZyYW1pbmdcbiAgLy8gbm8gbmVlZCBmb3IgZW5jb2RlUGF5bG9hZFxuICB2YXIgdG90YWwgPSBwYWNrZXRzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB0b3RhbDsgaSA8IGw7IGkrKykge1xuICAgIChmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICBwYXJzZXIuZW5jb2RlUGFja2V0KHBhY2tldCwgc2VsZi5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKCFzZWxmLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgIC8vIGFsd2F5cyBjcmVhdGUgYSBuZXcgb2JqZWN0IChHSC00MzcpXG4gICAgICAgICAgdmFyIG9wdHMgPSB7fTtcbiAgICAgICAgICBpZiAocGFja2V0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBwYWNrZXQub3B0aW9ucy5jb21wcmVzcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VsZi5wZXJNZXNzYWdlRGVmbGF0ZSkge1xuICAgICAgICAgICAgdmFyIGxlbiA9ICdzdHJpbmcnID09PSB0eXBlb2YgZGF0YSA/IGdsb2JhbC5CdWZmZXIuYnl0ZUxlbmd0aChkYXRhKSA6IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGxlbiA8IHNlbGYucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb21ldGltZXMgdGhlIHdlYnNvY2tldCBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZCBidXQgdGhlIGJyb3dzZXIgZGlkbid0XG4gICAgICAgIC8vIGhhdmUgYSBjaGFuY2Ugb2YgaW5mb3JtaW5nIHVzIGFib3V0IGl0IHlldCwgaW4gdGhhdCBjYXNlIHNlbmQgd2lsbFxuICAgICAgICAvLyB0aHJvdyBhbiBlcnJvclxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChzZWxmLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgICAgLy8gVHlwZUVycm9yIGlzIHRocm93biB3aGVuIHBhc3NpbmcgdGhlIHNlY29uZCBhcmd1bWVudCBvbiBTYWZhcmlcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEsIG9wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlYnVnKCd3ZWJzb2NrZXQgY2xvc2VkIGJlZm9yZSBvbmNsb3NlIGV2ZW50Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAtLXRvdGFsIHx8IGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pKHBhY2tldHNbaV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZG9uZSAoKSB7XG4gICAgc2VsZi5lbWl0KCdmbHVzaCcpO1xuXG4gICAgLy8gZmFrZSBkcmFpblxuICAgIC8vIGRlZmVyIHRvIG5leHQgdGljayB0byBhbGxvdyBTb2NrZXQgdG8gY2xlYXIgd3JpdGVCdWZmZXJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgICAgc2VsZi5lbWl0KCdkcmFpbicpO1xuICAgIH0sIDApO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGNsb3NlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIFRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIHRoaXMud3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy53cy5jbG9zZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLnVyaSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgdmFyIHNjaGVtYSA9IHRoaXMuc2VjdXJlID8gJ3dzcycgOiAnd3MnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnd3NzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgKCd3cycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gODApKSkge1xuICAgIHBvcnQgPSAnOicgKyB0aGlzLnBvcnQ7XG4gIH1cblxuICAvLyBhcHBlbmQgdGltZXN0YW1wIHRvIFVSSVxuICBpZiAodGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIC8vIGNvbW11bmljYXRlIGJpbmFyeSBzdXBwb3J0IGNhcGFiaWxpdGllc1xuICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkpIHtcbiAgICBxdWVyeS5iNjQgPSAxO1xuICB9XG5cbiAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgLy8gcHJlcGVuZCA/IHRvIHF1ZXJ5XG4gIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9ICc/JyArIHF1ZXJ5O1xuICB9XG5cbiAgdmFyIGlwdjYgPSB0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHJldHVybiBzY2hlbWEgKyAnOi8vJyArIChpcHY2ID8gJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyA6IHRoaXMuaG9zdG5hbWUpICsgcG9ydCArIHRoaXMucGF0aCArIHF1ZXJ5O1xufTtcblxuLyoqXG4gKiBGZWF0dXJlIGRldGVjdGlvbiBmb3IgV2ViU29ja2V0LlxuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHdoZXRoZXIgdGhpcyB0cmFuc3BvcnQgaXMgYXZhaWxhYmxlLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XUy5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIVdlYlNvY2tldCAmJiAhKCdfX2luaXRpYWxpemUnIGluIFdlYlNvY2tldCAmJiB0aGlzLm5hbWUgPT09IFdTLnByb3RvdHlwZS5uYW1lKTtcbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gSlNPTlBQb2xsaW5nO1xuXG4vKipcbiAqIENhY2hlZCByZWd1bGFyIGV4cHJlc3Npb25zLlxuICovXG5cbnZhciByTmV3bGluZSA9IC9cXG4vZztcbnZhciByRXNjYXBlZE5ld2xpbmUgPSAvXFxcXG4vZztcblxuLyoqXG4gKiBHbG9iYWwgSlNPTlAgY2FsbGJhY2tzLlxuICovXG5cbnZhciBjYWxsYmFja3M7XG5cbi8qKlxuICogTm9vcC5cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7IH1cblxuLyoqXG4gKiBKU09OUCBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBKU09OUFBvbGxpbmcgKG9wdHMpIHtcbiAgUG9sbGluZy5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gIHRoaXMucXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuXG4gIC8vIGRlZmluZSBnbG9iYWwgY2FsbGJhY2tzIGFycmF5IGlmIG5vdCBwcmVzZW50XG4gIC8vIHdlIGRvIHRoaXMgaGVyZSAobGF6aWx5KSB0byBhdm9pZCB1bm5lZWRlZCBnbG9iYWwgcG9sbHV0aW9uXG4gIGlmICghY2FsbGJhY2tzKSB7XG4gICAgLy8gd2UgbmVlZCB0byBjb25zaWRlciBtdWx0aXBsZSBlbmdpbmVzIGluIHRoZSBzYW1lIHBhZ2VcbiAgICBpZiAoIWdsb2JhbC5fX19laW8pIGdsb2JhbC5fX19laW8gPSBbXTtcbiAgICBjYWxsYmFja3MgPSBnbG9iYWwuX19fZWlvO1xuICB9XG5cbiAgLy8gY2FsbGJhY2sgaWRlbnRpZmllclxuICB0aGlzLmluZGV4ID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAvLyBhZGQgY2FsbGJhY2sgdG8ganNvbnAgZ2xvYmFsXG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKG1zZykge1xuICAgIHNlbGYub25EYXRhKG1zZyk7XG4gIH0pO1xuXG4gIC8vIGFwcGVuZCB0byBxdWVyeSBzdHJpbmdcbiAgdGhpcy5xdWVyeS5qID0gdGhpcy5pbmRleDtcblxuICAvLyBwcmV2ZW50IHNwdXJpb3VzIGVycm9ycyBmcm9tIGJlaW5nIGVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIHVubG9hZGVkXG4gIGlmIChnbG9iYWwuZG9jdW1lbnQgJiYgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuc2NyaXB0KSBzZWxmLnNjcmlwdC5vbmVycm9yID0gZW1wdHk7XG4gICAgfSwgZmFsc2UpO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbmluaGVyaXQoSlNPTlBQb2xsaW5nLCBQb2xsaW5nKTtcblxuLypcbiAqIEpTT05QIG9ubHkgc3VwcG9ydHMgYmluYXJ5IGFzIGJhc2U2NCBlbmNvZGVkIHN0cmluZ3NcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG5cbi8qKlxuICogQ2xvc2VzIHRoZSBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gIH1cblxuICBpZiAodGhpcy5mb3JtKSB7XG4gICAgdGhpcy5mb3JtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5mb3JtKTtcbiAgICB0aGlzLmZvcm0gPSBudWxsO1xuICAgIHRoaXMuaWZyYW1lID0gbnVsbDtcbiAgfVxuXG4gIFBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogU3RhcnRzIGEgcG9sbCBjeWNsZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvUG9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG5cbiAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgc2NyaXB0LnNyYyA9IHRoaXMudXJpKCk7XG4gIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ2pzb25wIHBvbGwgZXJyb3InLCBlKTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0QXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XG4gIGlmIChpbnNlcnRBdCkge1xuICAgIGluc2VydEF0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgaW5zZXJ0QXQpO1xuICB9IGVsc2Uge1xuICAgIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gIH1cbiAgdGhpcy5zY3JpcHQgPSBzY3JpcHQ7XG5cbiAgdmFyIGlzVUFnZWNrbyA9ICd1bmRlZmluZWQnICE9PSB0eXBlb2YgbmF2aWdhdG9yICYmIC9nZWNrby9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgaWYgKGlzVUFnZWNrbykge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgIH0sIDEwMCk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIHdpdGggYSBoaWRkZW4gaWZyYW1lLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1dyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGZuKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoIXRoaXMuZm9ybSkge1xuICAgIHZhciBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgIHZhciBhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICB2YXIgaWQgPSB0aGlzLmlmcmFtZUlkID0gJ2Vpb19pZnJhbWVfJyArIHRoaXMuaW5kZXg7XG4gICAgdmFyIGlmcmFtZTtcblxuICAgIGZvcm0uY2xhc3NOYW1lID0gJ3NvY2tldGlvJztcbiAgICBmb3JtLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBmb3JtLnN0eWxlLnRvcCA9ICctMTAwMHB4JztcbiAgICBmb3JtLnN0eWxlLmxlZnQgPSAnLTEwMDBweCc7XG4gICAgZm9ybS50YXJnZXQgPSBpZDtcbiAgICBmb3JtLm1ldGhvZCA9ICdQT1NUJztcbiAgICBmb3JtLnNldEF0dHJpYnV0ZSgnYWNjZXB0LWNoYXJzZXQnLCAndXRmLTgnKTtcbiAgICBhcmVhLm5hbWUgPSAnZCc7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChhcmVhKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xuXG4gICAgdGhpcy5mb3JtID0gZm9ybTtcbiAgICB0aGlzLmFyZWEgPSBhcmVhO1xuICB9XG5cbiAgdGhpcy5mb3JtLmFjdGlvbiA9IHRoaXMudXJpKCk7XG5cbiAgZnVuY3Rpb24gY29tcGxldGUgKCkge1xuICAgIGluaXRJZnJhbWUoKTtcbiAgICBmbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdElmcmFtZSAoKSB7XG4gICAgaWYgKHNlbGYuaWZyYW1lKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZWxmLmZvcm0ucmVtb3ZlQ2hpbGQoc2VsZi5pZnJhbWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzZWxmLm9uRXJyb3IoJ2pzb25wIHBvbGxpbmcgaWZyYW1lIHJlbW92YWwgZXJyb3InLCBlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgLy8gaWU2IGR5bmFtaWMgaWZyYW1lcyB3aXRoIHRhcmdldD1cIlwiIHN1cHBvcnQgKHRoYW5rcyBDaHJpcyBMYW1iYWNoZXIpXG4gICAgICB2YXIgaHRtbCA9ICc8aWZyYW1lIHNyYz1cImphdmFzY3JpcHQ6MFwiIG5hbWU9XCInICsgc2VsZi5pZnJhbWVJZCArICdcIj4nO1xuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChodG1sKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGlmcmFtZS5uYW1lID0gc2VsZi5pZnJhbWVJZDtcbiAgICAgIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDowJztcbiAgICB9XG5cbiAgICBpZnJhbWUuaWQgPSBzZWxmLmlmcmFtZUlkO1xuXG4gICAgc2VsZi5mb3JtLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgc2VsZi5pZnJhbWUgPSBpZnJhbWU7XG4gIH1cblxuICBpbml0SWZyYW1lKCk7XG5cbiAgLy8gZXNjYXBlIFxcbiB0byBwcmV2ZW50IGl0IGZyb20gYmVpbmcgY29udmVydGVkIGludG8gXFxyXFxuIGJ5IHNvbWUgVUFzXG4gIC8vIGRvdWJsZSBlc2NhcGluZyBpcyByZXF1aXJlZCBmb3IgZXNjYXBlZCBuZXcgbGluZXMgYmVjYXVzZSB1bmVzY2FwaW5nIG9mIG5ldyBsaW5lcyBjYW4gYmUgZG9uZSBzYWZlbHkgb24gc2VydmVyLXNpZGVcbiAgZGF0YSA9IGRhdGEucmVwbGFjZShyRXNjYXBlZE5ld2xpbmUsICdcXFxcXFxuJyk7XG4gIHRoaXMuYXJlYS52YWx1ZSA9IGRhdGEucmVwbGFjZShyTmV3bGluZSwgJ1xcXFxuJyk7XG5cbiAgdHJ5IHtcbiAgICB0aGlzLmZvcm0uc3VibWl0KCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgaWYgKHRoaXMuaWZyYW1lLmF0dGFjaEV2ZW50KSB7XG4gICAgdGhpcy5pZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaWZyYW1lLnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaWZyYW1lLm9ubG9hZCA9IGNvbXBsZXRlO1xuICB9XG59O1xuIiwiLyoqXG4gKiBDcmVhdGUgYSBibG9iIGJ1aWxkZXIgZXZlbiB3aGVuIHZlbmRvciBwcmVmaXhlcyBleGlzdFxuICovXG5cbnZhciBCbG9iQnVpbGRlciA9IGdsb2JhbC5CbG9iQnVpbGRlclxuICB8fCBnbG9iYWwuV2ViS2l0QmxvYkJ1aWxkZXJcbiAgfHwgZ2xvYmFsLk1TQmxvYkJ1aWxkZXJcbiAgfHwgZ2xvYmFsLk1vekJsb2JCdWlsZGVyO1xuXG4vKipcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3IgaXMgc3VwcG9ydGVkXG4gKi9cblxudmFyIGJsb2JTdXBwb3J0ZWQgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGEgPSBuZXcgQmxvYihbJ2hpJ10pO1xuICAgIHJldHVybiBhLnNpemUgPT09IDI7XG4gIH0gY2F0Y2goZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSkoKTtcblxuLyoqXG4gKiBDaGVjayBpZiBCbG9iIGNvbnN0cnVjdG9yIHN1cHBvcnRzIEFycmF5QnVmZmVyVmlld3NcbiAqIEZhaWxzIGluIFNhZmFyaSA2LCBzbyB3ZSBuZWVkIHRvIG1hcCB0byBBcnJheUJ1ZmZlcnMgdGhlcmUuXG4gKi9cblxudmFyIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA9IGJsb2JTdXBwb3J0ZWQgJiYgKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBiID0gbmV3IEJsb2IoW25ldyBVaW50OEFycmF5KFsxLDJdKV0pO1xuICAgIHJldHVybiBiLnNpemUgPT09IDI7XG4gIH0gY2F0Y2goZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSkoKTtcblxuLyoqXG4gKiBDaGVjayBpZiBCbG9iQnVpbGRlciBpcyBzdXBwb3J0ZWRcbiAqL1xuXG52YXIgYmxvYkJ1aWxkZXJTdXBwb3J0ZWQgPSBCbG9iQnVpbGRlclxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuYXBwZW5kXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5nZXRCbG9iO1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IG1hcHMgQXJyYXlCdWZmZXJWaWV3cyB0byBBcnJheUJ1ZmZlcnNcbiAqIFVzZWQgYnkgQmxvYkJ1aWxkZXIgY29uc3RydWN0b3IgYW5kIG9sZCBicm93c2VycyB0aGF0IGRpZG4ndFxuICogc3VwcG9ydCBpdCBpbiB0aGUgQmxvYiBjb25zdHJ1Y3Rvci5cbiAqL1xuXG5mdW5jdGlvbiBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaHVuayA9IGFyeVtpXTtcbiAgICBpZiAoY2h1bmsuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciBidWYgPSBjaHVuay5idWZmZXI7XG5cbiAgICAgIC8vIGlmIHRoaXMgaXMgYSBzdWJhcnJheSwgbWFrZSBhIGNvcHkgc28gd2Ugb25seVxuICAgICAgLy8gaW5jbHVkZSB0aGUgc3ViYXJyYXkgcmVnaW9uIGZyb20gdGhlIHVuZGVybHlpbmcgYnVmZmVyXG4gICAgICBpZiAoY2h1bmsuYnl0ZUxlbmd0aCAhPT0gYnVmLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgdmFyIGNvcHkgPSBuZXcgVWludDhBcnJheShjaHVuay5ieXRlTGVuZ3RoKTtcbiAgICAgICAgY29weS5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmLCBjaHVuay5ieXRlT2Zmc2V0LCBjaHVuay5ieXRlTGVuZ3RoKSk7XG4gICAgICAgIGJ1ZiA9IGNvcHkuYnVmZmVyO1xuICAgICAgfVxuXG4gICAgICBhcnlbaV0gPSBidWY7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEJsb2JCdWlsZGVyQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBiYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xuICBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICBiYi5hcHBlbmQoYXJ5W2ldKTtcbiAgfVxuXG4gIHJldHVybiAob3B0aW9ucy50eXBlKSA/IGJiLmdldEJsb2Iob3B0aW9ucy50eXBlKSA6IGJiLmdldEJsb2IoKTtcbn07XG5cbmZ1bmN0aW9uIEJsb2JDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcbiAgbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpO1xuICByZXR1cm4gbmV3IEJsb2IoYXJ5LCBvcHRpb25zIHx8IHt9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICBpZiAoYmxvYlN1cHBvcnRlZCkge1xuICAgIHJldHVybiBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPyBnbG9iYWwuQmxvYiA6IEJsb2JDb25zdHJ1Y3RvcjtcbiAgfSBlbHNlIGlmIChibG9iQnVpbGRlclN1cHBvcnRlZCkge1xuICAgIHJldHVybiBCbG9iQnVpbGRlckNvbnN0cnVjdG9yO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn0pKCk7XG4iLCIvKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG4oZnVuY3Rpb24oKXtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIGNoYXJzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG5cbiAgLy8gVXNlIGEgbG9va3VwIHRhYmxlIHRvIGZpbmQgdGhlIGluZGV4LlxuICB2YXIgbG9va3VwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykge1xuICAgIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7XG4gIH1cblxuICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLFxuICAgIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gXCJcIjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTMpIHtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICB9XG5cbiAgICBpZiAoKGxlbiAlIDMpID09PSAyKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArIFwiPVwiO1xuICAgIH0gZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMikgKyBcIj09XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U2NDtcbiAgfTtcblxuICBleHBvcnRzLmRlY29kZSA9ICBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsXG4gICAgbGVuID0gYmFzZTY0Lmxlbmd0aCwgaSwgcCA9IDAsXG4gICAgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG5cbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gXCI9XCIpIHtcbiAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhcnJheWJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJMZW5ndGgpLFxuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9NCkge1xuICAgICAgZW5jb2RlZDEgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgZW5jb2RlZDIgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsxKV07XG4gICAgICBlbmNvZGVkMyA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzIpXTtcbiAgICAgIGVuY29kZWQ0ID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMyldO1xuXG4gICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMyAmIDMpIDw8IDYpIHwgKGVuY29kZWQ0ICYgNjMpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheWJ1ZmZlcjtcbiAgfTtcbn0pKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiIsIi8qISBodHRwczovL210aHMuYmUvdXRmOGpzIHYyLjEuMiBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGVzIGBleHBvcnRzYFxuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzO1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgXG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHRtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cyAmJiBtb2R1bGU7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAsIGZyb20gTm9kZS5qcyBvciBCcm93c2VyaWZpZWQgY29kZSxcblx0Ly8gYW5kIHVzZSBpdCBhcyBgcm9vdGBcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDtcblx0aWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsKSB7XG5cdFx0cm9vdCA9IGZyZWVHbG9iYWw7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHR2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuXHQvLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuXHRmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHR2YXIgY291bnRlciA9IDA7XG5cdFx0dmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cdFx0dmFyIHZhbHVlO1xuXHRcdHZhciBleHRyYTtcblx0XHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0XHR2YXIgaW5kZXggPSAtMTtcblx0XHR2YXIgdmFsdWU7XG5cdFx0dmFyIG91dHB1dCA9ICcnO1xuXHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IGFycmF5W2luZGV4XTtcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSB7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweEQ4MDAgJiYgY29kZVBvaW50IDw9IDB4REZGRikge1xuXHRcdFx0aWYgKHN0cmljdCkge1xuXHRcdFx0XHR0aHJvdyBFcnJvcihcblx0XHRcdFx0XHQnTG9uZSBzdXJyb2dhdGUgVSsnICsgY29kZVBvaW50LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICtcblx0XHRcdFx0XHQnIGlzIG5vdCBhIHNjYWxhciB2YWx1ZSdcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0ZnVuY3Rpb24gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIHNoaWZ0KSB7XG5cdFx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiBzaGlmdCkgJiAweDNGKSB8IDB4ODApO1xuXHR9XG5cblx0ZnVuY3Rpb24gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KSB7XG5cdFx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGRjgwKSA9PSAwKSB7IC8vIDEtYnl0ZSBzZXF1ZW5jZVxuXHRcdFx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuXHRcdH1cblx0XHR2YXIgc3ltYm9sID0gJyc7XG5cdFx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGODAwKSA9PSAwKSB7IC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDYpICYgMHgxRikgfCAweEMwKTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZGRjAwMDApID09IDApIHsgLy8gMy1ieXRlIHNlcXVlbmNlXG5cdFx0XHRpZiAoIWNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpKSB7XG5cdFx0XHRcdGNvZGVQb2ludCA9IDB4RkZGRDtcblx0XHRcdH1cblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxMikgJiAweDBGKSB8IDB4RTApO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZFMDAwMDApID09IDApIHsgLy8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTgpICYgMHgwNykgfCAweEYwKTtcblx0XHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgMTIpO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0XHR9XG5cdFx0c3ltYm9sICs9IHN0cmluZ0Zyb21DaGFyQ29kZSgoY29kZVBvaW50ICYgMHgzRikgfCAweDgwKTtcblx0XHRyZXR1cm4gc3ltYm9sO1xuXHR9XG5cblx0ZnVuY3Rpb24gdXRmOGVuY29kZShzdHJpbmcsIG9wdHMpIHtcblx0XHRvcHRzID0gb3B0cyB8fCB7fTtcblx0XHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdFx0dmFyIGNvZGVQb2ludHMgPSB1Y3MyZGVjb2RlKHN0cmluZyk7XG5cdFx0dmFyIGxlbmd0aCA9IGNvZGVQb2ludHMubGVuZ3RoO1xuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciBjb2RlUG9pbnQ7XG5cdFx0dmFyIGJ5dGVTdHJpbmcgPSAnJztcblx0XHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0Y29kZVBvaW50ID0gY29kZVBvaW50c1tpbmRleF07XG5cdFx0XHRieXRlU3RyaW5nICs9IGVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQsIHN0cmljdCk7XG5cdFx0fVxuXHRcdHJldHVybiBieXRlU3RyaW5nO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0ZnVuY3Rpb24gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKSB7XG5cdFx0aWYgKGJ5dGVJbmRleCA+PSBieXRlQ291bnQpIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0XHR9XG5cblx0XHR2YXIgY29udGludWF0aW9uQnl0ZSA9IGJ5dGVBcnJheVtieXRlSW5kZXhdICYgMHhGRjtcblx0XHRieXRlSW5kZXgrKztcblxuXHRcdGlmICgoY29udGludWF0aW9uQnl0ZSAmIDB4QzApID09IDB4ODApIHtcblx0XHRcdHJldHVybiBjb250aW51YXRpb25CeXRlICYgMHgzRjtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBlbmQgdXAgaGVyZSwgaXTigJlzIG5vdCBhIGNvbnRpbnVhdGlvbiBieXRlXG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRlY29kZVN5bWJvbChzdHJpY3QpIHtcblx0XHR2YXIgYnl0ZTE7XG5cdFx0dmFyIGJ5dGUyO1xuXHRcdHZhciBieXRlMztcblx0XHR2YXIgYnl0ZTQ7XG5cdFx0dmFyIGNvZGVQb2ludDtcblxuXHRcdGlmIChieXRlSW5kZXggPiBieXRlQ291bnQpIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0XHR9XG5cblx0XHRpZiAoYnl0ZUluZGV4ID09IGJ5dGVDb3VudCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIFJlYWQgZmlyc3QgYnl0ZVxuXHRcdGJ5dGUxID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRcdGJ5dGVJbmRleCsrO1xuXG5cdFx0Ly8gMS1ieXRlIHNlcXVlbmNlIChubyBjb250aW51YXRpb24gYnl0ZXMpXG5cdFx0aWYgKChieXRlMSAmIDB4ODApID09IDApIHtcblx0XHRcdHJldHVybiBieXRlMTtcblx0XHR9XG5cblx0XHQvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRpZiAoKGJ5dGUxICYgMHhFMCkgPT0gMHhDMCkge1xuXHRcdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MUYpIDw8IDYpIHwgYnl0ZTI7XG5cdFx0XHRpZiAoY29kZVBvaW50ID49IDB4ODApIHtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gMy1ieXRlIHNlcXVlbmNlIChtYXkgaW5jbHVkZSB1bnBhaXJlZCBzdXJyb2dhdGVzKVxuXHRcdGlmICgoYnl0ZTEgJiAweEYwKSA9PSAweEUwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwRikgPDwgMTIpIHwgKGJ5dGUyIDw8IDYpIHwgYnl0ZTM7XG5cdFx0XHRpZiAoY29kZVBvaW50ID49IDB4MDgwMCkge1xuXHRcdFx0XHRyZXR1cm4gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkgPyBjb2RlUG9pbnQgOiAweEZGRkQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIDQtYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICgoYnl0ZTEgJiAweEY4KSA9PSAweEYwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlNCA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwNykgPDwgMHgxMikgfCAoYnl0ZTIgPDwgMHgwQykgfFxuXHRcdFx0XHQoYnl0ZTMgPDwgMHgwNikgfCBieXRlNDtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwMTAwMDAgJiYgY29kZVBvaW50IDw9IDB4MTBGRkZGKSB7XG5cdFx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgVVRGLTggZGV0ZWN0ZWQnKTtcblx0fVxuXG5cdHZhciBieXRlQXJyYXk7XG5cdHZhciBieXRlQ291bnQ7XG5cdHZhciBieXRlSW5kZXg7XG5cdGZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnl0ZVN0cmluZywgb3B0cykge1xuXHRcdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHRcdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0XHRieXRlQXJyYXkgPSB1Y3MyZGVjb2RlKGJ5dGVTdHJpbmcpO1xuXHRcdGJ5dGVDb3VudCA9IGJ5dGVBcnJheS5sZW5ndGg7XG5cdFx0Ynl0ZUluZGV4ID0gMDtcblx0XHR2YXIgY29kZVBvaW50cyA9IFtdO1xuXHRcdHZhciB0bXA7XG5cdFx0d2hpbGUgKCh0bXAgPSBkZWNvZGVTeW1ib2woc3RyaWN0KSkgIT09IGZhbHNlKSB7XG5cdFx0XHRjb2RlUG9pbnRzLnB1c2godG1wKTtcblx0XHR9XG5cdFx0cmV0dXJuIHVjczJlbmNvZGUoY29kZVBvaW50cyk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHR2YXIgdXRmOCA9IHtcblx0XHQndmVyc2lvbic6ICcyLjEuMicsXG5cdFx0J2VuY29kZSc6IHV0ZjhlbmNvZGUsXG5cdFx0J2RlY29kZSc6IHV0ZjhkZWNvZGVcblx0fTtcblxuXHQvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnNcblx0Ly8gbGlrZSB0aGUgZm9sbG93aW5nOlxuXHRpZiAoXG5cdFx0dHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiZcblx0XHRkZWZpbmUuYW1kXG5cdCkge1xuXHRcdGRlZmluZShmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB1dGY4O1xuXHRcdH0pO1xuXHR9XHRlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiAhZnJlZUV4cG9ydHMubm9kZVR5cGUpIHtcblx0XHRpZiAoZnJlZU1vZHVsZSkgeyAvLyBpbiBOb2RlLmpzIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gdXRmODtcblx0XHR9IGVsc2UgeyAvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0dmFyIG9iamVjdCA9IHt9O1xuXHRcdFx0dmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0Lmhhc093blByb3BlcnR5O1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIHV0ZjgpIHtcblx0XHRcdFx0aGFzT3duUHJvcGVydHkuY2FsbCh1dGY4LCBrZXkpICYmIChmcmVlRXhwb3J0c1trZXldID0gdXRmOFtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7IC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnV0ZjggPSB1dGY4O1xuXHR9XG5cbn0odGhpcykpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBhZnRlclxuXG5mdW5jdGlvbiBhZnRlcihjb3VudCwgY2FsbGJhY2ssIGVycl9jYikge1xuICAgIHZhciBiYWlsID0gZmFsc2VcbiAgICBlcnJfY2IgPSBlcnJfY2IgfHwgbm9vcFxuICAgIHByb3h5LmNvdW50ID0gY291bnRcblxuICAgIHJldHVybiAoY291bnQgPT09IDApID8gY2FsbGJhY2soKSA6IHByb3h5XG5cbiAgICBmdW5jdGlvbiBwcm94eShlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAocHJveHkuY291bnQgPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZnRlciBjYWxsZWQgdG9vIG1hbnkgdGltZXMnKVxuICAgICAgICB9XG4gICAgICAgIC0tcHJveHkuY291bnRcblxuICAgICAgICAvLyBhZnRlciBmaXJzdCBlcnJvciwgcmVzdCBhcmUgcGFzc2VkIHRvIGVycl9jYlxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBiYWlsID0gdHJ1ZVxuICAgICAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgICAgICAgLy8gZnV0dXJlIGVycm9yIGNhbGxiYWNrcyB3aWxsIGdvIHRvIGVycm9yIGhhbmRsZXJcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZXJyX2NiXG4gICAgICAgIH0gZWxzZSBpZiAocHJveHkuY291bnQgPT09IDAgJiYgIWJhaWwpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCIvKipcbiAqIEFuIGFic3RyYWN0aW9uIGZvciBzbGljaW5nIGFuIGFycmF5YnVmZmVyIGV2ZW4gd2hlblxuICogQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlIGlzIG5vdCBzdXBwb3J0ZWRcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyYXlidWZmZXIsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYXJyYXlidWZmZXIuYnl0ZUxlbmd0aDtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBlbmQgPSBlbmQgfHwgYnl0ZXM7XG5cbiAgaWYgKGFycmF5YnVmZmVyLnNsaWNlKSB7IHJldHVybiBhcnJheWJ1ZmZlci5zbGljZShzdGFydCwgZW5kKTsgfVxuXG4gIGlmIChzdGFydCA8IDApIHsgc3RhcnQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA8IDApIHsgZW5kICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPiBieXRlcykgeyBlbmQgPSBieXRlczsgfVxuXG4gIGlmIChzdGFydCA+PSBieXRlcyB8fCBzdGFydCA+PSBlbmQgfHwgYnl0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEFycmF5QnVmZmVyKDApO1xuICB9XG5cbiAgdmFyIGFidiA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGVuZCAtIHN0YXJ0KTtcbiAgZm9yICh2YXIgaSA9IHN0YXJ0LCBpaSA9IDA7IGkgPCBlbmQ7IGkrKywgaWkrKykge1xuICAgIHJlc3VsdFtpaV0gPSBhYnZbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5idWZmZXI7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiXG4vKipcbiAqIEdldHMgdGhlIGtleXMgZm9yIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX0ga2V5c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzIChvYmope1xuICB2YXIgYXJyID0gW107XG4gIHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwgaSkpIHtcbiAgICAgIGFyci5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyO1xufTtcbiIsIi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmcteGhyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBYSFI7XG5tb2R1bGUuZXhwb3J0cy5SZXF1ZXN0ID0gUmVxdWVzdDtcblxuLyoqXG4gKiBFbXB0eSBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGVtcHR5ICgpIHt9XG5cbi8qKlxuICogWEhSIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gWEhSIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcbiAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IG9wdHMucmVxdWVzdFRpbWVvdXQ7XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG5cbiAgaWYgKGdsb2JhbC5sb2NhdGlvbikge1xuICAgIHZhciBpc1NTTCA9ICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICB2YXIgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7XG5cbiAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgaWYgKCFwb3J0KSB7XG4gICAgICBwb3J0ID0gaXNTU0wgPyA0NDMgOiA4MDtcbiAgICB9XG5cbiAgICB0aGlzLnhkID0gb3B0cy5ob3N0bmFtZSAhPT0gZ2xvYmFsLmxvY2F0aW9uLmhvc3RuYW1lIHx8XG4gICAgICBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgdGhpcy54cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KFhIUiwgUG9sbGluZyk7XG5cbi8qKlxuICogWEhSIHN1cHBvcnRzIGJpbmFyeVxuICovXG5cblhIUi5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuXG4vKipcbiAqIENyZWF0ZXMgYSByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICBvcHRzLnVyaSA9IHRoaXMudXJpKCk7XG4gIG9wdHMueGQgPSB0aGlzLnhkO1xuICBvcHRzLnhzID0gdGhpcy54cztcbiAgb3B0cy5hZ2VudCA9IHRoaXMuYWdlbnQgfHwgZmFsc2U7XG4gIG9wdHMuc3VwcG9ydHNCaW5hcnkgPSB0aGlzLnN1cHBvcnRzQmluYXJ5O1xuICBvcHRzLmVuYWJsZXNYRFIgPSB0aGlzLmVuYWJsZXNYRFI7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuICBvcHRzLnJlcXVlc3RUaW1lb3V0ID0gdGhpcy5yZXF1ZXN0VGltZW91dDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLmV4dHJhSGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO1xuXG4gIHJldHVybiBuZXcgUmVxdWVzdChvcHRzKTtcbn07XG5cbi8qKlxuICogU2VuZHMgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgdmFyIGlzQmluYXJ5ID0gdHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnICYmIGRhdGEgIT09IHVuZGVmaW5lZDtcbiAgdmFyIHJlcSA9IHRoaXMucmVxdWVzdCh7IG1ldGhvZDogJ1BPU1QnLCBkYXRhOiBkYXRhLCBpc0JpbmFyeTogaXNCaW5hcnkgfSk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdzdWNjZXNzJywgZm4pO1xuICByZXEub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIHNlbGYub25FcnJvcigneGhyIHBvc3QgZXJyb3InLCBlcnIpO1xuICB9KTtcbiAgdGhpcy5zZW5kWGhyID0gcmVxO1xufTtcblxuLyoqXG4gKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Qb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygneGhyIHBvbGwnKTtcbiAgdmFyIHJlcSA9IHRoaXMucmVxdWVzdCgpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJlcS5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgc2VsZi5vbkRhdGEoZGF0YSk7XG4gIH0pO1xuICByZXEub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIHNlbGYub25FcnJvcigneGhyIHBvbGwgZXJyb3InLCBlcnIpO1xuICB9KTtcbiAgdGhpcy5wb2xsWGhyID0gcmVxO1xufTtcblxuLyoqXG4gKiBSZXF1ZXN0IGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gUmVxdWVzdCAob3B0cykge1xuICB0aGlzLm1ldGhvZCA9IG9wdHMubWV0aG9kIHx8ICdHRVQnO1xuICB0aGlzLnVyaSA9IG9wdHMudXJpO1xuICB0aGlzLnhkID0gISFvcHRzLnhkO1xuICB0aGlzLnhzID0gISFvcHRzLnhzO1xuICB0aGlzLmFzeW5jID0gZmFsc2UgIT09IG9wdHMuYXN5bmM7XG4gIHRoaXMuZGF0YSA9IHVuZGVmaW5lZCAhPT0gb3B0cy5kYXRhID8gb3B0cy5kYXRhIDogbnVsbDtcbiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQ7XG4gIHRoaXMuaXNCaW5hcnkgPSBvcHRzLmlzQmluYXJ5O1xuICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gb3B0cy5zdXBwb3J0c0JpbmFyeTtcbiAgdGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLnJlcXVlc3RUaW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dDtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5wZnggPSBvcHRzLnBmeDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleTtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlO1xuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQ7XG4gIHRoaXMuY2EgPSBvcHRzLmNhO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnM7XG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcblxuICB0aGlzLmNyZWF0ZSgpO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihSZXF1ZXN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgWEhSIG9iamVjdCBhbmQgc2VuZHMgdGhlIHJlcXVlc3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgb3B0cyA9IHsgYWdlbnQ6IHRoaXMuYWdlbnQsIHhkb21haW46IHRoaXMueGQsIHhzY2hlbWU6IHRoaXMueHMsIGVuYWJsZXNYRFI6IHRoaXMuZW5hYmxlc1hEUiB9O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICB2YXIgeGhyID0gdGhpcy54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0cnkge1xuICAgIGRlYnVnKCd4aHIgb3BlbiAlczogJXMnLCB0aGlzLm1ldGhvZCwgdGhpcy51cmkpO1xuICAgIHhoci5vcGVuKHRoaXMubWV0aG9kLCB0aGlzLnVyaSwgdGhpcy5hc3luYyk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrICYmIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sodHJ1ZSk7XG4gICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICBpZiAodGhpcy5leHRyYUhlYWRlcnMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGksIHRoaXMuZXh0cmFIZWFkZXJzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgaWYgKCdQT1NUJyA9PT0gdGhpcy5tZXRob2QpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0aGlzLmlzQmluYXJ5KSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJyovKicpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAvLyBpZTYgY2hlY2tcbiAgICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXF1ZXN0VGltZW91dCkge1xuICAgICAgeGhyLnRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhhc1hEUigpKSB7XG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uTG9hZCgpO1xuICAgICAgfTtcbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uRXJyb3IoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnN1cHBvcnRzQmluYXJ5ICYmIGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJykge1xuICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICAgIGlmICg0ICE9PSB4aHIucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICBpZiAoMjAwID09PSB4aHIuc3RhdHVzIHx8IDEyMjMgPT09IHhoci5zdGF0dXMpIHtcbiAgICAgICAgICBzZWxmLm9uTG9hZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgYGVycm9yYCBldmVudCBoYW5kbGVyIHRoYXQncyB1c2VyLXNldFxuICAgICAgICAgIC8vIGRvZXMgbm90IHRocm93IGluIHRoZSBzYW1lIHRpY2sgYW5kIGdldHMgY2F1Z2h0IGhlcmVcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYub25FcnJvcih4aHIuc3RhdHVzKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBkZWJ1ZygneGhyIGRhdGEgJXMnLCB0aGlzLmRhdGEpO1xuICAgIHhoci5zZW5kKHRoaXMuZGF0YSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBOZWVkIHRvIGRlZmVyIHNpbmNlIC5jcmVhdGUoKSBpcyBjYWxsZWQgZGlyZWN0bHkgZmhyb20gdGhlIGNvbnN0cnVjdG9yXG4gICAgLy8gYW5kIHRodXMgdGhlICdlcnJvcicgZXZlbnQgY2FuIG9ubHkgYmUgb25seSBib3VuZCAqYWZ0ZXIqIHRoaXMgZXhjZXB0aW9uXG4gICAgLy8gb2NjdXJzLiAgVGhlcmVmb3JlLCBhbHNvLCB3ZSBjYW5ub3QgdGhyb3cgaGVyZSBhdCBhbGwuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLm9uRXJyb3IoZSk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdID0gdGhpcztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdzdWNjZXNzJyk7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgaWYgd2UgaGF2ZSBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpO1xuICB0aGlzLm9uU3VjY2VzcygpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5jbGVhbnVwKHRydWUpO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgaG91c2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uIChmcm9tRXJyb3IpIHtcbiAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8geG1saHR0cHJlcXVlc3RcbiAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICB0aGlzLnhoci5vbmxvYWQgPSB0aGlzLnhoci5vbmVycm9yID0gZW1wdHk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gIH1cblxuICBpZiAoZnJvbUVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIGlmIChnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICBkZWxldGUgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XTtcbiAgfVxuXG4gIHRoaXMueGhyID0gbnVsbDtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gbG9hZC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBkYXRhO1xuICB0cnkge1xuICAgIHZhciBjb250ZW50VHlwZTtcbiAgICB0cnkge1xuICAgICAgY29udGVudFR5cGUgPSB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICBpZiAoY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSB7XG4gICAgICBkYXRhID0gdGhpcy54aHIucmVzcG9uc2UgfHwgdGhpcy54aHIucmVzcG9uc2VUZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gdGhpcy54aHIucmVzcG9uc2VUZXh0O1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMub25FcnJvcihlKTtcbiAgfVxuICBpZiAobnVsbCAhPSBkYXRhKSB7XG4gICAgdGhpcy5vbkRhdGEoZGF0YSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgaXQgaGFzIFhEb21haW5SZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmhhc1hEUiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICd1bmRlZmluZWQnICE9PSB0eXBlb2YgZ2xvYmFsLlhEb21haW5SZXF1ZXN0ICYmICF0aGlzLnhzICYmIHRoaXMuZW5hYmxlc1hEUjtcbn07XG5cbi8qKlxuICogQWJvcnRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgcGVuZGluZyByZXF1ZXN0cyB3aGVuIHVubG9hZGluZyB0aGUgd2luZG93LiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50XG4gKiBtZW1vcnkgbGVha3MgKGUuZy4gd2hlbiB1c2luZyBJRSkgYW5kIHRvIGVuc3VyZSB0aGF0IG5vIHNwdXJpb3VzIGVycm9yIGlzXG4gKiBlbWl0dGVkLlxuICovXG5cblJlcXVlc3QucmVxdWVzdHNDb3VudCA9IDA7XG5SZXF1ZXN0LnJlcXVlc3RzID0ge307XG5cbmlmIChnbG9iYWwuZG9jdW1lbnQpIHtcbiAgaWYgKGdsb2JhbC5hdHRhY2hFdmVudCkge1xuICAgIGdsb2JhbC5hdHRhY2hFdmVudCgnb251bmxvYWQnLCB1bmxvYWRIYW5kbGVyKTtcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5sb2FkSGFuZGxlciAoKSB7XG4gIGZvciAodmFyIGkgaW4gUmVxdWVzdC5yZXF1ZXN0cykge1xuICAgIGlmIChSZXF1ZXN0LnJlcXVlc3RzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBSZXF1ZXN0LnJlcXVlc3RzW2ldLmFib3J0KCk7XG4gICAgfVxuICB9XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKlxuICogTG9naWMgYm9ycm93ZWQgZnJvbSBNb2Rlcm5penI6XG4gKlxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXG4gKi9cblxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG59IGNhdGNoIChlcnIpIHtcbiAgLy8gaWYgWE1MSHR0cCBzdXBwb3J0IGlzIGRpc2FibGVkIGluIElFIHRoZW4gaXQgd2lsbCB0aHJvd1xuICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9pbmRleCcpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpzb2NrZXQnKTtcbnZhciBpbmRleCA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgcGFyc2V1cmkgPSByZXF1aXJlKCdwYXJzZXVyaScpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBTb2NrZXQ7XG5cbi8qKlxuICogU29ja2V0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdXJpIG9yIG9wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFNvY2tldCAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTb2NrZXQpKSByZXR1cm4gbmV3IFNvY2tldCh1cmksIG9wdHMpO1xuXG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIGlmICh1cmkgJiYgJ29iamVjdCcgPT09IHR5cGVvZiB1cmkpIHtcbiAgICBvcHRzID0gdXJpO1xuICAgIHVyaSA9IG51bGw7XG4gIH1cblxuICBpZiAodXJpKSB7XG4gICAgdXJpID0gcGFyc2V1cmkodXJpKTtcbiAgICBvcHRzLmhvc3RuYW1lID0gdXJpLmhvc3Q7XG4gICAgb3B0cy5zZWN1cmUgPSB1cmkucHJvdG9jb2wgPT09ICdodHRwcycgfHwgdXJpLnByb3RvY29sID09PSAnd3NzJztcbiAgICBvcHRzLnBvcnQgPSB1cmkucG9ydDtcbiAgICBpZiAodXJpLnF1ZXJ5KSBvcHRzLnF1ZXJ5ID0gdXJpLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKG9wdHMuaG9zdCkge1xuICAgIG9wdHMuaG9zdG5hbWUgPSBwYXJzZXVyaShvcHRzLmhvc3QpLmhvc3Q7XG4gIH1cblxuICB0aGlzLnNlY3VyZSA9IG51bGwgIT0gb3B0cy5zZWN1cmUgPyBvcHRzLnNlY3VyZVxuICAgIDogKGdsb2JhbC5sb2NhdGlvbiAmJiAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2wpO1xuXG4gIGlmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAvLyBpZiBubyBwb3J0IGlzIHNwZWNpZmllZCBtYW51YWxseSwgdXNlIHRoZSBwcm90b2NvbCBkZWZhdWx0XG4gICAgb3B0cy5wb3J0ID0gdGhpcy5zZWN1cmUgPyAnNDQzJyA6ICc4MCc7XG4gIH1cblxuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWUgfHxcbiAgICAoZ2xvYmFsLmxvY2F0aW9uID8gbG9jYXRpb24uaG9zdG5hbWUgOiAnbG9jYWxob3N0Jyk7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydCB8fCAoZ2xvYmFsLmxvY2F0aW9uICYmIGxvY2F0aW9uLnBvcnRcbiAgICAgID8gbG9jYXRpb24ucG9ydFxuICAgICAgOiAodGhpcy5zZWN1cmUgPyA0NDMgOiA4MCkpO1xuICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeSB8fCB7fTtcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdGhpcy5xdWVyeSkgdGhpcy5xdWVyeSA9IHBhcnNlcXMuZGVjb2RlKHRoaXMucXVlcnkpO1xuICB0aGlzLnVwZ3JhZGUgPSBmYWxzZSAhPT0gb3B0cy51cGdyYWRlO1xuICB0aGlzLnBhdGggPSAob3B0cy5wYXRoIHx8ICcvZW5naW5lLmlvJykucmVwbGFjZSgvXFwvJC8sICcnKSArICcvJztcbiAgdGhpcy5mb3JjZUpTT05QID0gISFvcHRzLmZvcmNlSlNPTlA7XG4gIHRoaXMuanNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtcbiAgdGhpcy5mb3JjZUJhc2U2NCA9ICEhb3B0cy5mb3JjZUJhc2U2NDtcbiAgdGhpcy5lbmFibGVzWERSID0gISFvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtIHx8ICd0JztcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBbJ3BvbGxpbmcnLCAnd2Vic29ja2V0J107XG4gIHRoaXMudHJhbnNwb3J0T3B0aW9ucyA9IG9wdHMudHJhbnNwb3J0T3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcbiAgdGhpcy5wb2xpY3lQb3J0ID0gb3B0cy5wb2xpY3lQb3J0IHx8IDg0MztcbiAgdGhpcy5yZW1lbWJlclVwZ3JhZGUgPSBvcHRzLnJlbWVtYmVyVXBncmFkZSB8fCBmYWxzZTtcbiAgdGhpcy5iaW5hcnlUeXBlID0gbnVsbDtcbiAgdGhpcy5vbmx5QmluYXJ5VXBncmFkZXMgPSBvcHRzLm9ubHlCaW5hcnlVcGdyYWRlcztcbiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IGZhbHNlICE9PSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlID8gKG9wdHMucGVyTWVzc2FnZURlZmxhdGUgfHwge30pIDogZmFsc2U7XG5cbiAgaWYgKHRydWUgPT09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUpIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSB7fTtcbiAgaWYgKHRoaXMucGVyTWVzc2FnZURlZmxhdGUgJiYgbnVsbCA9PSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgIHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkID0gMTAyNDtcbiAgfVxuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4IHx8IG51bGw7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXkgfHwgbnVsbDtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlIHx8IG51bGw7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydCB8fCBudWxsO1xuICB0aGlzLmNhID0gb3B0cy5jYSB8fCBudWxsO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnMgfHwgbnVsbDtcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9ICEhb3B0cy5mb3JjZU5vZGU7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG4gIGlmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCkge1xuICAgIGlmIChvcHRzLmV4dHJhSGVhZGVycyAmJiBPYmplY3Qua2V5cyhvcHRzLmV4dHJhSGVhZGVycykubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcbiAgICB9XG5cbiAgICBpZiAob3B0cy5sb2NhbEFkZHJlc3MpIHtcbiAgICAgIHRoaXMubG9jYWxBZGRyZXNzID0gb3B0cy5sb2NhbEFkZHJlc3M7XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IG9uIGhhbmRzaGFrZVxuICB0aGlzLmlkID0gbnVsbDtcbiAgdGhpcy51cGdyYWRlcyA9IG51bGw7XG4gIHRoaXMucGluZ0ludGVydmFsID0gbnVsbDtcbiAgdGhpcy5waW5nVGltZW91dCA9IG51bGw7XG5cbiAgLy8gc2V0IG9uIGhlYXJ0YmVhdFxuICB0aGlzLnBpbmdJbnRlcnZhbFRpbWVyID0gbnVsbDtcbiAgdGhpcy5waW5nVGltZW91dFRpbWVyID0gbnVsbDtcblxuICB0aGlzLm9wZW4oKTtcbn1cblxuU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihTb2NrZXQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sOyAvLyB0aGlzIGlzIGFuIGludFxuXG4vKipcbiAqIEV4cG9zZSBkZXBzIGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eVxuICogYW5kIHN0YW5kYWxvbmUgYnJvd3NlciBhY2Nlc3MuXG4gKi9cblxuU29ja2V0LlNvY2tldCA9IFNvY2tldDtcblNvY2tldC5UcmFuc3BvcnQgPSByZXF1aXJlKCcuL3RyYW5zcG9ydCcpO1xuU29ja2V0LnRyYW5zcG9ydHMgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvaW5kZXgnKTtcblNvY2tldC5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyB0cmFuc3BvcnQgb2YgdGhlIGdpdmVuIHR5cGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zcG9ydCBuYW1lXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNyZWF0ZVRyYW5zcG9ydCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlYnVnKCdjcmVhdGluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciBxdWVyeSA9IGNsb25lKHRoaXMucXVlcnkpO1xuXG4gIC8vIGFwcGVuZCBlbmdpbmUuaW8gcHJvdG9jb2wgaWRlbnRpZmllclxuICBxdWVyeS5FSU8gPSBwYXJzZXIucHJvdG9jb2w7XG5cbiAgLy8gdHJhbnNwb3J0IG5hbWVcbiAgcXVlcnkudHJhbnNwb3J0ID0gbmFtZTtcblxuICAvLyBwZXItdHJhbnNwb3J0IG9wdGlvbnNcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLnRyYW5zcG9ydE9wdGlvbnNbbmFtZV0gfHwge307XG5cbiAgLy8gc2Vzc2lvbiBpZCBpZiB3ZSBhbHJlYWR5IGhhdmUgb25lXG4gIGlmICh0aGlzLmlkKSBxdWVyeS5zaWQgPSB0aGlzLmlkO1xuXG4gIHZhciB0cmFuc3BvcnQgPSBuZXcgdHJhbnNwb3J0c1tuYW1lXSh7XG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIHNvY2tldDogdGhpcyxcbiAgICBhZ2VudDogb3B0aW9ucy5hZ2VudCB8fCB0aGlzLmFnZW50LFxuICAgIGhvc3RuYW1lOiBvcHRpb25zLmhvc3RuYW1lIHx8IHRoaXMuaG9zdG5hbWUsXG4gICAgcG9ydDogb3B0aW9ucy5wb3J0IHx8IHRoaXMucG9ydCxcbiAgICBzZWN1cmU6IG9wdGlvbnMuc2VjdXJlIHx8IHRoaXMuc2VjdXJlLFxuICAgIHBhdGg6IG9wdGlvbnMucGF0aCB8fCB0aGlzLnBhdGgsXG4gICAgZm9yY2VKU09OUDogb3B0aW9ucy5mb3JjZUpTT05QIHx8IHRoaXMuZm9yY2VKU09OUCxcbiAgICBqc29ucDogb3B0aW9ucy5qc29ucCB8fCB0aGlzLmpzb25wLFxuICAgIGZvcmNlQmFzZTY0OiBvcHRpb25zLmZvcmNlQmFzZTY0IHx8IHRoaXMuZm9yY2VCYXNlNjQsXG4gICAgZW5hYmxlc1hEUjogb3B0aW9ucy5lbmFibGVzWERSIHx8IHRoaXMuZW5hYmxlc1hEUixcbiAgICB0aW1lc3RhbXBSZXF1ZXN0czogb3B0aW9ucy50aW1lc3RhbXBSZXF1ZXN0cyB8fCB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzLFxuICAgIHRpbWVzdGFtcFBhcmFtOiBvcHRpb25zLnRpbWVzdGFtcFBhcmFtIHx8IHRoaXMudGltZXN0YW1wUGFyYW0sXG4gICAgcG9saWN5UG9ydDogb3B0aW9ucy5wb2xpY3lQb3J0IHx8IHRoaXMucG9saWN5UG9ydCxcbiAgICBwZng6IG9wdGlvbnMucGZ4IHx8IHRoaXMucGZ4LFxuICAgIGtleTogb3B0aW9ucy5rZXkgfHwgdGhpcy5rZXksXG4gICAgcGFzc3BocmFzZTogb3B0aW9ucy5wYXNzcGhyYXNlIHx8IHRoaXMucGFzc3BocmFzZSxcbiAgICBjZXJ0OiBvcHRpb25zLmNlcnQgfHwgdGhpcy5jZXJ0LFxuICAgIGNhOiBvcHRpb25zLmNhIHx8IHRoaXMuY2EsXG4gICAgY2lwaGVyczogb3B0aW9ucy5jaXBoZXJzIHx8IHRoaXMuY2lwaGVycyxcbiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IG9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkIHx8IHRoaXMucmVqZWN0VW5hdXRob3JpemVkLFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiBvcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHRoaXMucGVyTWVzc2FnZURlZmxhdGUsXG4gICAgZXh0cmFIZWFkZXJzOiBvcHRpb25zLmV4dHJhSGVhZGVycyB8fCB0aGlzLmV4dHJhSGVhZGVycyxcbiAgICBmb3JjZU5vZGU6IG9wdGlvbnMuZm9yY2VOb2RlIHx8IHRoaXMuZm9yY2VOb2RlLFxuICAgIGxvY2FsQWRkcmVzczogb3B0aW9ucy5sb2NhbEFkZHJlc3MgfHwgdGhpcy5sb2NhbEFkZHJlc3MsXG4gICAgcmVxdWVzdFRpbWVvdXQ6IG9wdGlvbnMucmVxdWVzdFRpbWVvdXQgfHwgdGhpcy5yZXF1ZXN0VGltZW91dCxcbiAgICBwcm90b2NvbHM6IG9wdGlvbnMucHJvdG9jb2xzIHx8IHZvaWQgKDApXG4gIH0pO1xuXG4gIHJldHVybiB0cmFuc3BvcnQ7XG59O1xuXG5mdW5jdGlvbiBjbG9uZSAob2JqKSB7XG4gIHZhciBvID0ge307XG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgb1tpXSA9IG9ialtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG87XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgdHJhbnNwb3J0IHRvIHVzZSBhbmQgc3RhcnRzIHByb2JlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5Tb2NrZXQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0cmFuc3BvcnQ7XG4gIGlmICh0aGlzLnJlbWVtYmVyVXBncmFkZSAmJiBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzICYmIHRoaXMudHJhbnNwb3J0cy5pbmRleE9mKCd3ZWJzb2NrZXQnKSAhPT0gLTEpIHtcbiAgICB0cmFuc3BvcnQgPSAnd2Vic29ja2V0JztcbiAgfSBlbHNlIGlmICgwID09PSB0aGlzLnRyYW5zcG9ydHMubGVuZ3RoKSB7XG4gICAgLy8gRW1pdCBlcnJvciBvbiBuZXh0IHRpY2sgc28gaXQgY2FuIGJlIGxpc3RlbmVkIHRvXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5lbWl0KCdlcnJvcicsICdObyB0cmFuc3BvcnRzIGF2YWlsYWJsZScpO1xuICAgIH0sIDApO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc3BvcnQgPSB0aGlzLnRyYW5zcG9ydHNbMF07XG4gIH1cbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuXG4gIC8vIFJldHJ5IHdpdGggdGhlIG5leHQgdHJhbnNwb3J0IGlmIHRoZSB0cmFuc3BvcnQgaXMgZGlzYWJsZWQgKGpzb25wOiBmYWxzZSlcbiAgdHJ5IHtcbiAgICB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy50cmFuc3BvcnRzLnNoaWZ0KCk7XG4gICAgdGhpcy5vcGVuKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJhbnNwb3J0Lm9wZW4oKTtcbiAgdGhpcy5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQuIERpc2FibGVzIHRoZSBleGlzdGluZyBvbmUgKGlmIGFueSkuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZXRUcmFuc3BvcnQgPSBmdW5jdGlvbiAodHJhbnNwb3J0KSB7XG4gIGRlYnVnKCdzZXR0aW5nIHRyYW5zcG9ydCAlcycsIHRyYW5zcG9ydC5uYW1lKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICh0aGlzLnRyYW5zcG9ydCkge1xuICAgIGRlYnVnKCdjbGVhcmluZyBleGlzdGluZyB0cmFuc3BvcnQgJXMnLCB0aGlzLnRyYW5zcG9ydC5uYW1lKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8vIHNldCB1cCB0cmFuc3BvcnRcbiAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG5cbiAgLy8gc2V0IHVwIHRyYW5zcG9ydCBsaXN0ZW5lcnNcbiAgdHJhbnNwb3J0XG4gIC5vbignZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkRyYWluKCk7XG4gIH0pXG4gIC5vbigncGFja2V0JywgZnVuY3Rpb24gKHBhY2tldCkge1xuICAgIHNlbGYub25QYWNrZXQocGFja2V0KTtcbiAgfSlcbiAgLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKGUpO1xuICB9KVxuICAub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25DbG9zZSgndHJhbnNwb3J0IGNsb3NlJyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBQcm9iZXMgYSB0cmFuc3BvcnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zcG9ydCBuYW1lXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnByb2JlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVidWcoJ3Byb2JpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO1xuICB2YXIgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQobmFtZSwgeyBwcm9iZTogMSB9KTtcbiAgdmFyIGZhaWxlZCA9IGZhbHNlO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIG9uVHJhbnNwb3J0T3BlbiAoKSB7XG4gICAgaWYgKHNlbGYub25seUJpbmFyeVVwZ3JhZGVzKSB7XG4gICAgICB2YXIgdXBncmFkZUxvc2VzQmluYXJ5ID0gIXRoaXMuc3VwcG9ydHNCaW5hcnkgJiYgc2VsZi50cmFuc3BvcnQuc3VwcG9ydHNCaW5hcnk7XG4gICAgICBmYWlsZWQgPSBmYWlsZWQgfHwgdXBncmFkZUxvc2VzQmluYXJ5O1xuICAgIH1cbiAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cbiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBvcGVuZWQnLCBuYW1lKTtcbiAgICB0cmFuc3BvcnQuc2VuZChbeyB0eXBlOiAncGluZycsIGRhdGE6ICdwcm9iZScgfV0pO1xuICAgIHRyYW5zcG9ydC5vbmNlKCdwYWNrZXQnLCBmdW5jdGlvbiAobXNnKSB7XG4gICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICBpZiAoJ3BvbmcnID09PSBtc2cudHlwZSAmJiAncHJvYmUnID09PSBtc2cuZGF0YSkge1xuICAgICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBwb25nJywgbmFtZSk7XG4gICAgICAgIHNlbGYudXBncmFkaW5nID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRpbmcnLCB0cmFuc3BvcnQpO1xuICAgICAgICBpZiAoIXRyYW5zcG9ydCkgcmV0dXJuO1xuICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gJ3dlYnNvY2tldCcgPT09IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgICAgIGRlYnVnKCdwYXVzaW5nIGN1cnJlbnQgdHJhbnNwb3J0IFwiJXNcIicsIHNlbGYudHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgICBzZWxmLnRyYW5zcG9ydC5wYXVzZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuICAgICAgICAgIGlmICgnY2xvc2VkJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgICAgZGVidWcoJ2NoYW5naW5nIHRyYW5zcG9ydCBhbmQgc2VuZGluZyB1cGdyYWRlIHBhY2tldCcpO1xuXG4gICAgICAgICAgY2xlYW51cCgpO1xuXG4gICAgICAgICAgc2VsZi5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICAgICAgICB0cmFuc3BvcnQuc2VuZChbeyB0eXBlOiAndXBncmFkZScgfV0pO1xuICAgICAgICAgIHNlbGYuZW1pdCgndXBncmFkZScsIHRyYW5zcG9ydCk7XG4gICAgICAgICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgICAgICAgICBzZWxmLnVwZ3JhZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYuZmx1c2goKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQnLCBuYW1lKTtcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3InKTtcbiAgICAgICAgZXJyLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGVFcnJvcicsIGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBmcmVlemVUcmFuc3BvcnQgKCkge1xuICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgIC8vIEFueSBjYWxsYmFjayBjYWxsZWQgYnkgdHJhbnNwb3J0IHNob3VsZCBiZSBpZ25vcmVkIHNpbmNlIG5vd1xuICAgIGZhaWxlZCA9IHRydWU7XG5cbiAgICBjbGVhbnVwKCk7XG5cbiAgICB0cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB0cmFuc3BvcnQgPSBudWxsO1xuICB9XG5cbiAgLy8gSGFuZGxlIGFueSBlcnJvciB0aGF0IGhhcHBlbnMgd2hpbGUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbmVycm9yIChlcnIpIHtcbiAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ3Byb2JlIGVycm9yOiAnICsgZXJyKTtcbiAgICBlcnJvci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcblxuICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuXG4gICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkIGJlY2F1c2Ugb2YgZXJyb3I6ICVzJywgbmFtZSwgZXJyKTtcblxuICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyb3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRDbG9zZSAoKSB7XG4gICAgb25lcnJvcigndHJhbnNwb3J0IGNsb3NlZCcpO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIGNsb3NlZCB3aGlsZSB3ZSdyZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9uY2xvc2UgKCkge1xuICAgIG9uZXJyb3IoJ3NvY2tldCBjbG9zZWQnKTtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHNvY2tldCBpcyB1cGdyYWRlZCB3aGlsZSB3ZSdyZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9udXBncmFkZSAodG8pIHtcbiAgICBpZiAodHJhbnNwb3J0ICYmIHRvLm5hbWUgIT09IHRyYW5zcG9ydC5uYW1lKSB7XG4gICAgICBkZWJ1ZygnXCIlc1wiIHdvcmtzIC0gYWJvcnRpbmcgXCIlc1wiJywgdG8ubmFtZSwgdHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgZnJlZXplVHJhbnNwb3J0KCk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgb24gdGhlIHRyYW5zcG9ydCBhbmQgb24gc2VsZlxuICBmdW5jdGlvbiBjbGVhbnVwICgpIHtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ29wZW4nLCBvblRyYW5zcG9ydE9wZW4pO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25UcmFuc3BvcnRDbG9zZSk7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRpbmcnLCBvbnVwZ3JhZGUpO1xuICB9XG5cbiAgdHJhbnNwb3J0Lm9uY2UoJ29wZW4nLCBvblRyYW5zcG9ydE9wZW4pO1xuICB0cmFuc3BvcnQub25jZSgnZXJyb3InLCBvbmVycm9yKTtcbiAgdHJhbnNwb3J0Lm9uY2UoJ2Nsb3NlJywgb25UcmFuc3BvcnRDbG9zZSk7XG5cbiAgdGhpcy5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuICB0aGlzLm9uY2UoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7XG5cbiAgdHJhbnNwb3J0Lm9wZW4oKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gY29ubmVjdGlvbiBpcyBkZWVtZWQgb3Blbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnc29ja2V0IG9wZW4nKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW4nO1xuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gJ3dlYnNvY2tldCcgPT09IHRoaXMudHJhbnNwb3J0Lm5hbWU7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuICB0aGlzLmZsdXNoKCk7XG5cbiAgLy8gd2UgY2hlY2sgZm9yIGByZWFkeVN0YXRlYCBpbiBjYXNlIGFuIGBvcGVuYFxuICAvLyBsaXN0ZW5lciBhbHJlYWR5IGNsb3NlZCB0aGUgc29ja2V0XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnVwZ3JhZGUgJiYgdGhpcy50cmFuc3BvcnQucGF1c2UpIHtcbiAgICBkZWJ1Zygnc3RhcnRpbmcgdXBncmFkZSBwcm9iZXMnKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMudXBncmFkZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0aGlzLnByb2JlKHRoaXMudXBncmFkZXNbaV0pO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBIYW5kbGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgJ2Nsb3NpbmcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICBkZWJ1Zygnc29ja2V0IHJlY2VpdmU6IHR5cGUgXCIlc1wiLCBkYXRhIFwiJXNcIicsIHBhY2tldC50eXBlLCBwYWNrZXQuZGF0YSk7XG5cbiAgICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7XG5cbiAgICAvLyBTb2NrZXQgaXMgbGl2ZSAtIGFueSBwYWNrZXQgY291bnRzXG4gICAgdGhpcy5lbWl0KCdoZWFydGJlYXQnKTtcblxuICAgIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICAgIGNhc2UgJ29wZW4nOlxuICAgICAgICB0aGlzLm9uSGFuZHNoYWtlKEpTT04ucGFyc2UocGFja2V0LmRhdGEpKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3BvbmcnOlxuICAgICAgICB0aGlzLnNldFBpbmcoKTtcbiAgICAgICAgdGhpcy5lbWl0KCdwb25nJyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ3NlcnZlciBlcnJvcicpO1xuICAgICAgICBlcnIuY29kZSA9IHBhY2tldC5kYXRhO1xuICAgICAgICB0aGlzLm9uRXJyb3IoZXJyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ21lc3NhZ2UnOlxuICAgICAgICB0aGlzLmVtaXQoJ2RhdGEnLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgIHRoaXMuZW1pdCgnbWVzc2FnZScsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGRlYnVnKCdwYWNrZXQgcmVjZWl2ZWQgd2l0aCBzb2NrZXQgcmVhZHlTdGF0ZSBcIiVzXCInLCB0aGlzLnJlYWR5U3RhdGUpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGhhbmRzaGFrZSBjb21wbGV0aW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kc2hha2Ugb2JqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uSGFuZHNoYWtlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5lbWl0KCdoYW5kc2hha2UnLCBkYXRhKTtcbiAgdGhpcy5pZCA9IGRhdGEuc2lkO1xuICB0aGlzLnRyYW5zcG9ydC5xdWVyeS5zaWQgPSBkYXRhLnNpZDtcbiAgdGhpcy51cGdyYWRlcyA9IHRoaXMuZmlsdGVyVXBncmFkZXMoZGF0YS51cGdyYWRlcyk7XG4gIHRoaXMucGluZ0ludGVydmFsID0gZGF0YS5waW5nSW50ZXJ2YWw7XG4gIHRoaXMucGluZ1RpbWVvdXQgPSBkYXRhLnBpbmdUaW1lb3V0O1xuICB0aGlzLm9uT3BlbigpO1xuICAvLyBJbiBjYXNlIG9wZW4gaGFuZGxlciBjbG9zZXMgc29ja2V0XG4gIGlmICgnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSByZXR1cm47XG4gIHRoaXMuc2V0UGluZygpO1xuXG4gIC8vIFByb2xvbmcgbGl2ZW5lc3Mgb2Ygc29ja2V0IG9uIGhlYXJ0YmVhdFxuICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdoZWFydGJlYXQnLCB0aGlzLm9uSGVhcnRiZWF0KTtcbiAgdGhpcy5vbignaGVhcnRiZWF0JywgdGhpcy5vbkhlYXJ0YmVhdCk7XG59O1xuXG4vKipcbiAqIFJlc2V0cyBwaW5nIHRpbWVvdXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkhlYXJ0YmVhdCA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHNlbGYucGluZ1RpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmICgnY2xvc2VkJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgc2VsZi5vbkNsb3NlKCdwaW5nIHRpbWVvdXQnKTtcbiAgfSwgdGltZW91dCB8fCAoc2VsZi5waW5nSW50ZXJ2YWwgKyBzZWxmLnBpbmdUaW1lb3V0KSk7XG59O1xuXG4vKipcbiAqIFBpbmdzIHNlcnZlciBldmVyeSBgdGhpcy5waW5nSW50ZXJ2YWxgIGFuZCBleHBlY3RzIHJlc3BvbnNlXG4gKiB3aXRoaW4gYHRoaXMucGluZ1RpbWVvdXRgIG9yIGNsb3NlcyBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2V0UGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBjbGVhclRpbWVvdXQoc2VsZi5waW5nSW50ZXJ2YWxUaW1lcik7XG4gIHNlbGYucGluZ0ludGVydmFsVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBwaW5nIHBhY2tldCAtIGV4cGVjdGluZyBwb25nIHdpdGhpbiAlc21zJywgc2VsZi5waW5nVGltZW91dCk7XG4gICAgc2VsZi5waW5nKCk7XG4gICAgc2VsZi5vbkhlYXJ0YmVhdChzZWxmLnBpbmdUaW1lb3V0KTtcbiAgfSwgc2VsZi5waW5nSW50ZXJ2YWwpO1xufTtcblxuLyoqXG4qIFNlbmRzIGEgcGluZyBwYWNrZXQuXG4qXG4qIEBhcGkgcHJpdmF0ZVxuKi9cblxuU29ja2V0LnByb3RvdHlwZS5waW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuc2VuZFBhY2tldCgncGluZycsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLmVtaXQoJ3BpbmcnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCBvbiBgZHJhaW5gIGV2ZW50XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkRyYWluID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLndyaXRlQnVmZmVyLnNwbGljZSgwLCB0aGlzLnByZXZCdWZmZXJMZW4pO1xuXG4gIC8vIHNldHRpbmcgcHJldkJ1ZmZlckxlbiA9IDAgaXMgdmVyeSBpbXBvcnRhbnRcbiAgLy8gZm9yIGV4YW1wbGUsIHdoZW4gdXBncmFkaW5nLCB1cGdyYWRlIHBhY2tldCBpcyBzZW50IG92ZXIsXG4gIC8vIGFuZCBhIG5vbnplcm8gcHJldkJ1ZmZlckxlbiBjb3VsZCBjYXVzZSBwcm9ibGVtcyBvbiBgZHJhaW5gXG4gIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG5cbiAgaWYgKDAgPT09IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgdGhpcy5lbWl0KCdkcmFpbicpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZmx1c2goKTtcbiAgfVxufTtcblxuLyoqXG4gKiBGbHVzaCB3cml0ZSBidWZmZXJzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudHJhbnNwb3J0LndyaXRhYmxlICYmXG4gICAgIXRoaXMudXBncmFkaW5nICYmIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgZGVidWcoJ2ZsdXNoaW5nICVkIHBhY2tldHMgaW4gc29ja2V0JywgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpO1xuICAgIHRoaXMudHJhbnNwb3J0LnNlbmQodGhpcy53cml0ZUJ1ZmZlcik7XG4gICAgLy8ga2VlcCB0cmFjayBvZiBjdXJyZW50IGxlbmd0aCBvZiB3cml0ZUJ1ZmZlclxuICAgIC8vIHNwbGljZSB3cml0ZUJ1ZmZlciBhbmQgY2FsbGJhY2tCdWZmZXIgb24gYGRyYWluYFxuICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoO1xuICAgIHRoaXMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZW5kcyBhIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICogQHJldHVybiB7U29ja2V0fSBmb3IgY2hhaW5pbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUud3JpdGUgPVxuU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKG1zZywgb3B0aW9ucywgZm4pIHtcbiAgdGhpcy5zZW5kUGFja2V0KCdtZXNzYWdlJywgbXNnLCBvcHRpb25zLCBmbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFja2V0IHR5cGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNlbmRQYWNrZXQgPSBmdW5jdGlvbiAodHlwZSwgZGF0YSwgb3B0aW9ucywgZm4pIHtcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBkYXRhKSB7XG4gICAgZm4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIG9wdGlvbnMpIHtcbiAgICBmbiA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cblxuICBpZiAoJ2Nsb3NpbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmNvbXByZXNzID0gZmFsc2UgIT09IG9wdGlvbnMuY29tcHJlc3M7XG5cbiAgdmFyIHBhY2tldCA9IHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIGRhdGE6IGRhdGEsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9O1xuICB0aGlzLmVtaXQoJ3BhY2tldENyZWF0ZScsIHBhY2tldCk7XG4gIHRoaXMud3JpdGVCdWZmZXIucHVzaChwYWNrZXQpO1xuICBpZiAoZm4pIHRoaXMub25jZSgnZmx1c2gnLCBmbik7XG4gIHRoaXMuZmx1c2goKTtcbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zaW5nJztcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGlmICh0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgICAgdGhpcy5vbmNlKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudXBncmFkaW5nKSB7XG4gICAgICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMudXBncmFkaW5nKSB7XG4gICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoJ2ZvcmNlZCBjbG9zZScpO1xuICAgIGRlYnVnKCdzb2NrZXQgY2xvc2luZyAtIHRlbGxpbmcgdHJhbnNwb3J0IHRvIGNsb3NlJyk7XG4gICAgc2VsZi50cmFuc3BvcnQuY2xvc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFudXBBbmRDbG9zZSAoKSB7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcigndXBncmFkZScsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcigndXBncmFkZUVycm9yJywgY2xlYW51cEFuZENsb3NlKTtcbiAgICBjbG9zZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2FpdEZvclVwZ3JhZGUgKCkge1xuICAgIC8vIHdhaXQgZm9yIHVwZ3JhZGUgdG8gZmluaXNoIHNpbmNlIHdlIGNhbid0IHNlbmQgcGFja2V0cyB3aGlsZSBwYXVzaW5nIGEgdHJhbnNwb3J0XG4gICAgc2VsZi5vbmNlKCd1cGdyYWRlJywgY2xlYW51cEFuZENsb3NlKTtcbiAgICBzZWxmLm9uY2UoJ3VwZ3JhZGVFcnJvcicsIGNsZWFudXBBbmRDbG9zZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGVycm9yXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICBkZWJ1Zygnc29ja2V0IGVycm9yICVqJywgZXJyKTtcbiAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5vbkNsb3NlKCd0cmFuc3BvcnQgZXJyb3InLCBlcnIpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgY2xvc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbiwgZGVzYykge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ2Nsb3NpbmcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICBkZWJ1Zygnc29ja2V0IGNsb3NlIHdpdGggcmVhc29uOiBcIiVzXCInLCByZWFzb24pO1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIGNsZWFyIHRpbWVyc1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdJbnRlcnZhbFRpbWVyKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcblxuICAgIC8vIHN0b3AgZXZlbnQgZnJvbSBmaXJpbmcgYWdhaW4gZm9yIHRyYW5zcG9ydFxuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygnY2xvc2UnKTtcblxuICAgIC8vIGVuc3VyZSB0cmFuc3BvcnQgd29uJ3Qgc3RheSBvcGVuXG4gICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcblxuICAgIC8vIGlnbm9yZSBmdXJ0aGVyIHRyYW5zcG9ydCBjb21tdW5pY2F0aW9uXG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG5cbiAgICAvLyBzZXQgcmVhZHkgc3RhdGVcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcblxuICAgIC8vIGNsZWFyIHNlc3Npb24gaWRcbiAgICB0aGlzLmlkID0gbnVsbDtcblxuICAgIC8vIGVtaXQgY2xvc2UgZXZlbnRcbiAgICB0aGlzLmVtaXQoJ2Nsb3NlJywgcmVhc29uLCBkZXNjKTtcblxuICAgIC8vIGNsZWFuIGJ1ZmZlcnMgYWZ0ZXIsIHNvIHVzZXJzIGNhbiBzdGlsbFxuICAgIC8vIGdyYWIgdGhlIGJ1ZmZlcnMgb24gYGNsb3NlYCBldmVudFxuICAgIHNlbGYud3JpdGVCdWZmZXIgPSBbXTtcbiAgICBzZWxmLnByZXZCdWZmZXJMZW4gPSAwO1xuICB9XG59O1xuXG4vKipcbiAqIEZpbHRlcnMgdXBncmFkZXMsIHJldHVybmluZyBvbmx5IHRob3NlIG1hdGNoaW5nIGNsaWVudCB0cmFuc3BvcnRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHNlcnZlciB1cGdyYWRlc1xuICogQGFwaSBwcml2YXRlXG4gKlxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZmlsdGVyVXBncmFkZXMgPSBmdW5jdGlvbiAodXBncmFkZXMpIHtcbiAgdmFyIGZpbHRlcmVkVXBncmFkZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGogPSB1cGdyYWRlcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBpZiAofmluZGV4KHRoaXMudHJhbnNwb3J0cywgdXBncmFkZXNbaV0pKSBmaWx0ZXJlZFVwZ3JhZGVzLnB1c2godXBncmFkZXNbaV0pO1xuICB9XG4gIHJldHVybiBmaWx0ZXJlZFVwZ3JhZGVzO1xufTtcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuXG4vKipcbiAqIEV4cG9ydHMgcGFyc2VyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzLnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbiIsIi8qZ2xvYmFsIEJsb2IsRmlsZSovXG5cbi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50c1xuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgZ2xvYmFsLkJsb2IgPT09ICdmdW5jdGlvbicgfHwgdG9TdHJpbmcuY2FsbChnbG9iYWwuQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIGdsb2JhbC5GaWxlID09PSAnZnVuY3Rpb24nIHx8IHRvU3RyaW5nLmNhbGwoZ2xvYmFsLkZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJztcblxuLyoqXG4gKiBSZXBsYWNlcyBldmVyeSBCdWZmZXIgfCBBcnJheUJ1ZmZlciBpbiBwYWNrZXQgd2l0aCBhIG51bWJlcmVkIHBsYWNlaG9sZGVyLlxuICogQW55dGhpbmcgd2l0aCBibG9icyBvciBmaWxlcyBzaG91bGQgYmUgZmVkIHRocm91Z2ggcmVtb3ZlQmxvYnMgYmVmb3JlIGNvbWluZ1xuICogaGVyZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gc29ja2V0LmlvIGV2ZW50IHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGRlY29uc3RydWN0ZWQgcGFja2V0IGFuZCBsaXN0IG9mIGJ1ZmZlcnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICB2YXIgYnVmZmVycyA9IFtdO1xuICB2YXIgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO1xuICB2YXIgcGFjayA9IHBhY2tldDtcbiAgcGFjay5kYXRhID0gX2RlY29uc3RydWN0UGFja2V0KHBhY2tldERhdGEsIGJ1ZmZlcnMpO1xuICBwYWNrLmF0dGFjaG1lbnRzID0gYnVmZmVycy5sZW5ndGg7IC8vIG51bWJlciBvZiBiaW5hcnkgJ2F0dGFjaG1lbnRzJ1xuICByZXR1cm4ge3BhY2tldDogcGFjaywgYnVmZmVyczogYnVmZmVyc307XG59O1xuXG5mdW5jdGlvbiBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChpc0J1ZihkYXRhKSkge1xuICAgIHZhciBwbGFjZWhvbGRlciA9IHsgX3BsYWNlaG9sZGVyOiB0cnVlLCBudW06IGJ1ZmZlcnMubGVuZ3RoIH07XG4gICAgYnVmZmVycy5wdXNoKGRhdGEpO1xuICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgdmFyIG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgbmV3RGF0YVtpXSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmICEoZGF0YSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgdmFyIG5ld0RhdGEgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgbmV3RGF0YVtrZXldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFJlY29uc3RydWN0cyBhIGJpbmFyeSBwYWNrZXQgZnJvbSBpdHMgcGxhY2Vob2xkZXIgcGFja2V0IGFuZCBidWZmZXJzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIGV2ZW50IHBhY2tldCB3aXRoIHBsYWNlaG9sZGVyc1xuICogQHBhcmFtIHtBcnJheX0gYnVmZmVycyAtIGJpbmFyeSBidWZmZXJzIHRvIHB1dCBpbiBwbGFjZWhvbGRlciBwb3NpdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjb25zdHJ1Y3RlZCBwYWNrZXRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgYnVmZmVycykge1xuICBwYWNrZXQuZGF0YSA9IF9yZWNvbnN0cnVjdFBhY2tldChwYWNrZXQuZGF0YSwgYnVmZmVycyk7XG4gIHBhY2tldC5hdHRhY2htZW50cyA9IHVuZGVmaW5lZDsgLy8gbm8gbG9uZ2VyIHVzZWZ1bFxuICByZXR1cm4gcGFja2V0O1xufTtcblxuZnVuY3Rpb24gX3JlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICBpZiAoZGF0YSAmJiBkYXRhLl9wbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBidWZmZXJzW2RhdGEubnVtXTsgLy8gYXBwcm9wcmlhdGUgYnVmZmVyIChzaG91bGQgYmUgbmF0dXJhbCBvcmRlciBhbnl3YXkpXG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgZGF0YVtpXSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIGRhdGFba2V5XSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHJlbW92ZXMgQmxvYnMgb3IgRmlsZXMgZnJvbSBkYXRhIHZpYVxuICogRmlsZVJlYWRlcidzIHJlYWRBc0FycmF5QnVmZmVyIG1ldGhvZC4gVXNlZCBiZWZvcmUgZW5jb2RpbmdcbiAqIGRhdGEgYXMgbXNncGFjay4gQ2FsbHMgY2FsbGJhY2sgd2l0aCB0aGUgYmxvYmxlc3MgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucmVtb3ZlQmxvYnMgPSBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBfcmVtb3ZlQmxvYnMob2JqLCBjdXJLZXksIGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIG9iajtcblxuICAgIC8vIGNvbnZlcnQgYW55IGJsb2JcbiAgICBpZiAoKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKSkge1xuICAgICAgcGVuZGluZ0Jsb2JzKys7XG5cbiAgICAgIC8vIGFzeW5jIGZpbGVyZWFkZXJcbiAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7IC8vIHRoaXMucmVzdWx0ID09IGFycmF5YnVmZmVyXG4gICAgICAgIGlmIChjb250YWluaW5nT2JqZWN0KSB7XG4gICAgICAgICAgY29udGFpbmluZ09iamVjdFtjdXJLZXldID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYmxvYmxlc3NEYXRhID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBub3RoaW5nIHBlbmRpbmcgaXRzIGNhbGxiYWNrIHRpbWVcbiAgICAgICAgaWYoISAtLXBlbmRpbmdCbG9icykge1xuICAgICAgICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIob2JqKTsgLy8gYmxvYiAtPiBhcnJheWJ1ZmZlclxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopKSB7IC8vIGhhbmRsZSBhcnJheVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtpXSwgaSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFpc0J1ZihvYmopKSB7IC8vIGFuZCBvYmplY3RcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHBlbmRpbmdCbG9icyA9IDA7XG4gIHZhciBibG9ibGVzc0RhdGEgPSBkYXRhO1xuICBfcmVtb3ZlQmxvYnMoYmxvYmxlc3NEYXRhKTtcbiAgaWYgKCFwZW5kaW5nQmxvYnMpIHtcbiAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICB9XG59O1xuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKSB8fFxuICAgIHBsdXJhbChtcywgaCwgJ2hvdXInKSB8fFxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XG4gICAgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykgfHxcbiAgICBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZTtcbiAgfVxuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWdbJ2RlZmF1bHQnXSA9IGNyZWF0ZURlYnVnO1xuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7XG5leHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5leHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkO1xuZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cbi8qKlxuICogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICovXG5leHBvcnRzLmluc3RhbmNlcyA9IFtdO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gIHZhciBoYXNoID0gMCwgaTtcblxuICBmb3IgKGkgaW4gbmFtZXNwYWNlKSB7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICB2YXIgcHJldlRpbWU7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG4gIGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG4gIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5pbml0KSB7XG4gICAgZXhwb3J0cy5pbml0KGRlYnVnKTtcbiAgfVxuXG4gIGV4cG9ydHMuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuXG4gIHJldHVybiBkZWJ1Zztcbn1cblxuZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gIHZhciBpbmRleCA9IGV4cG9ydHMuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBleHBvcnRzLmluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBpO1xuICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwb3J0cy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBleHBvcnRzLmluc3RhbmNlc1tpXTtcbiAgICBpbnN0YW5jZS5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICBpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnVybCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdXJsO1xuXG4vKipcbiAqIFVSTCBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtPYmplY3R9IEFuIG9iamVjdCBtZWFudCB0byBtaW1pYyB3aW5kb3cubG9jYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gd2luZG93LmxvY2F0aW9uLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiB1cmwgKHVyaSwgbG9jKSB7XG4gIHZhciBvYmogPSB1cmk7XG5cbiAgLy8gZGVmYXVsdCB0byB3aW5kb3cubG9jYXRpb25cbiAgbG9jID0gbG9jIHx8IGdsb2JhbC5sb2NhdGlvbjtcbiAgaWYgKG51bGwgPT0gdXJpKSB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgbG9jLmhvc3Q7XG5cbiAgLy8gcmVsYXRpdmUgcGF0aCBzdXBwb3J0XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIGlmICgnLycgPT09IHVyaS5jaGFyQXQoMCkpIHtcbiAgICAgIGlmICgnLycgPT09IHVyaS5jaGFyQXQoMSkpIHtcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gbG9jLmhvc3QgKyB1cmk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCEvXihodHRwcz98d3NzPyk6XFwvXFwvLy50ZXN0KHVyaSkpIHtcbiAgICAgIGRlYnVnKCdwcm90b2NvbC1sZXNzIHVybCAlcycsIHVyaSk7XG4gICAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBsb2MpIHtcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgJy8vJyArIHVyaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVyaSA9ICdodHRwczovLycgKyB1cmk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcGFyc2VcbiAgICBkZWJ1ZygncGFyc2UgJXMnLCB1cmkpO1xuICAgIG9iaiA9IHBhcnNldXJpKHVyaSk7XG4gIH1cblxuICAvLyBtYWtlIHN1cmUgd2UgdHJlYXQgYGxvY2FsaG9zdDo4MGAgYW5kIGBsb2NhbGhvc3RgIGVxdWFsbHlcbiAgaWYgKCFvYmoucG9ydCkge1xuICAgIGlmICgvXihodHRwfHdzKSQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgb2JqLnBvcnQgPSAnODAnO1xuICAgIH0gZWxzZSBpZiAoL14oaHR0cHx3cylzJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc0NDMnO1xuICAgIH1cbiAgfVxuXG4gIG9iai5wYXRoID0gb2JqLnBhdGggfHwgJy8nO1xuXG4gIHZhciBpcHY2ID0gb2JqLmhvc3QuaW5kZXhPZignOicpICE9PSAtMTtcbiAgdmFyIGhvc3QgPSBpcHY2ID8gJ1snICsgb2JqLmhvc3QgKyAnXScgOiBvYmouaG9zdDtcblxuICAvLyBkZWZpbmUgdW5pcXVlIGlkXG4gIG9iai5pZCA9IG9iai5wcm90b2NvbCArICc6Ly8nICsgaG9zdCArICc6JyArIG9iai5wb3J0O1xuICAvLyBkZWZpbmUgaHJlZlxuICBvYmouaHJlZiA9IG9iai5wcm90b2NvbCArICc6Ly8nICsgaG9zdCArIChsb2MgJiYgbG9jLnBvcnQgPT09IG9iai5wb3J0ID8gJycgOiAoJzonICsgb2JqLnBvcnQpKTtcblxuICByZXR1cm4gb2JqO1xufVxuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHVybCA9IHJlcXVpcmUoJy4vdXJsJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIE1hbmFnZXIgPSByZXF1aXJlKCcuL21hbmFnZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBsb29rdXA7XG5cbi8qKlxuICogTWFuYWdlcnMgY2FjaGUuXG4gKi9cblxudmFyIGNhY2hlID0gZXhwb3J0cy5tYW5hZ2VycyA9IHt9O1xuXG4vKipcbiAqIExvb2tzIHVwIGFuIGV4aXN0aW5nIGBNYW5hZ2VyYCBmb3IgbXVsdGlwbGV4aW5nLlxuICogSWYgdGhlIHVzZXIgc3VtbW9uczpcbiAqXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9hJyk7YFxuICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYicpO2BcbiAqXG4gKiBXZSByZXVzZSB0aGUgZXhpc3RpbmcgaW5zdGFuY2UgYmFzZWQgb24gc2FtZSBzY2hlbWUvcG9ydC9ob3N0LFxuICogYW5kIHdlIGluaXRpYWxpemUgc29ja2V0cyBmb3IgZWFjaCBuYW1lc3BhY2UuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb29rdXAgKHVyaSwgb3B0cykge1xuICBpZiAodHlwZW9mIHVyaSA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRzID0gdXJpO1xuICAgIHVyaSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIHZhciBwYXJzZWQgPSB1cmwodXJpKTtcbiAgdmFyIHNvdXJjZSA9IHBhcnNlZC5zb3VyY2U7XG4gIHZhciBpZCA9IHBhcnNlZC5pZDtcbiAgdmFyIHBhdGggPSBwYXJzZWQucGF0aDtcbiAgdmFyIHNhbWVOYW1lc3BhY2UgPSBjYWNoZVtpZF0gJiYgcGF0aCBpbiBjYWNoZVtpZF0ubnNwcztcbiAgdmFyIG5ld0Nvbm5lY3Rpb24gPSBvcHRzLmZvcmNlTmV3IHx8IG9wdHNbJ2ZvcmNlIG5ldyBjb25uZWN0aW9uJ10gfHxcbiAgICAgICAgICAgICAgICAgICAgICBmYWxzZSA9PT0gb3B0cy5tdWx0aXBsZXggfHwgc2FtZU5hbWVzcGFjZTtcblxuICB2YXIgaW87XG5cbiAgaWYgKG5ld0Nvbm5lY3Rpb24pIHtcbiAgICBkZWJ1ZygnaWdub3Jpbmcgc29ja2V0IGNhY2hlIGZvciAlcycsIHNvdXJjZSk7XG4gICAgaW8gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFjYWNoZVtpZF0pIHtcbiAgICAgIGRlYnVnKCduZXcgaW8gaW5zdGFuY2UgZm9yICVzJywgc291cmNlKTtcbiAgICAgIGNhY2hlW2lkXSA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICB9XG4gICAgaW8gPSBjYWNoZVtpZF07XG4gIH1cbiAgaWYgKHBhcnNlZC5xdWVyeSAmJiAhb3B0cy5xdWVyeSkge1xuICAgIG9wdHMucXVlcnkgPSBwYXJzZWQucXVlcnk7XG4gIH1cbiAgcmV0dXJuIGlvLnNvY2tldChwYXJzZWQucGF0aCwgb3B0cyk7XG59XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7XG5cbi8qKlxuICogYGNvbm5lY3RgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmlcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5jb25uZWN0ID0gbG9va3VwO1xuXG4vKipcbiAqIEV4cG9zZSBjb25zdHJ1Y3RvcnMgZm9yIHN0YW5kYWxvbmUgYnVpbGQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLk1hbmFnZXIgPSByZXF1aXJlKCcuL21hbmFnZXInKTtcbmV4cG9ydHMuU29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcclxuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYTI3ODQ2MDhhZjBhNTIwZTBlOGVkNjMzYWJlNjk3ZTkucG5nXCI7IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIjaW5wdXQtY29tcG9uZW50IHtcXG4gIGhlaWdodDogMjAwcHg7XFxuICBmbGV4OiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzk3QzBCNztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IH1cXG4gICNpbnB1dC1jb21wb25lbnQgZm9ybSB7XFxuICAgIGZvbnQtZmFtaWx5OiBWZXJkYW5hO1xcbiAgICBwYWRkaW5nOiAyMHB4OyB9XFxuICAgICNpbnB1dC1jb21wb25lbnQgZm9ybSBidXR0b24ge1xcbiAgICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgIGhlaWdodDogNTBweDtcXG4gICAgICBib3JkZXI6IDJweCBzb2xpZCB3aGl0ZTtcXG4gICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgLW1vei1ib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgIC1tcy1ib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgY29sb3I6ICM3MkE3QTM7XFxuICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7IH1cXG4gICAgICAjaW5wdXQtY29tcG9uZW50IGZvcm0gYnV0dG9uIGltZyB7XFxuICAgICAgICB3aWR0aDogMzBweDtcXG4gICAgICAgIGhlaWdodDogMzBweDtcXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7XFxuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XFxuICAgICNpbnB1dC1jb21wb25lbnQgZm9ybSBidXR0b246aG92ZXIge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOyB9XFxuICAgICNpbnB1dC1jb21wb25lbnQgZm9ybSB0ZXh0YXJlYSB7XFxuICAgICAgaGVpZ2h0OiAxNTBweDsgfVxcbiAgICAjaW5wdXQtY29tcG9uZW50IGZvcm0gaW5wdXRbdHlwZT10ZXh0XSwgI2lucHV0LWNvbXBvbmVudCBmb3JtIHRleHRhcmVhIHtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbiAgICAgIGJvcmRlcjogMnB4IHNvbGlkIHdoaXRlO1xcbiAgICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgICAtbW96LWJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgLW1zLWJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgIGNvbG9yOiAjNzJBN0EzO1xcbiAgICAgIHdpZHRoOiA0MDBweDtcXG4gICAgICBmb250LXNpemU6IDIwcHg7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9JbnB1dENvbXBvbmVudC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0lucHV0Q29tcG9uZW50LnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0lucHV0Q29tcG9uZW50LnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICcuL0lucHV0Q29tcG9uZW50LnNjc3MnO1xuaW1wb3J0IHNlbmRJbWcgZnJvbSAnLi9pbWcvc2VuZC5wbmcnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGlucHV0Q2hhbmdlLCBzZW5kTWVzc2FnZSB9IGZyb20gJy4uL2FjdGlvbnMvYWN0aW9ucyc7XG5cbmNsYXNzIElucHV0Q29tcG9uZW50IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgc3VibWl0TWVzc2FnZSA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHVzZXJuYW1lLFxuICAgICAgY3VycmVudE1lc3NhZ2UsXG4gICAgICBoYW5kbGVTdWJtaXRcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZighY3VycmVudE1lc3NhZ2UgfHwgIWN1cnJlbnRNZXNzYWdlLmxlbmd0aCB8fCBjdXJyZW50TWVzc2FnZS5sZW5ndGggPiA1MDApIHtcbiAgICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlIG5vdCB2YWxpZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGhhbmRsZVN1Ym1pdChcbiAgICAgIGN1cnJlbnRNZXNzYWdlLFxuICAgICAgKHVzZXJuYW1lLmxlbmd0aCA/IHVzZXJuYW1lIDogJ0Fub255bW91cycpLFxuICAgICAgbmV3IERhdGUoRGF0ZS5ub3coKSkudG9Mb2NhbGVUaW1lU3RyaW5nKClcbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHVzZXJuYW1lLFxuICAgICAgY3VycmVudE1lc3NhZ2UsXG4gICAgICBoYW5kbGVDaGFuZ2UsXG4gICAgICBoYW5kbGVTdWJtaXRcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybihcbiAgICAgIDxkaXYgaWQ9J2lucHV0LWNvbXBvbmVudCc+XG4gICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLnN1Ym1pdE1lc3NhZ2V9ID5cbiAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgdmFsdWU9e3VzZXJuYW1lfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gaGFuZGxlQ2hhbmdlKCd1c2VybmFtZScsIGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdZb3VyIHVzZXJuYW1lJyAvPlxuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSdjdXJyZW50TWVzc2FnZScgdmFsdWU9e2N1cnJlbnRNZXNzYWdlfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gaGFuZGxlQ2hhbmdlKCdjdXJyZW50TWVzc2FnZScsIGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdZb3VyIG1lc3NhZ2UnIC8+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgPGJ1dHRvbj48aW1nIHNyYz17c2VuZEltZ30gYWx0PSdTZW5kJyAvPlNlbmQ8L2J1dHRvbj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiB7XG4gIHJldHVybiB7XG4gICAgdXNlcm5hbWU6IHN0YXRlLmN1cnJlbnRJbnB1dC51c2VybmFtZSxcbiAgICBjdXJyZW50TWVzc2FnZTogc3RhdGUuY3VycmVudElucHV0LmN1cnJlbnRNZXNzYWdlXG4gIH07XG59O1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiB7XG4gIHJldHVybiB7XG4gICAgaGFuZGxlQ2hhbmdlOiAobmFtZSwgdmFsdWUpID0+IGRpc3BhdGNoKGlucHV0Q2hhbmdlKG5hbWUsIHZhbHVlKSksXG4gICAgaGFuZGxlU3VibWl0OiAodGV4dCwgdXNlcm5hbWUsIGRhdGUpID0+IGRpc3BhdGNoKHNlbmRNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHRleHQsXG4gICAgICB1c2VybmFtZSxcbiAgICAgIGRhdGVcbiAgICB9KSkpXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcERpc3BhdGNoVG9Qcm9wcylcbiAgKElucHV0Q29tcG9uZW50KTsiLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiKiB7XFxuICBmb250LWZhbWlseTogVmVyZGFuYTtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7IH1cXG5cXG4jY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgaGVpZ2h0OiAxMDB2aDsgfVxcblxcbmgxIHtcXG4gIGNvbG9yOiAjMEE1NTVDOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vQXBwLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vQXBwLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0FwcC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9BcHAuc2Nzcyc7XG5pbXBvcnQgSW5wdXRDb21wb25lbnQgZnJvbSAnLi9JbnB1dENvbXBvbmVudCc7XG5pbXBvcnQgTWVzc2FnZUxpc3QgZnJvbSAnLi9NZXNzYWdlTGlzdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybihcbiAgICAgIDxkaXYgaWQ9J2NvbnRhaW5lcic+XG4gICAgICAgIDxNZXNzYWdlTGlzdCAvPlxuICAgICAgICA8SW5wdXRDb21wb25lbnQgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn0iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBiYT1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLGVhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxBPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLEM9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksZmE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksaGE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxqYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGthPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKTtcbmZ1bmN0aW9uIEQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cDovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2JhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9ZWE/dm9pZCAwOkQoXCIyMjdcIik7XG5mdW5jdGlvbiBtYShhLGIsYyxkLGUsZixoLGcsayl7dGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITE7dGhpcy5fY2F1Z2h0RXJyb3I9bnVsbDt2YXIgdj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyx2KX1jYXRjaChsKXt0aGlzLl9jYXVnaHRFcnJvcj1sLHRoaXMuX2hhc0NhdWdodEVycm9yPSEwfX1cbnZhciBFPXtfY2F1Z2h0RXJyb3I6bnVsbCxfaGFzQ2F1Z2h0RXJyb3I6ITEsX3JldGhyb3dFcnJvcjpudWxsLF9oYXNSZXRocm93RXJyb3I6ITEsaW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXttYS5hcHBseShFLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKEUuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHY9RS5jbGVhckNhdWdodEVycm9yKCk7RS5faGFzUmV0aHJvd0Vycm9yfHwoRS5faGFzUmV0aHJvd0Vycm9yPSEwLEUuX3JldGhyb3dFcnJvcj12KX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBuYS5hcHBseShFLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEUuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoRS5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVxuRS5fY2F1Z2h0RXJyb3I7RS5fY2F1Z2h0RXJyb3I9bnVsbDtFLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1EKFwiMTk4XCIpfX07ZnVuY3Rpb24gbmEoKXtpZihFLl9oYXNSZXRocm93RXJyb3Ipe3ZhciBhPUUuX3JldGhyb3dFcnJvcjtFLl9yZXRocm93RXJyb3I9bnVsbDtFLl9oYXNSZXRocm93RXJyb3I9ITE7dGhyb3cgYTt9fXZhciBvYT1udWxsLHBhPXt9O1xuZnVuY3Rpb24gcWEoKXtpZihvYSlmb3IodmFyIGEgaW4gcGEpe3ZhciBiPXBhW2FdLGM9b2EuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDpEKFwiOTZcIixhKTtpZighcmFbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6RChcIjk3XCIsYSk7cmFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtzYS5oYXNPd25Qcm9wZXJ0eShnKT9EKFwiOTlcIixnKTp2b2lkIDA7c2FbZ109Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmdGEoa1tlXSxoLGcpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHRhKGYucmVnaXN0cmF0aW9uTmFtZSxoLGcpLGU9ITApOmU9ITE7ZT92b2lkIDA6RChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHRhKGEsYixjKXt1YVthXT9EKFwiMTAwXCIsYSk6dm9pZCAwO3VhW2FdPWI7dmFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgcmE9W10sc2E9e30sdWE9e30sdmE9e307ZnVuY3Rpb24gd2EoYSl7b2E/RChcIjEwMVwiKTp2b2lkIDA7b2E9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7cWEoKX1mdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtwYS5oYXNPd25Qcm9wZXJ0eShjKSYmcGFbY109PT1kfHwocGFbY10/RChcIjEwMlwiLGMpOnZvaWQgMCxwYVtjXT1kLGI9ITApfWImJnFhKCl9XG52YXIgQ2E9T2JqZWN0LmZyZWV6ZSh7cGx1Z2luczpyYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6c2EscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6dWEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczp2YSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp3YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6eGF9KSxEYT1udWxsLEVhPW51bGwsRmE9bnVsbDtmdW5jdGlvbiBHYShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PUZhKGQpO0UuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBIYShhLGIpe251bGw9PWI/RChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gSWEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIEphPW51bGw7XG5mdW5jdGlvbiBLYShhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKylHYShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJkdhKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIExhKGEpe3JldHVybiBLYShhLCEwKX1mdW5jdGlvbiBNYShhKXtyZXR1cm4gS2EoYSwhMSl9dmFyIE5hPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOndhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp4YX07XG5mdW5jdGlvbiBPYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPURhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBQYShhLGIpe251bGwhPT1hJiYoSmE9SGEoSmEsYSkpO2E9SmE7SmE9bnVsbDthJiYoYj9JYShhLExhKTpJYShhLE1hKSxKYT9EKFwiOTVcIik6dm9pZCAwLEUucmV0aHJvd0NhdWdodEVycm9yKCkpfWZ1bmN0aW9uIFFhKGEsYixjLGQpe2Zvcih2YXIgZT1udWxsLGY9MDtmPHJhLmxlbmd0aDtmKyspe3ZhciBoPXJhW2ZdO2gmJihoPWguZXh0cmFjdEV2ZW50cyhhLGIsYyxkKSkmJihlPUhhKGUsaCkpfVBhKGUsITEpfXZhciBSYT1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246TmEsZ2V0TGlzdGVuZXI6T2EscnVuRXZlbnRzSW5CYXRjaDpQYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOlFhfSksU2E9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRj1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK1NhLFRhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrU2E7XG5mdW5jdGlvbiBVYShhKXtpZihhW0ZdKXJldHVybiBhW0ZdO2Zvcig7IWFbRl07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIFZhKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTtEKFwiMzNcIil9ZnVuY3Rpb24gWGEoYSl7cmV0dXJuIGFbVGFdfHxudWxsfXZhciBiYj1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbRl09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6VWEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbRl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpWYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlhhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW1RhXT1ifX0pO1xuZnVuY3Rpb24gTChhKXtkbyBhPWFbXCJyZXR1cm5cIl07d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gY2IoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1MKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIGRiKGEsYixjKXtpZihiPU9hKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9SGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9SGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gZWIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmY2IoYS5fdGFyZ2V0SW5zdCxkYixhKX1cbmZ1bmN0aW9uIGZiKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0woYik6bnVsbDtjYihiLGRiLGEpfX1mdW5jdGlvbiBnYihhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1PYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9SGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9SGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIGhiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmZ2IoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIGliKGEpe0lhKGEsZWIpfVxuZnVuY3Rpb24gamIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGg9MCxnPWU7ZztnPUwoZykpaCsrO2c9MDtmb3IodmFyIGs9ZjtrO2s9TChrKSlnKys7Zm9yKDswPGgtZzspZT1MKGUpLGgtLTtmb3IoOzA8Zy1oOylmPUwoZiksZy0tO2Zvcig7aC0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9TChlKTtmPUwoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2g9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2UucHVzaChjKTtjPUwoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtoPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztjLnB1c2goZCk7ZD1MKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspZ2IoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspZ2IoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIga2I9T2JqZWN0LmZyZWV6ZSh7YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczppYixhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtJYShhLGZiKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOmpiLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0lhKGEsaGIpfX0pLGxiPW51bGw7ZnVuY3Rpb24gbWIoKXshbGImJm0uY2FuVXNlRE9NJiYobGI9XCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1widGV4dENvbnRlbnRcIjpcImlubmVyVGV4dFwiKTtyZXR1cm4gbGJ9dmFyIE09e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH07XG5mdW5jdGlvbiBuYigpe2lmKE0uX2ZhbGxiYWNrVGV4dClyZXR1cm4gTS5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9TS5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW9iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgaD1jLWE7Zm9yKGQ9MTtkPD1oJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtNLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gTS5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG9iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gTS5fcm9vdD9NLl9yb290LnZhbHVlOk0uX3Jvb3RbbWIoKV19XG52YXIgcGI9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxxYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6Qy50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIE4oYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP0MudGhhdFJldHVybnNUcnVlOkMudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbkEoTi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1DLnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OkMudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxwYi5sZW5ndGg7YSsrKXRoaXNbcGJbYV1dPW51bGx9fSk7Ti5JbnRlcmZhY2U9cWI7Ti5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7QShlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9QSh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtyYihjKTtyZXR1cm4gY307cmIoTik7XG5mdW5jdGlvbiBzYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiB0YihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6RChcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcmIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9c2I7YS5yZWxlYXNlPXRifXZhciB1Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksdmI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHdiPVs5LDEzLDI3LDMyXSx4Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseWI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeWI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB6Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXliLEFiPW0uY2FuVXNlRE9NJiYoIXhifHx5YiYmODx5YiYmMTE+PXliKSxCYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxLYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uU3RhcnQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25VcGRhdGUgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9fSxMYj0hMTtcbmZ1bmN0aW9uIE1iKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlVcFwiOnJldHVybi0xIT09d2IuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJ0b3BLZXlEb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwidG9wS2V5UHJlc3NcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBOYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBPYj0hMTtmdW5jdGlvbiBQYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gTmIoYik7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0xiPSEwO3JldHVybiBCYjtjYXNlIFwidG9wVGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1CYiYmTGI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gUWIoYSxiKXtpZihPYilyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwheGImJk1iKGEsYik/KGE9bmIoKSxNLl9yb290PW51bGwsTS5fc3RhcnRUZXh0PW51bGwsTS5fZmFsbGJhY2tUZXh0PW51bGwsT2I9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIEFiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIFJiPXtldmVudFR5cGVzOktiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih4YiliOntzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uU3RhcnRcIjplPUtiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjplPUtiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uVXBkYXRlXCI6ZT1LYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgT2I/TWIoYSxjKSYmKGU9S2IuY29tcG9zaXRpb25FbmQpOlwidG9wS2V5RG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1LYi5jb21wb3NpdGlvblN0YXJ0KTtlPyhBYiYmKE9ifHxlIT09S2IuY29tcG9zaXRpb25TdGFydD9lPT09S2IuY29tcG9zaXRpb25FbmQmJk9iJiYoZj1uYigpKTooTS5fcm9vdD1kLE0uX3N0YXJ0VGV4dD1vYigpLE9iPSEwKSksZT11Yi5nZXRQb29sZWQoZSxcbmIsYyxkKSxmP2UuZGF0YT1mOihmPU5iKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxpYihlKSxmPWUpOmY9bnVsbDsoYT16Yj9QYihhLGMpOlFiKGEsYykpPyhiPXZiLmdldFBvb2xlZChLYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsaWIoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sU2I9bnVsbCxUYj17aW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDpmdW5jdGlvbihhKXtTYj1hfX0sVWI9bnVsbCxWYj1udWxsO2Z1bmN0aW9uIFdiKGEpe2lmKGE9RWEoYSkpe1NiJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgU2IucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZT92b2lkIDA6RChcIjE5NFwiKTt2YXIgYj1EYShhLnN0YXRlTm9kZSk7U2IucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIFhiKGEpe1ViP1ZiP1ZiLnB1c2goYSk6VmI9W2FdOlViPWF9XG5mdW5jdGlvbiBZYigpe3JldHVybiBudWxsIT09VWJ8fG51bGwhPT1WYn1mdW5jdGlvbiBaYigpe2lmKFViKXt2YXIgYT1VYixiPVZiO1ZiPVViPW51bGw7V2IoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKVdiKGJbYV0pfX12YXIgJGI9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOlRiLGVucXVldWVTdGF0ZVJlc3RvcmU6WGIsbmVlZHNTdGF0ZVJlc3RvcmU6WWIscmVzdG9yZVN0YXRlSWZOZWVkZWQ6WmJ9KTtmdW5jdGlvbiBhYyhhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIGJjKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIGNjKCl7fXZhciBkYz0hMTtmdW5jdGlvbiBlYyhhLGIpe2lmKGRjKXJldHVybiBhKGIpO2RjPSEwO3RyeXtyZXR1cm4gYWMoYSxiKX1maW5hbGx5e2RjPSExLFliKCkmJihjYygpLFpiKCkpfX1cbnZhciBmYz17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBnYyhhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWZjW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBoYyhhKXthPWEudGFyZ2V0fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfVxuZnVuY3Rpb24gaWMoYSxiKXtpZighbS5jYW5Vc2VET018fGImJiEoXCJhZGRFdmVudExpc3RlbmVyXCJpbiBkb2N1bWVudCkpcmV0dXJuITE7YT1cIm9uXCIrYTtiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBqYyhhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24ga2MoYSl7dmFyIGI9amMoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5nZXQuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2Muc2V0LmNhbGwodGhpcyxhKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pLHtnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPW51bGw7ZGVsZXRlIGFbYl19fX1cbmZ1bmN0aW9uIGxjKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1rYyhhKSl9ZnVuY3Rpb24gbWMoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPWpjKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9XG52YXIgbmM9ZWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsTz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sb2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHBjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY2FsbFwiKTo2MDEwNCxxYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnJldHVyblwiKTo2MDEwNSxyYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixzYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHRjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx2Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsd2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLFxueGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5Yz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gemMoYSl7aWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXljJiZhW3ljXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gQWMoYSl7YT1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2Ugc2M6cmV0dXJuXCJSZWFjdEZyYWdtZW50XCI7Y2FzZSByYzpyZXR1cm5cIlJlYWN0UG9ydGFsXCI7Y2FzZSBwYzpyZXR1cm5cIlJlYWN0Q2FsbFwiO2Nhc2UgcWM6cmV0dXJuXCJSZWFjdFJldHVyblwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeGM6cmV0dXJuIGE9YS5yZW5kZXIuZGlzcGxheU5hbWV8fGEucmVuZGVyLm5hbWV8fFwiXCIsXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCJ9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBCYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPUFjKGEpO3ZhciBmPW51bGw7YyYmKGY9QWMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWFbXCJyZXR1cm5cIl19d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgQ2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLERjPXt9LEVjPXt9O2Z1bmN0aW9uIEZjKGEpe2lmKEVjLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKERjLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKENjLnRlc3QoYSkpcmV0dXJuIEVjW2FdPSEwO0RjW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gR2MoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gSGMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8R2MoYSxiLGMsZCkpcmV0dXJuITA7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBVKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgVj17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtWW2JdPW5ldyBVKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIFNjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gVGMoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsXG5UYyk7VltiXT1uZXcgVShiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtWLnRhYkluZGV4PW5ldyBVKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTtcbmZ1bmN0aW9uIFVjKGEsYixjLGQpe3ZhciBlPVYuaGFzT3duUHJvcGVydHkoYik/VltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KEhjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9GYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gVmMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFdjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVhjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gWWMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZVYyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gWmMoYSxiKXtZYyhhLGIpO3ZhciBjPVhjKGIudmFsdWUpO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWIudHlwZSl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtiLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/JGMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmJGMoYSxiLnR5cGUsWGMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBhZChhLGIpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSlcIlwiPT09YS52YWx1ZSYmKGEudmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlKSxhLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Yj1hLm5hbWU7XCJcIiE9PWImJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO1wiXCIhPT1iJiYoYS5uYW1lPWIpfWZ1bmN0aW9uICRjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1cbmZ1bmN0aW9uIFhjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX12YXIgYmQ9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ2hhbmdlIHRvcENsaWNrIHRvcEZvY3VzIHRvcElucHV0IHRvcEtleURvd24gdG9wS2V5VXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gY2QoYSxiLGMpe2E9Ti5nZXRQb29sZWQoYmQuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtYYihjKTtpYihhKTtyZXR1cm4gYX12YXIgZGQ9bnVsbCxlZD1udWxsO2Z1bmN0aW9uIGZkKGEpe1BhKGEsITEpfVxuZnVuY3Rpb24gZ2QoYSl7dmFyIGI9VmEoYSk7aWYobWMoYikpcmV0dXJuIGF9ZnVuY3Rpb24gaGQoYSxiKXtpZihcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgaWQ9ITE7bS5jYW5Vc2VET00mJihpZD1pYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBqZCgpe2RkJiYoZGQuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsa2QpLGVkPWRkPW51bGwpfWZ1bmN0aW9uIGtkKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZnZChlZCkmJihhPWNkKGVkLGEsaGMoYSkpLGVjKGZkLGEpKX1mdW5jdGlvbiBsZChhLGIsYyl7XCJ0b3BGb2N1c1wiPT09YT8oamQoKSxkZD1iLGVkPWMsZGQuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsa2QpKTpcInRvcEJsdXJcIj09PWEmJmpkKCl9XG5mdW5jdGlvbiBtZChhKXtpZihcInRvcFNlbGVjdGlvbkNoYW5nZVwiPT09YXx8XCJ0b3BLZXlVcFwiPT09YXx8XCJ0b3BLZXlEb3duXCI9PT1hKXJldHVybiBnZChlZCl9ZnVuY3Rpb24gbmQoYSxiKXtpZihcInRvcENsaWNrXCI9PT1hKXJldHVybiBnZChiKX1mdW5jdGlvbiBvZChhLGIpe2lmKFwidG9wSW5wdXRcIj09PWF8fFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBnZChiKX1cbnZhciBwZD17ZXZlbnRUeXBlczpiZCxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOmlkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9WYShiKTp3aW5kb3csZj12b2lkIDAsaD12b2lkIDAsZz1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWd8fFwiaW5wdXRcIj09PWcmJlwiZmlsZVwiPT09ZS50eXBlP2Y9aGQ6Z2MoZSk/aWQ/Zj1vZDooZj1tZCxoPWxkKTooZz1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zy50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1uZCk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gY2QoZixjLGQpO2gmJmgoYSxlLGIpO1widG9wQmx1clwiPT09YSYmbnVsbCE9YiYmKGE9Yi5fd3JhcHBlclN0YXRlfHxlLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJiRjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LHFkPU4uZXh0ZW5kKHt2aWV3Om51bGwsXG5kZXRhaWw6bnVsbH0pLHJkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBzZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPXJkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gdGQoKXtyZXR1cm4gc2R9XG52YXIgdWQ9cWQuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pLHZkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LHdkPXtldmVudFR5cGVzOnZkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxcbmIsYyxkKXtpZihcInRvcE1vdXNlT3ZlclwiPT09YSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fFwidG9wTW91c2VPdXRcIiE9PWEmJlwidG9wTW91c2VPdmVyXCIhPT1hKXJldHVybiBudWxsO3ZhciBlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O1widG9wTW91c2VPdXRcIj09PWE/KGE9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP1VhKGIpOm51bGwpOmE9bnVsbDtpZihhPT09YilyZXR1cm4gbnVsbDt2YXIgZj1udWxsPT1hP2U6VmEoYSk7ZT1udWxsPT1iP2U6VmEoYik7dmFyIGg9dWQuZ2V0UG9vbGVkKHZkLm1vdXNlTGVhdmUsYSxjLGQpO2gudHlwZT1cIm1vdXNlbGVhdmVcIjtoLnRhcmdldD1mO2gucmVsYXRlZFRhcmdldD1lO2M9dWQuZ2V0UG9vbGVkKHZkLm1vdXNlRW50ZXIsYixjLGQpO2MudHlwZT1cIm1vdXNlZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1cbmY7amIoaCxjLGEsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiB4ZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7YltcInJldHVyblwiXTspYj1iW1wicmV0dXJuXCJdO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2JbXCJyZXR1cm5cIl07KWlmKGI9YltcInJldHVyblwiXSwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIHlkKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PXhkKGEpOiExfWZ1bmN0aW9uIHpkKGEpezIhPT14ZChhKT9EKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIEFkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPXhkKGEpLDM9PT1iP0QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Y1tcInJldHVyblwiXSxmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09YylyZXR1cm4gemQoZSksYTtpZihoPT09ZClyZXR1cm4gemQoZSksYjtoPWguc2libGluZ31EKFwiMTg4XCIpfWlmKGNbXCJyZXR1cm5cIl0hPT1kW1wicmV0dXJuXCJdKWM9ZSxkPWY7ZWxzZXtoPSExO2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZjtkPWU7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1mO2M9ZTticmVha31nPWcuc2libGluZ31oP1xudm9pZCAwOkQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9EKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/RChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBCZChhKXthPUFkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gQ2QoYSl7YT1BZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBEZD1OLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksRWQ9Ti5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxGZD1xZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gR2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgSGQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LElkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxKZD1xZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9SGRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9R2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP0lkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9HZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9HZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLEtkPXVkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxMZD1xZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZH0pLE1kPU4uZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLE5kPXVkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksT2Q9e30sUGQ9e307ZnVuY3Rpb24gUWQoYSxiKXt2YXIgYz1hWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSxkPVwib25cIitjO2M9XCJ0b3BcIitjO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O09kW2FdPWI7UGRbY109Yn1cblwiYmx1ciBjYW5jZWwgY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZG91YmxlQ2xpY2sgZHJhZ0VuZCBkcmFnU3RhcnQgZHJvcCBmb2N1cyBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbW91c2VEb3duIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSByYXRlQ2hhbmdlIHJlc2V0IHNlZWtlZCBzdWJtaXQgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtRZChhLCEwKX0pO1xuXCJhYm9ydCBhbmltYXRpb25FbmQgYW5pbWF0aW9uSXRlcmF0aW9uIGFuaW1hdGlvblN0YXJ0IGNhblBsYXkgY2FuUGxheVRocm91Z2ggZHJhZyBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBwbGF5aW5nIHByb2dyZXNzIHNjcm9sbCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvZ2dsZSB0b3VjaE1vdmUgdHJhbnNpdGlvbkVuZCB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UWQoYSwhMSl9KTtcbnZhciBSZD17ZXZlbnRUeXBlczpPZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1QZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9UGRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDA9PT1HZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOmE9SmQ7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpjYXNlIFwidG9wRm9jdXNcIjphPUZkO2JyZWFrO2Nhc2UgXCJ0b3BDbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwidG9wRG91YmxlQ2xpY2tcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcE1vdXNlTW92ZVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6Y2FzZSBcInRvcE1vdXNlT3V0XCI6Y2FzZSBcInRvcE1vdXNlT3ZlclwiOmNhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmE9XG51ZDticmVhaztjYXNlIFwidG9wRHJhZ1wiOmNhc2UgXCJ0b3BEcmFnRW5kXCI6Y2FzZSBcInRvcERyYWdFbnRlclwiOmNhc2UgXCJ0b3BEcmFnRXhpdFwiOmNhc2UgXCJ0b3BEcmFnTGVhdmVcIjpjYXNlIFwidG9wRHJhZ092ZXJcIjpjYXNlIFwidG9wRHJhZ1N0YXJ0XCI6Y2FzZSBcInRvcERyb3BcIjphPUtkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9TGQ7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPURkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1NZDticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1xZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPU5kO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9RWQ7YnJlYWs7ZGVmYXVsdDphPVxuTn1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO2liKGIpO3JldHVybiBifX0sU2Q9UmQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFRkPVtdO2Z1bmN0aW9uIFVkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2NbXCJyZXR1cm5cIl07KWM9Y1tcInJldHVyblwiXTtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPVVhKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sUWEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LGhjKGEubmF0aXZlRXZlbnQpKX12YXIgVmQ9ITA7ZnVuY3Rpb24gV2QoYSl7VmQ9ISFhfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oU2QoYSk/WGQ6WWQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCExKX1mdW5jdGlvbiBaZChhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oU2QoYSk/WGQ6WWQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCEwKX1mdW5jdGlvbiBYZChhLGIpe2JjKFlkLGEsYil9XG5mdW5jdGlvbiBZZChhLGIpe2lmKFZkKXt2YXIgYz1oYyhiKTtjPVVhKGMpO251bGwhPT1jJiZcIm51bWJlclwiPT09dHlwZW9mIGMudGFnJiYyIT09eGQoYykmJihjPW51bGwpO2lmKFRkLmxlbmd0aCl7dmFyIGQ9VGQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7ZWMoVWQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5UZC5sZW5ndGgmJlRkLnB1c2goYSl9fX1cbnZhciAkZD1PYmplY3QuZnJlZXplKHtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gVmR9LHNldEVuYWJsZWQ6V2QsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIFZkfSx0cmFwQnViYmxlZEV2ZW50OlcsdHJhcENhcHR1cmVkRXZlbnQ6WmQsZGlzcGF0Y2hFdmVudDpZZH0pO2Z1bmN0aW9uIGFlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYmU9e2FuaW1hdGlvbmVuZDphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOmFlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sY2U9e30sZGU9e307bS5jYW5Vc2VET00mJihkZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBiZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBiZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBiZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBiZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZWUoYSl7aWYoY2VbYV0pcmV0dXJuIGNlW2FdO2lmKCFiZVthXSlyZXR1cm4gYTt2YXIgYj1iZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBkZSlyZXR1cm4gY2VbYV09YltjXTtyZXR1cm4gYX1cbnZhciBmZT17dG9wQW5pbWF0aW9uRW5kOmVlKFwiYW5pbWF0aW9uZW5kXCIpLHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjplZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSx0b3BBbmltYXRpb25TdGFydDplZShcImFuaW1hdGlvbnN0YXJ0XCIpLHRvcEJsdXI6XCJibHVyXCIsdG9wQ2FuY2VsOlwiY2FuY2VsXCIsdG9wQ2hhbmdlOlwiY2hhbmdlXCIsdG9wQ2xpY2s6XCJjbGlja1wiLHRvcENsb3NlOlwiY2xvc2VcIix0b3BDb21wb3NpdGlvbkVuZDpcImNvbXBvc2l0aW9uZW5kXCIsdG9wQ29tcG9zaXRpb25TdGFydDpcImNvbXBvc2l0aW9uc3RhcnRcIix0b3BDb21wb3NpdGlvblVwZGF0ZTpcImNvbXBvc2l0aW9udXBkYXRlXCIsdG9wQ29udGV4dE1lbnU6XCJjb250ZXh0bWVudVwiLHRvcENvcHk6XCJjb3B5XCIsdG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsXG50b3BEcmFnT3ZlcjpcImRyYWdvdmVyXCIsdG9wRHJhZ1N0YXJ0OlwiZHJhZ3N0YXJ0XCIsdG9wRHJvcDpcImRyb3BcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkOlwibG9hZFwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcE1vdXNlRG93bjpcIm1vdXNlZG93blwiLHRvcE1vdXNlTW92ZTpcIm1vdXNlbW92ZVwiLHRvcE1vdXNlT3V0OlwibW91c2VvdXRcIix0b3BNb3VzZU92ZXI6XCJtb3VzZW92ZXJcIix0b3BNb3VzZVVwOlwibW91c2V1cFwiLHRvcFBhc3RlOlwicGFzdGVcIix0b3BTY3JvbGw6XCJzY3JvbGxcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BUZXh0SW5wdXQ6XCJ0ZXh0SW5wdXRcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOmVlKFwidHJhbnNpdGlvbmVuZFwiKSx0b3BXaGVlbDpcIndoZWVsXCJ9LGdlPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWRlZE1ldGFkYXRhOlwibG9hZGVkbWV0YWRhdGFcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsXG50b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIix0b3BXYWl0aW5nOlwid2FpdGluZ1wifSxoZT17fSxpZT0wLGplPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBrZShhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxqZSl8fChhW2plXT1pZSsrLGhlW2FbamVdXT17fSk7cmV0dXJuIGhlW2FbamVdXX1mdW5jdGlvbiBsZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBtZShhLGIpe3ZhciBjPWxlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPWxlKGMpfX1mdW5jdGlvbiBuZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgb2U9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxwZT17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb250ZXh0TWVudSB0b3BGb2N1cyB0b3BLZXlEb3duIHRvcEtleVVwIHRvcE1vdXNlRG93biB0b3BNb3VzZVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LHFlPW51bGwscmU9bnVsbCxzZT1udWxsLHRlPSExO1xuZnVuY3Rpb24gdWUoYSxiKXtpZih0ZXx8bnVsbD09cWV8fHFlIT09ZmEoKSlyZXR1cm4gbnVsbDt2YXIgYz1xZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZuZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIHNlJiZoYShzZSxjKT9udWxsOihzZT1jLGE9Ti5nZXRQb29sZWQocGUuc2VsZWN0LHJlLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9cWUsaWIoYSksYSl9XG52YXIgdmU9e2V2ZW50VHlwZXM6cGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9a2UoZSk7Zj12YS5vblNlbGVjdDtmb3IodmFyIGg9MDtoPGYubGVuZ3RoO2grKyl7dmFyIGc9ZltoXTtpZighZS5oYXNPd25Qcm9wZXJ0eShnKXx8IWVbZ10pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1ZhKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcInRvcEZvY3VzXCI6aWYoZ2MoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpcWU9ZSxyZT1iLHNlPW51bGw7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpzZT1yZT1xZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BNb3VzZURvd25cIjp0ZT0hMDticmVhaztjYXNlIFwidG9wQ29udGV4dE1lbnVcIjpjYXNlIFwidG9wTW91c2VVcFwiOnJldHVybiB0ZT0hMSx1ZShjLGQpO2Nhc2UgXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIjppZihvZSlicmVhaztcbmNhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuIHVlKGMsZCl9cmV0dXJuIG51bGx9fTtOYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO0RhPWJiLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7RWE9YmIuZ2V0SW5zdGFuY2VGcm9tTm9kZTtGYT1iYi5nZXROb2RlRnJvbUluc3RhbmNlO05hLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46UmQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOndkLENoYW5nZUV2ZW50UGx1Z2luOnBkLFNlbGVjdEV2ZW50UGx1Z2luOnZlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46UmJ9KTtcbmZ1bmN0aW9uIHhlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzW1wicmV0dXJuXCJdPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24gemUoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyB4ZShhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmV4cGlyYXRpb25UaW1lPWM7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiBBZShhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO3ZhciBmPXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZClmPWQucHJvdG90eXBlJiZkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PzI6MDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTU7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBzYzpyZXR1cm4gQmUoYS5jaGlsZHJlbixiLGMsZSk7Y2FzZSB3YzpmPTExO2J8PTM7YnJlYWs7Y2FzZSB0YzpmPTExO2J8PTI7YnJlYWs7Y2FzZSBwYzpmPTc7YnJlYWs7Y2FzZSBxYzpmPTk7YnJlYWs7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXN3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHVjOmY9MTM7YnJlYWs7Y2FzZSB2YzpmPTEyO2JyZWFrO2Nhc2UgeGM6Zj0xNDticmVhaztkZWZhdWx0OmlmKFwibnVtYmVyXCI9PT10eXBlb2YgZC50YWcpcmV0dXJuIGI9ZCxiLnBlbmRpbmdQcm9wcz1hLGIuZXhwaXJhdGlvblRpbWU9YyxcbmI7RChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1lbHNlIEQoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9Yj1uZXcgeGUoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIEJlKGEsYixjLGQpe2E9bmV3IHhlKDEwLGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gQ2UoYSxiLGMpe2E9bmV3IHhlKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBEZShhLGIsYyl7Yj1uZXcgeGUoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9dmFyIEVlPW51bGwsRmU9bnVsbDtcbmZ1bmN0aW9uIEdlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19ZnVuY3Rpb24gSGUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7RWU9R2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO0ZlPUdlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9ZnVuY3Rpb24gSWUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEVlJiZFZShhKX1mdW5jdGlvbiBKZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRmUmJkZlKGEpfW5ldyBTZXQ7XG5mdW5jdGlvbiBLZShhKXtyZXR1cm57YmFzZVN0YXRlOmEsZXhwaXJhdGlvblRpbWU6MCxmaXJzdDpudWxsLGxhc3Q6bnVsbCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMSxpc0luaXRpYWxpemVkOiExLGNhcHR1cmVkVmFsdWVzOm51bGx9fWZ1bmN0aW9uIExlKGEsYil7bnVsbD09PWEubGFzdD9hLmZpcnN0PWEubGFzdD1iOihhLmxhc3QubmV4dD1iLGEubGFzdD1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iLmV4cGlyYXRpb25UaW1lKWEuZXhwaXJhdGlvblRpbWU9Yi5leHBpcmF0aW9uVGltZX12YXIgTWU9dm9pZCAwLE5lPXZvaWQgMDtcbmZ1bmN0aW9uIE9lKGEpe01lPU5lPW51bGw7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jJiYoYz1hLnVwZGF0ZVF1ZXVlPUtlKG51bGwpKTtudWxsIT09Yj8oYT1iLnVwZGF0ZVF1ZXVlLG51bGw9PT1hJiYoYT1iLnVwZGF0ZVF1ZXVlPUtlKG51bGwpKSk6YT1udWxsO01lPWM7TmU9YSE9PWM/YTpudWxsfWZ1bmN0aW9uIFBlKGEsYil7T2UoYSk7YT1NZTt2YXIgYz1OZTtudWxsPT09Yz9MZShhLGIpOm51bGw9PT1hLmxhc3R8fG51bGw9PT1jLmxhc3Q/KExlKGEsYiksTGUoYyxiKSk6KExlKGEsYiksYy5sYXN0PWIpfWZ1bmN0aW9uIFFlKGEsYixjLGQpe2E9YS5wYXJ0aWFsU3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIsYyxkKTphfVxuZnVuY3Rpb24gUmUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYXB0dXJlZFZhbHVlczpjLmNhcHR1cmVkVmFsdWVzLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExfSk7Yy5leHBpcmF0aW9uVGltZT0wO2MuaXNJbml0aWFsaXplZD9hPWMuYmFzZVN0YXRlOihhPWMuYmFzZVN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxjLmlzSW5pdGlhbGl6ZWQ9ITApO2Zvcih2YXIgaD0hMCxnPWMuZmlyc3Qsaz0hMTtudWxsIT09Zzspe3ZhciB2PWcuZXhwaXJhdGlvblRpbWU7aWYodj5mKXt2YXIgbD1jLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1sfHxsPnYpYy5leHBpcmF0aW9uVGltZT12O2t8fChrPSEwLGMuYmFzZVN0YXRlPWEpfWVsc2V7a3x8XG4oYy5maXJzdD1nLm5leHQsbnVsbD09PWMuZmlyc3QmJihjLmxhc3Q9bnVsbCkpO2lmKGcuaXNSZXBsYWNlKWE9UWUoZyxkLGEsZSksaD0hMDtlbHNlIGlmKHY9UWUoZyxkLGEsZSkpYT1oP0Eoe30sYSx2KTpBKGEsdiksaD0hMTtnLmlzRm9yY2VkJiYoYy5oYXNGb3JjZVVwZGF0ZT0hMCk7bnVsbCE9PWcuY2FsbGJhY2smJih2PWMuY2FsbGJhY2tMaXN0LG51bGw9PT12JiYodj1jLmNhbGxiYWNrTGlzdD1bXSksdi5wdXNoKGcpKTtudWxsIT09Zy5jYXB0dXJlZFZhbHVlJiYodj1jLmNhcHR1cmVkVmFsdWVzLG51bGw9PT12P2MuY2FwdHVyZWRWYWx1ZXM9W2cuY2FwdHVyZWRWYWx1ZV06di5wdXNoKGcuY2FwdHVyZWRWYWx1ZSkpfWc9Zy5uZXh0fW51bGwhPT1jLmNhbGxiYWNrTGlzdD9iLmVmZmVjdFRhZ3w9MzI6bnVsbCE9PWMuZmlyc3R8fGMuaGFzRm9yY2VVcGRhdGV8fG51bGwhPT1jLmNhcHR1cmVkVmFsdWVzfHwoYi51cGRhdGVRdWV1ZT1udWxsKTtrfHwoYy5iYXNlU3RhdGU9YSk7XG5yZXR1cm4gYX1mdW5jdGlvbiBTZShhLGIpe3ZhciBjPWEuY2FsbGJhY2tMaXN0O2lmKG51bGwhPT1jKWZvcihhLmNhbGxiYWNrTGlzdD1udWxsLGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXSxlPWQuY2FsbGJhY2s7ZC5jYWxsYmFjaz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlP0QoXCIxOTFcIixlKTp2b2lkIDA7ZS5jYWxsKGIpfX1cbmZ1bmN0aW9uIFRlKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhLGIsYyxkLGUsZil7aWYobnVsbD09PWJ8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKXJldHVybiEwO3ZhciBuPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLnNob3VsZENvbXBvbmVudFVwZGF0ZT9uLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFoYShiLGMpfHwhaGEoZCxlKTohMH1mdW5jdGlvbiBoKGEsYil7Yi51cGRhdGVyPXI7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX1mdW5jdGlvbiBnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5iLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9ZnVuY3Rpb24gayhhLGIsYyxkKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpcmV0dXJuIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLmNhbGwobnVsbCxjLGQpfXZhciB2PWEuY2FjaGVDb250ZXh0LGw9YS5nZXRNYXNrZWRDb250ZXh0LHA9YS5nZXRVbm1hc2tlZENvbnRleHQsej1hLmlzQ29udGV4dENvbnN1bWVyLEI9YS5oYXNDb250ZXh0Q2hhbmdlZCxyPXtpc01vdW50ZWQ6eWQsZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxcbmNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiEwLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGQpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGU9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOmQsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiEwLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZSl9fTtyZXR1cm57YWRvcHRDbGFzc0luc3RhbmNlOmgsY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczprLFxuY29uc3RydWN0Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPXAoYSksZT16KGEpLGY9ZT9sKGEsZCk6a2E7Yz1uZXcgYyhiLGYpO3ZhciBuPW51bGwhPT1jLnN0YXRlJiZ2b2lkIDAhPT1jLnN0YXRlP2Muc3RhdGU6bnVsbDtoKGEsYyk7YS5tZW1vaXplZFN0YXRlPW47Yj1rKGEsYyxiLG4pO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoYS5tZW1vaXplZFN0YXRlPUEoe30sYS5tZW1vaXplZFN0YXRlLGIpKTtlJiZ2KGEsZCxmKTtyZXR1cm4gY30sbW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5hbHRlcm5hdGUsZT1hLnN0YXRlTm9kZSxmPWEucGVuZGluZ1Byb3BzLG49cChhKTtlLnByb3BzPWY7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWthO2UuY29udGV4dD1sKGEsbik7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChjPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1lLnN0YXRlJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGUuc3RhdGU9UmUoZCxhLGMsZSxmLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9LHJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxuPWEuc3RhdGVOb2RlO24ucHJvcHM9YS5tZW1vaXplZFByb3BzO24uc3RhdGU9XG5hLm1lbW9pemVkU3RhdGU7dmFyIGg9YS5tZW1vaXplZFByb3BzLHI9YS5wZW5kaW5nUHJvcHMsej1uLmNvbnRleHQscT1wKGEpO3E9bChhLHEpOyhjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1yfHx6IT09cSkmJmcoYSxuLHIscSk7ej1hLm1lbW9pemVkU3RhdGU7Yj1udWxsIT09YS51cGRhdGVRdWV1ZT9SZShudWxsLGEsYS51cGRhdGVRdWV1ZSxuLHIsYik6ejt2YXIgdT12b2lkIDA7aCE9PXImJih1PWsoYSxuLHIsYikpO2lmKG51bGwhPT11JiZ2b2lkIDAhPT11KXtiPW51bGw9PT1ifHx2b2lkIDA9PT1iP3U6QSh7fSxiLHUpO3ZhciB0PWEudXBkYXRlUXVldWU7XG5udWxsIT09dCYmKHQuYmFzZVN0YXRlPUEoe30sdC5iYXNlU3RhdGUsdSkpfWlmKCEoaCE9PXJ8fHohPT1ifHxCKCl8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KSwhMTsoaD1mKGEsaCxyLHosYixxKSk/KGN8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudCYmbi5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9XG40KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpLGQoYSxyKSxlKGEsYikpO24ucHJvcHM9cjtuLnN0YXRlPWI7bi5jb250ZXh0PXE7cmV0dXJuIGh9LHVwZGF0ZUNsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBuPWIudHlwZSx4PWIuc3RhdGVOb2RlO3gucHJvcHM9Yi5tZW1vaXplZFByb3BzO3guc3RhdGU9Yi5tZW1vaXplZFN0YXRlO3ZhciBoPWIubWVtb2l6ZWRQcm9wcyxyPWIucGVuZGluZ1Byb3BzLHE9eC5jb250ZXh0LHU9cChiKTt1PWwoYix1KTsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1yfHxxIT09dSkmJmcoYix4LHIsdSk7cT1iLm1lbW9pemVkU3RhdGU7Yz1udWxsIT09Yi51cGRhdGVRdWV1ZT9SZShhLGIsYi51cGRhdGVRdWV1ZSx4LHIsYyk6cTt2YXIgdD12b2lkIDA7aCE9PXImJih0PWsoYix4LHIsYykpO2lmKG51bGwhPT10JiZ2b2lkIDAhPT10KXtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP3Q6QSh7fSxjLHQpO3ZhciB5PWIudXBkYXRlUXVldWU7bnVsbCE9PXkmJih5LmJhc2VTdGF0ZT1BKHt9LHkuYmFzZVN0YXRlLHQpKX1pZighKGghPT1yfHxxIT09Y3x8QigpfHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZcbnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksITE7KHQ9ZihiLGgscixxLGMsdSkpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxVcGRhdGUmJnguY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJnguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUocixjLHUpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjA0OCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJlxucT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yMDQ4KSxkKGIsciksZShiLGMpKTt4LnByb3BzPXI7eC5zdGF0ZT1jO3guY29udGV4dD11O3JldHVybiB0fX19dmFyIFVlPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBWZShhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigyIT09Yy50YWc/RChcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6RChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1rYT9kLnJlZnM9e306ZC5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP0QoXCIxNDhcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDpEKFwiMjU0XCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBXZShhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmRChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gWGUoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT16ZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGgoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gZyhhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPUNlKGMsYS5tb2RlLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1WZShhLGIsYyksZFtcInJldHVyblwiXT1hLGQ7ZD1BZShjLGEubW9kZSxkKTtkLnJlZj1WZShhLGIsYyk7ZFtcInJldHVyblwiXT1hO3JldHVybiBkfWZ1bmN0aW9uIHYoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuRGUoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8MTAhPT1iLnRhZylyZXR1cm4gYj1CZShjLGEubW9kZSxkLGYpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPUNlKFwiXCIrYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGM9QWUoYixhLm1vZGUsYyksYy5yZWY9VmUoYSxudWxsLGIpLGNbXCJyZXR1cm5cIl09YSxjO2Nhc2UgcmM6cmV0dXJuIGI9RGUoYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGJ9aWYoVWUoYil8fHpjKGIpKXJldHVybiBiPUJlKGIsXG5hLm1vZGUsYyxudWxsKSxiW1wicmV0dXJuXCJdPWEsYjtXZShhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpnKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1zYz9sKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgcmM6cmV0dXJuIGMua2V5PT09ZT92KGEsYixjLGQpOm51bGx9aWYoVWUoYyl8fHpjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOmwoYSxiLGMsZCxudWxsKTtXZShhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEIoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGcoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09c2M/bChiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgcmM6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLHYoYixhLGQsZSl9aWYoVWUoZCl8fHpjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGwoYixhLGQsZSxudWxsKTtXZShiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoZSxsLGcsaCl7Zm9yKHZhciByPW51bGwsaz1udWxsLHE9bCx1PWw9MCx0PW51bGw7bnVsbCE9PXEmJnU8Zy5sZW5ndGg7dSsrKXtxLmluZGV4PnU/KHQ9cSxxPW51bGwpOnQ9cS5zaWJsaW5nO3ZhciBuPXooZSxxLGdbdV0saCk7aWYobnVsbD09PW4pe251bGw9PT1xJiYocT10KTticmVha31hJiZxJiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHEpO2w9ZihuLGwsdSk7bnVsbD09PWs/cj1uOmsuc2libGluZz1uO2s9bjtxPXR9aWYodT09PWcubGVuZ3RoKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDt1PGcubGVuZ3RoO3UrKylpZihxPXAoZSxnW3VdLGgpKWw9ZihxLGwsdSksbnVsbD09PWs/cj1xOmsuc2libGluZz1xLGs9cTtyZXR1cm4gcn1mb3IocT1kKGUscSk7dTxnLmxlbmd0aDt1KyspaWYodD1CKHEsZSx1LGdbdV0saCkpe2lmKGEmJm51bGwhPT10LmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT10LmtleT91OnQua2V5KTtsPWYodCxsLHUpO251bGw9PT1rP3I9dDprLnNpYmxpbmc9dDtrPXR9YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1mdW5jdGlvbiBRKGUsbCxnLGgpe3ZhciByPXpjKGcpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiByP0QoXCIxNTBcIik6dm9pZCAwO2c9ci5jYWxsKGcpO251bGw9PWc/RChcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciBrPVxucj1udWxsLHE9bCx1PWw9MCx0PW51bGwsbj1nLm5leHQoKTtudWxsIT09cSYmIW4uZG9uZTt1Kyssbj1nLm5leHQoKSl7cS5pbmRleD51Pyh0PXEscT1udWxsKTp0PXEuc2libGluZzt2YXIgSD16KGUscSxuLnZhbHVlLGgpO2lmKG51bGw9PT1IKXtxfHwocT10KTticmVha31hJiZxJiZudWxsPT09SC5hbHRlcm5hdGUmJmIoZSxxKTtsPWYoSCxsLHUpO251bGw9PT1rP3I9SDprLnNpYmxpbmc9SDtrPUg7cT10fWlmKG4uZG9uZSlyZXR1cm4gYyhlLHEpLHI7aWYobnVsbD09PXEpe2Zvcig7IW4uZG9uZTt1Kyssbj1nLm5leHQoKSluPXAoZSxuLnZhbHVlLGgpLG51bGwhPT1uJiYobD1mKG4sbCx1KSxudWxsPT09az9yPW46ay5zaWJsaW5nPW4saz1uKTtyZXR1cm4gcn1mb3IocT1kKGUscSk7IW4uZG9uZTt1Kyssbj1nLm5leHQoKSlpZihuPUIocSxlLHUsbi52YWx1ZSxoKSxudWxsIT09bil7aWYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PW4ua2V5P3U6bi5rZXkpO1xubD1mKG4sbCx1KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1ufWEmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHJ9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGwpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXNjJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBnPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYoZylzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBvYzphOnt2YXIgaz1mLmtleTtmb3IoZz1kO251bGwhPT1nOyl7aWYoZy5rZXk9PT1rKWlmKDEwPT09Zy50YWc/Zi50eXBlPT09c2M6Zy50eXBlPT09Zi50eXBlKXtjKGEsZy5zaWJsaW5nKTtkPWUoZyxmLnR5cGU9PT1zYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsbCk7ZC5yZWY9VmUoYSxnLGYpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxnKTticmVha31lbHNlIGIoYSxnKTtnPWcuc2libGluZ31mLnR5cGU9PT1cbnNjPyhkPUJlKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGwsZi5rZXkpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihsPUFlKGYsYS5tb2RlLGwpLGwucmVmPVZlKGEsZCxmKSxsW1wicmV0dXJuXCJdPWEsYT1sKX1yZXR1cm4gaChhKTtjYXNlIHJjOmE6e2ZvcihnPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1nKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxsKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1EZShmLGEubW9kZSxsKTtkW1wicmV0dXJuXCJdPWE7YT1kfXJldHVybiBoKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmXG42PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsbCksZFtcInJldHVyblwiXT1hLGE9ZCk6KGMoYSxkKSxkPUNlKGYsYS5tb2RlLGwpLGRbXCJyZXR1cm5cIl09YSxhPWQpLGgoYSk7aWYoVWUoZikpcmV0dXJuIHIoYSxkLGYsbCk7aWYoemMoZikpcmV0dXJuIFEoYSxkLGYsbCk7ZyYmV2UoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYpc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxOmw9YS50eXBlLEQoXCIxNTJcIixsLmRpc3BsYXlOYW1lfHxsLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBZZT1YZSghMCksWmU9WGUoITEpO1xuZnVuY3Rpb24gJGUoYSxiLGMsZCxlLGYsaCl7ZnVuY3Rpb24gZyhhLGIsYyl7ayhhLGIsYyxiLmV4cGlyYXRpb25UaW1lKX1mdW5jdGlvbiBrKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmUoYixudWxsLGMsZCk6WWUoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gdihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGwoYSxiLGMsZCxlLGYpe3YoYSxiKTtpZighYyYmIWUpcmV0dXJuIGQmJnkoYiwhMSkscihhLGIpO2M9Yi5zdGF0ZU5vZGU7bmMuY3VycmVudD1iO3ZhciBsPWU/bnVsbDpjLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2UmJihrKGEsYixudWxsLGYpLGIuY2hpbGQ9bnVsbCk7ayhhLGIsbCxmKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZ5KGIsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHAoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7XG5iLnBlbmRpbmdDb250ZXh0P3QoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmdChhLGIuY29udGV4dCwhMSk7WShhLGIuY29udGFpbmVySW5mbyl9ZnVuY3Rpb24geihhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2ZvcihudWxsIT09ZSYmKGVbXCJyZXR1cm5cIl09YSk7bnVsbCE9PWU7KXtzd2l0Y2goZS50YWcpe2Nhc2UgMTI6dmFyIGY9ZS5zdGF0ZU5vZGV8MDtpZihlLnR5cGU9PT1iJiYwIT09KGYmYykpe2ZvcihmPWU7bnVsbCE9PWY7KXt2YXIgbD1mLmFsdGVybmF0ZTtpZigwPT09Zi5leHBpcmF0aW9uVGltZXx8Zi5leHBpcmF0aW9uVGltZT5kKWYuZXhwaXJhdGlvblRpbWU9ZCxudWxsIT09bCYmKDA9PT1sLmV4cGlyYXRpb25UaW1lfHxsLmV4cGlyYXRpb25UaW1lPmQpJiYobC5leHBpcmF0aW9uVGltZT1kKTtlbHNlIGlmKG51bGwhPT1sJiYoMD09PWwuZXhwaXJhdGlvblRpbWV8fGwuZXhwaXJhdGlvblRpbWU+ZCkpbC5leHBpcmF0aW9uVGltZT1cbmQ7ZWxzZSBicmVhaztmPWZbXCJyZXR1cm5cIl19Zj1udWxsfWVsc2UgZj1lLmNoaWxkO2JyZWFrO2Nhc2UgMTM6Zj1lLnR5cGU9PT1hLnR5cGU/bnVsbDplLmNoaWxkO2JyZWFrO2RlZmF1bHQ6Zj1lLmNoaWxkfWlmKG51bGwhPT1mKWZbXCJyZXR1cm5cIl09ZTtlbHNlIGZvcihmPWU7bnVsbCE9PWY7KXtpZihmPT09YSl7Zj1udWxsO2JyZWFrfWU9Zi5zaWJsaW5nO2lmKG51bGwhPT1lKXtmPWU7YnJlYWt9Zj1mW1wicmV0dXJuXCJdfWU9Zn19ZnVuY3Rpb24gQihhLGIsYyl7dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkUHJvcHM7aWYoIXEoKSYmZj09PWUpcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYik7dmFyIGw9ZS52YWx1ZTtiLm1lbW9pemVkUHJvcHM9ZTtpZihudWxsPT09ZilsPTEwNzM3NDE4MjM7ZWxzZSBpZihmLnZhbHVlPT09ZS52YWx1ZSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxcbnIoYSxiKTtsPTB9ZWxzZXt2YXIgaD1mLnZhbHVlO2lmKGg9PT1sJiYoMCE9PWh8fDEvaD09PTEvbCl8fGghPT1oJiZsIT09bCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYik7bD0wfWVsc2UgaWYobD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxsKToxMDczNzQxODIzLGx8PTAsMD09PWwpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpfWVsc2UgeihiLGQsbCxjKX1iLnN0YXRlTm9kZT1sO0coYik7ZyhhLGIsZS5jaGlsZHJlbik7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcihhLGIpe251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD9EKFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO3ZhciBjPXplKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7XG5iLmNoaWxkPWM7Zm9yKGNbXCJyZXR1cm5cIl09YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz16ZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGNbXCJyZXR1cm5cIl09YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH12YXIgUT1hLnNob3VsZFNldFRleHRDb250ZW50LG49YS5zaG91bGREZXByaW9yaXRpemVTdWJ0cmVlLHg9Yi5wdXNoSG9zdENvbnRleHQsWT1iLnB1c2hIb3N0Q29udGFpbmVyLEc9ZC5wdXNoUHJvdmlkZXIsUj1jLmdldE1hc2tlZENvbnRleHQsUz1jLmdldFVubWFza2VkQ29udGV4dCxxPWMuaGFzQ29udGV4dENoYW5nZWQsdT1jLnB1c2hDb250ZXh0UHJvdmlkZXIsdD1jLnB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QseT1jLmludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIsSD1lLmVudGVySHlkcmF0aW9uU3RhdGUsV2E9ZS5yZXNldEh5ZHJhdGlvblN0YXRlLENiPWUudHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U7XG5hPVRlKGMsZixoLGZ1bmN0aW9uKGEsYil7YS5tZW1vaXplZFByb3BzPWJ9LGZ1bmN0aW9uKGEsYil7YS5tZW1vaXplZFN0YXRlPWJ9KTt2YXIgSmM9YS5hZG9wdENsYXNzSW5zdGFuY2UsS2M9YS5jYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLExjPWEuY29uc3RydWN0Q2xhc3NJbnN0YW5jZSxEYj1hLm1vdW50Q2xhc3NJbnN0YW5jZSxNYz1hLnJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSxFYj1hLnVwZGF0ZUNsYXNzSW5zdGFuY2U7cmV0dXJue2JlZ2luV29yazpmdW5jdGlvbihhLGIsYyl7aWYoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+Yyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6cChiKTticmVhaztjYXNlIDI6dShiKTticmVhaztjYXNlIDQ6WShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTM6RyhiKX1yZXR1cm4gbnVsbH1zd2l0Y2goYi50YWcpe2Nhc2UgMDpudWxsIT09YT9EKFwiMTU1XCIpOnZvaWQgMDt2YXIgZD1iLnR5cGUsXG5lPWIucGVuZGluZ1Byb3BzLGY9UyhiKTtmPVIoYixmKTtkPWQoZSxmKTtiLmVmZmVjdFRhZ3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5yZW5kZXImJnZvaWQgMD09PWQuJCR0eXBlb2Y/KGY9Yi50eXBlLGIudGFnPTIsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1kLnN0YXRlJiZ2b2lkIDAhPT1kLnN0YXRlP2Quc3RhdGU6bnVsbCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJihlPUtjKGIsZCxlLGIubWVtb2l6ZWRTdGF0ZSksbnVsbCE9PWUmJnZvaWQgMCE9PWUmJihiLm1lbW9pemVkU3RhdGU9QSh7fSxiLm1lbW9pemVkU3RhdGUsZSkpKSxlPXUoYiksSmMoYixkKSxEYihiLGMpLGE9bChhLGIsITAsZSwhMSxjKSk6KGIudGFnPTEsZyhhLGIsZCksYi5tZW1vaXplZFByb3BzPWUsYT1iLmNoaWxkKTtyZXR1cm4gYTtjYXNlIDE6cmV0dXJuIGU9Yi50eXBlLGM9Yi5wZW5kaW5nUHJvcHMscSgpfHxcbmIubWVtb2l6ZWRQcm9wcyE9PWM/KGQ9UyhiKSxkPVIoYixkKSxlPWUoYyxkKSxiLmVmZmVjdFRhZ3w9MSxnKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAyOmU9dShiKTtudWxsPT09YT9udWxsPT09Yi5zdGF0ZU5vZGU/KExjKGIsYi5wZW5kaW5nUHJvcHMpLERiKGIsYyksZD0hMCk6ZD1NYyhiLGMpOmQ9RWIoYSxiLGMpO2Y9ITE7dmFyIGg9Yi51cGRhdGVRdWV1ZTtudWxsIT09aCYmbnVsbCE9PWguY2FwdHVyZWRWYWx1ZXMmJihmPWQ9ITApO3JldHVybiBsKGEsYixkLGUsZixjKTtjYXNlIDM6YTppZihwKGIpLGQ9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZCl7Zj1iLm1lbW9pemVkU3RhdGU7ZT1SZShhLGIsZCxudWxsLG51bGwsYyk7Yi5tZW1vaXplZFN0YXRlPWU7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1kJiZudWxsIT09ZC5jYXB0dXJlZFZhbHVlcylkPW51bGw7ZWxzZSBpZihmPT09ZSl7V2EoKTthPXIoYSxiKTticmVhayBhfWVsc2UgZD1cbmUuZWxlbWVudDtmPWIuc3RhdGVOb2RlOyhudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZmLmh5ZHJhdGUmJkgoYik/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9WmUoYixudWxsLGQsYykpOihXYSgpLGcoYSxiLGQpKTtiLm1lbW9pemVkU3RhdGU9ZTthPWIuY2hpbGR9ZWxzZSBXYSgpLGE9cihhLGIpO3JldHVybiBhO2Nhc2UgNTphOnt4KGIpO251bGw9PT1hJiZDYihiKTtlPWIudHlwZTtoPWIubWVtb2l6ZWRQcm9wcztkPWIucGVuZGluZ1Byb3BzO2Y9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7aWYoIXEoKSYmaD09PWQpe2lmKGg9Yi5tb2RlJjEmJm4oZSxkKSliLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7aWYoIWh8fDEwNzM3NDE4MjMhPT1jKXthPXIoYSxiKTticmVhayBhfX1oPWQuY2hpbGRyZW47UShlLGQpP2g9bnVsbDpmJiZRKGUsZikmJihiLmVmZmVjdFRhZ3w9MTYpO3YoYSxiKTsxMDczNzQxODIzIT09YyYmYi5tb2RlJjEmJm4oZSxkKT8oYi5leHBpcmF0aW9uVGltZT1cbjEwNzM3NDE4MjMsYi5tZW1vaXplZFByb3BzPWQsYT1udWxsKTooZyhhLGIsaCksYi5tZW1vaXplZFByb3BzPWQsYT1iLmNoaWxkKX1yZXR1cm4gYTtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZDYihiKSxiLm1lbW9pemVkUHJvcHM9Yi5wZW5kaW5nUHJvcHMsbnVsbDtjYXNlIDg6Yi50YWc9NztjYXNlIDc6cmV0dXJuIGU9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1lfHwoZT1iLm1lbW9pemVkUHJvcHMpLGQ9ZS5jaGlsZHJlbixiLnN0YXRlTm9kZT1udWxsPT09YT9aZShiLGIuc3RhdGVOb2RlLGQsYyk6WWUoYixhLnN0YXRlTm9kZSxkLGMpLGIubWVtb2l6ZWRQcm9wcz1lLGIuc3RhdGVOb2RlO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIFkoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxlPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09ZT8obnVsbD09PWE/Yi5jaGlsZD1ZZShiLG51bGwsZSxjKTpnKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9XG5lLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDE0OnJldHVybiBjPWIudHlwZS5yZW5kZXIsYz1jKGIucGVuZGluZ1Byb3BzLGIucmVmKSxnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxiLmNoaWxkO2Nhc2UgMTA6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1jPyhnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxMTpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixxKCl8fG51bGwhPT1jJiZiLm1lbW9pemVkUHJvcHMhPT1jPyhnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxMzpyZXR1cm4gQihhLGIsYyk7Y2FzZSAxMjphOntkPWIudHlwZTtmPWIucGVuZGluZ1Byb3BzO2g9Yi5tZW1vaXplZFByb3BzO2U9ZC5fY3VycmVudFZhbHVlO3ZhciB0PWQuX2NoYW5nZWRCaXRzO2lmKHEoKXx8MCE9PXR8fGghPT1mKXtiLm1lbW9pemVkUHJvcHM9XG5mO3ZhciBrPWYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO2lmKHZvaWQgMD09PWt8fG51bGw9PT1rKWs9MTA3Mzc0MTgyMztiLnN0YXRlTm9kZT1rO2lmKDAhPT0odCZrKSl6KGIsZCx0LGMpO2Vsc2UgaWYoaD09PWYpe2E9cihhLGIpO2JyZWFrIGF9Yz1mLmNoaWxkcmVuO2M9YyhlKTtnKGEsYixjKTthPWIuY2hpbGR9ZWxzZSBhPXIoYSxiKX1yZXR1cm4gYTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiBhZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGg9YS5jcmVhdGVJbnN0YW5jZSxnPWEuY3JlYXRlVGV4dEluc3RhbmNlLGs9YS5hcHBlbmRJbml0aWFsQ2hpbGQsdj1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGw9YS5wcmVwYXJlVXBkYXRlLHA9YS5wZXJzaXN0ZW5jZSx6PWIuZ2V0Um9vdEhvc3RDb250YWluZXIsQj1iLnBvcEhvc3RDb250ZXh0LHI9Yi5nZXRIb3N0Q29udGV4dCxRPWIucG9wSG9zdENvbnRhaW5lcixuPWMucG9wQ29udGV4dFByb3ZpZGVyLHg9Yy5wb3BUb3BMZXZlbENvbnRleHRPYmplY3QsWT1kLnBvcFByb3ZpZGVyLEc9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlLFI9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSxTPWUucG9wSHlkcmF0aW9uU3RhdGUscT12b2lkIDAsdT12b2lkIDAsdD12b2lkIDA7YS5tdXRhdGlvbj8ocT1mdW5jdGlvbigpe30sdT1mdW5jdGlvbihhLGIsYyl7KGIudXBkYXRlUXVldWU9XG5jKSYmZihiKX0sdD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmZihiKX0pOnA/RChcIjIzNVwiKTpEKFwiMjM2XCIpO3JldHVybntjb21wbGV0ZVdvcms6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gbihiKSxhPWIuc3RhdGVOb2RlLGQ9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZyY9LTY1LFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudERpZENhdGNoP2IuZWZmZWN0VGFnfD0yNTY6ZC5jYXB0dXJlZFZhbHVlcz1udWxsKSxudWxsO2Nhc2UgMzpRKGIpO3goYik7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpUyhiKSxiLmVmZmVjdFRhZyY9LTM7cShiKTthPWIudXBkYXRlUXVldWU7XG5udWxsIT09YSYmbnVsbCE9PWEuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZ3w9MjU2KTtyZXR1cm4gbnVsbDtjYXNlIDU6QihiKTtjPXooKTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXt2YXIgcD1hLm1lbW9pemVkUHJvcHMsSD1iLnN0YXRlTm9kZSx5PXIoKTtIPWwoSCxlLHAsZCxjLHkpO3UoYSxiLEgsZSxwLGQsYyx5KTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT1yKCk7aWYoUyhiKSlHKGIsYyxhKSYmZihiKTtlbHNle3A9aChlLGQsYyxhLGIpO2E6Zm9yKHk9Yi5jaGlsZDtudWxsIT09eTspe2lmKDU9PT15LnRhZ3x8Nj09PXkudGFnKWsocCx5LnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09eS50YWcmJm51bGwhPT15LmNoaWxkKXt5LmNoaWxkW1wicmV0dXJuXCJdPXk7eT15LmNoaWxkO2NvbnRpbnVlfWlmKHk9PT1iKWJyZWFrO1xuZm9yKDtudWxsPT09eS5zaWJsaW5nOyl7aWYobnVsbD09PXlbXCJyZXR1cm5cIl18fHlbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7eT15W1wicmV0dXJuXCJdfXkuc2libGluZ1tcInJldHVyblwiXT15W1wicmV0dXJuXCJdO3k9eS5zaWJsaW5nfXYocCxlLGQsYyxhKSYmZihiKTtiLnN0YXRlTm9kZT1wfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl0KGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9eigpO2M9cigpO1MoYik/UihiKSYmZihiKTpiLnN0YXRlTm9kZT1nKGQsYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzooZD1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpEKFwiMTY1XCIpO2IudGFnPTg7ZT1bXTthOmZvcigocD1iLnN0YXRlTm9kZSkmJihwW1wicmV0dXJuXCJdPWIpO251bGwhPT1cbnA7KXtpZig1PT09cC50YWd8fDY9PT1wLnRhZ3x8ND09PXAudGFnKUQoXCIyNDdcIik7ZWxzZSBpZig5PT09cC50YWcpZS5wdXNoKHAucGVuZGluZ1Byb3BzLnZhbHVlKTtlbHNlIGlmKG51bGwhPT1wLmNoaWxkKXtwLmNoaWxkW1wicmV0dXJuXCJdPXA7cD1wLmNoaWxkO2NvbnRpbnVlfWZvcig7bnVsbD09PXAuc2libGluZzspe2lmKG51bGw9PT1wW1wicmV0dXJuXCJdfHxwW1wicmV0dXJuXCJdPT09YilicmVhayBhO3A9cFtcInJldHVyblwiXX1wLnNpYmxpbmdbXCJyZXR1cm5cIl09cFtcInJldHVyblwiXTtwPXAuc2libGluZ31wPWQuaGFuZGxlcjtkPXAoZC5wcm9wcyxlKTtiLmNoaWxkPVllKGIsbnVsbCE9PWE/YS5jaGlsZDpudWxsLGQsYyk7cmV0dXJuIGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBiLnRhZz03LG51bGw7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxMDpyZXR1cm4gbnVsbDtjYXNlIDExOnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gUShiKSxxKGIpLG51bGw7XG5jYXNlIDEzOnJldHVybiBZKGIpLG51bGw7Y2FzZSAxMjpyZXR1cm4gbnVsbDtjYXNlIDA6RChcIjE2N1wiKTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiBiZihhLGIsYyxkLGUpe3ZhciBmPWEucG9wSG9zdENvbnRhaW5lcixoPWEucG9wSG9zdENvbnRleHQsZz1iLnBvcENvbnRleHRQcm92aWRlcixrPWIucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHY9Yy5wb3BQcm92aWRlcjtyZXR1cm57dGhyb3dFeGNlcHRpb246ZnVuY3Rpb24oYSxiLGMpe2IuZWZmZWN0VGFnfD01MTI7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtiPXt2YWx1ZTpjLHNvdXJjZTpiLHN0YWNrOkJjKGIpfTtkb3tzd2l0Y2goYS50YWcpe2Nhc2UgMzpPZShhKTthLnVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzPVtiXTthLmVmZmVjdFRhZ3w9MTAyNDtyZXR1cm47Y2FzZSAyOmlmKGM9YS5zdGF0ZU5vZGUsMD09PShhLmVmZmVjdFRhZyY2NCkmJm51bGwhPT1jJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnREaWRDYXRjaCYmIWUoYykpe09lKGEpO2M9YS51cGRhdGVRdWV1ZTt2YXIgZD1jLmNhcHR1cmVkVmFsdWVzO251bGw9PT1kP1xuYy5jYXB0dXJlZFZhbHVlcz1bYl06ZC5wdXNoKGIpO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybn19YT1hW1wicmV0dXJuXCJdfXdoaWxlKG51bGwhPT1hKX0sdW53aW5kV29yazpmdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpnKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIGYoYSksayhhKSxiPWEuZWZmZWN0VGFnLGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgNTpyZXR1cm4gaChhKSxudWxsO2Nhc2UgNDpyZXR1cm4gZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHYoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX0sdW53aW5kSW50ZXJydXB0ZWRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7YnJlYWs7Y2FzZSAzOmYoYSk7ayhhKTticmVhaztjYXNlIDU6aChhKTticmVhaztjYXNlIDQ6ZihhKTticmVhaztjYXNlIDEzOnYoYSl9fX19XG5mdW5jdGlvbiBjZihhLGIpe3ZhciBjPWIuc291cmNlO251bGw9PT1iLnN0YWNrJiZCYyhjKTtudWxsIT09YyYmQWMoYyk7Yj1iLnZhbHVlO251bGwhPT1hJiYyPT09YS50YWcmJkFjKGEpO3RyeXtiJiZiLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZCl7ZCYmZC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGQpfX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaCh0KXtiKGEsdCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBKZSYmSmUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZihhKTt2YXIgYz1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yy5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYy5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYy5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe2IoYSx0KX1icmVhaztjYXNlIDU6ZihhKTticmVhaztjYXNlIDc6ZyhhLnN0YXRlTm9kZSk7YnJlYWs7Y2FzZSA0OnAmJnYoYSl9fWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWE7OylpZihoKGIpLG51bGw9PT1iLmNoaWxkfHxwJiY0PT09Yi50YWcpe2lmKGI9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9ZWxzZSBiLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9ZnVuY3Rpb24gdihhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWJbXCJyZXR1cm5cIl07YTpmb3IoOzspe251bGw9PT1jP0QoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jPSEwfWlmKDU9PT1cbmIudGFnfHw2PT09Yi50YWcpZyhiKSxlP1MoZCxiLnN0YXRlTm9kZSk6UihkLGIuc3RhdGVOb2RlKTtlbHNlIGlmKDQ9PT1iLnRhZz9kPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86aChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZFtcInJldHVyblwiXT1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXTs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319dmFyIGw9YS5nZXRQdWJsaWNJbnN0YW5jZSxwPWEubXV0YXRpb247YT1hLnBlcnNpc3RlbmNlO3B8fChhP0QoXCIyMzVcIik6RChcIjIzNlwiKSk7dmFyIHo9cC5jb21taXRNb3VudCxCPXAuY29tbWl0VXBkYXRlLHI9cC5yZXNldFRleHRDb250ZW50LFE9cC5jb21taXRUZXh0VXBkYXRlLG49cC5hcHBlbmRDaGlsZCxcbng9cC5hcHBlbmRDaGlsZFRvQ29udGFpbmVyLFk9cC5pbnNlcnRCZWZvcmUsRz1wLmluc2VydEluQ29udGFpbmVyQmVmb3JlLFI9cC5yZW1vdmVDaGlsZCxTPXAucmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyO3JldHVybntjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjppZihiLmVmZmVjdFRhZyYyMDQ4JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGMsZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRSZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe3IoYS5zdGF0ZU5vZGUpfSxcbmNvbW1pdFBsYWNlbWVudDpmdW5jdGlvbihhKXthOntmb3IodmFyIGI9YVtcInJldHVyblwiXTtudWxsIT09Yjspe2lmKGsoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWJbXCJyZXR1cm5cIl19RChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkQoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihyKGIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jW1wicmV0dXJuXCJdfHxrKGNbXCJyZXR1cm5cIl0pKXtjPW51bGw7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yy5zaWJsaW5nW1wicmV0dXJuXCJdPWNbXCJyZXR1cm5cIl07Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PVxuYy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZFtcInJldHVyblwiXT1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWM/ZD9HKGIsZS5zdGF0ZU5vZGUsYyk6WShiLGUuc3RhdGVOb2RlLGMpOmQ/eChiLGUuc3RhdGVOb2RlKTpuKGIsZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZFtcInJldHVyblwiXT1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZVtcInJldHVyblwiXXx8ZVtcInJldHVyblwiXT09PWEpcmV0dXJuO2U9ZVtcInJldHVyblwiXX1lLnNpYmxpbmdbXCJyZXR1cm5cIl09ZVtcInJldHVyblwiXTtlPWUuc2libGluZ319LGNvbW1pdERlbGV0aW9uOmZ1bmN0aW9uKGEpe3YoYSk7XG5hW1wicmV0dXJuXCJdPW51bGw7YS5jaGlsZD1udWxsO2EuYWx0ZXJuYXRlJiYoYS5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxhLmFsdGVybmF0ZVtcInJldHVyblwiXT1udWxsKX0sY29tbWl0V29yazpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmQihjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTYyXCIpOnZvaWQgMDtjPWIubWVtb2l6ZWRQcm9wcztRKGIuc3RhdGVOb2RlLG51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpjLGMpO2JyZWFrO2Nhc2UgMzpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRMaWZlQ3ljbGVzOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMjphPVxuYy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7Yj1iLm1lbW9pemVkU3RhdGU7YS5wcm9wcz1jLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1jLm1lbW9pemVkU3RhdGU7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWM9Yy51cGRhdGVRdWV1ZTtudWxsIT09YyYmU2UoYyxhKTticmVhaztjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1sKGMuY2hpbGQuc3RhdGVOb2RlKTticmVhaztjYXNlIDI6YT1jLmNoaWxkLnN0YXRlTm9kZX1TZShiLGEpfWJyZWFrO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyZcbjQmJnooYSxjLnR5cGUsYy5tZW1vaXplZFByb3BzLGMpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0RXJyb3JMb2dnaW5nOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDI6dmFyIGM9YS50eXBlO2I9YS5zdGF0ZU5vZGU7dmFyIGQ9YS51cGRhdGVRdWV1ZTtudWxsPT09ZHx8bnVsbD09PWQuY2FwdHVyZWRWYWx1ZXM/RChcIjI2NFwiKTp2b2lkIDA7dmFyIGY9ZC5jYXB0dXJlZFZhbHVlcztkLmNhcHR1cmVkVmFsdWVzPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoJiZlKGIpO2IucHJvcHM9YS5tZW1vaXplZFByb3BzO2Iuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspe2Q9ZltjXTt2YXIgbD1kLnZhbHVlLGc9ZC5zdGFjaztjZihhLGQpO2IuY29tcG9uZW50RGlkQ2F0Y2gobCx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWc/ZzpcIlwifSl9YnJlYWs7XG5jYXNlIDM6Yz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jfHxudWxsPT09Yy5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDtmPWMuY2FwdHVyZWRWYWx1ZXM7Yy5jYXB0dXJlZFZhbHVlcz1udWxsO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspZD1mW2NdLGNmKGEsZCksYihkLnZhbHVlKTticmVhaztkZWZhdWx0OkQoXCIyNjVcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9bChjKTticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX0sY29tbWl0RGV0YWNoUmVmOmZ1bmN0aW9uKGEpe2E9YS5yZWY7bnVsbCE9PWEmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hKG51bGwpOmEuY3VycmVudD1udWxsKX19fXZhciBlZj17fTtcbmZ1bmN0aW9uIGZmKGEsYil7ZnVuY3Rpb24gYyhhKXthPT09ZWY/RChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGQ9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGU9YS5nZXRSb290SG9zdENvbnRleHQ7YT1iLmNyZWF0ZUN1cnNvcjt2YXIgZj1iLnB1c2gsaD1iLnBvcCxnPWEoZWYpLGs9YShlZiksdj1hKGVmKTtyZXR1cm57Z2V0SG9zdENvbnRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gYyhnLmN1cnJlbnQpfSxnZXRSb290SG9zdENvbnRhaW5lcjpmdW5jdGlvbigpe3JldHVybiBjKHYuY3VycmVudCl9LHBvcEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSl7aChnLGEpO2goayxhKTtoKHYsYSl9LHBvcEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe2suY3VycmVudD09PWEmJihoKGcsYSksaChrLGEpKX0scHVzaEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSxiKXtmKHYsYixhKTtmKGssYSxhKTtmKGcsZWYsYSk7Yj1lKGIpO2goZyxhKTtmKGcsYixhKX0scHVzaEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPVxuYyh2LmN1cnJlbnQpLGU9YyhnLmN1cnJlbnQpO2I9ZChlLGEudHlwZSxiKTtlIT09YiYmKGYoayxhLGEpLGYoZyxiLGEpKX19fVxuZnVuY3Rpb24gZ2YoYSl7ZnVuY3Rpb24gYihhLGIpe3ZhciBjPW5ldyB4ZSg1LG51bGwsbnVsbCwwKTtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjW1wicmV0dXJuXCJdPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIGMoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gYj1mKGIsYS50eXBlLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPWgoYixhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGQoYSl7Zm9yKGE9YVtcInJldHVyblwiXTtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YVtcInJldHVyblwiXTtwPWF9dmFyIGU9YS5zaG91bGRTZXRUZXh0Q29udGVudDtcbmE9YS5oeWRyYXRpb247aWYoIWEpcmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe30sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oKXtEKFwiMTc1XCIpfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzZcIil9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9fTt2YXIgZj1hLmNhbkh5ZHJhdGVJbnN0YW5jZSxoPWEuY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSxnPWEuZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nLGs9YS5nZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCx2PWEuaHlkcmF0ZUluc3RhbmNlLGw9YS5oeWRyYXRlVGV4dEluc3RhbmNlLHA9bnVsbCx6PW51bGwsQj0hMTtyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbihhKXt6PVxuayhhLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtwPWE7cmV0dXJuIEI9ITB9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt6PXA9bnVsbDtCPSExfSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbihhKXtpZihCKXt2YXIgZD16O2lmKGQpe2lmKCFjKGEsZCkpe2Q9ZyhkKTtpZighZHx8IWMoYSxkKSl7YS5lZmZlY3RUYWd8PTI7Qj0hMTtwPWE7cmV0dXJufWIocCx6KX1wPWE7ej1rKGQpfWVsc2UgYS5lZmZlY3RUYWd8PTIsQj0hMSxwPWF9fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXtiPXYoYS5zdGF0ZU5vZGUsYS50eXBlLGEubWVtb2l6ZWRQcm9wcyxiLGMsYSk7YS51cGRhdGVRdWV1ZT1iO3JldHVybiBudWxsIT09Yj8hMDohMX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGwoYS5zdGF0ZU5vZGUsYS5tZW1vaXplZFByb3BzLGEpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbihhKXtpZihhIT09XG5wKXJldHVybiExO2lmKCFCKXJldHVybiBkKGEpLEI9ITAsITE7dmFyIGM9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1jJiZcImJvZHlcIiE9PWMmJiFlKGMsYS5tZW1vaXplZFByb3BzKSlmb3IoYz16O2M7KWIoYSxjKSxjPWcoYyk7ZChhKTt6PXA/ZyhhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH19fVxuZnVuY3Rpb24gaGYoYSl7ZnVuY3Rpb24gYihhLGIsYyl7YT1hLnN0YXRlTm9kZTthLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YjthLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWN9ZnVuY3Rpb24gYyhhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXN9ZnVuY3Rpb24gZChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpEKFwiMTA4XCIsQWMoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBBKHt9LGIsYyl9dmFyIGU9YS5jcmVhdGVDdXJzb3IsZj1hLnB1c2gsaD1hLnBvcCxnPWUoa2EpLGs9ZSghMSksdj1rYTtyZXR1cm57Z2V0VW5tYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBjKGEpP1xudjpnLmN1cnJlbnR9LGNhY2hlQ29udGV4dDpiLGdldE1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSxjKXt2YXIgZD1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFkKXJldHVybiBrYTt2YXIgZT1hLnN0YXRlTm9kZTtpZihlJiZlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1jKXJldHVybiBlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBmPXt9LGc7Zm9yKGcgaW4gZClmW2ddPWNbZ107ZSYmYihhLGMsZik7cmV0dXJuIGZ9LGhhc0NvbnRleHRDaGFuZ2VkOmZ1bmN0aW9uKCl7cmV0dXJuIGsuY3VycmVudH0saXNDb250ZXh0Q29uc3VtZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNvbnRleHRUeXBlc30saXNDb250ZXh0UHJvdmlkZXI6Yyxwb3BDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSl7YyhhKSYmKGgoayxhKSxoKGcsYSkpfSxwb3BUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSl7aChrLFxuYSk7aChnLGEpfSxwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0OmZ1bmN0aW9uKGEsYixjKXtudWxsIT1nLmN1cnNvcj9EKFwiMTY4XCIpOnZvaWQgMDtmKGcsYixhKTtmKGssYyxhKX0scHJvY2Vzc0NoaWxkQ29udGV4dDpkLHB1c2hDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSl7aWYoIWMoYSkpcmV0dXJuITE7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxrYTt2PWcuY3VycmVudDtmKGcsYixhKTtmKGssay5jdXJyZW50LGEpO3JldHVybiEwfSxpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7Yz92b2lkIDA6RChcIjE2OVwiKTtpZihiKXt2YXIgZT1kKGEsdik7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1lO2goayxhKTtoKGcsYSk7ZihnLGUsYSl9ZWxzZSBoKGssYSk7ZihrLGIsYSl9LGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEpe2ZvcigyIT09XG54ZChhKXx8MiE9PWEudGFnP0QoXCIxNzBcIik6dm9pZCAwOzMhPT1hLnRhZzspe2lmKGMoYSkpcmV0dXJuIGEuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0OyhhPWFbXCJyZXR1cm5cIl0pP3ZvaWQgMDpEKFwiMTcxXCIpfXJldHVybiBhLnN0YXRlTm9kZS5jb250ZXh0fX19XG5mdW5jdGlvbiBqZihhKXt2YXIgYj1hLmNyZWF0ZUN1cnNvcixjPWEucHVzaCxkPWEucG9wLGU9YihudWxsKSxmPWIobnVsbCksaD1iKDApO3JldHVybntwdXNoUHJvdmlkZXI6ZnVuY3Rpb24oYSl7dmFyIGI9YS50eXBlLl9jb250ZXh0O2MoaCxiLl9jaGFuZ2VkQml0cyxhKTtjKGYsYi5fY3VycmVudFZhbHVlLGEpO2MoZSxhLGEpO2IuX2N1cnJlbnRWYWx1ZT1hLnBlbmRpbmdQcm9wcy52YWx1ZTtiLl9jaGFuZ2VkQml0cz1hLnN0YXRlTm9kZX0scG9wUHJvdmlkZXI6ZnVuY3Rpb24oYSl7dmFyIGI9aC5jdXJyZW50LGM9Zi5jdXJyZW50O2QoZSxhKTtkKGYsYSk7ZChoLGEpO2E9YS50eXBlLl9jb250ZXh0O2EuX2N1cnJlbnRWYWx1ZT1jO2EuX2NoYW5nZWRCaXRzPWJ9fX1cbmZ1bmN0aW9uIGtmKCl7dmFyIGE9W10sYj0tMTtyZXR1cm57Y3JlYXRlQ3Vyc29yOmZ1bmN0aW9uKGEpe3JldHVybntjdXJyZW50OmF9fSxpc0VtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuLTE9PT1ifSxwb3A6ZnVuY3Rpb24oYyl7MD5ifHwoYy5jdXJyZW50PWFbYl0sYVtiXT1udWxsLGItLSl9LHB1c2g6ZnVuY3Rpb24oYyxkKXtiKys7YVtiXT1jLmN1cnJlbnQ7Yy5jdXJyZW50PWR9LGNoZWNrVGhhdFN0YWNrSXNFbXB0eTpmdW5jdGlvbigpe30scmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2OmZ1bmN0aW9uKCl7fX19XG5mdW5jdGlvbiBsZihhKXtmdW5jdGlvbiBiKCl7aWYobnVsbCE9PUkpZm9yKHZhciBhPUlbXCJyZXR1cm5cIl07bnVsbCE9PWE7KUxjKGEpLGE9YVtcInJldHVyblwiXTtZYT1udWxsO1o9MDtJPW51bGw7TmM9ITF9ZnVuY3Rpb24gYyhhKXtyZXR1cm4gbnVsbCE9PXlhJiZ5YS5oYXMoYSl9ZnVuY3Rpb24gZChhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YVtcInJldHVyblwiXSxkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjUxMikpe2I9Q2IoYixhLFopO3ZhciBlPWE7aWYoMTA3Mzc0MTgyMz09PVp8fDEwNzM3NDE4MjMhPT1lLmV4cGlyYXRpb25UaW1lKXtiOnN3aXRjaChlLnRhZyl7Y2FzZSAzOmNhc2UgMjp2YXIgZj1lLnVwZGF0ZVF1ZXVlO2Y9bnVsbD09PWY/MDpmLmV4cGlyYXRpb25UaW1lO2JyZWFrIGI7ZGVmYXVsdDpmPTB9Zm9yKHZhciBnPWUuY2hpbGQ7bnVsbCE9PWc7KTAhPT1nLmV4cGlyYXRpb25UaW1lJiYoMD09PWZ8fGY+Zy5leHBpcmF0aW9uVGltZSkmJihmPVxuZy5leHBpcmF0aW9uVGltZSksZz1nLnNpYmxpbmc7ZS5leHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjUxMikmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNle05jPSEwO2JyZWFrfX1lbHNle2E9S2MoYSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0yNTU5LGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1cbm51bGwsYy5lZmZlY3RUYWd8PTUxMik7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9fXJldHVybiBudWxsfWZ1bmN0aW9uIGUoYSl7dmFyIGI9V2EoYS5hbHRlcm5hdGUsYSxaKTtudWxsPT09YiYmKGI9ZChhKSk7bmMuY3VycmVudD1udWxsO3JldHVybiBifWZ1bmN0aW9uIGYoYSxjLGYpe2NhP0QoXCIyNDNcIik6dm9pZCAwO2NhPSEwO2lmKGMhPT1afHxhIT09WWF8fG51bGw9PT1JKWIoKSxZYT1hLFo9YyxJPXplKFlhLmN1cnJlbnQsbnVsbCxaKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBnPSExO2Rve3RyeXtpZihmKWZvcig7bnVsbCE9PUkmJiFTKCk7KUk9ZShJKTtlbHNlIGZvcig7bnVsbCE9PUk7KUk9ZShJKX1jYXRjaChPYyl7aWYobnVsbD09PUkpe2c9ITA7cShPYyk7YnJlYWt9Zj1JO3ZhciBoPWZbXCJyZXR1cm5cIl07aWYobnVsbD09PWgpe2c9ITA7cShPYyk7YnJlYWt9SmMoaCxmLE9jKTtJPWQoZil9YnJlYWt9d2hpbGUoMSk7XG5jYT0hMTtpZihnfHxudWxsIT09SSlyZXR1cm4gbnVsbDtpZihOYylyZXR1cm4gYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmN1cnJlbnQuYWx0ZXJuYXRlO0QoXCIyNjJcIil9ZnVuY3Rpb24gaChhLGIsYyxkKXthPXt2YWx1ZTpjLHNvdXJjZTphLHN0YWNrOkJjKGEpfTtQZShiLHtleHBpcmF0aW9uVGltZTpkLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOm51bGwsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6YSxuZXh0Om51bGx9KTt2KGIsZCl9ZnVuY3Rpb24gZyhhLGIpe2E6e2NhJiYhWmE/RChcIjI2M1wiKTp2b2lkIDA7Zm9yKHZhciBkPWFbXCJyZXR1cm5cIl07bnVsbCE9PWQ7KXtzd2l0Y2goZC50YWcpe2Nhc2UgMjp2YXIgZT1kLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkQ2F0Y2gmJiFjKGUpKXtoKGEsZCxiLFxuMSk7YT12b2lkIDA7YnJlYWsgYX1icmVhaztjYXNlIDM6aChhLGQsYiwxKTthPXZvaWQgMDticmVhayBhfWQ9ZFtcInJldHVyblwiXX0zPT09YS50YWcmJmgoYSxhLGIsMSk7YT12b2lkIDB9cmV0dXJuIGF9ZnVuY3Rpb24gayhhKXthPTAhPT1pYT9pYTpjYT9aYT8xOlo6YS5tb2RlJjE/emE/MTAqKCgobCgpKzE1KS8xMHwwKSsxKToyNSooKChsKCkrNTAwKS8yNXwwKSsxKToxO3phJiYoMD09PWRhfHxhPmRhKSYmKGRhPWEpO3JldHVybiBhfWZ1bmN0aW9uIHYoYSxjKXthOntmb3IoO251bGwhPT1hOyl7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+YylhLmV4cGlyYXRpb25UaW1lPWM7bnVsbCE9PWEuYWx0ZXJuYXRlJiYoMD09PWEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lfHxhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT5jKSYmKGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPWMpO2lmKG51bGw9PT1hW1wicmV0dXJuXCJdKWlmKDM9PT1hLnRhZyl7dmFyIGQ9XG5hLnN0YXRlTm9kZTshY2EmJjAhPT1aJiZjPFomJmIoKTtjYSYmIVphJiZZYT09PWR8fEIoZCxjKTtGYj54ZyYmRChcIjE4NVwiKX1lbHNle2M9dm9pZCAwO2JyZWFrIGF9YT1hW1wicmV0dXJuXCJdfWM9dm9pZCAwfXJldHVybiBjfWZ1bmN0aW9uIGwoKXt5ZT1JYygpLVBjO3JldHVybiB5Zz0oeWUvMTB8MCkrMn1mdW5jdGlvbiBwKGEsYixjLGQsZSl7dmFyIGY9aWE7aWE9MTt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtpYT1mfX1mdW5jdGlvbiB6KGEpe2lmKDAhPT1HYil7aWYoYT5HYilyZXR1cm47bWcoUWMpfXZhciBiPUljKCktUGM7R2I9YTtRYz1sZyhRLHt0aW1lb3V0OjEwKihhLTIpLWJ9KX1mdW5jdGlvbiBCKGEsYil7aWYobnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3QpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iLG51bGw9PT1LPyhsYT1LPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooSz1LLm5leHRTY2hlZHVsZWRSb290PWEsSy5uZXh0U2NoZWR1bGVkUm9vdD1sYSk7XG5lbHNle3ZhciBjPWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWN8fGI8YylhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9VHx8KEo/SGImJihhYT1hLFA9MSxHKGEsMSwhMSkpOjE9PT1iP24oKTp6KGIpKX1mdW5jdGlvbiByKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PUspZm9yKHZhciBjPUssZD1sYTtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Sz9EKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7bGE9Sz1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09bGEpbGE9ZT1kLm5leHRTY2hlZHVsZWRSb290LEsubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Syl7Sz1jO0submV4dFNjaGVkdWxlZFJvb3Q9bGE7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1cbmQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2lmKDA9PT1hfHxlPGEpYT1lLGI9ZDtpZihkPT09SylicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1jPWFhO251bGwhPT1jJiZjPT09YiYmMT09PWE/RmIrKzpGYj0wO2FhPWI7UD1hfWZ1bmN0aW9uIFEoYSl7eCgwLCEwLGEpfWZ1bmN0aW9uIG4oKXt4KDEsITEsbnVsbCl9ZnVuY3Rpb24geChhLGIsYyl7JGE9YztyKCk7aWYoYilmb3IoO251bGwhPT1hYSYmMCE9PVAmJigwPT09YXx8YT49UCkmJighSWJ8fGwoKT49UCk7KUcoYWEsUCwhSWIpLHIoKTtlbHNlIGZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKTspRyhhYSxQLCExKSxyKCk7bnVsbCE9PSRhJiYoR2I9MCxRYz0tMSk7MCE9PVAmJnooUCk7JGE9bnVsbDtJYj0hMTtZKCl9ZnVuY3Rpb24gWSgpe0ZiPTA7aWYobnVsbCE9PUFhKXt2YXIgYT1BYTtBYT1udWxsO2Zvcih2YXIgYj1cbjA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaCh3Zyl7QmF8fChCYT0hMCxKYj13Zyl9fX1pZihCYSl0aHJvdyBhPUpiLEpiPW51bGwsQmE9ITEsYTt9ZnVuY3Rpb24gRyhhLGIsYyl7VD9EKFwiMjQ1XCIpOnZvaWQgMDtUPSEwO2M/KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/UihhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz1mKGEsYiwhMCksbnVsbCE9PWMmJihTKCk/YS5maW5pc2hlZFdvcms9YzpSKGEsYyxiKSkpKTooYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCExKSxudWxsIT09YyYmUihhLGMsYikpKTtUPSExfWZ1bmN0aW9uIFIoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWMmJihudWxsPT09QWE/QWE9W2RdOkFhLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9XG4wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO1phPWNhPSEwO2M9Yi5zdGF0ZU5vZGU7Yy5jdXJyZW50PT09Yj9EKFwiMTc3XCIpOnZvaWQgMDtkPWMucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1kP0QoXCIyNjFcIik6dm9pZCAwO2MucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGU9bCgpO25jLmN1cnJlbnQ9bnVsbDtpZigxPGIuZWZmZWN0VGFnKWlmKG51bGwhPT1iLmxhc3RFZmZlY3Qpe2IubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI7dmFyIGY9Yi5maXJzdEVmZmVjdH1lbHNlIGY9YjtlbHNlIGY9Yi5maXJzdEVmZmVjdDt6ZyhjLmNvbnRhaW5lckluZm8pO2Zvcih3PWY7bnVsbCE9PXc7KXt2YXIgaD0hMSxrPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dzspdy5lZmZlY3RUYWcmMjA0OCYmRGIody5hbHRlcm5hdGUsdyksdz13Lm5leHRFZmZlY3R9Y2F0Y2goYWIpe2g9ITAsaz1hYn1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT1cbncmJih3PXcubmV4dEVmZmVjdCkpfWZvcih3PWY7bnVsbCE9PXc7KXtoPSExO2s9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl7dmFyIHA9dy5lZmZlY3RUYWc7cCYxNiYmTWModyk7aWYocCYxMjgpe3ZhciBuPXcuYWx0ZXJuYXRlO251bGwhPT1uJiZrZyhuKX1zd2l0Y2gocCYxNCl7Y2FzZSAyOkViKHcpO3cuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6RWIodyk7dy5lZmZlY3RUYWcmPS0zO3dlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgNDp3ZSh3LmFsdGVybmF0ZSx3KTticmVhaztjYXNlIDg6Z2codyl9dz13Lm5leHRFZmZlY3R9fWNhdGNoKGFiKXtoPSEwLGs9YWJ9aCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxrKSxudWxsIT09dyYmKHc9dy5uZXh0RWZmZWN0KSl9QWcoYy5jb250YWluZXJJbmZvKTtjLmN1cnJlbnQ9Yjtmb3Iodz1mO251bGwhPT13Oyl7cD0hMTtuPXZvaWQgMDt0cnl7Zm9yKGY9YyxoPWUsaz1kO251bGwhPT13Oyl7dmFyIHI9dy5lZmZlY3RUYWc7XG5yJjM2JiZoZyhmLHcuYWx0ZXJuYXRlLHcsaCxrKTtyJjI1NiYmaWcodyxxKTtyJjEyOCYmamcodyk7dmFyIHQ9dy5uZXh0RWZmZWN0O3cubmV4dEVmZmVjdD1udWxsO3c9dH19Y2F0Y2goYWIpe3A9ITAsbj1hYn1wJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LG4pLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1jYT1aYT0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgSWUmJkllKGIuc3RhdGVOb2RlKTtiPWMuY3VycmVudC5leHBpcmF0aW9uVGltZTswPT09YiYmKHlhPW51bGwpO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1mdW5jdGlvbiBTKCl7cmV0dXJuIG51bGw9PT0kYXx8JGEudGltZVJlbWFpbmluZygpPkJnPyExOkliPSEwfWZ1bmN0aW9uIHEoYSl7bnVsbD09PWFhP0QoXCIyNDZcIik6dm9pZCAwO2FhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7QmF8fChCYT0hMCxKYj1hKX12YXIgdT1rZigpLHQ9ZmYoYSx1KSx5PWhmKHUpO3U9amYodSk7dmFyIEg9Z2YoYSksXG5XYT0kZShhLHQseSx1LEgsdixrKS5iZWdpbldvcmssQ2I9YWYoYSx0LHksdSxIKS5jb21wbGV0ZVdvcms7dD1iZih0LHksdSx2LGMpO3ZhciBKYz10LnRocm93RXhjZXB0aW9uLEtjPXQudW53aW5kV29yayxMYz10LnVud2luZEludGVycnVwdGVkV29yazt0PWRmKGEsZyx2LGssZnVuY3Rpb24oYSl7bnVsbD09PXlhP3lhPW5ldyBTZXQoW2FdKTp5YS5hZGQoYSl9LGwpO3ZhciBEYj10LmNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyxNYz10LmNvbW1pdFJlc2V0VGV4dENvbnRlbnQsRWI9dC5jb21taXRQbGFjZW1lbnQsZ2c9dC5jb21taXREZWxldGlvbix3ZT10LmNvbW1pdFdvcmssaGc9dC5jb21taXRMaWZlQ3ljbGVzLGlnPXQuY29tbWl0RXJyb3JMb2dnaW5nLGpnPXQuY29tbWl0QXR0YWNoUmVmLGtnPXQuY29tbWl0RGV0YWNoUmVmLEljPWEubm93LGxnPWEuc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrLG1nPWEuY2FuY2VsRGVmZXJyZWRDYWxsYmFjayx6Zz1hLnByZXBhcmVGb3JDb21taXQsXG5BZz1hLnJlc2V0QWZ0ZXJDb21taXQsUGM9SWMoKSx5Zz0yLHllPVBjLFJjPTAsaWE9MCxjYT0hMSxJPW51bGwsWWE9bnVsbCxaPTAsdz1udWxsLFphPSExLE5jPSExLHlhPW51bGwsbGE9bnVsbCxLPW51bGwsR2I9MCxRYz0tMSxUPSExLGFhPW51bGwsUD0wLGRhPTAsSWI9ITEsQmE9ITEsSmI9bnVsbCwkYT1udWxsLEo9ITEsSGI9ITEsemE9ITEsQWE9bnVsbCx4Zz0xRTMsRmI9MCxCZz0xO3JldHVybntyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lOmwsY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcjprLHNjaGVkdWxlV29yazp2LHJlcXVlc3RXb3JrOkIsZmx1c2hSb290OmZ1bmN0aW9uKGEsYil7VD9EKFwiMjUzXCIpOnZvaWQgMDthYT1hO1A9YjtHKGEsYiwhMSk7bigpO1koKX0sYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1KO0o9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KEo9Yyl8fFR8fG4oKX19LHVuYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXtpZihKJiYhSGIpe0hiPVxuITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7SGI9ITF9fXJldHVybiBhKGIpfSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtUP0QoXCIxODdcIik6dm9pZCAwO3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIHAoYSxiKX1maW5hbGx5e0o9YyxuKCl9fSxmbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9SjtKPSEwO3RyeXtwKGEpfWZpbmFsbHl7KEo9Yil8fFR8fHgoMSwhMSxudWxsKX19LGRlZmVycmVkVXBkYXRlczpmdW5jdGlvbihhKXt2YXIgYj1pYTtpYT0yNSooKChsKCkrNTAwKS8yNXwwKSsxKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2lhPWJ9fSxzeW5jVXBkYXRlczpwLGludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbihhLGIsYyl7aWYoemEpcmV0dXJuIGEoYixjKTtKfHxUfHwwPT09ZGF8fCh4KGRhLCExLG51bGwpLGRhPTApO3ZhciBkPXphLGU9SjtKPXphPSEwO3RyeXtyZXR1cm4gYShiLGMpfWZpbmFsbHl7emE9ZCwoSj1lKXx8VHx8bigpfX0sZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oKXtUfHxcbjA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCl9LGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246ZnVuY3Rpb24oKXt2YXIgYT0yNSooKChsKCkrNTAwKS8yNXwwKSsxKTthPD1SYyYmKGE9UmMrMSk7cmV0dXJuIFJjPWF9LGxlZ2FjeUNvbnRleHQ6eX19XG5mdW5jdGlvbiBtZihhKXtmdW5jdGlvbiBiKGEsYixjLGQsZSxoKXtkPWIuY3VycmVudDtpZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgbD1nKGMpO2M9ayhjKT92KGMsbCk6bH1lbHNlIGM9a2E7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1oO1BlKGQse2V4cGlyYXRpb25UaW1lOmUscGFydGlhbFN0YXRlOntlbGVtZW50OmF9LGNhbGxiYWNrOnZvaWQgMD09PWI/bnVsbDpiLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7ZihkLGUpO3JldHVybiBlfXZhciBjPWEuZ2V0UHVibGljSW5zdGFuY2U7YT1sZihhKTt2YXIgZD1hLnJlY2FsY3VsYXRlQ3VycmVudFRpbWUsZT1hLmNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsZj1hLnNjaGVkdWxlV29yayxoPWEubGVnYWN5Q29udGV4dCxnPWguZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQsaz1oLmlzQ29udGV4dFByb3ZpZGVyLHY9XG5oLnByb2Nlc3NDaGlsZENvbnRleHQ7cmV0dXJue2NyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7Yj1uZXcgeGUoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfSx1cGRhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxjLGYsaCl7dmFyIGc9Yy5jdXJyZW50LGs9ZCgpO2c9ZShnKTtyZXR1cm4gYihhLGMsZixrLGcsaCl9LHVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWU6ZnVuY3Rpb24oYSxjLGUsZixnKXt2YXIgaD1kKCk7cmV0dXJuIGIoYSxjLGUsaCxmLGcpfSxmbHVzaFJvb3Q6YS5mbHVzaFJvb3QsXG5yZXF1ZXN0V29yazphLnJlcXVlc3RXb3JrLGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246YS5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uLGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLHN5bmNVcGRhdGVzOmEuc3luY1VwZGF0ZXMsaW50ZXJhY3RpdmVVcGRhdGVzOmEuaW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmEuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hDb250cm9sbGVkOmEuZmx1c2hDb250cm9sbGVkLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGMoYS5jaGlsZC5zdGF0ZU5vZGUpO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX0sXG5maW5kSG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP0QoXCIxODhcIik6RChcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1CZChiKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1DZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEhlKEEoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1CZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX19fVxudmFyIG5mPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6bWZ9KSxvZj1uZiYmbWZ8fG5mLHBmPW9mW1wiZGVmYXVsdFwiXT9vZltcImRlZmF1bHRcIl06b2Y7ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpyYyxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX12YXIgcmY9XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyxzZj12b2lkIDA7c2Y9cmY/ZnVuY3Rpb24oKXtyZXR1cm4gcGVyZm9ybWFuY2Uubm93KCl9OmZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCl9O3ZhciB0Zj12b2lkIDAsdWY9dm9pZCAwO1xuaWYobS5jYW5Vc2VET00paWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHJlcXVlc3RJZGxlQ2FsbGJhY2t8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjYW5jZWxJZGxlQ2FsbGJhY2spe3ZhciB2Zj1udWxsLHdmPSExLHhmPS0xLHlmPSExLHpmPTAsQWY9MzMsQmY9MzMsQ2Y9dm9pZCAwO0NmPXJmP3tkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT16Zi1wZXJmb3JtYW5jZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19OntkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT16Zi1EYXRlLm5vdygpO3JldHVybiAwPGE/YTowfX07dmFyIERmPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09RGYpe3dmPSExO2E9c2YoKTtpZigwPj16Zi1hKWlmKC0xIT09XG54ZiYmeGY8PWEpQ2YuZGlkVGltZW91dD0hMDtlbHNle3lmfHwoeWY9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKEVmKSk7cmV0dXJufWVsc2UgQ2YuZGlkVGltZW91dD0hMTt4Zj0tMTthPXZmO3ZmPW51bGw7bnVsbCE9PWEmJmEoQ2YpfX0sITEpO3ZhciBFZj1mdW5jdGlvbihhKXt5Zj0hMTt2YXIgYj1hLXpmK0JmO2I8QmYmJkFmPEJmPyg4PmImJihiPTgpLEJmPWI8QWY/QWY6Yik6QWY9Yjt6Zj1hK0JmO3dmfHwod2Y9ITAsd2luZG93LnBvc3RNZXNzYWdlKERmLFwiKlwiKSl9O3RmPWZ1bmN0aW9uKGEsYil7dmY9YTtudWxsIT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCYmKHhmPXNmKCkrYi50aW1lb3V0KTt5Znx8KHlmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShFZikpO3JldHVybiAwfTt1Zj1mdW5jdGlvbigpe3ZmPW51bGw7d2Y9ITE7eGY9LTF9fWVsc2UgdGY9d2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2ssdWY9d2luZG93LmNhbmNlbElkbGVDYWxsYmFjaztlbHNlIHRmPVxuZnVuY3Rpb24oYSl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXthKHt0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIEluZmluaXR5fSxkaWRUaW1lb3V0OiExfSl9KX0sdWY9ZnVuY3Rpb24oYSl7Y2xlYXJUaW1lb3V0KGEpfTtmdW5jdGlvbiBGZihhKXt2YXIgYj1cIlwiO2VhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsPT1hfHxcInN0cmluZ1wiIT09dHlwZW9mIGEmJlwibnVtYmVyXCIhPT10eXBlb2YgYXx8KGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2YoYSxiKXthPUEoe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1GZihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBIZihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrYztiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWYoYSxiKXt2YXIgYz1iLnZhbHVlO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOm51bGwhPWM/YzpiLmRlZmF1bHRWYWx1ZSx3YXNNdWx0aXBsZTohIWIubXVsdGlwbGV9fWZ1bmN0aW9uIEpmKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9EKFwiOTFcIik6dm9pZCAwO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/RChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOkQoXCI5M1wiKSxiPWJbMF0pLGM9XCJcIitiKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIitjfX1cbmZ1bmN0aW9uIExmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9Yi5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIE1mKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBOZj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBPZihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIFBmKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9PZihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBRZj12b2lkIDAsUmY9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09TmYuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UWY9UWZ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UWYuaW5uZXJIVE1MPVwiXFx4M2NzdmdcXHgzZVwiK2IrXCJcXHgzYy9zdmdcXHgzZVwiO2ZvcihiPVFmLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFNmKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgVGY9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxcbnN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sVWY9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKFRmKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1VmLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7VGZbYl09VGZbYV19KX0pO1xuZnVuY3Rpb24gVmYoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8VGYuaGFzT3duUHJvcGVydHkoZSkmJlRmW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIFdmPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBYZihhLGIsYyl7YiYmKFdmW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9EKFwiMTM3XCIsYSxjKCkpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/RChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDpEKFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT9EKFwiNjJcIixjKCkpOnZvaWQgMCl9XG5mdW5jdGlvbiBZZihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIFpmPUMudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiAkZihhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1rZShhKTtiPXZhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2MuaGFzT3duUHJvcGVydHkoZSkmJmNbZV18fChcInRvcFNjcm9sbFwiPT09ZT9aZChcInRvcFNjcm9sbFwiLFwic2Nyb2xsXCIsYSk6XCJ0b3BGb2N1c1wiPT09ZXx8XCJ0b3BCbHVyXCI9PT1lPyhaZChcInRvcEZvY3VzXCIsXCJmb2N1c1wiLGEpLFpkKFwidG9wQmx1clwiLFwiYmx1clwiLGEpLGMudG9wQmx1cj0hMCxjLnRvcEZvY3VzPSEwKTpcInRvcENhbmNlbFwiPT09ZT8oaWMoXCJjYW5jZWxcIiwhMCkmJlpkKFwidG9wQ2FuY2VsXCIsXCJjYW5jZWxcIixhKSxjLnRvcENhbmNlbD0hMCk6XCJ0b3BDbG9zZVwiPT09ZT8oaWMoXCJjbG9zZVwiLCEwKSYmWmQoXCJ0b3BDbG9zZVwiLFwiY2xvc2VcIixhKSxjLnRvcENsb3NlPSEwKTpmZS5oYXNPd25Qcm9wZXJ0eShlKSYmVyhlLGZlW2VdLGEpLGNbZV09ITApfX1cbmZ1bmN0aW9uIGFnKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PU5mLmh0bWwmJihkPU9mKGEpKTtkPT09TmYuaHRtbD9cInNjcmlwdFwiPT09YT8oYT1jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCJcXHgzY3NjcmlwdFxceDNlXFx4M2Mvc2NyaXB0XFx4M2VcIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6YT1cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM/Yy5jcmVhdGVFbGVtZW50KGEse2lzOmIuaXN9KTpjLmNyZWF0ZUVsZW1lbnQoYSk6YT1jLmNyZWF0ZUVsZW1lbnROUyhkLGEpO3JldHVybiBhfWZ1bmN0aW9uIGJnKGEsYil7cmV0dXJuKDk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShhKX1cbmZ1bmN0aW9uIGNnKGEsYixjLGQpe3ZhciBlPVlmKGIsYyk7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6VyhcInRvcExvYWRcIixcImxvYWRcIixhKTt2YXIgZj1jO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihmIGluIGdlKWdlLmhhc093blByb3BlcnR5KGYpJiZXKGYsZ2VbZl0sYSk7Zj1jO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZm9ybVwiOlcoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtXKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6V2MoYSxjKTtmPVZjKGEsYyk7VyhcInRvcEludmFsaWRcIixcblwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpJZihhLGMpO2Y9QSh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpLZihhLGMpO2Y9SmYoYSxjKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmY9Y31YZihiLGYsWmYpO3ZhciBoPWYsZztmb3IoZyBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZykpe3ZhciBrPWhbZ107XCJzdHlsZVwiPT09Zz9WZihhLGssWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmUmYoYSxrKSk6XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWJ8fFwiXCIhPT1rKSYmU2YoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJlxuU2YoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZyYmXCJhdXRvRm9jdXNcIiE9PWcmJih1YS5oYXNPd25Qcm9wZXJ0eShnKT9udWxsIT1rJiYkZihkLGcpOm51bGwhPWsmJlVjKGEsZyxrLGUpKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6bGMoYSk7YWQoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpsYyhhKTtNZihhLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYy52YWx1ZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFjLm11bHRpcGxlO2I9Yy52YWx1ZTtudWxsIT1iP0hmKGEsISFjLm11bHRpcGxlLGIsITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZIZihhLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoYS5vbmNsaWNrPUMpfX1cbmZ1bmN0aW9uIGRnKGEsYixjLGQsZSl7dmFyIGY9bnVsbDtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Yz1WYyhhLGMpO2Q9VmMoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpjPUdmKGEsYyk7ZD1HZihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9QSh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjPUpmKGEsYyk7ZD1KZihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUMpfVhmKGIsZCxaZik7Yj1hPXZvaWQgMDt2YXIgaD1udWxsO2ZvcihhIGluIGMpaWYoIWQuaGFzT3duUHJvcGVydHkoYSkmJmMuaGFzT3duUHJvcGVydHkoYSkmJm51bGwhPWNbYV0paWYoXCJzdHlsZVwiPT09YSl7dmFyIGc9Y1thXTtmb3IoYiBpbiBnKWcuaGFzT3duUHJvcGVydHkoYikmJihofHxcbihoPXt9KSxoW2JdPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1hJiZcImNoaWxkcmVuXCIhPT1hJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJlwiYXV0b0ZvY3VzXCIhPT1hJiYodWEuaGFzT3duUHJvcGVydHkoYSk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGEsbnVsbCkpO2ZvcihhIGluIGQpe3ZhciBrPWRbYV07Zz1udWxsIT1jP2NbYV06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYSkmJmshPT1nJiYobnVsbCE9a3x8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09YSlpZihnKXtmb3IoYiBpbiBnKSFnLmhhc093blByb3BlcnR5KGIpfHxrJiZrLmhhc093blByb3BlcnR5KGIpfHwoaHx8KGg9e30pLGhbYl09XCJcIik7Zm9yKGIgaW4gaylrLmhhc093blByb3BlcnR5KGIpJiZnW2JdIT09a1tiXSYmKGh8fChoPXt9KSxoW2JdPWtbYl0pfWVsc2UgaHx8KGZ8fChmPVtdKSxmLnB1c2goYSxoKSksXG5oPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWE/KGs9az9rLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1rJiZnIT09ayYmKGY9Znx8W10pLnB1c2goYSxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1hP2c9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmKHVhLmhhc093blByb3BlcnR5KGEpPyhudWxsIT1rJiYkZihlLGEpLGZ8fGc9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGEsaykpfWgmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixoKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIGVnKGEsYixjLGQsZSl7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJlljKGEsZSk7WWYoYyxkKTtkPVlmKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgaD1iW2ZdLGc9YltmKzFdO1wic3R5bGVcIj09PWg/VmYoYSxnLFpmKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oP1JmKGEsZyk6XCJjaGlsZHJlblwiPT09aD9TZihhLGcpOlVjKGEsaCxnLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpaYyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkxmKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwLGI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/SGYoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP1xuSGYoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsITApOkhmKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1cbmZ1bmN0aW9uIGZnKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6VyhcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IodmFyIGYgaW4gZ2UpZ2UuaGFzT3duUHJvcGVydHkoZikmJlcoZixnZVtmXSxhKTticmVhaztjYXNlIFwic291cmNlXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6VyhcInRvcFRvZ2dsZVwiLFwidG9nZ2xlXCIsYSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6V2MoYSxjKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6SWYoYSxcbmMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktmKGEsYyksVyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKSwkZihlLFwib25DaGFuZ2VcIil9WGYoYixjLFpmKTtkPW51bGw7Zm9yKHZhciBoIGluIGMpYy5oYXNPd25Qcm9wZXJ0eShoKSYmKGY9Y1toXSxcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2YgZj9hLnRleHRDb250ZW50IT09ZiYmKGQ9W1wiY2hpbGRyZW5cIixmXSk6XCJudW1iZXJcIj09PXR5cGVvZiBmJiZhLnRleHRDb250ZW50IT09XCJcIitmJiYoZD1bXCJjaGlsZHJlblwiLFwiXCIrZl0pOnVhLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mJiYkZihlLGgpKTtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6bGMoYSk7YWQoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpsYyhhKTtNZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5vbkNsaWNrJiZcbihhLm9uY2xpY2s9Qyl9cmV0dXJuIGR9ZnVuY3Rpb24gbmcoYSxiKXtyZXR1cm4gYS5ub2RlVmFsdWUhPT1ifVxudmFyIG9nPU9iamVjdC5mcmVlemUoe2NyZWF0ZUVsZW1lbnQ6YWcsY3JlYXRlVGV4dE5vZGU6Ymcsc2V0SW5pdGlhbFByb3BlcnRpZXM6Y2csZGlmZlByb3BlcnRpZXM6ZGcsdXBkYXRlUHJvcGVydGllczplZyxkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzOmZnLGRpZmZIeWRyYXRlZFRleHQ6bmcsd2FybkZvclVubWF0Y2hlZFRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0OmZ1bmN0aW9uKCl7fSxyZXN0b3JlQ29udHJvbGxlZFN0YXRlOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6WmMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPVxuYy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZVxceDNkXCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlXFx4M2RcInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1YYShkKTtlP3ZvaWQgMDpEKFwiOTBcIik7bWMoZCk7WmMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkxmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZIZihhLCEhYy5tdWx0aXBsZSxiLCExKX19fSk7VGIuaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudChvZyk7dmFyIHBnPW51bGwscWc9bnVsbDtcbmZ1bmN0aW9uIHJnKGEpe3RoaXMuX2V4cGlyYXRpb25UaW1lPVguY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbigpO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9cmcucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6RChcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IHNnO1gudXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5yZy5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5yZy5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6RChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD9EKFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO1guZmx1c2hSb290KGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O3JnLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBzZygpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfXNnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5zZy5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9EKFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtmdW5jdGlvbiB0ZyhhLGIsYyl7dGhpcy5faW50ZXJuYWxSb290PVguY3JlYXRlQ29udGFpbmVyKGEsYixjKX10Zy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IHNnO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTtYLnVwZGF0ZUNvbnRhaW5lcihhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xudGcucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IHNnO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtYLnVwZGF0ZUNvbnRhaW5lcihudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O3RnLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBzZztjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7WC51cGRhdGVDb250YWluZXIoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcbnRnLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyByZyh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIHVnKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHZnKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbnZhciBYPXBmKHtnZXRSb290SG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlVHlwZTtzd2l0Y2goYil7Y2FzZSA5OmNhc2UgMTE6YT0oYT1hLmRvY3VtZW50RWxlbWVudCk/YS5uYW1lc3BhY2VVUkk6UGYobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmI9OD09PWI/YS5wYXJlbnROb2RlOmEsYT1iLm5hbWVzcGFjZVVSSXx8bnVsbCxiPWIudGFnTmFtZSxhPVBmKGEsYil9cmV0dXJuIGF9LGdldENoaWxkSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUGYoYSxiKX0sZ2V0UHVibGljSW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHByZXBhcmVGb3JDb21taXQ6ZnVuY3Rpb24oKXtwZz1WZDt2YXIgYT1mYSgpO2lmKG5lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBiPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOnt2YXIgYz13aW5kb3cuZ2V0U2VsZWN0aW9uJiZ3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5pZihjJiYwIT09Yy5yYW5nZUNvdW50KXtiPWMuYW5jaG9yTm9kZTt2YXIgZD1jLmFuY2hvck9mZnNldCxlPWMuZm9jdXNOb2RlO2M9Yy5mb2N1c09mZnNldDt0cnl7Yi5ub2RlVHlwZSxlLm5vZGVUeXBlfWNhdGNoKEIpe2I9bnVsbDticmVhayBhfXZhciBmPTAsaD0tMSxnPS0xLGs9MCx2PTAsbD1hLHA9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB6Ozspe2whPT1ifHwwIT09ZCYmMyE9PWwubm9kZVR5cGV8fChoPWYrZCk7bCE9PWV8fDAhPT1jJiYzIT09bC5ub2RlVHlwZXx8KGc9ZitjKTszPT09bC5ub2RlVHlwZSYmKGYrPWwubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh6PWwuZmlyc3RDaGlsZCkpYnJlYWs7cD1sO2w9en1mb3IoOzspe2lmKGw9PT1hKWJyZWFrIGI7cD09PWImJisraz09PWQmJihoPWYpO3A9PT1lJiYrK3Y9PT1jJiYoZz1mKTtpZihudWxsIT09KHo9bC5uZXh0U2libGluZykpYnJlYWs7bD1wO3A9bC5wYXJlbnROb2RlfWw9en1iPS0xPT09aHx8LTE9PT1nP251bGw6XG57c3RhcnQ6aCxlbmQ6Z319ZWxzZSBiPW51bGx9Yj1ifHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBiPW51bGw7cWc9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Yn07V2QoITEpfSxyZXNldEFmdGVyQ29tbWl0OmZ1bmN0aW9uKCl7dmFyIGE9cWcsYj1mYSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmphKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZih3aW5kb3cuZ2V0U2VsZWN0aW9uKXtiPXdpbmRvdy5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jW21iKCldLmxlbmd0aDthPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9hOk1hdGgubWluKGQuZW5kLGUpOyFiLmV4dGVuZCYmYT5cbmQmJihlPWQsZD1hLGE9ZSk7ZT1tZShjLGEpO3ZhciBmPW1lKGMsZCk7aWYoZSYmZiYmKDEhPT1iLnJhbmdlQ291bnR8fGIuYW5jaG9yTm9kZSE9PWUubm9kZXx8Yi5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8Yi5mb2N1c05vZGUhPT1mLm5vZGV8fGIuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkpe3ZhciBoPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7aC5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpO2IucmVtb3ZlQWxsUmFuZ2VzKCk7YT5kPyhiLmFkZFJhbmdlKGgpLGIuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihoLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLGIuYWRkUmFuZ2UoaCkpfX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LFxuYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH1xZz1udWxsO1dkKHBnKTtwZz1udWxsfSxjcmVhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUpe2E9YWcoYSxiLGMsZCk7YVtGXT1lO2FbVGFdPWI7cmV0dXJuIGF9LGFwcGVuZEluaXRpYWxDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGZpbmFsaXplSW5pdGlhbENoaWxkcmVuOmZ1bmN0aW9uKGEsYixjLGQpe2NnKGEsYixjLGQpO3JldHVybiB2ZyhiLGMpfSxwcmVwYXJlVXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIGRnKGEsYixjLGQsZSl9LHNob3VsZFNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwic3RyaW5nXCI9PT1cbnR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH0sc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZTpmdW5jdGlvbihhLGIpe3JldHVybiEhYi5oaWRkZW59LGNyZWF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkKXthPWJnKGEsYik7YVtGXT1kO3JldHVybiBhfSxub3c6c2YsbXV0YXRpb246e2NvbW1pdE1vdW50OmZ1bmN0aW9uKGEsYixjKXt2ZyhiLGMpJiZhLmZvY3VzKCl9LGNvbW1pdFVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe2FbVGFdPWU7ZWcoYSxiLGMsZCxlKX0scmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXtTZihhLFwiXCIpfSxjb21taXRUZXh0VXBkYXRlOmZ1bmN0aW9uKGEsYixjKXthLm5vZGVWYWx1ZT1jfSxhcHBlbmRDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGFwcGVuZENoaWxkVG9Db250YWluZXI6ZnVuY3Rpb24oYSxiKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYSk6YS5hcHBlbmRDaGlsZChiKX0sXG5pbnNlcnRCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpe2EuaW5zZXJ0QmVmb3JlKGIsYyl9LGluc2VydEluQ29udGFpbmVyQmVmb3JlOmZ1bmN0aW9uKGEsYixjKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYyk6YS5pbnNlcnRCZWZvcmUoYixjKX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLnJlbW92ZUNoaWxkKGIpfSxyZW1vdmVDaGlsZEZyb21Db250YWluZXI6ZnVuY3Rpb24oYSxiKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik6YS5yZW1vdmVDaGlsZChiKX19LGh5ZHJhdGlvbjp7Y2FuSHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDEhPT1hLm5vZGVUeXBlfHxiLnRvTG93ZXJDYXNlKCkhPT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDphfSxjYW5IeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJcIj09PWJ8fDMhPT1hLm5vZGVUeXBlP251bGw6YX0sZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nOmZ1bmN0aW9uKGEpe2ZvcihhPVxuYS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0sZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQ6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxoeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2FbRl09ZjthW1RhXT1jO3JldHVybiBmZyhhLGIsYyxlLGQpfSxoeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXthW0ZdPWM7cmV0dXJuIG5nKGEsYil9LGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxcbmRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZTpmdW5jdGlvbigpe319LHNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjazp0ZixjYW5jZWxEZWZlcnJlZENhbGxiYWNrOnVmfSksQ2c9WDthYz1DZy5iYXRjaGVkVXBkYXRlcztiYz1DZy5pbnRlcmFjdGl2ZVVwZGF0ZXM7Y2M9Q2cuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM7XG5mdW5jdGlvbiBEZyhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHRnKGEsITEsYil9XG5mdW5jdGlvbiBFZyhhLGIsYyxkLGUpe3VnKGMpP3ZvaWQgMDpEKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1EZyhjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19WC51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBYLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gRmcoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDt1ZyhiKT92b2lkIDA6RChcIjIwMFwiKTtyZXR1cm4gcWYoYSxiLG51bGwsYyl9XG52YXIgR2c9e2NyZWF0ZVBvcnRhbDpGZyxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9udWxsOjE9PT1hLm5vZGVUeXBlP2E6WC5maW5kSG9zdEluc3RhbmNlKGEpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gRWcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7dWcoYSk/dm9pZCAwOkQoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtFZyhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1cbm51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEZnLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpYLmJhdGNoZWRVcGRhdGVzLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpYLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6WC5mbHVzaFN5bmMsdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOlguZmx1c2hDb250cm9sbGVkLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpSYSxFdmVudFBsdWdpblJlZ2lzdHJ5OkNhLEV2ZW50UHJvcGFnYXRvcnM6a2IsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OiRiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpiYixSZWFjdERPTUV2ZW50TGlzdGVuZXI6JGR9LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IHRnKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07XG5YLmluamVjdEludG9EZXZUb29scyh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6VWEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4zLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgSGc9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpHZ30pLElnPUhnJiZHZ3x8SGc7bW9kdWxlLmV4cG9ydHM9SWdbXCJkZWZhdWx0XCJdP0lnW1wiZGVmYXVsdFwiXTpJZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMy4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIikscD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIikscT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSx0PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyx1PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHY9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx3PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgseD1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHk9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHo9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLEE9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTpcbjYwMTEyLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxlPVwiaHR0cDovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxjPTA7YzxiO2MrKyllKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO24oITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixlKX12YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX07XG5mdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fER9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtFLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/QyhcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxEfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO20oSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST17Y3VycmVudDpudWxsfSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTChhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsYykmJiFLLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGs9QXJyYXkoZiksbD0wO2w8ZjtsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWt9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjp0LHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpJLmN1cnJlbnR9fVxuZnVuY3Rpb24gTShhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09dH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiXFx4M2RcIjpcIlxceDNkMFwiLFwiOlwiOlwiXFx4M2QyXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBOPS9cXC8rL2csTz1bXTtmdW5jdGlvbiBQKGEsYixlLGMpe2lmKE8ubGVuZ3RoKXt2YXIgZD1PLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gUShhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPk8ubGVuZ3RoJiZPLnB1c2goYSl9XG5mdW5jdGlvbiBSKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB0OmNhc2UgdTpnPSEwfX1pZihnKXJldHVybiBlKGMsYSxcIlwiPT09Yj9cIi5cIitTKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2Q9YVtoXTt2YXIgZj1iK1MoZCxoKTtnKz1SKGQsZixlLGMpfWVsc2UgaWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxcbmg9MDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrUyhkLGgrKyksZys9UihkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSxDKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBTKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBUKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIFUoYSxiLGUpe3ZhciBjPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VihhLGMsZSxxLnRoYXRSZXR1cm5zQXJndW1lbnQpOm51bGwhPWEmJihNKGEpJiYoYj1kKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShOLFwiJFxceDI2L1wiKStcIi9cIikrZSxhPXskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn0pLGMucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsZSxjLGQpe3ZhciBnPVwiXCI7bnVsbCE9ZSYmKGc9KFwiXCIrZSkucmVwbGFjZShOLFwiJFxceDI2L1wiKStcIi9cIik7Yj1QKGIsZyxjLGQpO251bGw9PWF8fFIoYSxcIlwiLFUsYik7UShiKX1cbnZhciBXPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1YoYSxjLG51bGwsYixlKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVAobnVsbCxudWxsLGIsZSk7bnVsbD09YXx8UihhLFwiXCIsVCxiKTtRKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT8wOlIoYSxcIlwiLHEudGhhdFJldHVybnNOdWxsLG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwscS50aGF0UmV0dXJuc0FyZ3VtZW50KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtNKGEpP3ZvaWQgMDpDKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpFLFB1cmVDb21wb25lbnQ6RyxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6eSxcbl9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9kZWZhdWx0VmFsdWU6YSxfY3VycmVudFZhbHVlOmEsX2NoYW5nZWRCaXRzOjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp4LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEscmVuZGVyOmF9fSxGcmFnbWVudDp2LFN0cmljdE1vZGU6dyx1bnN0YWJsZV9Bc3luY01vZGU6eixjcmVhdGVFbGVtZW50OkwsY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9DKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPW0oe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9SS5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGs9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmXG4oaz1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09az9rW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7az1BcnJheShjKTtmb3IodmFyIGw9MDtsPGM7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1rfXJldHVybnskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPUwuYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpNLHZlcnNpb246XCIxNi4zLjJcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SSxhc3NpZ246bX19LFg9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpXfSksXG5ZPVgmJld8fFg7bW9kdWxlLmV4cG9ydHM9WVtcImRlZmF1bHRcIl0/WVtcImRlZmF1bHRcIl06WTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBBcHAgZnJvbSAnLi9jb21wb25lbnRzL0FwcCc7XG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IGNoYXRBcHAgZnJvbSAnLi9yZWR1Y2Vycy9yZWR1Y2Vycyc7XG5pbXBvcnQgU29ja2V0IGZyb20gJy4vU29ja2V0JztcbmltcG9ydCB7IHJlY2VpdmVNZXNzYWdlLCByZWNlaXZlQ29udmVyc2F0aW9uLCByZXRyaWV2ZUNvbnZlcnNhdGlvbiB9IGZyb20gJy4vYWN0aW9ucy9hY3Rpb25zJztcblxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShjaGF0QXBwLCBhcHBseU1pZGRsZXdhcmUodGh1bmspKTtcblxuU29ja2V0Lm9uKCdSRUNFSVZFX01FU1NBR0UnLCBtZXNzYWdlID0+IHtcbiAgc3RvcmUuZGlzcGF0Y2gocmVjZWl2ZU1lc3NhZ2UoSlNPTi5wYXJzZShtZXNzYWdlKSkpO1xufSlcblxuU29ja2V0Lm9uKCdSRUNFSVZFX0NPTlZFUlNBVElPTicsIG1lc3NhZ2UgPT4ge1xuICBzdG9yZS5kaXNwYXRjaChyZWNlaXZlQ29udmVyc2F0aW9uKFt7dGV4dDogbWVzc2FnZSwgdXNlcm5hbWU6J3Rlc3RpJywgZGF0ZTondGltZSBmbyBkYXQnfV0pKTtcbn0pXG5cbnN0b3JlLmRpc3BhdGNoKHJldHJpZXZlQ29udmVyc2F0aW9uKCkpO1xuXG5SZWFjdERPTS5yZW5kZXIoXG4gIDxQcm92aWRlciBzdG9yZT17c3RvcmV9ID5cbiAgICA8QXBwIC8+XG4gIDwvUHJvdmlkZXI+LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTsiLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIjbWVzc2FnZS1saXN0IHtcXG4gIGZsZXg6IDE7XFxuICBvdmVyZmxvdzogc2Nyb2xsOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vTWVzc2FnZUxpc3Quc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9NZXNzYWdlTGlzdC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9NZXNzYWdlTGlzdC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==