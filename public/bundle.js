!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=89)}([function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){e.exports=n(71)()},function(e,t,n){"use strict";e.exports=n(88)},function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(65)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(i=++o)}),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(66))},function(e,t,n){(function(e){var r,o=n(58),i=n(26),a=n(52),s=n(51),u=n(50);e&&e.ArrayBuffer&&(r=n(48));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),l="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=c||l;t.protocol=3;var p=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},d=o(p),h={type:"error",data:"parser error"},y=n(47);function m(e,t,n){for(var r=new Array(e.length),o=s(e.length,n),i=function(e,n,o){t(n,function(t,n){r[e]=n,o(t,r)})},a=0;a<e.length;a++)i(a,e[a],o)}t.encodePacket=function(n,r,o,i){"function"==typeof r&&(i=r,r=!1),"function"==typeof o&&(i=o,o=null);var a=void 0===n.data?void 0:n.data.buffer||n.data;if(e.ArrayBuffer&&a instanceof ArrayBuffer)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=e.data,i=new Uint8Array(o),a=new Uint8Array(1+o.byteLength);a[0]=p[e.type];for(var s=0;s<i.length;s++)a[s+1]=i[s];return r(a.buffer)}(n,r,i);if(y&&a instanceof e.Blob)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);if(f)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=new FileReader;return o.onload=function(){e.data=o.result,t.encodePacket(e,n,!0,r)},o.readAsArrayBuffer(e.data)}(e,n,r);var o=new Uint8Array(1);o[0]=p[e.type];var i=new y([o.buffer,e.data]);return r(i)}(n,r,i);if(a&&a.base64)return function(e,n){var r="b"+t.packets[e.type]+e.data.data;return n(r)}(n,i);var s=p[n.type];return void 0!==n.data&&(s+=o?u.encode(String(n.data),{strict:!1}):String(n.data)),i(""+s)},t.encodeBase64Packet=function(n,r){var o,i="b"+t.packets[n.type];if(y&&n.data instanceof e.Blob){var a=new FileReader;return a.onload=function(){var e=a.result.split(",")[1];r(i+e)},a.readAsDataURL(n.data)}try{o=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(e){for(var s=new Uint8Array(n.data),u=new Array(s.length),c=0;c<s.length;c++)u[c]=s[c];o=String.fromCharCode.apply(null,u)}return i+=e.btoa(o),r(i)},t.decodePacket=function(e,n,r){if(void 0===e)return h;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(r&&!1===(e=function(e){try{e=u.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return h;var o=e.charAt(0);return Number(o)==o&&d[o]?e.length>1?{type:d[o],data:e.substring(1)}:{type:d[o]}:h}o=new Uint8Array(e)[0];var i=a(e,1);return y&&"blob"===n&&(i=new y([i])),{type:d[o],data:i}},t.decodeBase64Packet=function(e,t){var n=d[e.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:e.substr(1)}};var o=r.decode(e.substr(1));return"blob"===t&&y&&(o=new y([o])),{type:n,data:o}},t.encodePayload=function(e,n,r){"function"==typeof n&&(r=n,n=null);var o=i(e);if(n&&o)return y&&!f?t.encodePayloadAsBlob(e,r):t.encodePayloadAsArrayBuffer(e,r);if(!e.length)return r("0:");m(e,function(e,r){t.encodePacket(e,!!o&&n,!1,function(e){r(null,function(e){return e.length+":"+e}(e))})},function(e,t){return r(t.join(""))})},t.decodePayload=function(e,n,r){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===e)return r(h,0,1);for(var i,a,s="",u=0,c=e.length;u<c;u++){var l=e.charAt(u);if(":"===l){if(""===s||s!=(i=Number(s)))return r(h,0,1);if(s!=(a=e.substr(u+1,i)).length)return r(h,0,1);if(a.length){if(o=t.decodePacket(a,n,!1),h.type===o.type&&h.data===o.data)return r(h,0,1);if(!1===r(o,u+i,c))return}u+=i,s=""}else s+=l}return""!==s?r(h,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){if(!e.length)return n(new ArrayBuffer(0));m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){return n(null,e)})},function(e,t){var r=t.reduce(function(e,t){var n;return e+(n="string"==typeof t?t.length:t.byteLength).toString().length+n+2},0),o=new Uint8Array(r),i=0;return t.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),a=0;a<e.length;a++)r[a]=e.charCodeAt(a);n=r.buffer}o[i++]=t?0:1;var s=n.byteLength.toString();for(a=0;a<s.length;a++)o[i++]=parseInt(s[a]);o[i++]=255;for(r=new Uint8Array(n),a=0;a<r.length;a++)o[i++]=r[a]}),n(o.buffer)})},t.encodePayloadAsBlob=function(e,n){m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);e=r.buffer,t[0]=0}var i=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),a=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)a[o]=parseInt(i[o]);if(a[i.length]=255,y){var s=new y([t.buffer,a.buffer,e]);n(null,s)}})},function(e,t){return n(new y(t))})},t.decodePayloadAsBinary=function(e,n,r){"function"==typeof n&&(r=n,n=null);for(var o=e,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),u=0===s[0],c="",l=1;255!==s[l];l++){if(c.length>310)return r(h,0,1);c+=s[l]}o=a(o,2+c.length),c=parseInt(c);var f=a(o,0,c);if(u)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(e){var p=new Uint8Array(f);f="";for(l=0;l<p.length;l++)f+=String.fromCharCode(p[l])}i.push(f),o=a(o,c)}var d=i.length;i.forEach(function(e,o){r(t.decodePacket(e,n,!0),o,d)})}}).call(this,n(0))},function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t){e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,s],l=0;(u=new Error(t.replace(/%s/g,function(){return c[l++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";n.r(t);var r=n(2),o=n(1),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),s=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function u(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return i[t]=n.store,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:s.isRequired,children:i.a.element.isRequired},o.childContextTypes=((e={})[t]=s.isRequired,e[n]=a,e),o}var c=u(),l=n(36),f=n.n(l),p=n(8),d=n.n(p);var h=null,y={notify:function(){}};var m=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=y}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=y)},e}(),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var v=0,b={};function w(){}function C(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,u=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,c=o.methodName,l=void 0===c?"connectAdvanced":c,p=o.renderCountProp,h=void 0===p?void 0:p,y=o.shouldHandleStateChanges,C=void 0===y||y,E=o.storeKey,x=void 0===E?"store":E,k=o.withRef,S=void 0!==k&&k,T=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),_=x+"Subscription",P=v++,O=((t={})[x]=s,t[_]=a,t),R=((n={})[_]=a,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+l+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=u(n),i=g({},T,{getDisplayName:u,methodName:l,renderCountProp:h,shouldHandleStateChanges:C,storeKey:x,withRef:S,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=P,r.state={},r.renderCount=0,r.store=e[x]||t[x],r.propsMode=Boolean(e[x]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+x+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+x+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,n),a.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[_]=t||this.context[_],e},a.prototype.componentDidMount=function(){C&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=w,this.store=null,this.selector.run=w,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return d()(S,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+l+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},a.prototype.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(C){var e=(this.propsMode?this.props:this.context)[_];this.subscription=new m(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(e){if(!(S||h||this.propsMode&&this.subscription))return e;var t=g({},e);return S&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[_]=this.subscription),t},a.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=R,a.contextTypes=O,a.propTypes=O,f()(a,t)}}var E=Object.prototype.hasOwnProperty;function x(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function k(e,t){if(x(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!E.call(t,n[o])||!x(e[n[o]],t[n[o]]))return!1;return!0}var S=n(19),T=n(90),_="object"==typeof self&&self&&self.Object===Object&&self,P=(T.a||_||Function("return this")()).Symbol,O=Object.prototype;O.hasOwnProperty,O.toString,P&&P.toStringTag;Object.prototype.toString;P&&P.toStringTag;Object.getPrototypeOf,Object;var R=Function.prototype,A=Object.prototype,N=R.toString;A.hasOwnProperty,N.call(Object);function I(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function M(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function U(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=M(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=M(o),o=r(t,n)),o},r}}var B=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:I(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?I(function(t){return Object(S.bindActionCreators)(e,t)}):void 0}];var D=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:I(function(){return{}})}],j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function F(e,t,n){return j({},n,e,t)}var L=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(t,n,s){var u=e(t,n,s);return i?r&&o(u,a)||(a=u):(i=!0,a=u),a}}}(e):void 0},function(e){return e?void 0:function(){return F}}];function z(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function H(e,t,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,s=o.areStatePropsEqual,u=!1,c=void 0,l=void 0,f=void 0,p=void 0,d=void 0;function h(o,u){var h,y,m=!a(u,l),g=!i(o,c);return c=o,l=u,m&&g?(f=e(c,l),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):m?(e.dependsOnOwnProps&&(f=e(c,l)),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):g?(h=e(c,l),y=!s(h,f),f=h,y&&(d=n(f,p,l)),d):d}return function(o,i){return u?h(o,i):(f=e(c=o,l=i),p=t(r,l),d=n(f,p,l),u=!0,d)}}function q(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),s=r(e,i),u=o(e,i);return(i.pure?H:z)(a,s,u,e,i)}var V=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function W(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Y(e,t){return e===t}var K=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?C:t,r=e.mapStateToPropsFactories,o=void 0===r?D:r,i=e.mapDispatchToPropsFactories,a=void 0===i?B:i,s=e.mergePropsFactories,u=void 0===s?L:s,c=e.selectorFactory,l=void 0===c?q:c;return function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=i.pure,c=void 0===s||s,f=i.areStatesEqual,p=void 0===f?Y:f,d=i.areOwnPropsEqual,h=void 0===d?k:d,y=i.areStatePropsEqual,m=void 0===y?k:y,g=i.areMergedPropsEqual,v=void 0===g?k:g,b=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),w=W(e,o,"mapStateToProps"),C=W(t,a,"mapDispatchToProps"),E=W(r,u,"mergeProps");return n(l,V({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:w,initMapDispatchToProps:C,initMergeProps:E,pure:c,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:m,areMergedPropsEqual:v},b))}}();n.d(t,"Provider",function(){return c}),n.d(t,"createProvider",function(){return u}),n.d(t,"connectAdvanced",function(){return C}),n.d(t,"connect",function(){return K})},function(e,t,n){var r=n(4),o=n(5);function i(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=i,o(i.prototype),i.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},i.prototype.onPacket=function(e){this.emit("packet",e)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t,n){(function(t){var r=n(60);e.exports=function(e){var n=e.xdomain,o=e.xscheme,i=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!n||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(e){}if(!n)try{return new(t[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}}).call(this,n(0))},function(e,t,n){var r=n(3)("socket.io-parser"),o=n(5),i=n(63),a=n(31),s=n(30);function u(){}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=u,t.Decoder=f;var c=t.ERROR+'"encode error"';function l(e){var n=""+e.type;if(t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data){var o=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===o)return c;n+=o}return r("encoded %j as %s",e,n),n}function f(){this.reconstructor=null}function p(e){this.reconPack=e,this.buffers=[]}function d(e){return{type:t.ERROR,data:"parser error: "+e}}u.prototype.encode=function(e,n){(r("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){i.removeBlobs(e,function(e){var n=i.deconstructPacket(e),r=l(n.packet),o=n.buffers;o.unshift(r),t(o)})}(e,n):n([l(e)])},o(f.prototype),f.prototype.add=function(e){var n;if("string"==typeof e)n=function(e){var n=0,o={type:Number(e.charAt(0))};if(null==t.types[o.type])return d("unknown packet type "+o.type);if(t.BINARY_EVENT===o.type||t.BINARY_ACK===o.type){for(var i="";"-"!==e.charAt(++n)&&(i+=e.charAt(n),n!=e.length););if(i!=Number(i)||"-"!==e.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===e.charAt(n+1))for(o.nsp="";++n;){var s=e.charAt(n);if(","===s)break;if(o.nsp+=s,n===e.length)break}else o.nsp="/";var u=e.charAt(n+1);if(""!==u&&Number(u)==u){for(o.id="";++n;){var s=e.charAt(n);if(null==s||Number(s)!=s){--n;break}if(o.id+=e.charAt(n),n===e.length)break}o.id=Number(o.id)}if(e.charAt(++n)){var c=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(n)),l=!1!==c&&(o.type===t.ERROR||a(c));if(!l)return d("invalid payload");o.data=c}return r("decoded %s as %j",e,o),o}(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!s(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=n(68)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SEND_MESSAGE=t.RECEIVE_CONVERSATION=t.RETRIEVE_CONVERSATION=t.RECEIVE_MESSAGE=t.INPUT_CHANGE=void 0,t.sendMessage=function(e){return function(t){i.default.emit("SEND_MESSAGE",e),t({type:l,status:"Success"})}},t.receiveMessage=function(e){return{type:s,message:e}},t.retrieveConversation=function(){return function(e){e({type:u}),i.default.emit("RETRIEVE_CONVERSATION")}},t.receiveConversation=function(e){return{type:c,messages:e}},t.inputChange=function(e,t){return{type:a,name:e,value:t}};var r,o=n(13),i=(r=o)&&r.__esModule?r:{default:r};var a=t.INPUT_CHANGE="INPUT_CHANGE",s=t.RECEIVE_MESSAGE="RECEIVE_MESSAGE",u=t.RETRIEVE_CONVERSATION="RETRIEVE_CONVERSATION",c=t.RECEIVE_CONVERSATION="RECEIVE_CONVERSATION",l=t.SEND_MESSAGE="SEND_MESSAGE"},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,c=0,l=[],f=n(76);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(v(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function y(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),g(t,e.attrs),h(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=u||(u=m(t)),r=C.bind(null,n,a,!1),o=C.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){y(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var b,w=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function C(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,s,u){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,s,u],f=0;(c=new Error(t.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return u}),n.d(t,"combineReducers",function(){return l}),n.d(t,"bindActionCreators",function(){return p}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(20),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function s(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var a;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,l=t,f=[],p=f,d=!1;function h(){p===f&&(p=f.slice())}function y(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return l}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),p.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=p.indexOf(e);p.splice(n,1)}}}function g(e){if(!s(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,l=c(l,e)}finally{d=!1}for(var t=f=p,n=0;n<t.length;n++){(0,t[n])()}return e}return g({type:o.INIT}),(a={dispatch:g,subscribe:m,getState:y,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,g({type:o.REPLACE})}})[r.a]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(y())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},a}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a=Object.keys(n);var s=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){s=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(s)throw s;for(var r=!1,o={},i=0;i<a.length;i++){var u=a[i],l=n[u],f=e[u],p=l(f,t);if(void 0===p){var d=c(u,t);throw new Error(d)}o[u]=p,r=r||p!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":i(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],s=e[a];"function"==typeof s&&(r[a]=f(s,t))}return r}function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=e.apply(void 0,r),s=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},u={getState:i.getState,dispatch:function(){return s.apply(void 0,arguments)}},c=t.map(function(e){return e(u)});return s=d.apply(void 0,c)(i.dispatch),a({},i,{dispatch:s})}}}},function(e,t,n){"use strict";(function(e,r){var o,i=n(35);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(0),n(69)(e))},function(e,t){var n=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return t.apply(e,r.concat(n.call(arguments)))}}},function(e,t){e.exports=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},function(e,t,n){var r=n(12),o=n(5),i=n(43),a=n(22),s=n(21),u=n(3)("socket.io-client:socket"),c=n(7),l=n(26);e.exports=d;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},p=o.prototype.emit;function d(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}o(d.prototype),d.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[a(e,"open",s(this,"onopen")),a(e,"packet",s(this,"onpacket")),a(e,"close",s(this,"onclose"))]}},d.prototype.open=d.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},d.prototype.send=function(){var e=i(arguments);return e.unshift("message"),this.emit.apply(this,e),this},d.prototype.emit=function(e){if(f.hasOwnProperty(e))return p.apply(this,arguments),this;var t=i(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:l(t))?r.BINARY_EVENT:r.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},d.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},d.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},d.prototype.onclose=function(e){u("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},d.prototype.onpacket=function(e){var t=e.nsp===this.nsp,n=e.type===r.ERROR&&"/"===e.nsp;if(t||n)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},d.prototype.onevent=function(e){var t=e.data||[];u("emitting event %j",t),null!=e.id&&(u("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?p.apply(this,t):this.receiveBuffer.push(t)},d.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);u("sending ack %j",o),t.packet({type:l(o)?r.BINARY_ACK:r.ACK,id:e,data:o})}}},d.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(u("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):u("bad ack %s",e.id)},d.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},d.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)p.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},d.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},d.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},d.prototype.close=d.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},d.prototype.compress=function(e){return this.flags.compress=e,this},d.prototype.binary=function(e){return this.flags.binary=e,this}},function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}},function(e,t,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i=64,a={},s=0,u=0;function c(e){var t="";do{t=o[e%i]+t,e=Math.floor(e/i)}while(e>0);return t}function l(){var e=c(+new Date);return e!==r?(s=0,r=e):e+"."+c(s++)}for(;u<i;u++)a[o[u]]=u;l.encode=c,l.decode=function(e){var t=0;for(u=0;u<e.length;u++)t=t*i+a[e.charAt(u)];return t},e.exports=l},function(e,t,n){(function(t){var r=n(53),o=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);e.exports=function e(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var o=0,s=n.length;o<s;o++)if(e(n[o]))return!0;return!1}if("function"==typeof t&&t.isBuffer&&t.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||i&&n instanceof Blob||a&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return e(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&e(n[u]))return!0;return!1}}).call(this,n(57).Buffer)},function(e,t,n){var r=n(10),o=n(7),i=n(4),a=n(6),s=n(25),u=n(3)("engine.io-client:polling");e.exports=l;var c=null!=new(n(11))({xdomain:!1}).responseType;function l(e){var t=e&&e.forceBase64;c&&!t||(this.supportsBinary=!1),r.call(this,e)}a(l,r),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(e){var t=this;function n(){u("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||n()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||n()}))}else n()},l.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(e){var t=this;u("polling got data %s",e);i.decodePayload(e,this.socket.binaryType,function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var e=this;function t(){u("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t))},l.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};i.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},l.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=s()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},function(e,t,n){(function(e){var r=n(11),o=n(59),i=n(46),a=n(45);t.polling=function(t){var n=!1,a=!1,s=!1!==t.jsonp;if(e.location){var u="https:"===location.protocol,c=location.port;c||(c=u?443:80),n=t.hostname!==location.hostname||c!==t.port,a=t.secure!==u}if(t.xdomain=n,t.xscheme=a,"open"in new r(t)&&!t.forceJSONP)return new o(t);if(!s)throw new Error("JSONP disabled");return new i(t)},t.websocket=a}).call(this,n(0))},function(e,t,n){var r=n(62),o=n(23),i=n(5),a=n(12),s=n(22),u=n(21),c=n(3)("socket.io-client:manager"),l=n(24),f=n(42),p=Object.prototype.hasOwnProperty;function d(e,t){if(!(this instanceof d))return new d(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||a;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=d,d.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)p.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},d.prototype.updateSocketIds=function(){for(var e in this.nsps)p.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},d.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},i(d.prototype),d.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},d.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},d.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},d.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},d.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},d.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},d.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},d.prototype.open=d.prototype.connect=function(e,t){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=s(n,"open",function(){o.onopen(),e&&e()}),a=s(n,"error",function(t){if(c("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else o.maybeReconnectOnOpen()});if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var l=setTimeout(function(){c("connect attempt timed out after %d",u),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",u)},u);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(i),this.subs.push(a),this},d.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(s(e,"data",u(this,"ondata"))),this.subs.push(s(e,"ping",u(this,"onping"))),this.subs.push(s(e,"pong",u(this,"onpong"))),this.subs.push(s(e,"error",u(this,"onerror"))),this.subs.push(s(e,"close",u(this,"onclose"))),this.subs.push(s(this.decoder,"decoded",u(this,"ondecoded")))},d.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},d.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},d.prototype.ondata=function(e){this.decoder.add(e)},d.prototype.ondecoded=function(e){this.emit("packet",e)},d.prototype.onerror=function(e){c("error",e),this.emitAll("error",e)},d.prototype.socket=function(e,t){var n=this.nsps[e];if(!n){n=new o(this,e,t),this.nsps[e]=n;var r=this;n.on("connecting",i),n.on("connect",function(){n.id=r.generateId(e)}),this.autoConnect&&i()}function i(){~l(r.connecting,n)||r.connecting.push(n)}return n},d.prototype.destroy=function(e){var t=l(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},d.prototype.packet=function(e){c("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()}))},d.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},d.prototype.cleanup=function(){c("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},d.prototype.close=d.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},d.prototype.onclose=function(e){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},d.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();c("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(c("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(c("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(c("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},d.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t,n){(function(t){e.exports=function(e){return n&&t.Buffer.isBuffer(e)||r&&(e instanceof t.ArrayBuffer||o(e))};var n="function"==typeof t.Buffer&&"function"==typeof t.Buffer.isBuffer,r="function"==typeof t.ArrayBuffer,o=r&&"function"==typeof t.ArrayBuffer.isView?t.ArrayBuffer.isView:function(e){return e.buffer instanceof t.ArrayBuffer}}).call(this,n(0))},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,o=e.indexOf("["),i=e.indexOf("]");-1!=o&&-1!=i&&(e=e.substring(0,o)+e.substring(o,i).replace(/:/g,";")+e.substring(i,e.length));for(var a=n.exec(e||""),s={},u=14;u--;)s[r[u]]=a[u]||"";return-1!=o&&-1!=i&&(s.source=t,s.host=s.host.substring(1,s.host.length-1).replace(/;/g,":"),s.authority=s.authority.replace("[","").replace("]","").replace(/;/g,":"),s.ipv6uri=!0),s}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))o.call(n,c)&&(s[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(s[a[l]]=n[a[l]])}}return s}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,s=a&&a(Object);return function u(c,l,f){if("string"!=typeof l){if(s){var p=a(l);p&&p!==s&&u(c,p,f)}var d=r(l);o&&(d=d.concat(o(l)));for(var h=0;h<d.length;++h){var y=d[h];if(!(e[y]||t[y]||f&&f[y])){var m=i(l,y);try{n(c,y,m)}catch(e){}}}return c}return c}}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(14);var i=(0,n(19).combineReducers)({currentInput:function(){var e,t,n,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{username:"",currentMessage:""},a=arguments[1];switch(a.type){case o.INPUT_CHANGE:return r({},i,(e={},t=a.name,n=a.value,t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e));case o.SEND_MESSAGE:return a.status&&"Success"===a.status?r({},i,{currentMessage:""}):i;default:return i}},messages:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1];switch(t.type){case o.RECEIVE_MESSAGE:return[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e),[t.message]);case o.RECEIVE_CONVERSATION:return t.messages;default:return e}},isRetrievingConversation:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];switch(arguments[1].type){case o.RETRIEVE_CONVERSATION:return!0;case o.RECEIVE_CONVERSATION:return!1;default:return e}}});t.default=i},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}t.__esModule=!0;var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){(e.exports=n(16)(!1)).push([e.i,"#message-list {\n  flex: 1;\n  overflow: scroll; }\n  #message-list p {\n    margin: 20px; }\n",""])},function(e,t,n){var r=n(39);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=n(9);n(40);a(n(13));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=e.text,n=e.username,r=e.date;return o.default.createElement("p",null,"[",r,"] ",o.default.createElement("strong",null,n),": ",t)},u=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){var e=this.props.isRetrievingConversation;return o.default.createElement("div",{id:"message-list"},o.default.createElement("p",null,e?"Retrieving conversation...":"Message list"),this.props.messages.map(function(e){return o.default.createElement(s,e)}))}}]),t}();t.default=(0,i.connect)(function(e){return{messages:e.messages,isRetrievingConversation:e.isRetrievingConversation}})(u)},function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},function(e,t){e.exports=function(e,t){for(var n=[],r=(t=t||0)||0;r<e.length;r++)n[r-t]=e[r];return n}},function(e,t){},function(e,t,n){(function(t){var r,o=n(10),i=n(4),a=n(7),s=n(6),u=n(25),c=n(3)("engine.io-client:websocket"),l=t.WebSocket||t.MozWebSocket;if("undefined"==typeof window)try{r=n(44)}catch(e){}var f=l;function p(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=l&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(f=r),o.call(this,e)}f||"undefined"!=typeof window||(f=r),e.exports=p,s(p,o),p.prototype.name="websocket",p.prototype.supportsBinary=!0,p.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?t?new f(e,t):new f(e):new f(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},p.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},p.prototype.write=function(e){var n=this;this.writable=!1;for(var r=e.length,o=0,a=r;o<a;o++)!function(e){i.encodePacket(e,n.supportsBinary,function(o){if(!n.usingBrowserWebSocket){var i={};if(e.options&&(i.compress=e.options.compress),n.perMessageDeflate)("string"==typeof o?t.Buffer.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(i.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,i)}catch(e){c("websocket closed before onclose event")}--r||s()})}(e[o]);function s(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},p.prototype.onClose=function(){o.prototype.onClose.call(this)},p.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},p.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=u()),this.supportsBinary||(e.b64=1),(e=a.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},p.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===p.prototype.name)}}).call(this,n(0))},function(e,t,n){(function(t){var r=n(27),o=n(6);e.exports=c;var i,a=/\n/g,s=/\\n/g;function u(){}function c(e){r.call(this,e),this.query=this.query||{},i||(t.___eio||(t.___eio=[]),i=t.___eio),this.index=i.length;var n=this;i.push(function(e){n.onData(e)}),this.query.j=this.index,t.document&&t.addEventListener&&t.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=u)},!1)}o(c,r),c.prototype.supportsBinary=!1,c.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},c.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},c.prototype.doWrite=function(e,t){var n=this;if(!this.form){var r,o=document.createElement("form"),i=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=u,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function c(){l(),t()}function l(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),l(),e=e.replace(s,"\\\n"),this.area.value=e.replace(a,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&c()}:this.iframe.onload=c}}).call(this,n(0))},function(e,t,n){(function(t){var n=t.BlobBuilder||t.WebKitBlobBuilder||t.MSBlobBuilder||t.MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),i=n&&n.prototype.append&&n.prototype.getBlob;function a(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}e[t]=r}}}function s(e,t){t=t||{};var r=new n;a(e);for(var o=0;o<e.length;o++)r.append(e[o]);return t.type?r.getBlob(t.type):r.getBlob()}function u(e,t){return a(e),new Blob(e,t||{})}e.exports=r?o?t.Blob:u:i?s:void 0}).call(this,n(0))},function(e,t){!function(){"use strict";for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<e.length;r++)n[e.charCodeAt(r)]=r;t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,i="";for(n=0;n<o;n+=3)i+=e[r[n]>>2],i+=e[(3&r[n])<<4|r[n+1]>>4],i+=e[(15&r[n+1])<<2|r[n+2]>>6],i+=e[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(e){var t,r,o,i,a,s=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var l=new ArrayBuffer(s),f=new Uint8Array(l);for(t=0;t<u;t+=4)r=n[e.charCodeAt(t)],o=n[e.charCodeAt(t+1)],i=n[e.charCodeAt(t+2)],a=n[e.charCodeAt(t+3)],f[c++]=r<<2|o>>4,f[c++]=(15&o)<<4|i>>2,f[c++]=(3&i)<<6|63&a;return l}}()},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){(function(e,r){var o;/*! https://mths.be/utf8js v2.1.2 by @mathias */!function(i){var a="object"==typeof t&&t,s=("object"==typeof e&&e&&e.exports,"object"==typeof r&&r);s.global!==s&&s.window;var u,c,l,f=String.fromCharCode;function p(e){for(var t,n,r=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function d(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function h(e,t){return f(e>>t&63|128)}function y(e,t){if(0==(4294967168&e))return f(e);var n="";return 0==(4294965248&e)?n=f(e>>6&31|192):0==(4294901760&e)?(d(e,t)||(e=65533),n=f(e>>12&15|224),n+=h(e,6)):0==(4292870144&e)&&(n=f(e>>18&7|240),n+=h(e,12),n+=h(e,6)),n+=f(63&e|128)}function m(){if(l>=c)throw Error("Invalid byte index");var e=255&u[l];if(l++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function g(e){var t,n;if(l>c)throw Error("Invalid byte index");if(l==c)return!1;if(t=255&u[l],l++,0==(128&t))return t;if(192==(224&t)){if((n=(31&t)<<6|m())>=128)return n;throw Error("Invalid continuation byte")}if(224==(240&t)){if((n=(15&t)<<12|m()<<6|m())>=2048)return d(n,e)?n:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(n=(7&t)<<18|m()<<12|m()<<6|m())>=65536&&n<=1114111)return n;throw Error("Invalid UTF-8 detected")}var v={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,r=p(e),o=r.length,i=-1,a="";++i<o;)a+=y(r[i],n);return a},decode:function(e,t){var n=!1!==(t=t||{}).strict;u=p(e),c=u.length,l=0;for(var r,o=[];!1!==(r=g(n));)o.push(r);return function(e){for(var t,n=e.length,r=-1,o="";++r<n;)(t=e[r])>65535&&(o+=f((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=f(t);return o}(o)}};void 0===(o=function(){return v}.call(t,n,t,e))||(e.exports=o)}()}).call(this,n(49)(e),n(0))},function(e,t){function n(){}e.exports=function(e,t,r){var o=!1;return r=r||n,i.count=e,0===e?t():i;function i(e,n){if(i.count<=0)throw new Error("after called too many times");--i.count,e?(o=!0,t(e),t=r):0!==i.count||o||t(null,n)}}},function(e,t){e.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(e),i=new Uint8Array(n-t),a=t,s=0;a<n;a++,s++)i[s]=o[a];return i.buffer}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){t.read=function(e,t,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,c=u>>1,l=-7,f=n?o-1:0,p=n?-1:1,d=e[t+f];for(f+=p,i=d&(1<<-l)-1,d>>=-l,l+=s;l>0;i=256*i+e[t+f],f+=p,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+e[t+f],f+=p,l-=8);if(0===i)i=1-c;else{if(i===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=c}return(d?-1:1)*a*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var a,s,u,c=8*i-o-1,l=(1<<c)-1,f=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,h=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=l?(s=0,a=l):a+f>=1?(s=(t*u-1)*Math.pow(2,o),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;e[n+d]=255&s,d+=h,s/=256,o-=8);for(a=a<<o|s,c+=o;c>0;e[n+d]=255&a,d+=h,a/=256,c-=8);e[n+d-h]|=128*y}},function(e,t,n){"use strict";t.byteLength=function(e){var t=c(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=c(e),r=n[0],a=n[1],s=new i(function(e,t,n){return 3*(t+n)/4-n}(0,r,a)),u=0,l=a>0?r-4:r,f=0;f<l;f+=4)t=o[e.charCodeAt(f)]<<18|o[e.charCodeAt(f+1)]<<12|o[e.charCodeAt(f+2)]<<6|o[e.charCodeAt(f+3)],s[u++]=t>>16&255,s[u++]=t>>8&255,s[u++]=255&t;2===a&&(t=o[e.charCodeAt(f)]<<2|o[e.charCodeAt(f+1)]>>4,s[u++]=255&t);1===a&&(t=o[e.charCodeAt(f)]<<10|o[e.charCodeAt(f+1)]<<4|o[e.charCodeAt(f+2)]>>2,s[u++]=t>>8&255,s[u++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],a=0,s=n-o;a<s;a+=16383)i.push(l(e,a,a+16383>s?s:a+16383));1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,n){for(var o,i,a=[],s=t;s<n;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(56),o=n(55),i=n(54);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return c(this,e,t,n)}function c(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),o=(e=s(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|d(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?s(e,0):p(e,t);if("Buffer"===t.type&&i(t.data))return p(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(l(t),e=s(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function p(e,t){var n=t.length<0?0:0|d(t.length);e=s(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function h(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return L(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(e).length;default:if(r)return L(e).length;t=(""+t).toLowerCase(),r=!0}}function y(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function m(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,o){var i,a=1,s=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,n/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var l=-1;for(i=n;i<s;i++)if(c(e,i)===c(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*a}else-1!==l&&(i-=i-l),l=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){for(var f=!0,p=0;p<u;p++)if(c(e,i+p)!==c(t,p)){f=!1;break}if(f)return i}return-1}function v(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function b(e,t,n,r){return H(L(t,e.length-n),e,n,r)}function w(e,t,n,r){return H(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function C(e,t,n,r){return w(e,t,n,r)}function E(e,t,n,r){return H(z(t),e,n,r)}function x(e,t,n,r){return H(function(e,t){for(var n,r,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function k(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function S(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,a,s,u,c=e[o],l=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(u=(15&c)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=e[o+1],a=e[o+2],s=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=f}return function(e){var t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=T));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return c(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?s(e,t):void 0!==n?"string"==typeof r?s(e,t).fill(n,r):s(e,t).fill(n):s(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},u.byteLength=h,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?S(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,n);case"utf8":case"utf-8":return S(this,t,n);case"ascii":return _(this,t,n);case"latin1":case"binary":return P(this,t,n);case"base64":return k(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,o>>>=0,this===e)return 0;for(var i=o-r,a=n-t,s=Math.min(i,a),c=this.slice(r,o),l=e.slice(t,n),f=0;f<s;++f)if(c[f]!==l[f]){i=c[f],a=l[f];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return m(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return m(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return b(this,e,t,n);case"ascii":return w(this,e,t,n);case"latin1":case"binary":return C(this,e,t,n);case"base64":return E(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function _(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function P(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function O(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=F(e[i]);return o}function R(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function A(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,n,r,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function I(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function M(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function U(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function B(e,t,n,r,i){return i||U(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function D(e,t,n,r,i){return i||U(e,0,n,8),o.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if(e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},u.prototype.readUInt8=function(e,t){return t||A(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||A(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||A(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||A(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||A(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||A(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||A(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||A(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||A(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||A(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||A(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||A(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||A(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||A(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):M(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=0,a=1,s=0;for(this[t]=255&e;++i<n&&(a*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):M(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return B(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return B(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return D(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return D(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var a=u.isBuffer(e)?e:L(new u(e,r).toString()),s=a.length;for(i=0;i<n-t;++i)this[i+t]=a[i%s]}return this};var j=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function L(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function z(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function H(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(0))},function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},function(e,t,n){(function(t){var r=n(11),o=n(27),i=n(5),a=n(6),s=n(3)("engine.io-client:polling-xhr");function u(){}function c(e){if(o.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,t.location){var n="https:"===location.protocol,r=location.port;r||(r=n?443:80),this.xd=e.hostname!==t.location.hostname||r!==e.port,this.xs=e.secure!==n}}function l(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}function f(){for(var e in l.requests)l.requests.hasOwnProperty(e)&&l.requests[e].abort()}e.exports=c,e.exports.Request=l,a(c,o),c.prototype.supportsBinary=!0,c.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new l(e)},c.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),o=this;r.on("success",t),r.on("error",function(e){o.onError("xhr post error",e)}),this.sendXhr=r},c.prototype.doPoll=function(){s("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},i(l.prototype),l.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new r(e),o=this;try{s("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&n.setRequestHeader(i,this.extraHeaders[i])}catch(e){}if("POST"===this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{n.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){o.onLoad()},n.onerror=function(){o.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState)try{var e=n.getResponseHeader("Content-Type");o.supportsBinary&&"application/octet-stream"===e&&(n.responseType="arraybuffer")}catch(e){}4===n.readyState&&(200===n.status||1223===n.status?o.onLoad():setTimeout(function(){o.onError(n.status)},0))},s("xhr data %s",this.data),n.send(this.data)}catch(e){return void setTimeout(function(){o.onError(e)},0)}t.document&&(this.index=l.requestsCount++,l.requests[this.index]=this)},l.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},l.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},l.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},l.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,e)try{this.xhr.abort()}catch(e){}t.document&&delete l.requests[this.index],this.xhr=null}},l.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},l.prototype.hasXDR=function(){return void 0!==t.XDomainRequest&&!this.xs&&this.enablesXDR},l.prototype.abort=function(){this.cleanup()},l.requestsCount=0,l.requests={},t.document&&(t.attachEvent?t.attachEvent("onunload",f):t.addEventListener&&t.addEventListener("beforeunload",f,!1))}).call(this,n(0))},function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t,n){(function(t){var r=n(28),o=n(5),i=n(3)("engine.io-client:socket"),a=n(24),s=n(4),u=n(32),c=n(7);function l(e,n){if(!(this instanceof l))return new l(e,n);n=n||{},e&&"object"==typeof e&&(n=e,e=null),e?(e=u(e),n.hostname=e.host,n.secure="https"===e.protocol||"wss"===e.protocol,n.port=e.port,e.query&&(n.query=e.query)):n.host&&(n.hostname=u(n.host).host),this.secure=null!=n.secure?n.secure:t.location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.agent=n.agent||!1,this.hostname=n.hostname||(t.location?location.hostname:"localhost"),this.port=n.port||(t.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.transportOptions=n.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var r="object"==typeof t&&t;r.global===r&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=l,l.priorWebsocketSuccess=!1,o(l.prototype),l.protocol=s.protocol,l.Socket=l,l.Transport=n(10),l.transports=n(28),l.parser=n(4),l.prototype.createTransport=function(e){i('creating transport "%s"',e);var t=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.query);t.EIO=s.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new r[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0})},l.prototype.open=function(){var e;if(this.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},l.prototype.setTransport=function(e){i("setting transport %s",e.name);var t=this;this.transport&&(i("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},l.prototype.probe=function(e){i('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(i('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(i('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;l.priorWebsocketSuccess="websocket"===t.name,i('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(i("changing transport and sending upgrade packet"),p(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())})}else{i('probe transport "%s" failed',e);var a=new Error("probe error");a.transport=t.name,r.emit("upgradeError",a)}}))}function a(){n||(n=!0,p(),t.close(),t=null)}function s(n){var o=new Error("probe error: "+n);o.transport=t.name,a(),i('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",o)}function u(){s("transport closed")}function c(){s("socket closed")}function f(e){t&&e.name!==t.name&&(i('"%s" works - aborting "%s"',e.name,t.name),a())}function p(){t.removeListener("open",o),t.removeListener("error",s),t.removeListener("close",u),r.removeListener("close",c),r.removeListener("upgrading",f)}l.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",s),t.once("close",u),this.once("close",c),this.once("upgrading",f),t.open()},l.prototype.onOpen=function(){if(i("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){i("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},l.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(i('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else i('packet received with socket readyState "%s"',this.readyState)},l.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},l.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},l.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){i("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},l.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},l.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},l.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(i("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},l.prototype.write=l.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},l.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},l.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t()}):this.upgrading?r():t()}function t(){e.onClose("forced close"),i("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return this},l.prototype.onError=function(e){i("socket error %j",e),l.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},l.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){i('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},l.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~a(this.transports,e[n])&&t.push(e[n]);return t}}).call(this,n(0))},function(e,t,n){e.exports=n(61),e.exports.parser=n(4)},function(e,t,n){(function(e){var r=n(31),o=n(30),i=Object.prototype.toString,a="function"==typeof e.Blob||"[object BlobConstructor]"===i.call(e.Blob),s="function"==typeof e.File||"[object FileConstructor]"===i.call(e.File);t.deconstructPacket=function(e){var t=[],n=e.data,i=e;return i.data=function e(t,n){if(!t)return t;if(o(t)){var i={_placeholder:!0,num:n.length};return n.push(t),i}if(r(t)){for(var a=new Array(t.length),s=0;s<t.length;s++)a[s]=e(t[s],n);return a}if("object"==typeof t&&!(t instanceof Date)){var a={};for(var u in t)a[u]=e(t[u],n);return a}return t}(n,t),i.attachments=t.length,{packet:i,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(r(t))for(var o=0;o<t.length;o++)t[o]=e(t[o],n);else if("object"==typeof t)for(var i in t)t[i]=e(t[i],n);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var n=0,i=e;!function e(u,c,l){if(!u)return u;if(a&&u instanceof Blob||s&&u instanceof File){n++;var f=new FileReader;f.onload=function(){l?l[c]=this.result:i=this.result,--n||t(i)},f.readAsArrayBuffer(u)}else if(r(u))for(var p=0;p<u.length;p++)e(u[p],p,u);else if("object"==typeof u&&!o(u))for(var d in u)e(u[d],d,u)}(i),n||t(i)}}).call(this,n(0))},function(e,t){var n=1e3,r=60*n,o=60*r,i=24*o,a=365.25*i;function s(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var u,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var s=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*a;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*o;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?s(u=e,i,"day")||s(u,o,"hour")||s(u,r,"minute")||s(u,n,"second")||u+" ms":function(e){if(e>=i)return Math.round(e/i)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var u=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=t.formatters[r];if("function"==typeof o){var i=a[u];n=o.call(e,i),a.splice(u,1),u--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var i=t.instances[n];i.enabled=t.enabled(i.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(64),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var e=s(p);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){(function(t){var r=n(32),o=n(3)("socket.io-client:url");e.exports=function(e,n){var i=e;n=n||t.location,null==e&&(e=n.protocol+"//"+n.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),o("parse %s",e),i=r(e));i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443"));i.path=i.path||"/";var a=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+a+":"+i.port,i.href=i.protocol+"://"+a+(n&&n.port===i.port?"":":"+i.port),i}}).call(this,n(0))},function(e,t,n){var r=n(67),o=n(12),i=n(29),a=n(3)("socket.io-client");e.exports=t=u;var s=t.managers={};function u(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o=r(e),u=o.source,c=o.id,l=o.path,f=s[c]&&l in s[c].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||f?(a("ignoring socket cache for %s",u),n=i(u,t)):(s[c]||(a("new io instance for %s",u),s[c]=i(u,t)),n=s[c]),o.query&&!t.query&&(t.query=o.query),n.socket(o.path,t)}t.protocol=o.protocol,t.connect=u,t.Manager=n(29),t.Socket=n(23)},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(17),o=n(18),i=n(70);e.exports=function(){function e(e,t,n,r,a,s){s!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){e.exports=n.p+"a2784608af0a520e0e8ed633abe697e9.png"},function(e,t,n){(e.exports=n(16)(!1)).push([e.i,"#input-component {\n  height: 200px;\n  flex: 0;\n  background-color: #97C0B7;\n  display: flex;\n  flex-direction: row;\n  justify-content: center; }\n  #input-component form {\n    font-family: Verdana;\n    padding: 20px; }\n    #input-component form button {\n      font-size: 20px;\n      background-color: #fefefe;\n      padding: 10px;\n      height: 50px;\n      border: 2px solid white;\n      -webkit-border-radius: 10px;\n      -moz-border-radius: 10px;\n      -ms-border-radius: 10px;\n      border-radius: 10px;\n      color: #72A7A3;\n      font-size: 20px;\n      padding-right: 15px; }\n      #input-component form button img {\n        width: 30px;\n        height: 30px;\n        padding-right: 15px;\n        vertical-align: middle; }\n    #input-component form button:hover {\n      background-color: white; }\n    #input-component form button:hover:disabled {\n      background-color: #fefefe; }\n    #input-component form button:disabled {\n      opacity: 0.5; }\n    #input-component form textarea {\n      height: 150px; }\n    #input-component form input[type=text], #input-component form textarea {\n      margin-bottom: 20px;\n      border: 2px solid white;\n      -webkit-border-radius: 10px;\n      -moz-border-radius: 10px;\n      -ms-border-radius: 10px;\n      border-radius: 10px;\n      padding: 10px;\n      color: #72A7A3;\n      width: 400px;\n      font-size: 20px; }\n",""])},function(e,t,n){var r=n(73);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(2));n(74);var i=u(n(72)),a=n(9),s=n(14);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.submitMessage=function(e){var t=n.props,r=t.username,o=t.currentMessage,i=t.handleSubmit;e.preventDefault(),!o||!o.length||o.length>500?console.log("Message not valid"):i(o,r.length?r:"Anonymous",new Date(Date.now()).toLocaleTimeString())},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){var e=this.props,t=e.username,n=e.currentMessage,r=e.handleChange,a=(e.handleSubmit,e.isRetrievingConversation);return o.default.createElement("div",{id:"input-component"},o.default.createElement("form",{onSubmit:this.submitMessage},o.default.createElement("input",{type:"text",value:t,onChange:function(e){return r("username",e.target.value)},placeholder:"Your username"}),o.default.createElement("br",null),o.default.createElement("textarea",{name:"currentMessage",value:n,onChange:function(e){return r("currentMessage",e.target.value)},placeholder:"Your message"}),o.default.createElement("br",null),o.default.createElement("button",{disabled:a},o.default.createElement("img",{src:i.default,alt:"Send"}),"Send")))}}]),t}();t.default=(0,a.connect)(function(e){return{username:e.currentInput.username,currentMessage:e.currentInput.currentMessage,isRetrievingConversation:e.isRetrievingConversation}},function(e){return{handleChange:function(t,n){return e((0,s.inputChange)(t,n))},handleSubmit:function(t,n,r){return e((0,s.sendMessage)(JSON.stringify({text:t,username:n,date:r})))}}})(c)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(e.exports=n(16)(!1)).push([e.i,"* {\n  font-family: Verdana;\n  margin: 0;\n  padding: 0; }\n\n#container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh; }\n\nh1 {\n  color: #0A555C; }\n",""])},function(e,t,n){var r=n(77);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(2));n(78);var i=s(n(75)),a=s(n(41));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("div",{id:"container"},o.default.createElement(a.default,null),o.default.createElement(i.default,null))}}]),t}();t.default=u},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(80);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(81);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(18),o=n(2),i=n(85),a=n(34),s=n(17),u=n(84),c=n(83),l=n(82),f=n(33);function p(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,s,u){(function(e,t,n,r,o,i,a,s,u){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,s,u){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var c=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var e=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,e}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var e=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,e}p("198")}};var h=null,y={};function m(){if(h)for(var e in y){var t=y[e],n=h.indexOf(e);if(-1<n||p("96",e),!v[n])for(var r in t.extractEvents||p("97",e),v[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,s=r;b.hasOwnProperty(s)&&p("99",s),b[s]=i;var u=i.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&g(u[o],a,s);o=!0}else i.registrationName?(g(i.registrationName,a,s),o=!0):o=!1;o||p("98",r,e)}}}function g(e,t,n){w[e]&&p("100",e),w[e]=t,C[e]=t.eventTypes[n].dependencies}var v=[],b={},w={},C={};function E(e){h&&p("101"),h=Array.prototype.slice.call(e),m()}function x(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];y.hasOwnProperty(t)&&y[t]===r||(y[t]&&p("102",t),y[t]=r,n=!0)}n&&m()}var k=Object.freeze({plugins:v,eventNameDispatchConfigs:b,registrationNameModules:w,registrationNameDependencies:C,possibleRegistrationNames:null,injectEventPluginOrder:E,injectEventPluginsByName:x}),S=null,T=null,_=null;function P(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=_(r),d.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function O(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function R(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var A=null;function N(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)P(e,t,n[o],r[o]);else n&&P(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function I(e){return N(e,!0)}function M(e){return N(e,!1)}var U={injectEventPluginOrder:E,injectEventPluginsByName:x};function B(e,t){var n=e.stateNode;if(!n)return null;var r=S(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function D(e,t){null!==e&&(A=O(A,e)),e=A,A=null,e&&(R(e,t?I:M),A&&p("95"),d.rethrowCaughtError())}function j(e,t,n,r){for(var o=null,i=0;i<v.length;i++){var a=v[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=O(o,a))}D(o,!1)}var F=Object.freeze({injection:U,getListener:B,runEventsInBatch:D,runExtractedEventsInBatch:j}),L=Math.random().toString(36).slice(2),z="__reactInternalInstance$"+L,H="__reactEventHandlers$"+L;function q(e){if(e[z])return e[z];for(;!e[z];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[z]).tag||6===e.tag?e:null}function V(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function W(e){return e[H]||null}var Y=Object.freeze({precacheFiberNode:function(e,t){t[z]=e},getClosestInstanceFromNode:q,getInstanceFromNode:function(e){return!(e=e[z])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:V,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[H]=t}});function K(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var r=[];e;)r.push(e),e=K(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Q(e,t,n){(t=B(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function X(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,Q,e)}function G(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?K(t):null,Q,e)}}function J(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=B(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&J(e._targetInst,null,e)}function ee(e){R(e,X)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,s=o;s;s=K(s))a++;s=0;for(var u=i;u;u=K(u))s++;for(;0<a-s;)o=K(o),a--;for(;0<s-a;)i=K(i),s--;for(;a--;){if(o===i||o===i.alternate)break e;o=K(o),i=K(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=K(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=K(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",e);for(e=n.length;0<e--;)J(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){R(e,G)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){R(e,Z)}}),re=null;function oe(){return!re&&i.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var ie={_root:null,_startText:null,_fallbackText:null};function ae(){if(ie._fallbackText)return ie._fallbackText;var e,t,n=ie._startText,r=n.length,o=se(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ie._fallbackText=o.slice(e,1<t?1-t:void 0),ie._fallbackText}function se(){return"value"in ie._root?ie._root.value:ie._root[oe()]}var ue="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),ce={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function pe(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=fe,e.release=pe}a(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ue.length;t++)this[ue[t]]=null}}),le.Interface=ce,le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,de(n),n},de(le);var he=le.extend({data:null}),ye=le.extend({data:null}),me=[9,13,27,32],ge=i.canUseDOM&&"CompositionEvent"in window,ve=null;i.canUseDOM&&"documentMode"in document&&(ve=document.documentMode);var be=i.canUseDOM&&"TextEvent"in window&&!ve,we=i.canUseDOM&&(!ge||ve&&8<ve&&11>=ve),Ce=String.fromCharCode(32),Ee={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},xe=!1;function ke(e,t){switch(e){case"topKeyUp":return-1!==me.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Se(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Te=!1;var _e={eventTypes:Ee,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ge)e:{switch(e){case"topCompositionStart":o=Ee.compositionStart;break e;case"topCompositionEnd":o=Ee.compositionEnd;break e;case"topCompositionUpdate":o=Ee.compositionUpdate;break e}o=void 0}else Te?ke(e,n)&&(o=Ee.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=Ee.compositionStart);return o?(we&&(Te||o!==Ee.compositionStart?o===Ee.compositionEnd&&Te&&(i=ae()):(ie._root=r,ie._startText=se(),Te=!0)),o=he.getPooled(o,t,n,r),i?o.data=i:null!==(i=Se(n))&&(o.data=i),ee(o),i=o):i=null,(e=be?function(e,t){switch(e){case"topCompositionEnd":return Se(t);case"topKeyPress":return 32!==t.which?null:(xe=!0,Ce);case"topTextInput":return(e=t.data)===Ce&&xe?null:e;default:return null}}(e,n):function(e,t){if(Te)return"topCompositionEnd"===e||!ge&&ke(e,t)?(e=ae(),ie._root=null,ie._startText=null,ie._fallbackText=null,Te=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return we?null:t.data;default:return null}}(e,n))?((t=ye.getPooled(Ee.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Pe=null,Oe={injectFiberControlledHostComponent:function(e){Pe=e}},Re=null,Ae=null;function Ne(e){if(e=T(e)){Pe&&"function"==typeof Pe.restoreControlledState||p("194");var t=S(e.stateNode);Pe.restoreControlledState(e.stateNode,e.type,t)}}function Ie(e){Re?Ae?Ae.push(e):Ae=[e]:Re=e}function Me(){return null!==Re||null!==Ae}function Ue(){if(Re){var e=Re,t=Ae;if(Ae=Re=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}var Be=Object.freeze({injection:Oe,enqueueStateRestore:Ie,needsStateRestore:Me,restoreStateIfNeeded:Ue});function De(e,t){return e(t)}function je(e,t,n){return e(t,n)}function Fe(){}var Le=!1;function ze(e,t){if(Le)return e(t);Le=!0;try{return De(e,t)}finally{Le=!1,Me()&&(Fe(),Ue())}}var He={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!He[e.type]:"textarea"===t}function Ve(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function Ye(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ke(e){e._valueTracker||(e._valueTracker=function(e){var t=Ye(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ye(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Qe=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Xe="function"==typeof Symbol&&Symbol.for,Ge=Xe?Symbol.for("react.element"):60103,Je=Xe?Symbol.for("react.call"):60104,Ze=Xe?Symbol.for("react.return"):60105,et=Xe?Symbol.for("react.portal"):60106,tt=Xe?Symbol.for("react.fragment"):60107,nt=Xe?Symbol.for("react.strict_mode"):60108,rt=Xe?Symbol.for("react.provider"):60109,ot=Xe?Symbol.for("react.context"):60110,it=Xe?Symbol.for("react.async_mode"):60111,at=Xe?Symbol.for("react.forward_ref"):60112,st="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||void 0===e?null:"function"==typeof(e=st&&e[st]||e["@@iterator"])?e:null}function ct(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Je:return"ReactCall";case Ze:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function lt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=ct(e),i=null;n&&(i=ct(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt={},dt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var yt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){yt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];yt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){yt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){yt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){yt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){yt[e]=new ht(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){yt[e]=new ht(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){yt[e]=new ht(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){yt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var o=yt.hasOwnProperty(t)?yt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!dt.hasOwnProperty(e)||!pt.hasOwnProperty(e)&&(ft.test(e)?dt[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function wt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=St(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ct(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function Et(e,t){Ct(e,t);var n=St(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?kt(e,t.type,n):t.hasOwnProperty("defaultValue")&&kt(e,t.type,St(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function xt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function kt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function St(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),yt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var Tt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function _t(e,t,n){return(e=le.getPooled(Tt.change,e,t,n)).type="change",Ie(n),ee(e),e}var Pt=null,Ot=null;function Rt(e){D(e,!1)}function At(e){if($e(V(e)))return e}function Nt(e,t){if("topChange"===e)return t}var It=!1;function Mt(){Pt&&(Pt.detachEvent("onpropertychange",Ut),Ot=Pt=null)}function Ut(e){"value"===e.propertyName&&At(Ot)&&ze(Rt,e=_t(Ot,e,Ve(e)))}function Bt(e,t,n){"topFocus"===e?(Mt(),Ot=n,(Pt=t).attachEvent("onpropertychange",Ut)):"topBlur"===e&&Mt()}function Dt(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return At(Ot)}function jt(e,t){if("topClick"===e)return At(t)}function Ft(e,t){if("topInput"===e||"topChange"===e)return At(t)}i.canUseDOM&&(It=We("input")&&(!document.documentMode||9<document.documentMode));var Lt={eventTypes:Tt,_isInputEventSupported:It,extractEvents:function(e,t,n,r){var o=t?V(t):window,i=void 0,a=void 0,s=o.nodeName&&o.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===o.type?i=Nt:qe(o)?It?i=Ft:(i=Dt,a=Bt):(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=jt),i&&(i=i(e,t)))return _t(i,n,r);a&&a(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&kt(o,"number",o.value)}},zt=le.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function qt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Vt(){return qt}var Wt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Vt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Kt={eventTypes:Yt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?q(t):null):e=null,e===t)return null;var i=null==e?o:V(e);o=null==t?o:V(t);var a=Wt.getPooled(Yt.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=Wt.getPooled(Yt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,te(a,n,e,t),[a,n]}};function $t(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Qt(e){return!!(e=e._reactInternalFiber)&&2===$t(e)}function Xt(e){2!==$t(e)&&p("188")}function Gt(e){var t=e.alternate;if(!t)return 3===(t=$t(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Xt(o),e;if(a===r)return Xt(o),t;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var s=o.child;s;){if(s===n){a=!0,n=o,r=i;break}if(s===r){a=!0,r=o,n=i;break}s=s.sibling}if(!a){for(s=i.child;s;){if(s===n){a=!0,n=i,r=o;break}if(s===r){a=!0,r=i,n=o;break}s=s.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function Jt(e){if(!(e=Gt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Zt=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=zt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=zt.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Vt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),sn=Wt.extend({dataTransfer:null}),un=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Vt}),cn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ln=Wt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},pn={};function dn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},fn[e]=t,pn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){dn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){dn(e,!1)});var hn={eventTypes:fn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=pn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=pn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Wt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=sn;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=un;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Zt;break;case"topTransitionEnd":e=cn;break;case"topScroll":e=zt;break;case"topWheel":e=ln;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=le}return ee(t=e.getPooled(o,t,n,r)),t}},yn=hn.isInteractiveTopLevelEventType,mn=[];function gn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=q(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],j(e.topLevelType,t,e.nativeEvent,Ve(e.nativeEvent))}var vn=!0;function bn(e){vn=!!e}function wn(e,t,n){if(!n)return null;e=(yn(e)?En:xn).bind(null,e),n.addEventListener(t,e,!1)}function Cn(e,t,n){if(!n)return null;e=(yn(e)?En:xn).bind(null,e),n.addEventListener(t,e,!0)}function En(e,t){je(xn,e,t)}function xn(e,t){if(vn){var n=Ve(t);if(null!==(n=q(n))&&"number"==typeof n.tag&&2!==$t(n)&&(n=null),mn.length){var r=mn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{ze(gn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>mn.length&&mn.push(e)}}}var kn=Object.freeze({get _enabled(){return vn},setEnabled:bn,isEnabled:function(){return vn},trapBubbledEvent:wn,trapCapturedEvent:Cn,dispatchEvent:xn});function Sn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var Tn={animationend:Sn("Animation","AnimationEnd"),animationiteration:Sn("Animation","AnimationIteration"),animationstart:Sn("Animation","AnimationStart"),transitionend:Sn("Transition","TransitionEnd")},_n={},Pn={};function On(e){if(_n[e])return _n[e];if(!Tn[e])return e;var t,n=Tn[e];for(t in n)if(n.hasOwnProperty(t)&&t in Pn)return _n[e]=n[t];return e}i.canUseDOM&&(Pn=document.createElement("div").style,"AnimationEvent"in window||(delete Tn.animationend.animation,delete Tn.animationiteration.animation,delete Tn.animationstart.animation),"TransitionEvent"in window||delete Tn.transitionend.transition);var Rn={topAnimationEnd:On("animationend"),topAnimationIteration:On("animationiteration"),topAnimationStart:On("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:On("transitionend"),topWheel:"wheel"},An={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Nn={},In=0,Mn="_reactListenersID"+(""+Math.random()).slice(2);function Un(e){return Object.prototype.hasOwnProperty.call(e,Mn)||(e[Mn]=In++,Nn[e[Mn]]={}),Nn[e[Mn]]}function Bn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Dn(e,t){var n,r=Bn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Bn(r)}}function jn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Fn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Ln={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},zn=null,Hn=null,qn=null,Vn=!1;function Wn(e,t){if(Vn||null==zn||zn!==u())return null;var n=zn;return"selectionStart"in n&&jn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,qn&&c(qn,n)?null:(qn=n,(e=le.getPooled(Ln.select,Hn,e,t)).type="select",e.target=zn,ee(e),e)}var Yn={eventTypes:Ln,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Un(i),o=C.onSelect;for(var a=0;a<o.length;a++){var s=o[a];if(!i.hasOwnProperty(s)||!i[s]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?V(t):window,e){case"topFocus":(qe(i)||"true"===i.contentEditable)&&(zn=i,Hn=t,qn=null);break;case"topBlur":qn=Hn=zn=null;break;case"topMouseDown":Vn=!0;break;case"topContextMenu":case"topMouseUp":return Vn=!1,Wn(n,r);case"topSelectionChange":if(Fn)break;case"topKeyDown":case"topKeyUp":return Wn(n,r)}return null}};function Kn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function $n(e,t,n){var r=e.alternate;return null===r?((r=new Kn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Qn(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case tt:return Xn(e.children,t,n,o);case it:i=11,t|=3;break;case nt:i=11,t|=2;break;case Je:i=7;break;case Ze:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:i=13;break;case ot:i=12;break;case at:i=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;p("130",null==r?r:typeof r,"")}else p("130",null==r?r:typeof r,"")}return(t=new Kn(i,e,o,t)).type=r,t.expirationTime=n,t}function Xn(e,t,n,r){return(e=new Kn(10,e,r,t)).expirationTime=n,e}function Gn(e,t,n){return(e=new Kn(6,e,null,t)).expirationTime=n,e}function Jn(e,t,n){return(t=new Kn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}U.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),S=Y.getFiberCurrentPropsFromNode,T=Y.getInstanceFromNode,_=Y.getNodeFromInstance,U.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:Kt,ChangeEventPlugin:Lt,SelectEventPlugin:Yn,BeforeInputEventPlugin:_e});var Zn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Zn&&Zn(e)}function rr(e){"function"==typeof er&&er(e)}function or(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ir(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ar=void 0,sr=void 0;function ur(e){ar=sr=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=or(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=or(null)):e=null,ar=n,sr=e!==n?e:null}function cr(e,t){ur(e),e=ar;var n=sr;null===n?ir(e,t):null===e.last||null===n.last?(ir(e,t),ir(n,t)):(ir(e,t),n.last=t)}function lr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function fr(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var s=!0,u=n.first,c=!1;null!==u;){var l=u.expirationTime;if(l>i){var f=n.expirationTime;(0===f||f>l)&&(n.expirationTime=l),c||(c=!0,n.baseState=e)}else c||(n.first=u.next,null===n.first&&(n.last=null)),u.isReplace?(e=lr(u,r,e,o),s=!0):(l=lr(u,r,e,o))&&(e=s?a({},e,l):a(e,l),s=!1),u.isForced&&(n.hasForceUpdate=!0),null!==u.callback&&(null===(l=n.callbackList)&&(l=n.callbackList=[]),l.push(u)),null!==u.capturedValue&&(null===(l=n.capturedValues)?n.capturedValues=[u.capturedValue]:l.push(u.capturedValue));u=u.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),c||(n.baseState=e),e}function pr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&p("191",o),o.call(t)}}var dr=Array.isArray;function hr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function yr(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function mr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=$n(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Gn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function u(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=hr(e,t,n),r.return=e,r):((r=Qn(n,e.mode,r)).ref=hr(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function l(e,t,n,r,i){return null===t||10!==t.tag?((t=Xn(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Gn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ge:return(n=Qn(t,e.mode,n)).ref=hr(e,null,t),n.return=e,n;case et:return(t=Jn(t,e.mode,n)).return=e,t}if(dr(t)||ut(t))return(t=Xn(t,e.mode,n,null)).return=e,t;yr(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ge:return n.key===o?n.type===tt?l(e,t,n.props.children,r,o):u(e,t,n,r):null;case et:return n.key===o?c(e,t,n,r):null}if(dr(n)||ut(n))return null!==o?null:l(e,t,n,r,null);yr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ge:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?l(t,e,r.props.children,o,r.key):u(t,e,r,o);case et:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(dr(r)||ut(r))return l(t,e=e.get(n)||null,r,o,null);yr(t,r)}return null}function y(o,a,s,u){for(var c=null,l=null,p=a,y=a=0,m=null;null!==p&&y<s.length;y++){p.index>y?(m=p,p=null):m=p.sibling;var g=d(o,p,s[y],u);if(null===g){null===p&&(p=m);break}e&&p&&null===g.alternate&&t(o,p),a=i(g,a,y),null===l?c=g:l.sibling=g,l=g,p=m}if(y===s.length)return n(o,p),c;if(null===p){for(;y<s.length;y++)(p=f(o,s[y],u))&&(a=i(p,a,y),null===l?c=p:l.sibling=p,l=p);return c}for(p=r(o,p);y<s.length;y++)(m=h(p,o,y,s[y],u))&&(e&&null!==m.alternate&&p.delete(null===m.key?y:m.key),a=i(m,a,y),null===l?c=m:l.sibling=m,l=m);return e&&p.forEach(function(e){return t(o,e)}),c}function m(o,a,s,u){var c=ut(s);"function"!=typeof c&&p("150"),null==(s=c.call(s))&&p("151");for(var l=c=null,y=a,m=a=0,g=null,v=s.next();null!==y&&!v.done;m++,v=s.next()){y.index>m?(g=y,y=null):g=y.sibling;var b=d(o,y,v.value,u);if(null===b){y||(y=g);break}e&&y&&null===b.alternate&&t(o,y),a=i(b,a,m),null===l?c=b:l.sibling=b,l=b,y=g}if(v.done)return n(o,y),c;if(null===y){for(;!v.done;m++,v=s.next())null!==(v=f(o,v.value,u))&&(a=i(v,a,m),null===l?c=v:l.sibling=v,l=v);return c}for(y=r(o,y);!v.done;m++,v=s.next())null!==(v=h(y,o,m,v.value,u))&&(e&&null!==v.alternate&&y.delete(null===v.key?m:v.key),a=i(v,a,m),null===l?c=v:l.sibling=v,l=v);return e&&y.forEach(function(e){return t(o,e)}),c}return function(e,r,i,s){"object"==typeof i&&null!==i&&i.type===tt&&null===i.key&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case Ge:e:{var c=i.key;for(u=r;null!==u;){if(u.key===c){if(10===u.tag?i.type===tt:u.type===i.type){n(e,u.sibling),(r=o(u,i.type===tt?i.props.children:i.props,s)).ref=hr(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===tt?((r=Xn(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Qn(i,e.mode,s)).ref=hr(e,r,i),s.return=e,e=s)}return a(e);case et:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jn(i,e.mode,s)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,s)).return=e,e=r):(n(e,r),(r=Gn(i,e.mode,s)).return=e,e=r),a(e);if(dr(i))return y(e,r,i,s);if(ut(i))return m(e,r,i,s);if(u&&yr(e,i),void 0===i)switch(e.tag){case 2:case 1:p("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var gr=mr(!0),vr=mr(!1);function br(e,t,n,r,o,i,s){function u(e,t,n){l(e,t,n,t.expirationTime)}function l(e,t,n,r){t.child=null===e?vr(t,null,n,r):gr(t,e.child,n,r)}function d(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,i){if(d(e,t),!n&&!o)return r&&P(t,!1),g(e,t);n=t.stateNode,Qe.current=t;var a=o?null:n.render();return t.effectTag|=1,o&&(l(e,t,null,i),t.child=null),l(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,r&&P(t,!0),t.child}function y(e){var t=e.stateNode;t.pendingContext?_(e,t.pendingContext,t.pendingContext!==t.context):t.context&&_(e,t.context,!1),C(e,t.containerInfo)}function m(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function g(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=$n(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$n(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var v=e.shouldSetTextContent,b=e.shouldDeprioritizeSubtree,w=t.pushHostContext,C=t.pushHostContainer,E=r.pushProvider,x=n.getMaskedContext,k=n.getUnmaskedContext,S=n.hasContextChanged,T=n.pushContextProvider,_=n.pushTopLevelContextObject,P=n.invalidateContextProvider,O=o.enterHydrationState,R=o.resetHydrationState,A=o.tryToClaimNextHydratableInstance,N=(e=function(e,t,n,r,o){function i(e,t,n,r,o,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(e.prototype&&e.prototype.isPureReactComponent&&c(t,n)&&c(r,o))}function s(e,t){t.updater=g,e.stateNode=t,t._reactInternalFiber=e}function u(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&g.enqueueReplaceState(t,t.state,null)}function l(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var p=e.cacheContext,d=e.getMaskedContext,h=e.getUnmaskedContext,y=e.isContextConsumer,m=e.hasContextChanged,g={isMounted:Qt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);cr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);cr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);cr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:s,callGetDerivedStateFromProps:l,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=y(e),i=o?d(e,r):f,u=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return s(e,n),e.memoizedState=u,null!==(t=l(e,0,t,u))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&p(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,i=e.pendingProps,a=h(e);o.props=i,o.state=e.memoizedState,o.refs=f,o.context=d(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&g.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=fr(r,e,n,o,i,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,s=e.stateNode;s.props=e.memoizedProps,s.state=e.memoizedState;var c=e.memoizedProps,f=e.pendingProps,p=s.context,y=h(e);y=d(e,y),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(c!==f||p!==y)&&u(e,s,f,y),p=e.memoizedState,t=null!==e.updateQueue?fr(null,e,e.updateQueue,s,f,t):p;var g=void 0;if(c!==f&&(g=l(e,0,f,t)),null!==g&&void 0!==g){t=null===t||void 0===t?g:a({},t,g);var v=e.updateQueue;null!==v&&(v.baseState=a({},v.baseState,g))}return c!==f||p!==t||m()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((c=i(e,c,f,p,t,y))?(n||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(e.effectTag|=4)):("function"==typeof s.componentDidMount&&(e.effectTag|=4),r(e,f),o(e,t)),s.props=f,s.state=t,s.context=y,c):("function"==typeof s.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var s=t.type,c=t.stateNode;c.props=t.memoizedProps,c.state=t.memoizedState;var f=t.memoizedProps,p=t.pendingProps,y=c.context,g=h(t);g=d(t,g),(s="function"==typeof s.getDerivedStateFromProps||"function"==typeof c.getSnapshotBeforeUpdate)||"function"!=typeof c.UNSAFE_componentWillReceiveProps&&"function"!=typeof c.componentWillReceiveProps||(f!==p||y!==g)&&u(t,c,p,g),y=t.memoizedState,n=null!==t.updateQueue?fr(e,t,t.updateQueue,c,p,n):y;var v=void 0;if(f!==p&&(v=l(t,0,p,n)),null!==v&&void 0!==v){n=null===n||void 0===n?v:a({},n,v);var b=t.updateQueue;null!==b&&(b.baseState=a({},b.baseState,v))}return f!==p||y!==n||m()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((v=i(t,f,p,y,n,g))?(s||"function"!=typeof c.UNSAFE_componentWillUpdate&&"function"!=typeof c.componentWillUpdate||("function"==typeof c.componentWillUpdate&&c.componentWillUpdate(p,n,g),"function"==typeof c.UNSAFE_componentWillUpdate&&c.UNSAFE_componentWillUpdate(p,n,g)),"function"==typeof c.componentDidUpdate&&(t.effectTag|=4),"function"==typeof c.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof c.componentDidUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=2048),r(t,p),o(t,n)),c.props=p,c.state=n,c.context=g,v):("function"!=typeof c.componentDidUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,s,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,I=e.callGetDerivedStateFromProps,M=e.constructClassInstance,U=e.mountClassInstance,B=e.resumeMountClassInstance,D=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:y(t);break;case 2:T(t);break;case 4:C(t,t.stateNode.containerInfo);break;case 13:E(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,i=k(t);return r=r(o,i=x(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=I(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=T(t),N(t,r),U(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,u(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,S()||t.memoizedProps!==n?(r=k(t),o=o(n,r=x(t,r)),t.effectTag|=1,u(e,t,o),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 2:o=T(t),null===e?null===t.stateNode?(M(t,t.pendingProps),U(t,n),r=!0):r=B(t,n):r=D(e,t,n),i=!1;var s=t.updateQueue;return null!==s&&null!==s.capturedValues&&(i=r=!0),h(e,t,r,o,i,n);case 3:e:if(y(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=fr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){R(),e=g(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&O(t)?(t.effectTag|=2,t.child=vr(t,null,r,n)):(R(),u(e,t,r)),t.memoizedState=o,e=t.child}else R(),e=g(e,t);return e;case 5:return w(t),null===e&&A(t),o=t.type,s=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,S()||s!==r||((s=1&t.mode&&b(o,r))&&(t.expirationTime=1073741823),s&&1073741823===n)?(s=r.children,v(o,r)?s=null:i&&v(o,i)&&(t.effectTag|=16),d(e,t),1073741823!==n&&1&t.mode&&b(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(u(e,t,s),t.memoizedProps=r,e=t.child)):e=g(e,t),e;case 6:return null===e&&A(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,S()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?vr(t,t.stateNode,r,n):gr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return C(t,t.stateNode.containerInfo),o=t.pendingProps,S()||t.memoizedProps!==o?(null===e?t.child=gr(t,null,o,n):u(e,t,o),t.memoizedProps=o,e=t.child):e=g(e,t),e;case 14:return u(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,S()||t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 11:return n=t.pendingProps.children,S()||null!==n&&t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps;if(!S()&&i===o)return t.stateNode=0,E(t),g(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return t.stateNode=0,E(t),g(e,t);a=0}else{var s=i.value;if(s===a&&(0!==s||1/s==1/a)||s!=s&&a!=a){if(i.children===o.children)return t.stateNode=0,E(t),g(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823,0==(a|=0)){if(i.children===o.children)return t.stateNode=0,E(t),g(e,t)}else m(t,r,a,n)}return t.stateNode=a,E(t),u(e,t,o.children),t.child}(e,t,n);case 12:e:{r=t.type,i=t.pendingProps,s=t.memoizedProps,o=r._currentValue;var c=r._changedBits;if(S()||0!==c||s!==i){t.memoizedProps=i;var l=i.unstable_observedBits;if(void 0!==l&&null!==l||(l=1073741823),t.stateNode=l,0!=(c&l))m(t,r,c,n);else if(s===i){e=g(e,t);break e}u(e,t,n=(n=i.children)(o)),e=t.child}else e=g(e,t)}return e;default:p("156")}}}}function wr(e,t){var n=t.source;null===t.stack&&lt(n),null!==n&&ct(n),t=t.value,null!==e&&2===e.tag&&ct(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var Cr={};function Er(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)M(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=A(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ie=!0;break}e=n}else{if(null!==(e=I(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=R(e.alternate,e,ne);return null===t&&(t=r(e)),Qe.current=null,t}function i(e,n,i){Z&&p("243"),Z=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=$n((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!k();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){a=!0,S(e);break}var s=(i=ee).return;if(null===s){a=!0,S(e);break}N(s,i,e),ee=r(i)}break}return Z=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void p("262")}function s(e,t,n,r){cr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:lt(e)},next:null}),l(t,r)}function u(e,t){e:{Z&&!oe&&p("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){s(e,r,t,1),e=void 0;break e}break;case 3:s(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&s(e,e,t,1),e=void 0}return e}function c(e){return e=0!==J?J:Z?oe?1:ne:1&e.mode?Ce?10*(1+((d()+15)/10|0)):25*(1+((d()+500)/25|0)):1,Ce&&(0===he||e>he)&&(he=e),e}function l(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!Z&&0!==ne&&n<ne&&t(),Z&&!oe&&te===r||m(r,n),ke>xe&&p("185")}e=e.return}n=void 0}return n}function d(){return X=V()-Q,2+(X/10|0)}function h(e,t,n,r,o){var i=J;J=1;try{return e(t,n,r,o)}finally{J=i}}function y(e){if(0!==ce){if(e>ce)return;Y(le)}var t=V()-Q;ce=e,le=W(v,{timeout:10*(e-2)-t})}function m(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ue?(se=ue=e,e.nextScheduledRoot=e):(ue=ue.nextScheduledRoot=e).nextScheduledRoot=se;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(be?we&&(pe=e,de=1,E(e,1,!1)):1===t?b():y(t))}function g(){var e=0,t=null;if(null!==ue)for(var n=ue,r=se;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ue)&&p("244"),r===r.nextScheduledRoot){se=ue=r.nextScheduledRoot=null;break}if(r===se)se=o=r.nextScheduledRoot,ue.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ue){(ue=n).nextScheduledRoot=se,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ue)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?ke++:ke=0,pe=t,de=e}function v(e){w(0,!0,e)}function b(){w(1,!1,null)}function w(e,t,n){if(ve=n,g(),t)for(;null!==pe&&0!==de&&(0===e||e>=de)&&(!ye||d()>=de);)E(pe,de,!ye),g();else for(;null!==pe&&0!==de&&(0===e||e>=de);)E(pe,de,!1),g();null!==ve&&(ce=0,le=-1),0!==de&&y(de),ve=null,ye=!1,C()}function C(){if(ke=0,null!==Ee){var e=Ee;Ee=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){me||(me=!0,ge=e)}}}if(me)throw e=ge,ge=null,me=!1,e}function E(e,t,n){fe&&p("245"),fe=!0,n?null!==(n=e.finishedWork)?x(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(k()?e.finishedWork=n:x(e,n,t))):null!==(n=e.finishedWork)?x(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&x(e,n,t)),fe=!1}function x(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ee?Ee=[r]:Ee.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=Z=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0;var o=d();if(Qe.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(K(n.containerInfo),re=i;null!==re;){var a=!1,s=void 0;try{for(;null!==re;)2048&re.effectTag&&U(re.alternate,re),re=re.nextEffect}catch(e){a=!0,s=e}a&&(null===re&&p("178"),u(re,s),null!==re&&(re=re.nextEffect))}for(re=i;null!==re;){a=!1,s=void 0;try{for(;null!==re;){var c=re.effectTag;if(16&c&&B(re),128&c){var l=re.alternate;null!==l&&q(l)}switch(14&c){case 2:D(re),re.effectTag&=-3;break;case 6:D(re),re.effectTag&=-3,F(re.alternate,re);break;case 4:F(re.alternate,re);break;case 8:j(re)}re=re.nextEffect}}catch(e){a=!0,s=e}a&&(null===re&&p("178"),u(re,s),null!==re&&(re=re.nextEffect))}for($(n.containerInfo),n.current=t,re=i;null!==re;){c=!1,l=void 0;try{for(i=n,a=o,s=r;null!==re;){var f=re.effectTag;36&f&&L(i,re.alternate,re,a,s),256&f&&z(re,S),128&f&&H(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){c=!0,l=e}c&&(null===re&&p("178"),u(re,l),null!==re&&(re=re.nextEffect))}Z=oe=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function k(){return!(null===ve||ve.timeRemaining()>Se)&&(ye=!0)}function S(e){null===pe&&p("246"),pe.remainingExpirationTime=0,me||(me=!0,ge=e)}var T=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),_=function(e,t){function n(e){return e===Cr&&p("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,s=e(Cr),u=e(Cr),c=e(Cr);return{getHostContext:function(){return n(s.current)},getRootHostContainer:function(){return n(c.current)},popHostContainer:function(e){a(s,e),a(u,e),a(c,e)},popHostContext:function(e){u.current===e&&(a(s,e),a(u,e))},pushHostContainer:function(e,t){i(c,t,e),i(u,e,e),i(s,Cr,e),t=o(t),a(s,e),i(s,t,e)},pushHostContext:function(e){var t=n(c.current),o=n(s.current);o!==(t=r(o,e.type,t))&&(i(u,e,e),i(s,t,e))}}}(e,T),P=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",ct(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,s=e.pop,u=o(f),c=o(!1),l=f;return{getUnmaskedContext:function(e){return n(e)?l:u.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return f;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&t(e,n,a),a},hasContextChanged:function(){return c.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(s(c,e),s(u,e))},popTopLevelContextObject:function(e){s(c,e),s(u,e)},pushTopLevelContextObject:function(e,t,n){null!=u.cursor&&p("168"),i(u,t,e),i(c,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,l=u.current,i(u,t,e),i(c,c.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||p("169"),t){var o=r(e,l);n.__reactInternalMemoizedMergedChildContext=o,s(c,e),s(u,e),i(u,o,e)}else s(c,e);i(c,t,e)},findCurrentUnmaskedContext:function(e){for((2!==$t(e)||2!==e.tag)&&p("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||p("171")}return e.stateNode.context}}}(T);T=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;r(o,e),r(i,e),r(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(T);var O=function(e){function t(e,t){var n=new Kn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,s=e.getNextHydratableSibling,u=e.getFirstHydratableChild,c=e.hydrateInstance,l=e.hydrateTextInstance,f=null,d=null,h=!1;return{enterHydrationState:function(e){return d=u(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){d=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(!(r=s(r))||!n(e,r))return e.effectTag|=2,h=!1,void(f=e);t(f,d)}f=e,d=u(r)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=c(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return l(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=d;n;)t(e,n),n=s(n);return r(e),d=f?s(e.stateNode):null,!0}}}(e),R=br(e,_,P,T,O,l,c).beginWork,A=function(e,t,n,r,o){function i(e){e.effectTag|=4}var a=e.createInstance,s=e.createTextInstance,u=e.appendInitialChild,c=e.finalizeInitialChildren,l=e.prepareUpdate,f=e.persistence,d=t.getRootHostContainer,h=t.popHostContext,y=t.getHostContext,m=t.popHostContainer,g=n.popContextProvider,v=n.popTopLevelContextObject,b=r.popProvider,w=o.prepareToHydrateHostInstance,C=o.prepareToHydrateHostTextInstance,E=o.popHydrationState,x=void 0,k=void 0,S=void 0;return e.mutation?(x=function(){},k=function(e,t,n){(t.updateQueue=n)&&i(t)},S=function(e,t,n,r){n!==r&&i(t)}):p(f?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return g(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return m(t),v(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(E(t),t.effectTag&=-3),x(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=d();var o=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,T=t.stateNode,_=y();T=l(T,o,f,r,n,_),k(e,t,T,o,f,r,n,_),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&p("166"),null;if(e=y(),E(t))w(t,n,e)&&i(t);else{f=a(o,r,n,e,t);e:for(_=t.child;null!==_;){if(5===_.tag||6===_.tag)u(f,_.stateNode);else if(4!==_.tag&&null!==_.child){_.child.return=_,_=_.child;continue}if(_===t)break;for(;null===_.sibling;){if(null===_.return||_.return===t)break e;_=_.return}_.sibling.return=_.return,_=_.sibling}c(f,o,r,n,e)&&i(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)S(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&p("166"),null;e=d(),n=y(),E(t)?C(t)&&i(t):t.stateNode=s(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||p("165"),t.tag=8,o=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)p("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),t.child=gr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return m(t),x(t),null;case 13:return b(t),null;case 12:return null;case 0:p("167");default:p("156")}}}}(e,_,P,T,O).completeWork,N=(_=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,s=t.popContextProvider,u=t.popTopLevelContextObject,c=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:lt(t)};do{switch(e.tag){case 3:return ur(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){ur(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:s(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),u(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return c(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:s(e);break;case 3:i(e),u(e);break;case 5:a(e);break;case 4:i(e);break;case 13:c(e)}}}}(_,P,T,0,n)).throwException,I=_.unwindWork,M=_.unwindInterruptedWork,U=(_=function(e,t,n,r,o){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(rr(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:s(e.stateNode);break;case 4:f&&c(e)}}function s(e){for(var t=e;;)if(a(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function u(e){return 5===e.tag||3===e.tag||4===e.tag}function c(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)s(t),o?E(r,t.stateNode):C(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var l=e.getPublicInstance,f=e.mutation;e=e.persistence,f||p(e?"235":"236");var d=f.commitMount,h=f.commitUpdate,y=f.resetTextContent,m=f.commitTextUpdate,g=f.appendChild,v=f.appendChildToContainer,b=f.insertBefore,w=f.insertInContainerBefore,C=f.removeChild,E=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:p("163")}},commitResetTextContent:function(e){y(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(u(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(y(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||u(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?w(t,o.stateNode,n):b(t,o.stateNode,n):r?v(t,o.stateNode):g(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){c(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&h(n,i,o,e,r,t)}break;case 6:null===t.stateNode&&p("162"),n=t.memoizedProps,m(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:p("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&pr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=l(n.child.stateNode);break;case 2:e=n.child.stateNode}pr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&d(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:p("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&p("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,s=r.stack;wr(e,r),t.componentDidCatch(a,{componentStack:null!==s?s:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&p("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)wr(e,r=i[n]),t(r.value);break;default:p("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=l(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,u,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,B=_.commitResetTextContent,D=_.commitPlacement,j=_.commitDeletion,F=_.commitWork,L=_.commitLifeCycles,z=_.commitErrorLogging,H=_.commitAttachRef,q=_.commitDetachRef,V=e.now,W=e.scheduleDeferredCallback,Y=e.cancelDeferredCallback,K=e.prepareForCommit,$=e.resetAfterCommit,Q=V(),X=Q,G=0,J=0,Z=!1,ee=null,te=null,ne=0,re=null,oe=!1,ie=!1,ae=null,se=null,ue=null,ce=0,le=-1,fe=!1,pe=null,de=0,he=0,ye=!1,me=!1,ge=null,ve=null,be=!1,we=!1,Ce=!1,Ee=null,xe=1e3,ke=0,Se=1;return{recalculateCurrentTime:d,computeExpirationForFiber:c,scheduleWork:l,requestWork:m,flushRoot:function(e,t){fe&&p("253"),pe=e,de=t,E(e,t,!1),b(),C()},batchedUpdates:function(e,t){var n=be;be=!0;try{return e(t)}finally{(be=n)||fe||b()}},unbatchedUpdates:function(e,t){if(be&&!we){we=!0;try{return e(t)}finally{we=!1}}return e(t)},flushSync:function(e,t){fe&&p("187");var n=be;be=!0;try{return h(e,t)}finally{be=n,b()}},flushControlled:function(e){var t=be;be=!0;try{h(e)}finally{(be=t)||fe||w(1,!1,null)}},deferredUpdates:function(e){var t=J;J=25*(1+((d()+500)/25|0));try{return e()}finally{J=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(Ce)return e(t,n);be||fe||0===he||(w(he,!1,null),he=0);var r=Ce,o=be;be=Ce=!0;try{return e(t,n)}finally{Ce=r,(be=o)||fe||b()}},flushInteractiveUpdates:function(){fe||0===he||(w(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((d()+500)/25|0));return e<=G&&(e=G+1),G=e},legacyContext:P}}function xr(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var s=u(n);n=c(n)?l(n,s):s}else n=f;return null===t.context?t.context=n:t.pendingContext=n,cr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(r,o),o}var n=e.getPublicInstance,r=(e=Er(e)).recalculateCurrentTime,o=e.computeExpirationForFiber,i=e.scheduleWork,s=e.legacyContext,u=s.findCurrentUnmaskedContext,c=s.isContextProvider,l=s.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Kn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,i,a){var s=n.current;return t(e,n,i,r(),s=o(s),a)},updateContainerAtExpirationTime:function(e,n,o,i,a){return t(e,n,o,r(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=Jt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Gt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Zn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=Jt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var kr=Object.freeze({default:xr}),Sr=kr&&xr||kr,Tr=Sr.default?Sr.default:Sr;var _r="object"==typeof performance&&"function"==typeof performance.now,Pr=void 0;Pr=_r?function(){return performance.now()}:function(){return Date.now()};var Or=void 0,Rr=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Ar=null,Nr=!1,Ir=-1,Mr=!1,Ur=0,Br=33,Dr=33,jr=void 0;jr=_r?{didTimeout:!1,timeRemaining:function(){var e=Ur-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Ur-Date.now();return 0<e?e:0}};var Fr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Fr){if(Nr=!1,e=Pr(),0>=Ur-e){if(!(-1!==Ir&&Ir<=e))return void(Mr||(Mr=!0,requestAnimationFrame(Lr)));jr.didTimeout=!0}else jr.didTimeout=!1;Ir=-1,e=Ar,Ar=null,null!==e&&e(jr)}},!1);var Lr=function(e){Mr=!1;var t=e-Ur+Dr;t<Dr&&Br<Dr?(8>t&&(t=8),Dr=t<Br?Br:t):Br=t,Ur=e+Dr,Nr||(Nr=!0,window.postMessage(Fr,"*"))};Or=function(e,t){return Ar=e,null!=t&&"number"==typeof t.timeout&&(Ir=Pr()+t.timeout),Mr||(Mr=!0,requestAnimationFrame(Lr)),0},Rr=function(){Ar=null,Nr=!1,Ir=-1}}else Or=window.requestIdleCallback,Rr=window.cancelIdleCallback;else Or=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Rr=function(e){clearTimeout(e)};function zr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Hr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function qr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Vr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Yr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Kr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var $r={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Qr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Xr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Qr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Gr,Jr=void 0,Zr=(Gr=function(e,t){if(e.namespaceURI!==$r.svg||"innerHTML"in e)e.innerHTML=t;else{for((Jr=Jr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Jr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Gr(e,t)})}:Gr);function eo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var to={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||to.hasOwnProperty(o)&&to[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(to).forEach(function(e){no.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),to[t]=to[e]})});var oo=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(e,t,n){t&&(oo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var so=s.thatReturns("");function uo(e,t){var n=Un(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?Cn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(Cn("topFocus","focus",e),Cn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(We("cancel",!0)&&Cn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(We("close",!0)&&Cn("topClose","close",e),n.topClose=!0):Rn.hasOwnProperty(o)&&wn(o,Rn[o],e),n[o]=!0)}}function co(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===$r.html&&(r=Qr(e)),r===$r.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function lo(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":wn("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in An)An.hasOwnProperty(i)&&wn(i,An[i],e);i=n;break;case"source":wn("topError","error",e),i=n;break;case"img":case"image":case"link":wn("topError","error",e),wn("topLoad","load",e),i=n;break;case"form":wn("topReset","reset",e),wn("topSubmit","submit",e),i=n;break;case"details":wn("topToggle","toggle",e),i=n;break;case"input":wt(e,n),i=bt(e,n),wn("topInvalid","invalid",e),uo(r,"onChange");break;case"option":i=zr(e,n);break;case"select":qr(e,n),i=a({},n,{value:void 0}),wn("topInvalid","invalid",e),uo(r,"onChange");break;case"textarea":Wr(e,n),i=Vr(e,n),wn("topInvalid","invalid",e),uo(r,"onChange");break;default:i=n}io(t,i,so);var u,c=i;for(u in c)if(c.hasOwnProperty(u)){var l=c[u];"style"===u?ro(e,l):"dangerouslySetInnerHTML"===u?null!=(l=l?l.__html:void 0)&&Zr(e,l):"children"===u?"string"==typeof l?("textarea"!==t||""!==l)&&eo(e,l):"number"==typeof l&&eo(e,""+l):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(w.hasOwnProperty(u)?null!=l&&uo(r,u):null!=l&&vt(e,u,l,o))}switch(t){case"input":Ke(e),xt(e,n);break;case"textarea":Ke(e),Kr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Hr(e,!!n.multiple,t,!1):null!=n.defaultValue&&Hr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=s)}}function po(e,t,n,r,o){var i=null;switch(t){case"input":n=bt(e,n),r=bt(e,r),i=[];break;case"option":n=zr(e,n),r=zr(e,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=Vr(e,n),r=Vr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=s)}io(t,r,so),t=e=void 0;var u=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var c=n[e];for(t in c)c.hasOwnProperty(t)&&(u||(u={}),u[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(w.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var l=r[e];if(c=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&l!==c&&(null!=l||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||l&&l.hasOwnProperty(t)||(u||(u={}),u[t]="");for(t in l)l.hasOwnProperty(t)&&c[t]!==l[t]&&(u||(u={}),u[t]=l[t])}else u||(i||(i=[]),i.push(e,u)),u=l;else"dangerouslySetInnerHTML"===e?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(i=i||[]).push(e,""+l)):"children"===e?c===l||"string"!=typeof l&&"number"!=typeof l||(i=i||[]).push(e,""+l):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(w.hasOwnProperty(e)?(null!=l&&uo(o,e),i||c===l||(i=[])):(i=i||[]).push(e,l))}return u&&(i=i||[]).push("style",u),i}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Ct(e,o),ao(n,r),r=ao(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],s=t[i+1];"style"===a?ro(e,s):"dangerouslySetInnerHTML"===a?Zr(e,s):"children"===a?eo(e,s):vt(e,a,s,r)}switch(n){case"input":Et(e,o);break;case"textarea":Yr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Hr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Hr(e,!!o.multiple,o.defaultValue,!0):Hr(e,!!o.multiple,o.multiple?[]:"",!1))}}function yo(e,t,n,r,o){switch(t){case"iframe":case"object":wn("topLoad","load",e);break;case"video":case"audio":for(var i in An)An.hasOwnProperty(i)&&wn(i,An[i],e);break;case"source":wn("topError","error",e);break;case"img":case"image":case"link":wn("topError","error",e),wn("topLoad","load",e);break;case"form":wn("topReset","reset",e),wn("topSubmit","submit",e);break;case"details":wn("topToggle","toggle",e);break;case"input":wt(e,n),wn("topInvalid","invalid",e),uo(o,"onChange");break;case"select":qr(e,n),wn("topInvalid","invalid",e),uo(o,"onChange");break;case"textarea":Wr(e,n),wn("topInvalid","invalid",e),uo(o,"onChange")}for(var a in io(t,n,so),r=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):w.hasOwnProperty(a)&&null!=i&&uo(o,a));switch(t){case"input":Ke(e),xt(e,n);break;case"textarea":Ke(e),Kr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=s)}return r}function mo(e,t){return e.nodeValue!==t}var go=Object.freeze({createElement:co,createTextNode:lo,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:yo,diffHydratedText:mo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Et(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=W(r);o||p("90"),$e(r),Et(r,o)}}}break;case"textarea":Yr(e,n);break;case"select":null!=(t=n.value)&&Hr(e,!!n.multiple,t,!1)}}});Oe.injectFiberControlledHostComponent(go);var vo=null,bo=null;function wo(e){this._expirationTime=So.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Co(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Eo(e,t,n){this._internalRoot=So.createContainer(e,t,n)}function xo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ko(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}wo.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Co;return So.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},wo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},wo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,So.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},wo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Co.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Co.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},Eo.prototype.render=function(e,t){var n=this._internalRoot,r=new Co;return null!==(t=void 0===t?null:t)&&r.then(t),So.updateContainer(e,n,null,r._onCommit),r},Eo.prototype.unmount=function(e){var t=this._internalRoot,n=new Co;return null!==(e=void 0===e?null:e)&&n.then(e),So.updateContainer(null,t,null,n._onCommit),n},Eo.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Co;return null!==(n=void 0===n?null:n)&&o.then(n),So.updateContainer(t,r,e,o._onCommit),o},Eo.prototype.createBatch=function(){var e=new wo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var So=Tr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Xr(null,"");break;default:e=Xr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Xr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){vo=vn;var e=u();if(jn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,s=-1,c=0,l=0,f=e,p=null;t:for(;;){for(var d;f!==t||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==n&&3!==f.nodeType||(s=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===e)break t;if(p===t&&++c===r&&(a=i),p===o&&++l===n&&(s=i),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}t=-1===a||-1===s?null:{start:a,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;bo={focusedElem:e,selectionRange:t},bn(!1)},resetAfterCommit:function(){var e=bo,t=u(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&l(document.documentElement,n)){if(jn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[oe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Dn(n,e);var i=Dn(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}bo=null,bn(vo),vo=null},createInstance:function(e,t,n,r,o){return(e=co(e,t,n,r))[z]=o,e[H]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),ko(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=lo(e,t))[z]=r,e},now:Pr,mutation:{commitMount:function(e,t,n){ko(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[H]=o,ho(e,t,n,r,o)},resetTextContent:function(e){eo(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[z]=i,e[H]=n,yo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[z]=n,mo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Or,cancelDeferredCallback:Rr}),To=So;function _o(e,t,n,r,o){xo(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=So.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Eo(e,!1,t)}(n,r),"function"==typeof o){var s=o;o=function(){var e=So.getPublicRootInstance(i._internalRoot);s.call(e)}}So.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return So.getPublicRootInstance(i._internalRoot)}function Po(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return xo(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}De=To.batchedUpdates,je=To.interactiveUpdates,Fe=To.flushInteractiveUpdates;var Oo={createPortal:Po,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:So.findHostInstance(e)},hydrate:function(e,t,n){return _o(null,e,t,!0,n)},render:function(e,t,n){return _o(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),_o(e,t,n,!1,r)},unmountComponentAtNode:function(e){return xo(e)||p("40"),!!e._reactRootContainer&&(So.unbatchedUpdates(function(){_o(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Po.apply(void 0,arguments)},unstable_batchedUpdates:So.batchedUpdates,unstable_deferredUpdates:So.deferredUpdates,flushSync:So.flushSync,unstable_flushControlled:So.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:F,EventPluginRegistry:k,EventPropagators:ne,ReactControlledComponent:Be,ReactDOMComponentTree:Y,ReactDOMEventListener:kn},unstable_createRoot:function(e,t){return new Eo(e,!0,null!=t&&!0===t.hydrate)}};So.injectIntoDevTools({findFiberByHostInstance:q,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Ro=Object.freeze({default:Oo}),Ao=Ro&&Oo||Ro;e.exports=Ao.default?Ao.default:Ao},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(86)},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(34),o=n(18),i=n(33),a=n(17),s="function"==typeof Symbol&&Symbol.for,u=s?Symbol.for("react.element"):60103,c=s?Symbol.for("react.portal"):60106,l=s?Symbol.for("react.fragment"):60107,f=s?Symbol.for("react.strict_mode"):60108,p=s?Symbol.for("react.provider"):60109,d=s?Symbol.for("react.context"):60110,h=s?Symbol.for("react.async_mode"):60111,y=s?Symbol.for("react.forward_ref"):60112,m="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function b(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}function w(){}function C(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=b.prototype;var E=C.prototype=new w;E.constructor=C,r(E,b.prototype),E.isPureReactComponent=!0;var x={current:null},k=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!S.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),l=0;l<s;l++)c[l]=arguments[l+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:u,type:e,key:i,ref:a,props:o,_owner:x.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var P=/\/+/g,O=[];function R(e,t,n,r){if(O.length){var o=O.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function N(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case u:case c:i=!0}}if(i)return n(r,e,""===t?"."+I(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var s=t+I(o=e[a],a);i+=N(o,s,n,r)}else if(null===e||void 0===e?s=null:s="function"==typeof(s=m&&e[m]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),a=0;!(o=e.next()).done;)i+=N(o=o.value,s=t+I(o,a++),n,r);else"object"===o&&g("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function U(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?B(e,r,n,a.thatReturnsArgument):null!=e&&(_(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function B(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(P,"$&/")+"/"),t=R(t,i,r,o),null==e||N(e,"",U,t),A(t)}var D={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return B(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=R(null,null,t,n),null==e||N(e,"",M,t),A(t)},count:function(e){return null==e?0:N(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return B(e,t,null,a.thatReturnsArgument),t},only:function(e){return _(e)||g("143"),e}},createRef:function(){return{current:null}},Component:b,PureComponent:C,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:y,render:e}},Fragment:l,StrictMode:f,unstable_AsyncMode:h,createElement:T,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var o=void 0,i=r({},e.props),a=e.key,s=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,c=x.current),void 0!==t.key&&(a=""+t.key);var l=void 0;for(o in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),t)k.call(t,o)&&!S.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==l?l[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){l=Array(o);for(var f=0;f<o;f++)l[f]=arguments[f+2];i.children=l}return{$$typeof:u,type:e.type,key:a,ref:s,props:i,_owner:c}},createFactory:function(e){var t=T.bind(null,e);return t.type=e,t},isValidElement:_,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:r}},j=Object.freeze({default:D}),F=j&&D||j;e.exports=F.default?F.default:F},function(e,t,n){"use strict";var r=p(n(2)),o=p(n(87)),i=p(n(79)),a=n(19),s=p(n(38)),u=n(9),c=p(n(37)),l=p(n(13)),f=n(14);function p(e){return e&&e.__esModule?e:{default:e}}var d=(0,a.createStore)(c.default,(0,a.applyMiddleware)(s.default));l.default.on("RECEIVE_MESSAGE",function(e){d.dispatch((0,f.receiveMessage)(JSON.parse(e)))}),l.default.on("RECEIVE_CONVERSATION",function(e){d.dispatch((0,f.receiveConversation)(JSON.parse(e)))}),d.dispatch((0,f.retrieveConversation)()),o.default.render(r.default.createElement(u.Provider,{store:d},r.default.createElement(i.default,null)),document.getElementById("root"))},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(0))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWluaGVyaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi94bWxodHRwcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9Tb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvYWN0aW9ucy9hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveWVhc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvaXMtYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXVyaS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9yZWR1Y2Vycy9yZWR1Y2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvTWVzc2FnZUxpc3Quc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL01lc3NhZ2VMaXN0LnNjc3M/MWY3MSIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL01lc3NhZ2VMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvLWFycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3dlYnNvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLWpzb25wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ibG9iL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtYXJyYXlidWZmZXIvbGliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi91dGY4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hZnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXlidWZmZXIuc2xpY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLXhoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWNvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvYmluYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2RlYnVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL3VybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9pbWcvc2VuZC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9JbnB1dENvbXBvbmVudC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvSW5wdXRDb21wb25lbnQuc2Nzcz9jNzFjIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvSW5wdXRDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0FwcC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvQXBwLnNjc3M/OGY2NSIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc1RleHROb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnIiwidGhpcyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJwcm9jZXNzIiwibG9hZCIsInN0b3JhZ2UiLCJkZWJ1ZyIsImVudiIsIkRFQlVHIiwibG9nIiwiY29uc29sZSIsImFwcGx5IiwiYXJndW1lbnRzIiwiZm9ybWF0QXJncyIsImFyZ3MiLCJ1c2VDb2xvcnMiLCJuYW1lc3BhY2UiLCJodW1hbml6ZSIsImRpZmYiLCJjb2xvciIsInNwbGljZSIsImluZGV4IiwibGFzdEMiLCJyZXBsYWNlIiwibWF0Y2giLCJzYXZlIiwibmFtZXNwYWNlcyIsInJlbW92ZUl0ZW0iLCJ0eXBlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInN0eWxlIiwiV2Via2l0QXBwZWFyYW5jZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsInBhcnNlSW50IiwiUmVnRXhwIiwiJDEiLCJjaHJvbWUiLCJsb2NhbCIsImxvY2FsU3RvcmFnZSIsImxvY2Fsc3RvcmFnZSIsImNvbG9ycyIsImZvcm1hdHRlcnMiLCJqIiwidiIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnIiLCJtZXNzYWdlIiwiZW5hYmxlIiwiZ2xvYmFsIiwiYmFzZTY0ZW5jb2RlciIsImtleXMiLCJoYXNCaW5hcnkiLCJzbGljZUJ1ZmZlciIsImFmdGVyIiwidXRmOCIsIkFycmF5QnVmZmVyIiwiaXNBbmRyb2lkIiwidGVzdCIsImlzUGhhbnRvbUpTIiwiZG9udFNlbmRCbG9icyIsInByb3RvY29sIiwicGFja2V0cyIsIm9wZW4iLCJjbG9zZSIsInBpbmciLCJwb25nIiwidXBncmFkZSIsIm5vb3AiLCJwYWNrZXRzbGlzdCIsImRhdGEiLCJCbG9iIiwibWFwIiwiYXJ5IiwiZWFjaCIsImRvbmUiLCJyZXN1bHQiLCJBcnJheSIsImxlbmd0aCIsIm5leHQiLCJlYWNoV2l0aEluZGV4IiwiZWwiLCJjYiIsImVycm9yIiwibXNnIiwiZW5jb2RlUGFja2V0IiwicGFja2V0Iiwic3VwcG9ydHNCaW5hcnkiLCJ1dGY4ZW5jb2RlIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJidWZmZXIiLCJlbmNvZGVCYXNlNjRQYWNrZXQiLCJjb250ZW50QXJyYXkiLCJVaW50OEFycmF5IiwicmVzdWx0QnVmZmVyIiwiYnl0ZUxlbmd0aCIsImVuY29kZUFycmF5QnVmZmVyIiwiZnIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJlbmNvZGVCbG9iIiwiYmFzZTY0IiwiZW5jb2RlQmFzZTY0T2JqZWN0IiwiZW5jb2RlZCIsImVuY29kZSIsIlN0cmluZyIsInN0cmljdCIsImI2NGRhdGEiLCJiNjQiLCJzcGxpdCIsInJlYWRBc0RhdGFVUkwiLCJmcm9tQ2hhckNvZGUiLCJ0eXBlZCIsImJhc2ljIiwiYnRvYSIsImRlY29kZVBhY2tldCIsImJpbmFyeVR5cGUiLCJ1dGY4ZGVjb2RlIiwiY2hhckF0IiwiZGVjb2RlQmFzZTY0UGFja2V0Iiwic3Vic3RyIiwiZGVjb2RlIiwidHJ5RGVjb2RlIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwicmVzdCIsImVuY29kZVBheWxvYWQiLCJpc0JpbmFyeSIsImVuY29kZVBheWxvYWRBc0Jsb2IiLCJlbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciIsImRvbmVDYWxsYmFjayIsInNldExlbmd0aEhlYWRlciIsInJlc3VsdHMiLCJqb2luIiwiZGVjb2RlUGF5bG9hZCIsImRlY29kZVBheWxvYWRBc0JpbmFyeSIsImNociIsImVuY29kZWRQYWNrZXRzIiwidG90YWxMZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJsZW4iLCJ0b1N0cmluZyIsInJlc3VsdEFycmF5IiwiYnVmZmVySW5kZXgiLCJmb3JFYWNoIiwiaXNTdHJpbmciLCJhYiIsInZpZXciLCJjaGFyQ29kZUF0IiwibGVuU3RyIiwiYmluYXJ5SWRlbnRpZmllciIsInNpemUiLCJsZW5ndGhBcnkiLCJidWZmZXJUYWlsIiwiYnVmZmVycyIsInRhaWxBcnJheSIsIm1zZ0xlbmd0aCIsInB1c2giLCJ0b3RhbCIsIkVtaXR0ZXIiLCJvYmoiLCJrZXkiLCJtaXhpbiIsIm9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZm4iLCJfY2FsbGJhY2tzIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhbGxiYWNrcyIsImVtaXQiLCJzbGljZSIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsImEiLCJiIiwiY29uc3RydWN0b3IiLCJzdHIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsImNvbmRpdGlvbiIsImZvcm1hdCIsImYiLCJFcnJvciIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJzdWJzY3JpcHRpb25TaGFwZSIsInByb3BfdHlwZXNfZGVmYXVsdCIsInNoYXBlIiwidHJ5U3Vic2NyaWJlIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJ0cnlVbnN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJpc1N1YnNjcmliZWQiLCJzdG9yZVNoYXBlIiwic3Vic2NyaWJlIiwiZGlzcGF0Y2giLCJnZXRTdGF0ZSIsImNyZWF0ZVByb3ZpZGVyIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4Iiwic3RvcmVLZXkiLCJzdWJzY3JpcHRpb25LZXkiLCJQcm92aWRlciIsIl9Db21wb25lbnQiLCJwcm9wcyIsImNvbnRleHQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3RoaXMiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInN0b3JlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsImdldENoaWxkQ29udGV4dCIsIl9yZWYiLCJyZW5kZXIiLCJyZWFjdCIsIm9ubHkiLCJjaGlsZHJlbiIsInByb3BUeXBlcyIsImVsZW1lbnQiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJDTEVBUkVEIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsIlN1YnNjcmlwdGlvbiIsInBhcmVudFN1YiIsIm9uU3RhdGVDaGFuZ2UiLCJTdWJzY3JpcHRpb25fY2xhc3NDYWxsQ2hlY2siLCJ1bnN1YnNjcmliZSIsImFkZE5lc3RlZFN1YiIsImxpc3RlbmVyIiwiQm9vbGVhbiIsImN1cnJlbnQiLCJjbGVhciIsImluZGV4T2YiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsInNvdXJjZSIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX2NvbnRleHRUeXBlcyIsIl9jaGlsZENvbnRleHRUeXBlcyIsIl9yZWYkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYkc2hvdWxkSGFuZGxlU3RhdCIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsIl9yZWYkc3RvcmVLZXkiLCJfcmVmJHdpdGhSZWYiLCJ3aXRoUmVmIiwiY29ubmVjdE9wdGlvbnMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJ2ZXJzaW9uIiwiY29udGV4dFR5cGVzIiwiV3JhcHBlZENvbXBvbmVudCIsImJyb3dzZXJfZGVmYXVsdCIsIndyYXBwZWRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwiQ29ubmVjdCIsImNvbm5lY3RBZHZhbmNlZF9jbGFzc0NhbGxDaGVjayIsImNvbm5lY3RBZHZhbmNlZF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic3RhdGUiLCJyZW5kZXJDb3VudCIsInByb3BzTW9kZSIsInNldFdyYXBwZWRJbnN0YW5jZSIsImJpbmQiLCJpbml0U2VsZWN0b3IiLCJpbml0U3Vic2NyaXB0aW9uIiwiY29ubmVjdEFkdmFuY2VkX2luaGVyaXRzIiwiX3JlZjIiLCJzdWJzY3JpcHRpb24iLCJjb21wb25lbnREaWRNb3VudCIsInNlbGVjdG9yIiwicnVuIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRXcmFwcGVkSW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJyZWYiLCJzb3VyY2VTZWxlY3RvciIsIm1ha2VTZWxlY3RvclN0YXRlZnVsIiwiY29tcG9uZW50RGlkVXBkYXRlIiwibm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlIiwic2V0U3RhdGUiLCJhZGRFeHRyYVByb3BzIiwid2l0aEV4dHJhcyIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2RlZmF1bHQiLCJoYXNPd24iLCJpcyIsIngiLCJ5Iiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwiZnJlZVNlbGYiLCJfU3ltYm9sIiwiX2ZyZWVHbG9iYWwiLCJTeW1ib2wiLCJvYmplY3RQcm90byIsInRvU3RyaW5nVGFnIiwiZ2V0UHJvdG90eXBlT2YiLCJmdW5jUHJvdG8iLCJpc1BsYWluT2JqZWN0X29iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50Iiwib3B0aW9ucyIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImNvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwicmVkdXgiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRTdGF0ZSIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsInNlbGVjdG9yRmFjdG9yeV9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNvbm5lY3RfZXh0ZW5kcyIsImFyZyIsImZhY3RvcmllcyIsInN0cmljdEVxdWFsIiwiY29ubmVjdF9jb25uZWN0IiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyJHB1cmUiLCJfcmVmMiRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYyJGFyZU93blByb3BzRXF1YSIsIl9yZWYyJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYyJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsImNvbm5lY3Rfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJwYXJzZXIiLCJUcmFuc3BvcnQiLCJvcHRzIiwicGF0aCIsImhvc3RuYW1lIiwicG9ydCIsInNlY3VyZSIsInF1ZXJ5IiwidGltZXN0YW1wUGFyYW0iLCJ0aW1lc3RhbXBSZXF1ZXN0cyIsInJlYWR5U3RhdGUiLCJhZ2VudCIsInNvY2tldCIsImVuYWJsZXNYRFIiLCJwZngiLCJwYXNzcGhyYXNlIiwiY2VydCIsImNhIiwiY2lwaGVycyIsInJlamVjdFVuYXV0aG9yaXplZCIsImZvcmNlTm9kZSIsImV4dHJhSGVhZGVycyIsImxvY2FsQWRkcmVzcyIsIm9uRXJyb3IiLCJkZXNjIiwiZGVzY3JpcHRpb24iLCJkb09wZW4iLCJkb0Nsb3NlIiwib25DbG9zZSIsInNlbmQiLCJ3cml0ZSIsIm9uT3BlbiIsIm9uRGF0YSIsIm9uUGFja2V0IiwiaGFzQ09SUyIsInhkb21haW4iLCJ4c2NoZW1lIiwiWE1MSHR0cFJlcXVlc3QiLCJYRG9tYWluUmVxdWVzdCIsImNvbmNhdCIsImJpbmFyeSIsImlzQXJyYXkiLCJpc0J1ZiIsIkVuY29kZXIiLCJ0eXBlcyIsIkNPTk5FQ1QiLCJESVNDT05ORUNUIiwiRVZFTlQiLCJBQ0siLCJFUlJPUiIsIkJJTkFSWV9FVkVOVCIsIkJJTkFSWV9BQ0siLCJEZWNvZGVyIiwiRVJST1JfUEFDS0VUIiwiZW5jb2RlQXNTdHJpbmciLCJhdHRhY2htZW50cyIsIm5zcCIsImlkIiwicGF5bG9hZCIsInRyeVN0cmluZ2lmeSIsInJlY29uc3RydWN0b3IiLCJCaW5hcnlSZWNvbnN0cnVjdG9yIiwicmVjb25QYWNrIiwicmVtb3ZlQmxvYnMiLCJibG9ibGVzc0RhdGEiLCJkZWNvbnN0cnVjdGlvbiIsImRlY29uc3RydWN0UGFja2V0IiwicGFjayIsInVuc2hpZnQiLCJlbmNvZGVBc0JpbmFyeSIsImFkZCIsImJ1ZiIsInBhcnNlIiwidHJ5UGFyc2UiLCJpc1BheWxvYWRWYWxpZCIsImRlY29kZVN0cmluZyIsInRha2VCaW5hcnlEYXRhIiwiZGVzdHJveSIsImZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24iLCJiaW5EYXRhIiwicmVjb25zdHJ1Y3RQYWNrZXQiLCJzZW5kTWVzc2FnZSIsIlNvY2tldCIsIlNFTkRfTUVTU0FHRSIsInN0YXR1cyIsInJlY2VpdmVNZXNzYWdlIiwiUkVDRUlWRV9NRVNTQUdFIiwicmV0cmlldmVDb252ZXJzYXRpb24iLCJSRVRSSUVWRV9DT05WRVJTQVRJT04iLCJyZWNlaXZlQ29udmVyc2F0aW9uIiwibWVzc2FnZXMiLCJSRUNFSVZFX0NPTlZFUlNBVElPTiIsImlucHV0Q2hhbmdlIiwiSU5QVVRfQ0hBTkdFIiwiX1NvY2tldCIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiaXRlbSIsImRvbVN0eWxlIiwicmVmcyIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJsaXN0IiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpZHgiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXR0cnMiLCJhZGRBdHRycyIsInNldEF0dHJpYnV0ZSIsInVwZGF0ZSIsInJlbW92ZSIsInRyYW5zZm9ybSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJ1bmVzY2FwZSIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsInVzZVNvdXJjZU1hcCIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJ2YWxpZGF0ZUZvcm1hdCIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIk1hdGgiLCJyYW5kb20iLCJSRVBMQUNFIiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsImFjdGlvbiIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJzeW1ib2xfb2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwiZmluYWxSZWR1Y2VyS2V5cyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwiX2kiLCJfa2V5IiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9sZW4yIiwiX2tleTIiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImV2IiwidG9BcnJheSIsInBhcnNlcXMiLCJoYXNCaW4iLCJldmVudHMiLCJjb25uZWN0IiwiY29ubmVjdF9lcnJvciIsImNvbm5lY3RfdGltZW91dCIsImNvbm5lY3RpbmciLCJkaXNjb25uZWN0IiwicmVjb25uZWN0IiwicmVjb25uZWN0X2F0dGVtcHQiLCJyZWNvbm5lY3RfZmFpbGVkIiwicmVjb25uZWN0X2Vycm9yIiwicmVjb25uZWN0aW5nIiwiaW8iLCJqc29uIiwiaWRzIiwiYWNrcyIsInJlY2VpdmVCdWZmZXIiLCJzZW5kQnVmZmVyIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiZmxhZ3MiLCJhdXRvQ29ubmVjdCIsInN1YkV2ZW50cyIsInN1YnMiLCJvbm9wZW4iLCJjb21wcmVzcyIsInBvcCIsIm9uY2xvc2UiLCJyZWFzb24iLCJvbnBhY2tldCIsInNhbWVOYW1lc3BhY2UiLCJyb290TmFtZXNwYWNlRXJyb3IiLCJvbmNvbm5lY3QiLCJvbmV2ZW50Iiwib25hY2siLCJvbmRpc2Nvbm5lY3QiLCJhY2siLCJzZW50IiwiZW1pdEJ1ZmZlcmVkIiwiYXJyIiwicHJldiIsImFscGhhYmV0Iiwic2VlZCIsIm51bSIsImZsb29yIiwieWVhc3QiLCJub3ciLCJEYXRlIiwiZGVjb2RlZCIsIkJ1ZmZlciIsIndpdGhOYXRpdmVCbG9iIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwiaXNCdWZmZXIiLCJ0b0pTT04iLCJpbmhlcml0IiwiUG9sbGluZyIsImhhc1hIUjIiLCJyZXNwb25zZVR5cGUiLCJmb3JjZUJhc2U2NCIsInBvbGwiLCJwYXVzZSIsIm9uUGF1c2UiLCJwb2xsaW5nIiwiZG9Qb2xsIiwiY2FsbGJhY2tmbiIsImRvV3JpdGUiLCJ1cmkiLCJzY2hlbWEiLCJzaWQiLCJYSFIiLCJKU09OUCIsIndlYnNvY2tldCIsInhkIiwieHMiLCJqc29ucCIsImxvY2F0aW9uIiwiaXNTU0wiLCJmb3JjZUpTT05QIiwiZWlvIiwiQmFja29mZiIsImhhcyIsIk1hbmFnZXIiLCJuc3BzIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJJbmZpbml0eSIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsIm1pbiIsIm1heCIsImppdHRlciIsInRpbWVvdXQiLCJsYXN0UGluZyIsImVuY29kaW5nIiwicGFja2V0QnVmZmVyIiwiX3BhcnNlciIsImVuY29kZXIiLCJkZWNvZGVyIiwiZW1pdEFsbCIsInVwZGF0ZVNvY2tldElkcyIsImdlbmVyYXRlSWQiLCJlbmdpbmUiLCJfcmVjb25uZWN0aW9uIiwiX3JlY29ubmVjdGlvbkF0dGVtcHRzIiwiX3JlY29ubmVjdGlvbkRlbGF5Iiwic2V0TWluIiwiX3JhbmRvbWl6YXRpb25GYWN0b3IiLCJzZXRKaXR0ZXIiLCJfcmVjb25uZWN0aW9uRGVsYXlNYXgiLCJzZXRNYXgiLCJfdGltZW91dCIsIm1heWJlUmVjb25uZWN0T25PcGVuIiwiYXR0ZW1wdHMiLCJza2lwUmVjb25uZWN0Iiwib3BlblN1YiIsImVycm9yU3ViIiwiY2xlYW51cCIsInRpbWVyIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsIm9ucGluZyIsIm9ucG9uZyIsIm9uZGF0YSIsIm9uZGVjb2RlZCIsIm9uZXJyb3IiLCJvbkNvbm5lY3RpbmciLCJwcm9jZXNzUGFja2V0UXVldWUiLCJzaGlmdCIsInN1YnNMZW5ndGgiLCJyZXNldCIsImRlbGF5IiwiZHVyYXRpb24iLCJvbnJlY29ubmVjdCIsImF0dGVtcHQiLCJ3aXRoTmF0aXZlQnVmZmVyIiwid2l0aE5hdGl2ZUFycmF5QnVmZmVyIiwiaXNWaWV3IiwicmUiLCJzcmMiLCJleGVjIiwiaG9zdCIsImF1dGhvcml0eSIsImlwdjZ1cmkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0ZXN0MSIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsInZhbCIsInRvT2JqZWN0Iiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwib2JzZXJ2YWJsZSIsIlJFQUNUX1NUQVRJQ1MiLCJkZWZhdWx0UHJvcHMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImRlc2NyaXB0b3IiLCJmYWN0b3J5IiwiX2FjdGlvbnMiLCJjaGF0QXBwIiwiY3VycmVudElucHV0IiwidXNlcm5hbWUiLCJjdXJyZW50TWVzc2FnZSIsIl90b0NvbnN1bWFibGVBcnJheSIsImlzUmV0cmlldmluZ0NvbnZlcnNhdGlvbiIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiaG1yIiwibG9jYWxzIiwiX3JlYWN0UmVkdXgiLCJNZXNzYWdlIiwidGV4dCIsImRhdGUiLCJfcmVhY3QyIiwiZGVmYXVsdCIsIk1lc3NhZ2VMaXN0IiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwibXMiLCJmYWN0b3IiLCJwb3ciLCJyYW5kIiwiZGV2aWF0aW9uIiwiYXJyYXkiLCJOb2RlV2ViU29ja2V0IiwiQnJvd3NlcldlYlNvY2tldCIsIldlYlNvY2tldCIsIk1veldlYlNvY2tldCIsIldTIiwicGVyTWVzc2FnZURlZmxhdGUiLCJ1c2luZ0Jyb3dzZXJXZWJTb2NrZXQiLCJwcm90b2NvbHMiLCJjaGVjayIsImhlYWRlcnMiLCJ3cyIsInN1cHBvcnRzIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbm1lc3NhZ2UiLCJ0aHJlc2hvbGQiLCJKU09OUFBvbGxpbmciLCJyTmV3bGluZSIsInJFc2NhcGVkTmV3bGluZSIsImVtcHR5IiwiX19fZWlvIiwic2NyaXB0IiwiZm9ybSIsImlmcmFtZSIsImFzeW5jIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJib2R5IiwiYXJlYSIsImlmcmFtZUlkIiwiY2xhc3NOYW1lIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwibWV0aG9kIiwiY29tcGxldGUiLCJpbml0SWZyYW1lIiwiaHRtbCIsInN1Ym1pdCIsImF0dGFjaEV2ZW50Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsImJsb2JTdXBwb3J0ZWQiLCJibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXciLCJibG9iQnVpbGRlclN1cHBvcnRlZCIsImFwcGVuZCIsImdldEJsb2IiLCJtYXBBcnJheUJ1ZmZlclZpZXdzIiwiY2h1bmsiLCJjb3B5Iiwic2V0IiwiYnl0ZU9mZnNldCIsIkJsb2JCdWlsZGVyQ29uc3RydWN0b3IiLCJiYiIsIkJsb2JDb25zdHJ1Y3RvciIsImNoYXJzIiwibG9va3VwIiwiYXJyYXlidWZmZXIiLCJieXRlcyIsImVuY29kZWQxIiwiZW5jb2RlZDIiLCJlbmNvZGVkMyIsImVuY29kZWQ0IiwiYnVmZmVyTGVuZ3RoIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImZyZWVFeHBvcnRzIiwiZnJlZUdsb2JhbCIsImJ5dGVBcnJheSIsImJ5dGVDb3VudCIsImJ5dGVJbmRleCIsInN0cmluZ0Zyb21DaGFyQ29kZSIsInVjczJkZWNvZGUiLCJzdHJpbmciLCJleHRyYSIsIm91dHB1dCIsImNvdW50ZXIiLCJjaGVja1NjYWxhclZhbHVlIiwiY29kZVBvaW50IiwidG9VcHBlckNhc2UiLCJjcmVhdGVCeXRlIiwiZW5jb2RlQ29kZVBvaW50Iiwic3ltYm9sIiwicmVhZENvbnRpbnVhdGlvbkJ5dGUiLCJjb250aW51YXRpb25CeXRlIiwiZGVjb2RlU3ltYm9sIiwiYnl0ZTEiLCJjb2RlUG9pbnRzIiwiYnl0ZVN0cmluZyIsInRtcCIsInVjczJlbmNvZGUiLCJjb3VudCIsImVycl9jYiIsImJhaWwiLCJzdGFydCIsImVuZCIsImFidiIsImlpIiwicmVhZCIsIm9mZnNldCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJhYnMiLCJpc05hTiIsIkxOMiIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0b0J5dGVBcnJheSIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsImZyb21CeXRlQXJyYXkiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJjb2RlIiwiaWVlZTc1NCIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsImZyb21TdHJpbmciLCJjaGVja2VkIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NFNsaWNlIiwidXRmOFNsaWNlIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiYnl0ZXNQZXJTZXF1ZW5jZSIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImhleFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwidXRmMTZsZVNsaWNlIiwiZXF1YWxzIiwiaW5zcGVjdCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJsZWFkU3Vycm9nYXRlIiwidHJpbSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsImRzdCIsInJlcXVlc3RUaW1lb3V0IiwiUmVxdWVzdCIsInVubG9hZEhhbmRsZXIiLCJyZXF1ZXN0cyIsImFib3J0IiwicmVxdWVzdCIsInJlcSIsInNlbmRYaHIiLCJwb2xsWGhyIiwieGhyIiwic2V0RGlzYWJsZUhlYWRlckNoZWNrIiwic2V0UmVxdWVzdEhlYWRlciIsIndpdGhDcmVkZW50aWFscyIsImhhc1hEUiIsIm9uTG9hZCIsInJlc3BvbnNlVGV4dCIsImNvbnRlbnRUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJyZXF1ZXN0c0NvdW50Iiwib25TdWNjZXNzIiwiZnJvbUVycm9yIiwicmVzcG9uc2UiLCJ0cmFuc3BvcnRzIiwicGFyc2V1cmkiLCJ0cmFuc3BvcnRPcHRpb25zIiwid3JpdGVCdWZmZXIiLCJwcmV2QnVmZmVyTGVuIiwicG9saWN5UG9ydCIsInJlbWVtYmVyVXBncmFkZSIsIm9ubHlCaW5hcnlVcGdyYWRlcyIsInVwZ3JhZGVzIiwicGluZ0ludGVydmFsIiwicGluZ1RpbWVvdXQiLCJwaW5nSW50ZXJ2YWxUaW1lciIsInBpbmdUaW1lb3V0VGltZXIiLCJwcmlvcldlYnNvY2tldFN1Y2Nlc3MiLCJjcmVhdGVUcmFuc3BvcnQiLCJjbG9uZSIsIkVJTyIsInRyYW5zcG9ydCIsInNldFRyYW5zcG9ydCIsIm9uRHJhaW4iLCJwcm9iZSIsImZhaWxlZCIsIm9uVHJhbnNwb3J0T3BlbiIsInVwZ3JhZGVMb3Nlc0JpbmFyeSIsInVwZ3JhZGluZyIsImZsdXNoIiwiZnJlZXplVHJhbnNwb3J0Iiwib25UcmFuc3BvcnRDbG9zZSIsIm9udXBncmFkZSIsIm9uSGFuZHNoYWtlIiwic2V0UGluZyIsImZpbHRlclVwZ3JhZGVzIiwib25IZWFydGJlYXQiLCJzZW5kUGFja2V0Iiwid2FpdEZvclVwZ3JhZGUiLCJjbGVhbnVwQW5kQ2xvc2UiLCJmaWx0ZXJlZFVwZ3JhZGVzIiwicGFja2V0RGF0YSIsIl9kZWNvbnN0cnVjdFBhY2tldCIsInBsYWNlaG9sZGVyIiwiX3BsYWNlaG9sZGVyIiwibmV3RGF0YSIsIl9yZWNvbnN0cnVjdFBhY2tldCIsInBlbmRpbmdCbG9icyIsIl9yZW1vdmVCbG9icyIsImN1cktleSIsImNvbnRhaW5pbmdPYmplY3QiLCJmaWxlUmVhZGVyIiwiaCIsInBsdXJhbCIsImNlaWwiLCJwYXJzZUZsb2F0IiwibG9uZyIsInJvdW5kIiwiZm10U2hvcnQiLCJjcmVhdGVEZWJ1ZyIsInByZXZUaW1lIiwiZW5hYmxlZCIsImN1cnIiLCJjb2VyY2UiLCJmb3JtYXR0ZXIiLCJoYXNoIiwic2VsZWN0Q29sb3IiLCJpbml0IiwiaW5zdGFuY2VzIiwic3RhY2siLCJkaXNhYmxlIiwibmFtZXMiLCJza2lwcyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImxvYyIsInVybCIsImNhY2hlIiwibWFuYWdlcnMiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsIm9yaWdpbmFsTW9kdWxlIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsIm51bWJlciIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwibm9kZSIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiSW5wdXRDb21wb25lbnQiLCJzdWJtaXRNZXNzYWdlIiwiX3RoaXMkcHJvcHMiLCJoYW5kbGVTdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsInRvTG9jYWxlVGltZVN0cmluZyIsIl9wcm9wcyIsImhhbmRsZUNoYW5nZSIsIm9uU3VibWl0Iiwib25DaGFuZ2UiLCJkaXNhYmxlZCIsInNlbmRJbWciLCJhbHQiLCJiYXNlVXJsIiwiY3VycmVudERpciIsInBhdGhuYW1lIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIkFwcCIsIkNvbXBvbmVudCIsIl9NZXNzYWdlTGlzdDIiLCJfSW5wdXRDb21wb25lbnQyIiwiZGVmYXVsdFZpZXciLCJvd25lckRvY3VtZW50IiwiTm9kZSIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJpc05vZGUiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImRvYyIsImFjdGl2ZUVsZW1lbnQiLCJjYW5Vc2VET00iLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsImJhIiwiZWEiLCJBIiwiQyIsImZhIiwiaGEiLCJqYSIsImthIiwiRCIsIkUiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImsiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJvYSIsInBhIiwicWEiLCJyYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwic2EiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInRhIiwicmVnaXN0cmF0aW9uTmFtZSIsInVhIiwidmEiLCJkZXBlbmRlbmNpZXMiLCJ3YSIsInhhIiwiQ2EiLCJmcmVlemUiLCJwbHVnaW5zIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsImN1cnJlbnRUYXJnZXQiLCJIYSIsIklhIiwiSmEiLCJLYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwic3RhdGVOb2RlIiwiUGEiLCJRYSIsIlJhIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIlNhIiwiRiIsIlRhIiwiVWEiLCJ0YWciLCJWYSIsIlhhIiwicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJMIiwiZGIiLCJkaXNwYXRjaENvbmZpZyIsImViIiwiX3RhcmdldEluc3QiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwiYWx0ZXJuYXRlIiwia2IiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImxiIiwibWIiLCJNIiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm5iIiwib2IiLCJwYiIsInFiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIk4iLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwic2IiLCJldmVudFBvb2wiLCJ0YiIsImRlc3RydWN0b3IiLCJyYiIsImdldFBvb2xlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJleHRlbmQiLCJ1YiIsInZiIiwid2IiLCJ4YiIsInliIiwiZG9jdW1lbnRNb2RlIiwiemIiLCJBYiIsIkJiIiwiS2IiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiTGIiLCJNYiIsImtleUNvZGUiLCJOYiIsImRldGFpbCIsIk9iIiwiUmIiLCJ3aGljaCIsIlBiIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwiUWIiLCJTYiIsIlRiIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsIlViIiwiVmIiLCJXYiIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJYYiIsIlliIiwiWmIiLCIkYiIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGltZSIsIndlZWsiLCJnYyIsImhjIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJpYyIsImpjIiwibGMiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsImtjIiwibWMiLCJuYyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJPIiwib2MiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCIkJHR5cGVvZiIsIkJjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJDYyIsIkRjIiwiRWMiLCJVIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIlYiLCJTYyIsIlRjIiwiVWMiLCJHYyIsIkhjIiwiRmMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIlZjIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJXYyIsIlhjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIlljIiwiWmMiLCIkYyIsImFkIiwidGFiSW5kZXgiLCJiZCIsImNoYW5nZSIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImpkIiwiZGV0YWNoRXZlbnQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwicGQiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwicWQiLCJyZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJzZCIsImdldE1vZGlmaWVyU3RhdGUiLCJ0ZCIsInVkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwidmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsIndkIiwicGFyZW50V2luZG93IiwiZWZmZWN0VGFnIiwieWQiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiemQiLCJBZCIsImNoaWxkIiwic2libGluZyIsIkJkIiwiRGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiRWQiLCJjbGlwYm9hcmREYXRhIiwiRmQiLCJHZCIsImNoYXJDb2RlIiwiSGQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiSWQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiSmQiLCJyZXBlYXQiLCJsb2NhbGUiLCJLZCIsImRhdGFUcmFuc2ZlciIsIkxkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIk1kIiwiTmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIk9kIiwiUGQiLCJRZCIsImlzSW50ZXJhY3RpdmUiLCJSZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIlNkIiwiVGQiLCJVZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiVmQiLCJXZCIsIlciLCJYZCIsIllkIiwiWmQiLCIkZCIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJhZSIsImJlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiY2UiLCJkZSIsImVlIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsImZlIiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wU2Nyb2xsIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wVGV4dElucHV0IiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wV2hlZWwiLCJnZSIsInRvcEFib3J0IiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsImhlIiwiaWUiLCJqZSIsImtlIiwibGUiLCJtZSIsInRleHRDb250ZW50IiwibmUiLCJjb250ZW50RWRpdGFibGUiLCJvZSIsInBlIiwic2VsZWN0IiwicWUiLCJzZSIsInRlIiwidWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsInZlIiwib25TZWxlY3QiLCJ4ZSIsInBlbmRpbmdQcm9wcyIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJtb2RlIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImV4cGlyYXRpb25UaW1lIiwiemUiLCJBZSIsImlzUmVhY3RDb21wb25lbnQiLCJCZSIsIkNlIiwiRGUiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJFZSIsIkZlIiwiR2UiLCJJZSIsIkplIiwiS2UiLCJiYXNlU3RhdGUiLCJmaXJzdCIsImxhc3QiLCJjYWxsYmFja0xpc3QiLCJoYXNGb3JjZVVwZGF0ZSIsImlzSW5pdGlhbGl6ZWQiLCJjYXB0dXJlZFZhbHVlcyIsIkxlIiwiU2V0IiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJRZSIsInBhcnRpYWxTdGF0ZSIsIlJlIiwiaXNSZXBsYWNlIiwiaXNGb3JjZWQiLCJjYXB0dXJlZFZhbHVlIiwiU2UiLCJVZSIsIlZlIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIldlIiwiWGUiLCJNYXAiLCJ6IiwiQiIsInEiLCJ1IiwidCIsIlEiLCJIIiwiWWUiLCJaZSIsIiRlIiwicGVuZGluZ0NvbnRleHQiLCJZIiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlIiwicHVzaEhvc3RDb250ZXh0IiwicHVzaEhvc3RDb250YWluZXIiLCJHIiwicHVzaFByb3ZpZGVyIiwiUiIsImdldE1hc2tlZENvbnRleHQiLCJTIiwiZ2V0VW5tYXNrZWRDb250ZXh0IiwiaGFzQ29udGV4dENoYW5nZWQiLCJwdXNoQ29udGV4dFByb3ZpZGVyIiwicHVzaFRvcExldmVsQ29udGV4dE9iamVjdCIsImludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIiLCJlbnRlckh5ZHJhdGlvblN0YXRlIiwiV2EiLCJyZXNldEh5ZHJhdGlvblN0YXRlIiwiQ2IiLCJ0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsIkpjIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJ1cGRhdGVyIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiY2FjaGVDb250ZXh0IiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc01vdW50ZWQiLCJlbnF1ZXVlU2V0U3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJhZG9wdENsYXNzSW5zdGFuY2UiLCJjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29uc3RydWN0Q2xhc3NJbnN0YW5jZSIsIm1vdW50Q2xhc3NJbnN0YW5jZSIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsInJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSIsInVwZGF0ZUNsYXNzSW5zdGFuY2UiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJUZSIsIktjIiwiTGMiLCJEYiIsIk1jIiwiRWIiLCJiZWdpbldvcmsiLCJoeWRyYXRlIiwiX2NvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2NoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiY2YiLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiZWYiLCJsZiIsIkkiLCJZYSIsIloiLCJOYyIsInlhIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiT2MiLCJaYSIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsImNvbXBvbmVudERpZENhdGNoIiwiaWEiLCJ6YSIsImRhIiwiRmIiLCJ4ZyIsInllIiwiSWMiLCJQYyIsIkdiIiwibWciLCJRYyIsImxnIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsIksiLCJsYSIsIlQiLCJKIiwiSGIiLCJhYSIsIlAiLCIkYSIsIkliIiwiQWEiLCJfb25Db21wbGV0ZSIsIndnIiwiQmEiLCJKYiIsImZpbmlzaGVkV29yayIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJ6ZyIsInciLCJrZyIsIndlIiwiZ2ciLCJBZyIsImhnIiwiaWciLCJqZyIsInRpbWVSZW1haW5pbmciLCJCZyIsImNyZWF0ZUN1cnNvciIsImlzRW1wdHkiLCJjaGVja1RoYXRTdGFja0lzRW1wdHkiLCJyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXYiLCJrZiIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwiZmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciIsInBvcENvbnRleHRQcm92aWRlciIsInBvcFRvcExldmVsQ29udGV4dE9iamVjdCIsImN1cnNvciIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0IiwiaGYiLCJwb3BQcm92aWRlciIsImpmIiwiaHlkcmF0aW9uIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwicG9wSHlkcmF0aW9uU3RhdGUiLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2YiLCJjcmVhdGVJbnN0YW5jZSIsImNyZWF0ZVRleHRJbnN0YW5jZSIsImFwcGVuZEluaXRpYWxDaGlsZCIsImZpbmFsaXplSW5pdGlhbENoaWxkcmVuIiwicHJlcGFyZVVwZGF0ZSIsInBlcnNpc3RlbmNlIiwibXV0YXRpb24iLCJjb21wbGV0ZVdvcmsiLCJoYW5kbGVyIiwiYWYiLCJ0aHJvd0V4Y2VwdGlvbiIsInVud2luZFdvcmsiLCJ1bndpbmRJbnRlcnJ1cHRlZFdvcmsiLCJiZiIsImdldFB1YmxpY0luc3RhbmNlIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tbWl0UmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdExpZmVDeWNsZXMiLCJjb21taXRFcnJvckxvZ2dpbmciLCJjb21wb25lbnRTdGFjayIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImRmIiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwiY2FuY2VsRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiUmMiLCJyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsInJlcXVlc3RXb3JrIiwiZmx1c2hSb290IiwiYmF0Y2hlZFVwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmx1c2hDb250cm9sbGVkIiwiZGVmZXJyZWRVcGRhdGVzIiwic3luY1VwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJsZWdhY3lDb250ZXh0IiwibWYiLCJjcmVhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lIiwiZ2V0UHVibGljUm9vdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzIiwiQ2QiLCJpbmplY3RJbnRvRGV2VG9vbHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIkhlIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJuZiIsIm9mIiwicGYiLCJyZiIsInBlcmZvcm1hbmNlIiwic2YiLCJ0ZiIsInVmIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJkaWRUaW1lb3V0IiwiRGYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJFZiIsInBvc3RNZXNzYWdlIiwiR2YiLCJDaGlsZHJlbiIsIkZmIiwiSGYiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIklmIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIkpmIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIm1hdGhtbCIsInN2ZyIsIk9mIiwiUGYiLCJRZiIsIlJmIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIlNmIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiVGYiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJVZiIsIlZmIiwic2V0UHJvcGVydHkiLCJXZiIsIm1lbnVpdGVtIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJjcmVhdGVFbGVtZW50TlMiLCJiZyIsImNnIiwiX19odG1sIiwib25DbGljayIsIm9uY2xpY2siLCJkZyIsImVnIiwiZmciLCJuZyIsIm9nIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJkaWZmUHJvcGVydGllcyIsInVwZGF0ZVByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkVGV4dCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicGciLCJxZyIsInJnIiwiWCIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwic2ciLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwidGciLCJfaW50ZXJuYWxSb290IiwidWciLCJ2ZyIsImF1dG9Gb2N1cyIsInRoZW4iLCJjb21taXQiLCJ1bm1vdW50IiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY3JlYXRlQmF0Y2giLCJ0YWdOYW1lIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJoaWRkZW4iLCJkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZSIsIkNnIiwiRWciLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiRGciLCJGZyIsInFmIiwiR2ciLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIkhnIiwiSWciLCJjaGVja0RDRSIsIl9fc2VsZiIsIl9fc291cmNlIiwia2V5UHJlZml4IiwiPSIsIjoiLCJlc2NhcGUiLCJjcmVhdGVSZWYiLCJjcmVhdGVDb250ZXh0IiwiX2RlZmF1bHRWYWx1ZSIsIkNvbnN1bWVyIiwiZm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsInVuc3RhYmxlX0FzeW5jTW9kZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsIl9yZWR1eCIsIlJlYWN0RE9NIiwiX0FwcDIiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BWixFQUFBbUIsRUFBQSxTQUFBakIsR0FDQVksT0FBQUMsZUFBQWIsRUFBQSxjQUFpRGtCLE9BQUEsS0FJakRwQixFQUFBcUIsRUFBQSxTQUFBbEIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBbUIsV0FDQSxXQUEyQixPQUFBbkIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQVUsRUFBQUMsR0FBc0QsT0FBQVYsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUFnQixFQUFBQyxJQUd0RHhCLEVBQUEyQixFQUFBLEdBSUEzQixJQUFBNEIsRUFBQSxvQkNuRUEsSUFBQUMsRUFHQUEsRUFBQSxXQUNBLE9BQUFDLEtBREEsR0FJQSxJQUVBRCxLQUFBRSxTQUFBLGNBQUFBLEtBQUEsRUFBQUMsTUFBQSxRQUNDLE1BQUFDLEdBRUQsaUJBQUFDLFNBQUFMLEVBQUFL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QUFBeWxFLEVBQUE3dEQsYUFBWTJPLFdBQVMsRUFBQWsvQyxFQUFBcnJELGlCQUFnQjJNLFlBRW5EeFcsVUFBT25VLEdBQUcsa0JBQW1CLFNBQUF6SCxHQUMzQnFMLEVBQU1sQixVQUFTLEVBQUF3bkIsRUFBQTVWLGdCQUFlbGMsS0FBS3FiLE1BQU1sYixPQUczQzRiLFVBQU9uVSxHQUFHLHVCQUF3QixTQUFBMlUsR0FDaEMvUSxFQUFNbEIsVUFBUyxFQUFBd25CLEVBQUF4VixxQkFBb0J0YyxLQUFLcWIsTUFBTWtCLE9BR2hEL1EsRUFBTWxCLFVBQVMsRUFBQXduQixFQUFBMVYseUJBRWY4MEQsVUFBU2hsRSxPQUNQNm1CLEVBQUFDLFFBQUF4VCxjQUFDbVQsRUFBQS9uQixVQUFTWSxNQUFPQSxHQUNmdW5CLEVBQUFDLFFBQUF4VCxjQUFDMnhELEVBQUFuK0MsUUFBRCxPQUVGbDBCLFNBQVNzeUUsZUFBZSx3Q0MxQjFCLFNBQUEvd0UsR0FDQSxJQUFBMjNCLEVBQUEsaUJBQUEzM0IsUUFBQXpFLGlCQUFBeUUsRUFFQWltQixFQUFBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gODkpO1xuIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaCAoZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZVxuICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlXG4gICAgICAgICAgICAgICAgICA/IGNocm9tZS5zdG9yYWdlLmxvY2FsXG4gICAgICAgICAgICAgICAgICA6IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcbiAgJyMwMDAwQ0MnLCAnIzAwMDBGRicsICcjMDAzM0NDJywgJyMwMDMzRkYnLCAnIzAwNjZDQycsICcjMDA2NkZGJywgJyMwMDk5Q0MnLFxuICAnIzAwOTlGRicsICcjMDBDQzAwJywgJyMwMENDMzMnLCAnIzAwQ0M2NicsICcjMDBDQzk5JywgJyMwMENDQ0MnLCAnIzAwQ0NGRicsXG4gICcjMzMwMENDJywgJyMzMzAwRkYnLCAnIzMzMzNDQycsICcjMzMzM0ZGJywgJyMzMzY2Q0MnLCAnIzMzNjZGRicsICcjMzM5OUNDJyxcbiAgJyMzMzk5RkYnLCAnIzMzQ0MwMCcsICcjMzNDQzMzJywgJyMzM0NDNjYnLCAnIzMzQ0M5OScsICcjMzNDQ0NDJywgJyMzM0NDRkYnLFxuICAnIzY2MDBDQycsICcjNjYwMEZGJywgJyM2NjMzQ0MnLCAnIzY2MzNGRicsICcjNjZDQzAwJywgJyM2NkNDMzMnLCAnIzk5MDBDQycsXG4gICcjOTkwMEZGJywgJyM5OTMzQ0MnLCAnIzk5MzNGRicsICcjOTlDQzAwJywgJyM5OUNDMzMnLCAnI0NDMDAwMCcsICcjQ0MwMDMzJyxcbiAgJyNDQzAwNjYnLCAnI0NDMDA5OScsICcjQ0MwMENDJywgJyNDQzAwRkYnLCAnI0NDMzMwMCcsICcjQ0MzMzMzJywgJyNDQzMzNjYnLFxuICAnI0NDMzM5OScsICcjQ0MzM0NDJywgJyNDQzMzRkYnLCAnI0NDNjYwMCcsICcjQ0M2NjMzJywgJyNDQzk5MDAnLCAnI0NDOTkzMycsXG4gICcjQ0NDQzAwJywgJyNDQ0NDMzMnLCAnI0ZGMDAwMCcsICcjRkYwMDMzJywgJyNGRjAwNjYnLCAnI0ZGMDA5OScsICcjRkYwMENDJyxcbiAgJyNGRjAwRkYnLCAnI0ZGMzMwMCcsICcjRkYzMzMzJywgJyNGRjMzNjYnLCAnI0ZGMzM5OScsICcjRkYzM0NDJywgJyNGRjMzRkYnLFxuICAnI0ZGNjYwMCcsICcjRkY2NjMzJywgJyNGRjk5MDAnLCAnI0ZGOTkzMycsICcjRkZDQzAwJywgJyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gIHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnIubWVzc2FnZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm47XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKVxuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcbnZhciBoYXNCaW5hcnkgPSByZXF1aXJlKCdoYXMtYmluYXJ5MicpO1xudmFyIHNsaWNlQnVmZmVyID0gcmVxdWlyZSgnYXJyYXlidWZmZXIuc2xpY2UnKTtcbnZhciBhZnRlciA9IHJlcXVpcmUoJ2FmdGVyJyk7XG52YXIgdXRmOCA9IHJlcXVpcmUoJy4vdXRmOCcpO1xuXG52YXIgYmFzZTY0ZW5jb2RlcjtcbmlmIChnbG9iYWwgJiYgZ2xvYmFsLkFycmF5QnVmZmVyKSB7XG4gIGJhc2U2NGVuY29kZXIgPSByZXF1aXJlKCdiYXNlNjQtYXJyYXlidWZmZXInKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBhbiBhbmRyb2lkIGJyb3dzZXIuIFRoYXQgcmVxdWlyZXMgdXMgdG8gdXNlXG4gKiBBcnJheUJ1ZmZlciB3aXRoIHBvbGxpbmcgdHJhbnNwb3J0cy4uLlxuICpcbiAqIGh0dHA6Ly9naGluZGEubmV0L2pwZWctYmxvYi1hamF4LWFuZHJvaWQvXG4gKi9cblxudmFyIGlzQW5kcm9pZCA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9BbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBpbiBQaGFudG9tSlMuXG4gKiBVcGxvYWRpbmcgYSBCbG9iIHdpdGggUGhhbnRvbUpTIGRvZXMgbm90IHdvcmsgY29ycmVjdGx5LCBhcyByZXBvcnRlZCBoZXJlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2FyaXlhL3BoYW50b21qcy9pc3N1ZXMvMTEzOTVcbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xudmFyIGlzUGhhbnRvbUpTID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL1BoYW50b21KUy9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogV2hlbiB0cnVlLCBhdm9pZHMgdXNpbmcgQmxvYnMgdG8gZW5jb2RlIHBheWxvYWRzLlxuICogQHR5cGUgYm9vbGVhblxuICovXG52YXIgZG9udFNlbmRCbG9icyA9IGlzQW5kcm9pZCB8fCBpc1BoYW50b21KUztcblxuLyoqXG4gKiBDdXJyZW50IHByb3RvY29sIHZlcnNpb24uXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICovXG5cbnZhciBwYWNrZXRzID0gZXhwb3J0cy5wYWNrZXRzID0ge1xuICAgIG9wZW46ICAgICAwICAgIC8vIG5vbi13c1xuICAsIGNsb3NlOiAgICAxICAgIC8vIG5vbi13c1xuICAsIHBpbmc6ICAgICAyXG4gICwgcG9uZzogICAgIDNcbiAgLCBtZXNzYWdlOiAgNFxuICAsIHVwZ3JhZGU6ICA1XG4gICwgbm9vcDogICAgIDZcbn07XG5cbnZhciBwYWNrZXRzbGlzdCA9IGtleXMocGFja2V0cyk7XG5cbi8qKlxuICogUHJlbWFkZSBlcnJvciBwYWNrZXQuXG4gKi9cblxudmFyIGVyciA9IHsgdHlwZTogJ2Vycm9yJywgZGF0YTogJ3BhcnNlciBlcnJvcicgfTtcblxuLyoqXG4gKiBDcmVhdGUgYSBibG9iIGFwaSBldmVuIGZvciBibG9iIGJ1aWxkZXIgd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcbiAqL1xuXG52YXIgQmxvYiA9IHJlcXVpcmUoJ2Jsb2InKTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgcGFja2V0LlxuICpcbiAqICAgICA8cGFja2V0IHR5cGUgaWQ+IFsgPGRhdGE+IF1cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICA1aGVsbG8gd29ybGRcbiAqICAgICAzXG4gKiAgICAgNFxuICpcbiAqIEJpbmFyeSBpcyBlbmNvZGVkIGluIGFuIGlkZW50aWNhbCBwcmluY2lwbGVcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCB1dGY4ZW5jb2RlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHN1cHBvcnRzQmluYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcbiAgICBzdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB1dGY4ZW5jb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSB1dGY4ZW5jb2RlO1xuICAgIHV0ZjhlbmNvZGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIGRhdGEgPSAocGFja2V0LmRhdGEgPT09IHVuZGVmaW5lZClcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogcGFja2V0LmRhdGEuYnVmZmVyIHx8IHBhY2tldC5kYXRhO1xuXG4gIGlmIChnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGVuY29kZUFycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChCbG9iICYmIGRhdGEgaW5zdGFuY2VvZiBnbG9iYWwuQmxvYikge1xuICAgIHJldHVybiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIG1pZ2h0IGJlIGFuIG9iamVjdCB3aXRoIHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBkYXRhQXNCYXNlNjRTdHJpbmcgfVxuICBpZiAoZGF0YSAmJiBkYXRhLmJhc2U2NCkge1xuICAgIHJldHVybiBlbmNvZGVCYXNlNjRPYmplY3QocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBTZW5kaW5nIGRhdGEgYXMgYSB1dGYtOCBzdHJpbmdcbiAgdmFyIGVuY29kZWQgPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcblxuICAvLyBkYXRhIGZyYWdtZW50IGlzIG9wdGlvbmFsXG4gIGlmICh1bmRlZmluZWQgIT09IHBhY2tldC5kYXRhKSB7XG4gICAgZW5jb2RlZCArPSB1dGY4ZW5jb2RlID8gdXRmOC5lbmNvZGUoU3RyaW5nKHBhY2tldC5kYXRhKSwgeyBzdHJpY3Q6IGZhbHNlIH0pIDogU3RyaW5nKHBhY2tldC5kYXRhKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjaygnJyArIGVuY29kZWQpO1xuXG59O1xuXG5mdW5jdGlvbiBlbmNvZGVCYXNlNjRPYmplY3QocGFja2V0LCBjYWxsYmFjaykge1xuICAvLyBwYWNrZXQgZGF0YSBpcyBhbiBvYmplY3QgeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9XG4gIHZhciBtZXNzYWdlID0gJ2InICsgZXhwb3J0cy5wYWNrZXRzW3BhY2tldC50eXBlXSArIHBhY2tldC5kYXRhLmRhdGE7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn1cblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGhlbHBlcnMgZm9yIGJpbmFyeSB0eXBlc1xuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHBhY2tldC5kYXRhO1xuICB2YXIgY29udGVudEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIHZhciByZXN1bHRCdWZmZXIgPSBuZXcgVWludDhBcnJheSgxICsgZGF0YS5ieXRlTGVuZ3RoKTtcblxuICByZXN1bHRCdWZmZXJbMF0gPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRCdWZmZXJbaSsxXSA9IGNvbnRlbnRBcnJheVtpXTtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjayhyZXN1bHRCdWZmZXIuYnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIHBhY2tldC5kYXRhID0gZnIucmVzdWx0O1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIHRydWUsIGNhbGxiYWNrKTtcbiAgfTtcbiAgcmV0dXJuIGZyLnJlYWRBc0FycmF5QnVmZmVyKHBhY2tldC5kYXRhKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKGRvbnRTZW5kQmxvYnMpIHtcbiAgICByZXR1cm4gZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9IG5ldyBVaW50OEFycmF5KDEpO1xuICBsZW5ndGhbMF0gPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgdmFyIGJsb2IgPSBuZXcgQmxvYihbbGVuZ3RoLmJ1ZmZlciwgcGFja2V0LmRhdGFdKTtcblxuICByZXR1cm4gY2FsbGJhY2soYmxvYik7XG59XG5cbi8qKlxuICogRW5jb2RlcyBhIHBhY2tldCB3aXRoIGJpbmFyeSBkYXRhIGluIGEgYmFzZTY0IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQsIGhhcyBgdHlwZWAgYW5kIGBkYXRhYFxuICogQHJldHVybiB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGNhbGxiYWNrKSB7XG4gIHZhciBtZXNzYWdlID0gJ2InICsgZXhwb3J0cy5wYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgaWYgKEJsb2IgJiYgcGFja2V0LmRhdGEgaW5zdGFuY2VvZiBnbG9iYWwuQmxvYikge1xuICAgIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYjY0ID0gZnIucmVzdWx0LnNwbGl0KCcsJylbMV07XG4gICAgICBjYWxsYmFjayhtZXNzYWdlICsgYjY0KTtcbiAgICB9O1xuICAgIHJldHVybiBmci5yZWFkQXNEYXRhVVJMKHBhY2tldC5kYXRhKTtcbiAgfVxuXG4gIHZhciBiNjRkYXRhO1xuICB0cnkge1xuICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB3aXRoIHR5cGVkIGFycmF5c1xuICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKTtcbiAgICB2YXIgYmFzaWMgPSBuZXcgQXJyYXkodHlwZWQubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBiYXNpY1tpXSA9IHR5cGVkW2ldO1xuICAgIH1cbiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBiYXNpYyk7XG4gIH1cbiAgbWVzc2FnZSArPSBnbG9iYWwuYnRvYShiNjRkYXRhKTtcbiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgcGFja2V0LiBDaGFuZ2VzIGZvcm1hdCB0byBCbG9iIGlmIHJlcXVlc3RlZC5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZGVjb2RlUGFja2V0ID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIHV0ZjhkZWNvZGUpIHtcbiAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlcnI7XG4gIH1cbiAgLy8gU3RyaW5nIGRhdGFcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGlmIChkYXRhLmNoYXJBdCgwKSA9PT0gJ2InKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQoZGF0YS5zdWJzdHIoMSksIGJpbmFyeVR5cGUpO1xuICAgIH1cblxuICAgIGlmICh1dGY4ZGVjb2RlKSB7XG4gICAgICBkYXRhID0gdHJ5RGVjb2RlKGRhdGEpO1xuICAgICAgaWYgKGRhdGEgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciB0eXBlID0gZGF0YS5jaGFyQXQoMCk7XG5cbiAgICBpZiAoTnVtYmVyKHR5cGUpICE9IHR5cGUgfHwgIXBhY2tldHNsaXN0W3R5cGVdKSB7XG4gICAgICByZXR1cm4gZXJyO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiBkYXRhLnN1YnN0cmluZygxKSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBhc0FycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIHZhciB0eXBlID0gYXNBcnJheVswXTtcbiAgdmFyIHJlc3QgPSBzbGljZUJ1ZmZlcihkYXRhLCAxKTtcbiAgaWYgKEJsb2IgJiYgYmluYXJ5VHlwZSA9PT0gJ2Jsb2InKSB7XG4gICAgcmVzdCA9IG5ldyBCbG9iKFtyZXN0XSk7XG4gIH1cbiAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IHJlc3QgfTtcbn07XG5cbmZ1bmN0aW9uIHRyeURlY29kZShkYXRhKSB7XG4gIHRyeSB7XG4gICAgZGF0YSA9IHV0ZjguZGVjb2RlKGRhdGEsIHsgc3RyaWN0OiBmYWxzZSB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBEZWNvZGVzIGEgcGFja2V0IGVuY29kZWQgaW4gYSBiYXNlNjQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIG1lc3NhZ2VcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBgdHlwZWAgYW5kIGBkYXRhYCAoaWYgYW55KVxuICovXG5cbmV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24obXNnLCBiaW5hcnlUeXBlKSB7XG4gIHZhciB0eXBlID0gcGFja2V0c2xpc3RbbXNnLmNoYXJBdCgwKV07XG4gIGlmICghYmFzZTY0ZW5jb2Rlcikge1xuICAgIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBtc2cuc3Vic3RyKDEpIH0gfTtcbiAgfVxuXG4gIHZhciBkYXRhID0gYmFzZTY0ZW5jb2Rlci5kZWNvZGUobXNnLnN1YnN0cigxKSk7XG5cbiAgaWYgKGJpbmFyeVR5cGUgPT09ICdibG9iJyAmJiBCbG9iKSB7XG4gICAgZGF0YSA9IG5ldyBCbG9iKFtkYXRhXSk7XG4gIH1cblxuICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiBkYXRhIH07XG59O1xuXG4vKipcbiAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpLlxuICpcbiAqICAgICA8bGVuZ3RoPjpkYXRhXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgMTE6aGVsbG8gd29ybGQyOmhpXG4gKlxuICogSWYgYW55IGNvbnRlbnRzIGFyZSBiaW5hcnksIHRoZXkgd2lsbCBiZSBlbmNvZGVkIGFzIGJhc2U2NCBzdHJpbmdzLiBCYXNlNjRcbiAqIGVuY29kZWQgc3RyaW5ncyBhcmUgbWFya2VkIHdpdGggYSBiIGJlZm9yZSB0aGUgbGVuZ3RoIHNwZWNpZmllclxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChwYWNrZXRzLCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBudWxsO1xuICB9XG5cbiAgdmFyIGlzQmluYXJ5ID0gaGFzQmluYXJ5KHBhY2tldHMpO1xuXG4gIGlmIChzdXBwb3J0c0JpbmFyeSAmJiBpc0JpbmFyeSkge1xuICAgIGlmIChCbG9iICYmICFkb250U2VuZEJsb2JzKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iKHBhY2tldHMsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlcihwYWNrZXRzLCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCcwOicpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbWVzc2FnZS5sZW5ndGggKyAnOicgKyBtZXNzYWdlO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCAhaXNCaW5hcnkgPyBmYWxzZSA6IHN1cHBvcnRzQmluYXJ5LCBmYWxzZSwgZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgZG9uZUNhbGxiYWNrKG51bGwsIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSk7XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0cy5qb2luKCcnKSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBBc3luYyBhcnJheSBtYXAgdXNpbmcgYWZ0ZXJcbiAqL1xuXG5mdW5jdGlvbiBtYXAoYXJ5LCBlYWNoLCBkb25lKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoYXJ5Lmxlbmd0aCk7XG4gIHZhciBuZXh0ID0gYWZ0ZXIoYXJ5Lmxlbmd0aCwgZG9uZSk7XG5cbiAgdmFyIGVhY2hXaXRoSW5kZXggPSBmdW5jdGlvbihpLCBlbCwgY2IpIHtcbiAgICBlYWNoKGVsLCBmdW5jdGlvbihlcnJvciwgbXNnKSB7XG4gICAgICByZXN1bHRbaV0gPSBtc2c7XG4gICAgICBjYihlcnJvciwgcmVzdWx0KTtcbiAgICB9KTtcbiAgfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkrKykge1xuICAgIGVhY2hXaXRoSW5kZXgoaSwgYXJ5W2ldLCBuZXh0KTtcbiAgfVxufVxuXG4vKlxuICogRGVjb2RlcyBkYXRhIHdoZW4gYSBwYXlsb2FkIGlzIG1heWJlIGV4cGVjdGVkLiBQb3NzaWJsZSBiaW5hcnkgY29udGVudHMgYXJlXG4gKiBkZWNvZGVkIGZyb20gdGhlaXIgYmFzZTY0IHJlcHJlc2VudGF0aW9uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBheWxvYWQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBleHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeShkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XG4gIH1cblxuICB2YXIgcGFja2V0O1xuICBpZiAoZGF0YSA9PT0gJycpIHtcbiAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gJycsIG4sIG1zZztcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNociA9IGRhdGEuY2hhckF0KGkpO1xuXG4gICAgaWYgKGNociAhPT0gJzonKSB7XG4gICAgICBsZW5ndGggKz0gY2hyO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGxlbmd0aCA9PT0gJycgfHwgKGxlbmd0aCAhPSAobiA9IE51bWJlcihsZW5ndGgpKSkpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIG1zZyA9IGRhdGEuc3Vic3RyKGkgKyAxLCBuKTtcblxuICAgIGlmIChsZW5ndGggIT0gbXNnLmxlbmd0aCkge1xuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgfVxuXG4gICAgaWYgKG1zZy5sZW5ndGgpIHtcbiAgICAgIHBhY2tldCA9IGV4cG9ydHMuZGVjb2RlUGFja2V0KG1zZywgYmluYXJ5VHlwZSwgZmFsc2UpO1xuXG4gICAgICBpZiAoZXJyLnR5cGUgPT09IHBhY2tldC50eXBlICYmIGVyci5kYXRhID09PSBwYWNrZXQuZGF0YSkge1xuICAgICAgICAvLyBwYXJzZXIgZXJyb3IgaW4gaW5kaXZpZHVhbCBwYWNrZXQgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmV0ID0gY2FsbGJhY2socGFja2V0LCBpICsgbiwgbCk7XG4gICAgICBpZiAoZmFsc2UgPT09IHJldCkgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGFkdmFuY2UgY3Vyc29yXG4gICAgaSArPSBuO1xuICAgIGxlbmd0aCA9ICcnO1xuICB9XG5cbiAgaWYgKGxlbmd0aCAhPT0gJycpIHtcbiAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gIH1cblxufTtcblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKSBhcyBiaW5hcnkuXG4gKlxuICogPDEgPSBiaW5hcnksIDAgPSBzdHJpbmc+PG51bWJlciBmcm9tIDAtOT48bnVtYmVyIGZyb20gMC05PlsuLi5dPG51bWJlclxuICogMjU1PjxkYXRhPlxuICpcbiAqIEV4YW1wbGU6XG4gKiAxIDMgMjU1IDEgMiAzLCBpZiB0aGUgYmluYXJ5IGNvbnRlbnRzIGFyZSBpbnRlcnByZXRlZCBhcyA4IGJpdCBpbnRlZ2Vyc1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBlbmNvZGVkIHBheWxvYWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbihwYWNrZXRzLCBjYWxsYmFjaykge1xuICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBBcnJheUJ1ZmZlcigwKSk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiBkb25lQ2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIGVuY29kZWRQYWNrZXRzKSB7XG4gICAgdmFyIHRvdGFsTGVuZ3RoID0gZW5jb2RlZFBhY2tldHMucmVkdWNlKGZ1bmN0aW9uKGFjYywgcCkge1xuICAgICAgdmFyIGxlbjtcbiAgICAgIGlmICh0eXBlb2YgcCA9PT0gJ3N0cmluZycpe1xuICAgICAgICBsZW4gPSBwLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlbiA9IHAuYnl0ZUxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2MgKyBsZW4udG9TdHJpbmcoKS5sZW5ndGggKyBsZW4gKyAyOyAvLyBzdHJpbmcvYmluYXJ5IGlkZW50aWZpZXIgKyBzZXBhcmF0b3IgPSAyXG4gICAgfSwgMCk7XG5cbiAgICB2YXIgcmVzdWx0QXJyYXkgPSBuZXcgVWludDhBcnJheSh0b3RhbExlbmd0aCk7XG5cbiAgICB2YXIgYnVmZmVySW5kZXggPSAwO1xuICAgIGVuY29kZWRQYWNrZXRzLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgdmFyIGlzU3RyaW5nID0gdHlwZW9mIHAgPT09ICdzdHJpbmcnO1xuICAgICAgdmFyIGFiID0gcDtcbiAgICAgIGlmIChpc1N0cmluZykge1xuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KHAubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmlld1tpXSA9IHAuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBhYiA9IHZpZXcuYnVmZmVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNTdHJpbmcpIHsgLy8gbm90IHRydWUgYmluYXJ5XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMDtcbiAgICAgIH0gZWxzZSB7IC8vIHRydWUgYmluYXJ5XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlblN0ciA9IGFiLmJ5dGVMZW5ndGgudG9TdHJpbmcoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuU3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gcGFyc2VJbnQobGVuU3RyW2ldKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMjU1O1xuXG4gICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGFiKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHZpZXdbaV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0QXJyYXkuYnVmZmVyKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEVuY29kZSBhcyBCbG9iXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihlbmNvZGVkKSB7XG4gICAgICB2YXIgYmluYXJ5SWRlbnRpZmllciA9IG5ldyBVaW50OEFycmF5KDEpO1xuICAgICAgYmluYXJ5SWRlbnRpZmllclswXSA9IDE7XG4gICAgICBpZiAodHlwZW9mIGVuY29kZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZC5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2aWV3W2ldID0gZW5jb2RlZC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGVuY29kZWQgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgICAgYmluYXJ5SWRlbnRpZmllclswXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW4gPSAoZW5jb2RlZCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKVxuICAgICAgICA/IGVuY29kZWQuYnl0ZUxlbmd0aFxuICAgICAgICA6IGVuY29kZWQuc2l6ZTtcblxuICAgICAgdmFyIGxlblN0ciA9IGxlbi50b1N0cmluZygpO1xuICAgICAgdmFyIGxlbmd0aEFyeSA9IG5ldyBVaW50OEFycmF5KGxlblN0ci5sZW5ndGggKyAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuU3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxlbmd0aEFyeVtpXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XG4gICAgICB9XG4gICAgICBsZW5ndGhBcnlbbGVuU3RyLmxlbmd0aF0gPSAyNTU7XG5cbiAgICAgIGlmIChCbG9iKSB7XG4gICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2JpbmFyeUlkZW50aWZpZXIuYnVmZmVyLCBsZW5ndGhBcnkuYnVmZmVyLCBlbmNvZGVkXSk7XG4gICAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBibG9iKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQmxvYihyZXN1bHRzKSk7XG4gIH0pO1xufTtcblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gU3RyaW5ncyBhcmUgZGVjb2RlZCBieVxuICogaW50ZXJwcmV0aW5nIGVhY2ggYnl0ZSBhcyBhIGtleSBjb2RlIGZvciBlbnRyaWVzIG1hcmtlZCB0byBzdGFydCB3aXRoIDAuIFNlZVxuICogZGVzY3JpcHRpb24gb2YgZW5jb2RlUGF5bG9hZEFzQmluYXJ5XG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gZGF0YSwgY2FsbGJhY2sgbWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5ID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gYmluYXJ5VHlwZTtcbiAgICBiaW5hcnlUeXBlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBidWZmZXJUYWlsID0gZGF0YTtcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcblxuICB3aGlsZSAoYnVmZmVyVGFpbC5ieXRlTGVuZ3RoID4gMCkge1xuICAgIHZhciB0YWlsQXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXJUYWlsKTtcbiAgICB2YXIgaXNTdHJpbmcgPSB0YWlsQXJyYXlbMF0gPT09IDA7XG4gICAgdmFyIG1zZ0xlbmd0aCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IDsgaSsrKSB7XG4gICAgICBpZiAodGFpbEFycmF5W2ldID09PSAyNTUpIGJyZWFrO1xuXG4gICAgICAvLyAzMTAgPSBjaGFyIGxlbmd0aCBvZiBOdW1iZXIuTUFYX1ZBTFVFXG4gICAgICBpZiAobXNnTGVuZ3RoLmxlbmd0aCA+IDMxMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgbXNnTGVuZ3RoICs9IHRhaWxBcnJheVtpXTtcbiAgICB9XG5cbiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgMiArIG1zZ0xlbmd0aC5sZW5ndGgpO1xuICAgIG1zZ0xlbmd0aCA9IHBhcnNlSW50KG1zZ0xlbmd0aCk7XG5cbiAgICB2YXIgbXNnID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgMCwgbXNnTGVuZ3RoKTtcbiAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG1zZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkobXNnKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHRvIHR5cGVkIGFycmF5c1xuICAgICAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShtc2cpO1xuICAgICAgICBtc2cgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG1zZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHR5cGVkW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGJ1ZmZlcnMucHVzaChtc2cpO1xuICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCBtc2dMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRvdGFsID0gYnVmZmVycy5sZW5ndGg7XG4gIGJ1ZmZlcnMuZm9yRWFjaChmdW5jdGlvbihidWZmZXIsIGkpIHtcbiAgICBjYWxsYmFjayhleHBvcnRzLmRlY29kZVBhY2tldChidWZmZXIsIGJpbmFyeVR5cGUsIHRydWUpLCBpLCB0b3RhbCk7XG4gIH0pO1xufTtcbiIsIlxyXG4vKipcclxuICogRXhwb3NlIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xyXG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcclxuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcclxuICAgIC5wdXNoKGZuKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xyXG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIG9uLmZuID0gZm47XHJcbiAgdGhpcy5vbihldmVudCwgb24pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgLy8gYWxsXHJcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHNwZWNpZmljIGV2ZW50XHJcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXHJcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgdmFyIGNiO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcclxuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XHJcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXHJcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcblxyXG4gIGlmIChjYWxsYmFja3MpIHtcclxuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XHJcbn07XHJcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhLCBiKXtcbiAgdmFyIGZuID0gZnVuY3Rpb24oKXt9O1xuICBmbi5wcm90b3R5cGUgPSBiLnByb3RvdHlwZTtcbiAgYS5wcm90b3R5cGUgPSBuZXcgZm47XG4gIGEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gYTtcbn07IiwiLyoqXHJcbiAqIENvbXBpbGVzIGEgcXVlcnlzdHJpbmdcclxuICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgdmFyIHN0ciA9ICcnO1xyXG5cclxuICBmb3IgKHZhciBpIGluIG9iaikge1xyXG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG4gICAgICBpZiAoc3RyLmxlbmd0aCkgc3RyICs9ICcmJztcclxuICAgICAgc3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0cjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgYSBzaW1wbGUgcXVlcnlzdHJpbmcgaW50byBhbiBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHFzXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24ocXMpe1xyXG4gIHZhciBxcnkgPSB7fTtcclxuICB2YXIgcGFpcnMgPSBxcy5zcGxpdCgnJicpO1xyXG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XHJcbiAgICBxcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcclxuICB9XHJcbiAgcmV0dXJuIHFyeTtcclxufTtcclxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IHZhciBzdWJzY3JpcHRpb25TaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHRyeVN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdHJ5VW5zdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG5vdGlmeU5lc3RlZFN1YnM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzU3Vic2NyaWJlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7XG5cbmV4cG9ydCB2YXIgc3RvcmVTaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB7IENvbXBvbmVudCwgQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZyc7XG5cbnZhciBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IGZhbHNlO1xuZnVuY3Rpb24gd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKSB7XG4gIGlmIChkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IHRydWU7XG5cbiAgd2FybmluZygnPFByb3ZpZGVyPiBkb2VzIG5vdCBzdXBwb3J0IGNoYW5naW5nIGBzdG9yZWAgb24gdGhlIGZseS4gJyArICdJdCBpcyBtb3N0IGxpa2VseSB0aGF0IHlvdSBzZWUgdGhpcyBlcnJvciBiZWNhdXNlIHlvdSB1cGRhdGVkIHRvICcgKyAnUmVkdXggMi54IGFuZCBSZWFjdCBSZWR1eCAyLnggd2hpY2ggbm8gbG9uZ2VyIGhvdCByZWxvYWQgcmVkdWNlcnMgJyArICdhdXRvbWF0aWNhbGx5LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtcmVkdXgvcmVsZWFzZXMvJyArICd0YWcvdjIuMC4wIGZvciB0aGUgbWlncmF0aW9uIGluc3RydWN0aW9ucy4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVyKCkge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4O1xuXG4gIHZhciBzdG9yZUtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3N0b3JlJztcbiAgdmFyIHN1YktleSA9IGFyZ3VtZW50c1sxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3ViS2V5IHx8IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG5cbiAgdmFyIFByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW3N0b3JlS2V5XSA9IHRoaXNbc3RvcmVLZXldLCBfcmVmW3N1YnNjcmlwdGlvbktleV0gPSBudWxsLCBfcmVmO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcywgY29udGV4dCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgIF90aGlzW3N0b3JlS2V5XSA9IHByb3BzLnN0b3JlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzW3N0b3JlS2V5XSAhPT0gbmV4dFByb3BzLnN0b3JlKSB7XG4gICAgICAgIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogc3RvcmVTaGFwZS5pc1JlcXVpcmVkLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXG4gIH07XG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3RvcmVLZXldID0gc3RvcmVTaGFwZS5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHJldHVybiBQcm92aWRlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJvdmlkZXIoKTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG5cbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBuZXh0ID0gQ0xFQVJFRDtcbiAgICAgIGN1cnJlbnQgPSBDTEVBUkVEO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudCA9IG5leHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgY3VycmVudCA9PT0gQ0xFQVJFRCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIsIG9uU3RhdGVDaGFuZ2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3Vic2NyaXB0aW9uKTtcblxuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UgPSBvblN0YXRlQ2hhbmdlO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgfVxuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMub25TdGF0ZUNoYW5nZSkgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLm9uU3RhdGVDaGFuZ2UpO1xuXG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcblxudmFyIGhvdFJlbG9hZGluZ1ZlcnNpb24gPSAwO1xudmFyIGR1bW15U3RhdGUgPSB7fTtcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZnVuY3Rpb24gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHN0b3JlKSB7XG4gIC8vIHdyYXAgdGhlIHNlbGVjdG9yIGluIGFuIG9iamVjdCB0aGF0IHRyYWNrcyBpdHMgcmVzdWx0cyBiZXR3ZWVuIHJ1bnMuXG4gIHZhciBzZWxlY3RvciA9IHtcbiAgICBydW46IGZ1bmN0aW9uIHJ1bkNvbXBvbmVudFNlbGVjdG9yKHByb3BzKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gc291cmNlU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgcHJvcHMpO1xuICAgICAgICBpZiAobmV4dFByb3BzICE9PSBzZWxlY3Rvci5wcm9wcyB8fCBzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgc2VsZWN0b3IucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICBzZWxlY3Rvci5lcnJvciA9IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxuICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcbiAgICB9KSkoWW91ckNvbXBvbmVudClcbiAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXG4qL1xuc2VsZWN0b3JGYWN0b3J5KSB7XG4gIHZhciBfY29udGV4dFR5cGVzLCBfY2hpbGRDb250ZXh0VHlwZXM7XG5cbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRnZXREaXNwbGF5TmFtZSA9IF9yZWYuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYkZ2V0RGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICdDb25uZWN0QWR2YW5jZWQoJyArIG5hbWUgKyAnKSc7XG4gIH0gOiBfcmVmJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZiRtZXRob2ROYW1lID0gX3JlZi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYkbWV0aG9kTmFtZSA9PT0gdW5kZWZpbmVkID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmJHJlbmRlckNvdW50UHJvcCA9IF9yZWYucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZiRyZW5kZXJDb3VudFByb3AgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9yZWYkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZiRzaG91bGRIYW5kbGVTdGF0ID0gX3JlZi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmJHNob3VsZEhhbmRsZVN0YXQsXG4gICAgICBfcmVmJHN0b3JlS2V5ID0gX3JlZi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZiRzdG9yZUtleSA9PT0gdW5kZWZpbmVkID8gJ3N0b3JlJyA6IF9yZWYkc3RvcmVLZXksXG4gICAgICBfcmVmJHdpdGhSZWYgPSBfcmVmLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZiR3aXRoUmVmID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkd2l0aFJlZixcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnZ2V0RGlzcGxheU5hbWUnLCAnbWV0aG9kTmFtZScsICdyZW5kZXJDb3VudFByb3AnLCAnc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzJywgJ3N0b3JlS2V5JywgJ3dpdGhSZWYnXSk7XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG4gIHZhciB2ZXJzaW9uID0gaG90UmVsb2FkaW5nVmVyc2lvbisrO1xuXG4gIHZhciBjb250ZXh0VHlwZXMgPSAoX2NvbnRleHRUeXBlcyA9IHt9LCBfY29udGV4dFR5cGVzW3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUsIF9jb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY29udGV4dFR5cGVzKTtcbiAgdmFyIGNoaWxkQ29udGV4dFR5cGVzID0gKF9jaGlsZENvbnRleHRUeXBlcyA9IHt9LCBfY2hpbGRDb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY2hpbGRDb250ZXh0VHlwZXMpO1xuXG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGludmFyaWFudCh0eXBlb2YgV3JhcHBlZENvbXBvbmVudCA9PSAnZnVuY3Rpb24nLCAnWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgJyArIChtZXRob2ROYW1lICsgJy4gSW5zdGVhZCByZWNlaXZlZCAnICsgSlNPTi5zdHJpbmdpZnkoV3JhcHBlZENvbXBvbmVudCkpKTtcblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgd2l0aFJlZjogd2l0aFJlZixcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBDb25uZWN0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0cyhDb25uZWN0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcywgY29udGV4dCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgICAgX3RoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIF90aGlzLnN0YXRlID0ge307XG4gICAgICAgIF90aGlzLnJlbmRlckNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuc3RvcmUgPSBwcm9wc1tzdG9yZUtleV0gfHwgY29udGV4dFtzdG9yZUtleV07XG4gICAgICAgIF90aGlzLnByb3BzTW9kZSA9IEJvb2xlYW4ocHJvcHNbc3RvcmVLZXldKTtcbiAgICAgICAgX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlID0gX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlLmJpbmQoX3RoaXMpO1xuXG4gICAgICAgIGludmFyaWFudChfdGhpcy5zdG9yZSwgJ0NvdWxkIG5vdCBmaW5kIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGluIGVpdGhlciB0aGUgY29udGV4dCBvciBwcm9wcyBvZiAnICsgKCdcIicgKyBkaXNwbGF5TmFtZSArICdcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgJykgKyAoJ29yIGV4cGxpY2l0bHkgcGFzcyBcIicgKyBzdG9yZUtleSArICdcIiBhcyBhIHByb3AgdG8gXCInICsgZGlzcGxheU5hbWUgKyAnXCIuJykpO1xuXG4gICAgICAgIF90aGlzLmluaXRTZWxlY3RvcigpO1xuICAgICAgICBfdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgICB2YXIgX3JlZjI7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgcmVjZWl2ZWQgc3RvcmUgZnJvbSBwcm9wcywgaXRzIHN1YnNjcmlwdGlvbiBzaG91bGQgYmUgdHJhbnNwYXJlbnRcbiAgICAgICAgLy8gdG8gYW55IGRlc2NlbmRhbnRzIHJlY2VpdmluZyBzdG9yZStzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0OyBpdCBwYXNzZXMgYWxvbmdcbiAgICAgICAgLy8gc3Vic2NyaXB0aW9uIHBhc3NlZCB0byBpdC4gT3RoZXJ3aXNlLCBpdCBzaGFkb3dzIHRoZSBwYXJlbnQgc3Vic2NyaXB0aW9uLCB3aGljaCBhbGxvd3NcbiAgICAgICAgLy8gQ29ubmVjdCB0byBjb250cm9sIG9yZGVyaW5nIG9mIG5vdGlmaWNhdGlvbnMgdG8gZmxvdyB0b3AtZG93bi5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMucHJvcHNNb2RlID8gbnVsbCA6IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gX3JlZjIgPSB7fSwgX3JlZjJbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvbiB8fCB0aGlzLmNvbnRleHRbc3Vic2NyaXB0aW9uS2V5XSwgX3JlZjI7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuO1xuXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudCBmaXJlcyBkdXJpbmcgc2VydmVyIHNpZGUgcmVuZGVyaW5nLCBidXQgY29tcG9uZW50RGlkTW91bnQgYW5kXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGRvIG5vdC4gQmVjYXVzZSBvZiB0aGlzLCB0cnlTdWJzY3JpYmUgaGFwcGVucyBkdXJpbmcgLi4uZGlkTW91bnQuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgdW5zdWJzY3JpcHRpb24gd291bGQgbmV2ZXIgdGFrZSBwbGFjZSBkdXJpbmcgU1NSLCBjYXVzaW5nIGEgbWVtb3J5IGxlYWsuXG4gICAgICAgIC8vIFRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhIGNoaWxkIGNvbXBvbmVudCBtYXkgaGF2ZSB0cmlnZ2VyZWQgYSBzdGF0ZSBjaGFuZ2UgYnlcbiAgICAgICAgLy8gZGlzcGF0Y2hpbmcgYW4gYWN0aW9uIGluIGl0cyBjb21wb25lbnRXaWxsTW91bnQsIHdlIGhhdmUgdG8gcmUtcnVuIHRoZSBzZWxlY3QgYW5kIG1heWJlXG4gICAgICAgIC8vIHJlLXJlbmRlci5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bihuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGU7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzID0gbm9vcDtcbiAgICAgICAgdGhpcy5zdG9yZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuID0gbm9vcDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmdldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIGdldFdyYXBwZWRJbnN0YW5jZSgpIHtcbiAgICAgICAgaW52YXJpYW50KHdpdGhSZWYsICdUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHlvdSBuZWVkIHRvIHNwZWNpZnkgJyArICgneyB3aXRoUmVmOiB0cnVlIH0gaW4gdGhlIG9wdGlvbnMgYXJndW1lbnQgb2YgdGhlICcgKyBtZXRob2ROYW1lICsgJygpIGNhbGwuJykpO1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVkSW5zdGFuY2U7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBzZXRXcmFwcGVkSW5zdGFuY2UocmVmKSB7XG4gICAgICAgIHRoaXMud3JhcHBlZEluc3RhbmNlID0gcmVmO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFNlbGVjdG9yID0gZnVuY3Rpb24gaW5pdFNlbGVjdG9yKCkge1xuICAgICAgICB2YXIgc291cmNlU2VsZWN0b3IgPSBzZWxlY3RvckZhY3RvcnkodGhpcy5zdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3RvciwgdGhpcy5zdG9yZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIGluaXRTdWJzY3JpcHRpb24oKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gcGFyZW50U3ViJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG4gICAgICAgIHZhciBwYXJlbnRTdWIgPSAodGhpcy5wcm9wc01vZGUgPyB0aGlzLnByb3BzIDogdGhpcy5jb250ZXh0KVtzdWJzY3JpcHRpb25LZXldO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcy5zdG9yZSwgcGFyZW50U3ViLCB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHRoaXMuc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gQW5cbiAgICAgICAgLy8gZXh0cmEgbnVsbCBjaGVjayBldmVyeSBjaGFuZ2UgY2FuIGJlIGF2b2lkZWQgYnkgY29weWluZyB0aGUgbWV0aG9kIG9udG8gYHRoaXNgIGFuZCB0aGVuXG4gICAgICAgIC8vIHJlcGxhY2luZyBpdCB3aXRoIGEgbm8tb3Agb24gdW5tb3VudC4gVGhpcyBjYW4gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24nc1xuICAgICAgICAvLyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnMgdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZVxuICAgICAgICAvLyBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQodGhpcy5zdWJzY3JpcHRpb24pO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHRoaXMubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZHVtbXlTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgLy8gYGNvbXBvbmVudERpZFVwZGF0ZWAgaXMgY29uZGl0aW9uYWxseSBpbXBsZW1lbnRlZCB3aGVuIGBvblN0YXRlQ2hhbmdlYCBkZXRlcm1pbmVzIGl0XG4gICAgICAgIC8vIG5lZWRzIHRvIG5vdGlmeSBuZXN0ZWQgc3Vicy4gT25jZSBjYWxsZWQsIGl0IHVuaW1wbGVtZW50cyBpdHNlbGYgdW50aWwgZnVydGhlciBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VzIG9jY3VyLiBEb2luZyBpdCB0aGlzIHdheSB2cyBoYXZpbmcgYSBwZXJtYW5lbnQgYGNvbXBvbmVudERpZFVwZGF0ZWAgdGhhdCBkb2VzXG4gICAgICAgIC8vIGEgYm9vbGVhbiBjaGVjayBldmVyeSB0aW1lIGF2b2lkcyBhbiBleHRyYSBtZXRob2QgY2FsbCBtb3N0IG9mIHRoZSB0aW1lLCByZXN1bHRpbmdcbiAgICAgICAgLy8gaW4gc29tZSBwZXJmIGJvb3N0LlxuICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuc3Vic2NyaXB0aW9uKSAmJiB0aGlzLnN1YnNjcmlwdGlvbi5pc1N1YnNjcmliZWQoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmFkZEV4dHJhUHJvcHMgPSBmdW5jdGlvbiBhZGRFeHRyYVByb3BzKHByb3BzKSB7XG4gICAgICAgIGlmICghd2l0aFJlZiAmJiAhcmVuZGVyQ291bnRQcm9wICYmICEodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pKSByZXR1cm4gcHJvcHM7XG4gICAgICAgIC8vIG1ha2UgYSBzaGFsbG93IGNvcHkgc28gdGhhdCBmaWVsZHMgYWRkZWQgZG9uJ3QgbGVhayB0byB0aGUgb3JpZ2luYWwgc2VsZWN0b3IuXG4gICAgICAgIC8vIHRoaXMgaXMgZXNwZWNpYWxseSBpbXBvcnRhbnQgZm9yICdyZWYnIHNpbmNlIHRoYXQncyBhIHJlZmVyZW5jZSBiYWNrIHRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaW5zdGFuY2UuIGEgc2luZ2xldG9uIG1lbW9pemVkIHNlbGVjdG9yIHdvdWxkIHRoZW4gYmUgaG9sZGluZyBhIHJlZmVyZW5jZSB0byB0aGVcbiAgICAgICAgLy8gaW5zdGFuY2UsIHByZXZlbnRpbmcgdGhlIGluc3RhbmNlIGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWQsIGFuZCB0aGF0IHdvdWxkIGJlIGJhZFxuICAgICAgICB2YXIgd2l0aEV4dHJhcyA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gICAgICAgIGlmICh3aXRoUmVmKSB3aXRoRXh0cmFzLnJlZiA9IHRoaXMuc2V0V3JhcHBlZEluc3RhbmNlO1xuICAgICAgICBpZiAocmVuZGVyQ291bnRQcm9wKSB3aXRoRXh0cmFzW3JlbmRlckNvdW50UHJvcF0gPSB0aGlzLnJlbmRlckNvdW50Kys7XG4gICAgICAgIGlmICh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikgd2l0aEV4dHJhc1tzdWJzY3JpcHRpb25LZXldID0gdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiB3aXRoRXh0cmFzO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yO1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IuZXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBzZWxlY3Rvci5lcnJvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCB0aGlzLmFkZEV4dHJhUHJvcHMoc2VsZWN0b3IucHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIENvbm5lY3Q7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgQ29ubmVjdC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QucHJvcFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAvLyBXZSBhcmUgaG90IHJlbG9hZGluZyFcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiAhPT0gdmVyc2lvbikge1xuICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgdGhpcy5pbml0U2VsZWN0b3IoKTtcblxuICAgICAgICAgIC8vIElmIGFueSBjb25uZWN0ZWQgZGVzY2VuZGFudHMgZG9uJ3QgaG90IHJlbG9hZCAoYW5kIHJlc3Vic2NyaWJlIGluIHRoZSBwcm9jZXNzKSwgdGhlaXJcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMgd2lsbCBiZSBsb3N0IHdoZW4gd2UgdW5zdWJzY3JpYmUuIFVuZm9ydHVuYXRlbHksIGJ5IGNvcHlpbmcgb3ZlciBhbGxcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMsIHRoaXMgZG9lcyBtZWFuIHRoYXQgdGhlIG9sZCB2ZXJzaW9ucyBvZiBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd2lsbCBzdGlsbCBiZVxuICAgICAgICAgIC8vIG5vdGlmaWVkIG9mIHN0YXRlIGNoYW5nZXM7IGhvd2V2ZXIsIHRoZWlyIG9uU3RhdGVDaGFuZ2UgZnVuY3Rpb24gaXMgYSBuby1vcCBzbyB0aGlzXG4gICAgICAgICAgLy8gaXNuJ3QgYSBodWdlIGRlYWwuXG4gICAgICAgICAgdmFyIG9sZExpc3RlbmVycyA9IFtdO1xuXG4gICAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBvbGRMaXN0ZW5lcnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuZ2V0KCk7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG4iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59XG5cbi8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy8gXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufVxuXG4vLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vLyBcbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vICAgIFxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9O1xuXG4gICAgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcblxuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHsgZGlzcGF0Y2g6IGRpc3BhdGNoIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcblxuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcblxuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlID0gdm9pZCAwO1xuICB2YXIgb3duUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBzdGF0ZVByb3BzID0gdm9pZCAwO1xuICB2YXIgZGlzcGF0Y2hQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuXG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcblxuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuXG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn1cblxuLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcblxuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydpbml0TWFwU3RhdGVUb1Byb3BzJywgJ2luaXRNYXBEaXNwYXRjaFRvUHJvcHMnLCAnaW5pdE1lcmdlUHJvcHMnXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5JztcblxuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIG9mIHR5cGUgJyArIHR5cGVvZiBhcmcgKyAnIGZvciAnICsgbmFtZSArICcgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCAnICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArICcuJyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbi8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHVuZGVmaW5lZCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKSB7XG4gICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fSxcbiAgICAgICAgX3JlZjIkcHVyZSA9IF9yZWYyLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMiRwdXJlID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjIkcHVyZSxcbiAgICAgICAgX3JlZjIkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9PT0gdW5kZWZpbmVkID8gc3RyaWN0RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjIkYXJlT3duUHJvcHNFcXVhID0gX3JlZjIuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYyJGFyZU93blByb3BzRXF1YSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMi5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMi5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjIkYXJlTWVyZ2VkUHJvcHNFID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydwdXJlJywgJ2FyZVN0YXRlc0VxdWFsJywgJ2FyZU93blByb3BzRXF1YWwnLCAnYXJlU3RhdGVQcm9wc0VxdWFsJywgJ2FyZU1lcmdlZFByb3BzRXF1YWwnXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG5cbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcblxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdDb25uZWN0KCcgKyBuYW1lICsgJyknO1xuICAgICAgfSxcblxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG5cbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydDtcblxuLyoqXG4gKiBUcmFuc3BvcnQgYWJzdHJhY3QgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBUcmFuc3BvcnQgKG9wdHMpIHtcbiAgdGhpcy5wYXRoID0gb3B0cy5wYXRoO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZTtcbiAgdGhpcy5wb3J0ID0gb3B0cy5wb3J0O1xuICB0aGlzLnNlY3VyZSA9IG9wdHMuc2VjdXJlO1xuICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW07XG4gIHRoaXMudGltZXN0YW1wUmVxdWVzdHMgPSBvcHRzLnRpbWVzdGFtcFJlcXVlc3RzO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQgfHwgZmFsc2U7XG4gIHRoaXMuc29ja2V0ID0gb3B0cy5zb2NrZXQ7XG4gIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5wZnggPSBvcHRzLnBmeDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleTtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlO1xuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQ7XG4gIHRoaXMuY2EgPSBvcHRzLmNhO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnM7XG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gb3B0cy5mb3JjZU5vZGU7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcbiAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoVHJhbnNwb3J0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRW1pdHMgYW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKG1zZywgZGVzYykge1xuICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gIGVyci50eXBlID0gJ1RyYW5zcG9ydEVycm9yJztcbiAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPcGVucyB0aGUgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICAgIHRoaXMuZG9PcGVuKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5kb0Nsb3NlKCk7XG4gICAgdGhpcy5vbkNsb3NlKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgbXVsdGlwbGUgcGFja2V0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IG5vdCBvcGVuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gb3BlblxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgcGFja2V0ID0gcGFyc2VyLmRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0LlxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy5lbWl0KCdjbG9zZScpO1xufTtcbiIsIi8vIGJyb3dzZXIgc2hpbSBmb3IgeG1saHR0cHJlcXVlc3QgbW9kdWxlXG5cbnZhciBoYXNDT1JTID0gcmVxdWlyZSgnaGFzLWNvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjtcblxuICAvLyBzY2hlbWUgbXVzdCBiZSBzYW1lIHdoZW4gdXNpZ24gWERvbWFpblJlcXVlc3RcbiAgLy8gaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWVpbnRlcm5hbHMvYXJjaGl2ZS8yMDEwLzA1LzEzL3hkb21haW5yZXF1ZXN0LXJlc3RyaWN0aW9ucy1saW1pdGF0aW9ucy1hbmQtd29ya2Fyb3VuZHMuYXNweFxuICB2YXIgeHNjaGVtZSA9IG9wdHMueHNjaGVtZTtcblxuICAvLyBYRG9tYWluUmVxdWVzdCBoYXMgYSBmbG93IG9mIG5vdCBzZW5kaW5nIGNvb2tpZSwgdGhlcmVmb3JlIGl0IHNob3VsZCBiZSBkaXNhYmxlZCBhcyBhIGRlZmF1bHQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2VuZ2luZS5pby1jbGllbnQvcHVsbC8yMTdcbiAgdmFyIGVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIG9uIElFXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgJiYgKCF4ZG9tYWluIHx8IGhhc0NPUlMpKSB7XG4gICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICAvLyBVc2UgWERvbWFpblJlcXVlc3QgZm9yIElFOCBpZiBlbmFibGVzWERSIGlzIHRydWVcbiAgLy8gYmVjYXVzZSBsb2FkaW5nIGJhciBrZWVwcyBmbGFzaGluZyB3aGVuIHVzaW5nIGpzb25wLXBvbGxpbmdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3l1amlvc2FrYS9zb2NrZS5pby1pZTgtbG9hZGluZy1leGFtcGxlXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWERvbWFpblJlcXVlc3QgJiYgIXhzY2hlbWUgJiYgZW5hYmxlc1hEUikge1xuICAgICAgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgaWYgKCF4ZG9tYWluKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsW1snQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJyldKCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xuICAgIH0gY2F0Y2ggKGUpIHsgfVxuICB9XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGJpbmFyeSA9IHJlcXVpcmUoJy4vYmluYXJ5Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudHlwZXMgPSBbXG4gICdDT05ORUNUJyxcbiAgJ0RJU0NPTk5FQ1QnLFxuICAnRVZFTlQnLFxuICAnQUNLJyxcbiAgJ0VSUk9SJyxcbiAgJ0JJTkFSWV9FVkVOVCcsXG4gICdCSU5BUllfQUNLJ1xuXTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgY29ubmVjdGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkNPTk5FQ1QgPSAwO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBkaXNjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRElTQ09OTkVDVCA9IDE7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGV2ZW50YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVZFTlQgPSAyO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBhY2tgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5BQ0sgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBlcnJvcmAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVSUk9SID0gNDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSAnYmluYXJ5IGV2ZW50J1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfRVZFTlQgPSA1O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBiaW5hcnkgYWNrYC4gRm9yIGFja3Mgd2l0aCBiaW5hcnkgYXJndW1lbnRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfQUNLID0gNjtcblxuLyoqXG4gKiBFbmNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FbmNvZGVyID0gRW5jb2RlcjtcblxuLyoqXG4gKiBEZWNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5EZWNvZGVyID0gRGVjb2RlcjtcblxuLyoqXG4gKiBBIHNvY2tldC5pbyBFbmNvZGVyIGluc3RhbmNlXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBFbmNvZGVyKCkge31cblxudmFyIEVSUk9SX1BBQ0tFVCA9IGV4cG9ydHMuRVJST1IgKyAnXCJlbmNvZGUgZXJyb3JcIic7XG5cbi8qKlxuICogRW5jb2RlIGEgcGFja2V0IGFzIGEgc2luZ2xlIHN0cmluZyBpZiBub24tYmluYXJ5LCBvciBhcyBhXG4gKiBidWZmZXIgc2VxdWVuY2UsIGRlcGVuZGluZyBvbiBwYWNrZXQgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gcGFja2V0IG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBoYW5kbGUgZW5jb2RpbmdzIChsaWtlbHkgZW5naW5lLndyaXRlKVxuICogQHJldHVybiBDYWxscyBjYWxsYmFjayB3aXRoIEFycmF5IG9mIGVuY29kaW5nc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbihvYmosIGNhbGxiYWNrKXtcbiAgZGVidWcoJ2VuY29kaW5nIHBhY2tldCAlaicsIG9iaik7XG5cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVuY29kaW5nID0gZW5jb2RlQXNTdHJpbmcob2JqKTtcbiAgICBjYWxsYmFjayhbZW5jb2RpbmddKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IGVuY29kZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFzU3RyaW5nKG9iaikge1xuXG4gIC8vIGZpcnN0IGlzIHR5cGVcbiAgdmFyIHN0ciA9ICcnICsgb2JqLnR5cGU7XG5cbiAgLy8gYXR0YWNobWVudHMgaWYgd2UgaGF2ZSB0aGVtXG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gb2JqLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBvYmoudHlwZSkge1xuICAgIHN0ciArPSBvYmouYXR0YWNobWVudHMgKyAnLSc7XG4gIH1cblxuICAvLyBpZiB3ZSBoYXZlIGEgbmFtZXNwYWNlIG90aGVyIHRoYW4gYC9gXG4gIC8vIHdlIGFwcGVuZCBpdCBmb2xsb3dlZCBieSBhIGNvbW1hIGAsYFxuICBpZiAob2JqLm5zcCAmJiAnLycgIT09IG9iai5uc3ApIHtcbiAgICBzdHIgKz0gb2JqLm5zcCArICcsJztcbiAgfVxuXG4gIC8vIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHRoZSBpZFxuICBpZiAobnVsbCAhPSBvYmouaWQpIHtcbiAgICBzdHIgKz0gb2JqLmlkO1xuICB9XG5cbiAgLy8ganNvbiBkYXRhXG4gIGlmIChudWxsICE9IG9iai5kYXRhKSB7XG4gICAgdmFyIHBheWxvYWQgPSB0cnlTdHJpbmdpZnkob2JqLmRhdGEpO1xuICAgIGlmIChwYXlsb2FkICE9PSBmYWxzZSkge1xuICAgICAgc3RyICs9IHBheWxvYWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBFUlJPUl9QQUNLRVQ7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ2VuY29kZWQgJWogYXMgJXMnLCBvYmosIHN0cik7XG4gIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIHRyeVN0cmluZ2lmeShzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RyKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzICdidWZmZXIgc2VxdWVuY2UnIGJ5IHJlbW92aW5nIGJsb2JzLCBhbmRcbiAqIGRlY29uc3RydWN0aW5nIHBhY2tldCBpbnRvIG9iamVjdCB3aXRoIHBsYWNlaG9sZGVycyBhbmRcbiAqIGEgbGlzdCBvZiBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0J1ZmZlcn0gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjaykge1xuXG4gIGZ1bmN0aW9uIHdyaXRlRW5jb2RpbmcoYmxvYmxlc3NEYXRhKSB7XG4gICAgdmFyIGRlY29uc3RydWN0aW9uID0gYmluYXJ5LmRlY29uc3RydWN0UGFja2V0KGJsb2JsZXNzRGF0YSk7XG4gICAgdmFyIHBhY2sgPSBlbmNvZGVBc1N0cmluZyhkZWNvbnN0cnVjdGlvbi5wYWNrZXQpO1xuICAgIHZhciBidWZmZXJzID0gZGVjb25zdHJ1Y3Rpb24uYnVmZmVycztcblxuICAgIGJ1ZmZlcnMudW5zaGlmdChwYWNrKTsgLy8gYWRkIHBhY2tldCBpbmZvIHRvIGJlZ2lubmluZyBvZiBkYXRhIGxpc3RcbiAgICBjYWxsYmFjayhidWZmZXJzKTsgLy8gd3JpdGUgYWxsIHRoZSBidWZmZXJzXG4gIH1cblxuICBiaW5hcnkucmVtb3ZlQmxvYnMob2JqLCB3cml0ZUVuY29kaW5nKTtcbn1cblxuLyoqXG4gKiBBIHNvY2tldC5pbyBEZWNvZGVyIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBkZWNvZGVyXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIERlY29kZXIoKSB7XG4gIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYCB3aXRoIERlY29kZXIuXG4gKi9cblxuRW1pdHRlcihEZWNvZGVyLnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGVjb2RlcyBhbiBlY29kZWQgcGFja2V0IHN0cmluZyBpbnRvIHBhY2tldCBKU09OLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBvYmogLSBlbmNvZGVkIHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciBwYWNrZXQ7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgIHBhY2tldCA9IGRlY29kZVN0cmluZyhvYmopO1xuICAgIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcGFja2V0LnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwYWNrZXQudHlwZSkgeyAvLyBiaW5hcnkgcGFja2V0J3MganNvblxuICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KTtcblxuICAgICAgLy8gbm8gYXR0YWNobWVudHMsIGxhYmVsZWQgYmluYXJ5IGJ1dCBubyBiaW5hcnkgZGF0YSB0byBmb2xsb3dcbiAgICAgIGlmICh0aGlzLnJlY29uc3RydWN0b3IucmVjb25QYWNrLmF0dGFjaG1lbnRzID09PSAwKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHsgLy8gbm9uLWJpbmFyeSBmdWxsIHBhY2tldFxuICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoaXNCdWYob2JqKSB8fCBvYmouYmFzZTY0KSB7IC8vIHJhdyBiaW5hcnkgZGF0YVxuICAgIGlmICghdGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dvdCBiaW5hcnkgZGF0YSB3aGVuIG5vdCByZWNvbnN0cnVjdGluZyBhIHBhY2tldCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYWNrZXQgPSB0aGlzLnJlY29uc3RydWN0b3IudGFrZUJpbmFyeURhdGEob2JqKTtcbiAgICAgIGlmIChwYWNrZXQpIHsgLy8gcmVjZWl2ZWQgZmluYWwgYnVmZmVyXG4gICAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlOiAnICsgb2JqKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBwYWNrZXQgU3RyaW5nIChKU09OIGRhdGEpXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGRlY29kZVN0cmluZyhzdHIpIHtcbiAgdmFyIGkgPSAwO1xuICAvLyBsb29rIHVwIHR5cGVcbiAgdmFyIHAgPSB7XG4gICAgdHlwZTogTnVtYmVyKHN0ci5jaGFyQXQoMCkpXG4gIH07XG5cbiAgaWYgKG51bGwgPT0gZXhwb3J0cy50eXBlc1twLnR5cGVdKSB7XG4gICAgcmV0dXJuIGVycm9yKCd1bmtub3duIHBhY2tldCB0eXBlICcgKyBwLnR5cGUpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBhdHRhY2htZW50cyBpZiB0eXBlIGJpbmFyeVxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHAudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHAudHlwZSkge1xuICAgIHZhciBidWYgPSAnJztcbiAgICB3aGlsZSAoc3RyLmNoYXJBdCgrK2kpICE9PSAnLScpIHtcbiAgICAgIGJ1ZiArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKGkgPT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICAgIGlmIChidWYgIT0gTnVtYmVyKGJ1ZikgfHwgc3RyLmNoYXJBdChpKSAhPT0gJy0nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgYXR0YWNobWVudHMnKTtcbiAgICB9XG4gICAgcC5hdHRhY2htZW50cyA9IE51bWJlcihidWYpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBuYW1lc3BhY2UgKGlmIGFueSlcbiAgaWYgKCcvJyA9PT0gc3RyLmNoYXJBdChpICsgMSkpIHtcbiAgICBwLm5zcCA9ICcnO1xuICAgIHdoaWxlICgrK2kpIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmICgnLCcgPT09IGMpIGJyZWFrO1xuICAgICAgcC5uc3AgKz0gYztcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcC5uc3AgPSAnLyc7XG4gIH1cblxuICAvLyBsb29rIHVwIGlkXG4gIHZhciBuZXh0ID0gc3RyLmNoYXJBdChpICsgMSk7XG4gIGlmICgnJyAhPT0gbmV4dCAmJiBOdW1iZXIobmV4dCkgPT0gbmV4dCkge1xuICAgIHAuaWQgPSAnJztcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAobnVsbCA9PSBjIHx8IE51bWJlcihjKSAhPSBjKSB7XG4gICAgICAgIC0taTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwLmlkICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICAgIHAuaWQgPSBOdW1iZXIocC5pZCk7XG4gIH1cblxuICAvLyBsb29rIHVwIGpzb24gZGF0YVxuICBpZiAoc3RyLmNoYXJBdCgrK2kpKSB7XG4gICAgdmFyIHBheWxvYWQgPSB0cnlQYXJzZShzdHIuc3Vic3RyKGkpKTtcbiAgICB2YXIgaXNQYXlsb2FkVmFsaWQgPSBwYXlsb2FkICE9PSBmYWxzZSAmJiAocC50eXBlID09PSBleHBvcnRzLkVSUk9SIHx8IGlzQXJyYXkocGF5bG9hZCkpO1xuICAgIGlmIChpc1BheWxvYWRWYWxpZCkge1xuICAgICAgcC5kYXRhID0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVycm9yKCdpbnZhbGlkIHBheWxvYWQnKTtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZGVjb2RlZCAlcyBhcyAlaicsIHN0ciwgcCk7XG4gIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiB0cnlQYXJzZShzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIERlYWxsb2NhdGVzIGEgcGFyc2VyJ3MgcmVzb3VyY2VzXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICB0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICB9XG59O1xuXG4vKipcbiAqIEEgbWFuYWdlciBvZiBhIGJpbmFyeSBldmVudCdzICdidWZmZXIgc2VxdWVuY2UnLiBTaG91bGRcbiAqIGJlIGNvbnN0cnVjdGVkIHdoZW5ldmVyIGEgcGFja2V0IG9mIHR5cGUgQklOQVJZX0VWRU5UIGlzXG4gKiBkZWNvZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0JpbmFyeVJlY29uc3RydWN0b3J9IGluaXRpYWxpemVkIHJlY29uc3RydWN0b3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KSB7XG4gIHRoaXMucmVjb25QYWNrID0gcGFja2V0O1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gYmluYXJ5IGRhdGEgcmVjZWl2ZWQgZnJvbSBjb25uZWN0aW9uXG4gKiBhZnRlciBhIEJJTkFSWV9FVkVOVCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXIgfCBBcnJheUJ1ZmZlcn0gYmluRGF0YSAtIHRoZSByYXcgYmluYXJ5IGRhdGEgcmVjZWl2ZWRcbiAqIEByZXR1cm4ge251bGwgfCBPYmplY3R9IHJldHVybnMgbnVsbCBpZiBtb3JlIGJpbmFyeSBkYXRhIGlzIGV4cGVjdGVkIG9yXG4gKiAgIGEgcmVjb25zdHJ1Y3RlZCBwYWNrZXQgb2JqZWN0IGlmIGFsbCBidWZmZXJzIGhhdmUgYmVlbiByZWNlaXZlZC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLnRha2VCaW5hcnlEYXRhID0gZnVuY3Rpb24oYmluRGF0YSkge1xuICB0aGlzLmJ1ZmZlcnMucHVzaChiaW5EYXRhKTtcbiAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IHRoaXMucmVjb25QYWNrLmF0dGFjaG1lbnRzKSB7IC8vIGRvbmUgd2l0aCBidWZmZXIgbGlzdFxuICAgIHZhciBwYWNrZXQgPSBiaW5hcnkucmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7XG4gICAgdGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgcmV0dXJuIHBhY2tldDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogQ2xlYW5zIHVwIGJpbmFyeSBwYWNrZXQgcmVjb25zdHJ1Y3Rpb24gdmFyaWFibGVzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBudWxsO1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn07XG5cbmZ1bmN0aW9uIGVycm9yKG1zZykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGV4cG9ydHMuRVJST1IsXG4gICAgZGF0YTogJ3BhcnNlciBlcnJvcjogJyArIG1zZ1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgcmVxdWlyZSgnc29ja2V0LmlvLWNsaWVudCcpKCk7IiwiaW1wb3J0IFNvY2tldCBmcm9tICcuLi9Tb2NrZXQnO1xuXG5leHBvcnQgY29uc3QgSU5QVVRfQ0hBTkdFID0gJ0lOUFVUX0NIQU5HRSc7XG5leHBvcnQgY29uc3QgUkVDRUlWRV9NRVNTQUdFID0gJ1JFQ0VJVkVfTUVTU0FHRSc7XG5leHBvcnQgY29uc3QgUkVUUklFVkVfQ09OVkVSU0FUSU9OID0gJ1JFVFJJRVZFX0NPTlZFUlNBVElPTic7XG5leHBvcnQgY29uc3QgUkVDRUlWRV9DT05WRVJTQVRJT04gPSAnUkVDRUlWRV9DT05WRVJTQVRJT04nO1xuZXhwb3J0IGNvbnN0IFNFTkRfTUVTU0FHRSA9ICdTRU5EX01FU1NBR0UnO1xuXG4vLyBUSFVOS1xuZXhwb3J0IGZ1bmN0aW9uIHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuXG4gICAgLy8gU2VuZGluZyBtZXNzYWdlXG4gICAgU29ja2V0LmVtaXQoJ1NFTkRfTUVTU0FHRScsIG1lc3NhZ2UpO1xuICAgIGRpc3BhdGNoKHt0eXBlOiBTRU5EX01FU1NBR0UsIHN0YXR1czogJ1N1Y2Nlc3MnfSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWNlaXZlTWVzc2FnZShtZXNzYWdlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogUkVDRUlWRV9NRVNTQUdFLFxuICAgIG1lc3NhZ2VcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJldHJpZXZlQ29udmVyc2F0aW9uKCkge1xuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgIGRpc3BhdGNoKHt0eXBlOiBSRVRSSUVWRV9DT05WRVJTQVRJT059KTtcblxuICAgIFNvY2tldC5lbWl0KCdSRVRSSUVWRV9DT05WRVJTQVRJT04nKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjZWl2ZUNvbnZlcnNhdGlvbihtZXNzYWdlcykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFJFQ0VJVkVfQ09OVkVSU0FUSU9OLFxuICAgIG1lc3NhZ2VzXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnB1dENoYW5nZShuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IElOUFVUX0NIQU5HRSxcbiAgICBuYW1lLFxuICAgIHZhbHVlXG4gIH07XG59IiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6ICdAQHJlZHV4L0lOSVQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyksXG4gIFJFUExBQ0U6ICdAQHJlZHV4L1JFUExBQ0UnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJylcbn07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAoKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgcHJvdG8gPSBvYmo7XG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG5cbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAoKHR5cGVvZiBvYnNlcnZlciA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JzZXJ2ZXIpKSAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4geyB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmUgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9XG5cbiAgLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG4gIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgJ2FjdGlvbiBcIicgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyAnXCInIHx8ICdhbiBhY3Rpb24nO1xuXG4gIHJldHVybiAnR2l2ZW4gJyArIGFjdGlvbkRlc2NyaXB0aW9uICsgJywgcmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiAnICsgJ1RvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gJyArICdJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gJ1RoZSAnICsgYXJndW1lbnROYW1lICsgJyBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFwiJyArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgJ1wiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nICcgKyAoJ2tleXM6IFwiJyArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgJ1wiJyk7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuXG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuICdVbmV4cGVjdGVkICcgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArICcgJyArICgnXCInICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyAnXCIgZm91bmQgaW4gJyArIGFyZ3VtZW50TmFtZSArICcuICcpICsgJ0V4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogJyArICgnXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gJyArICdJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgJyArICdleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5ICcgKyAnbm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvblxcJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCAnICsgJ3lvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSAnQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTl8nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiB0eXBlIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiAnICsgKCdEb25cXCd0IHRyeSB0byBoYW5kbGUgJyArIEFjdGlvblR5cGVzLklOSVQgKyAnIG9yIG90aGVyIGFjdGlvbnMgaW4gXCJyZWR1eC8qXCIgJykgKyAnbmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgJyArICdjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCAnICsgJ2luIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSAnICsgJ2FjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLicpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoJ05vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcIicgKyBrZXkgKyAnXCInKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHZvaWQgMDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yID0gdm9pZCAwO1xuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKCkge1xuICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYWN0aW9uQ3JlYXRvcnMpKSAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCAnICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICsgJy4gJyArICdEaWQgeW91IHdyaXRlIFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cIiBpbnN0ZWFkIG9mIFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiPycpO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhY3Rpb25DcmVhdG9ycyk7XG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cblxuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh1bmRlZmluZWQsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZyhcIllvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nLiBcIiArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIERlZmluZVBsdWdpbiBmb3Igd2VicGFjayAoaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDAzMDAzMSkgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSwgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcyB9O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9uO1xuXG4vKipcbiAqIEhlbHBlciBmb3Igc3Vic2NyaXB0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikge1xuICBvYmoub24oZXYsIGZuKTtcbiAgcmV0dXJuIHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTtcbiAgICB9XG4gIH07XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIHRvQXJyYXkgPSByZXF1aXJlKCd0by1hcnJheScpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDpzb2NrZXQnKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIGhhc0JpbiA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIEludGVybmFsIGV2ZW50cyAoYmxhY2tsaXN0ZWQpLlxuICogVGhlc2UgZXZlbnRzIGNhbid0IGJlIGVtaXR0ZWQgYnkgdGhlIHVzZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIGV2ZW50cyA9IHtcbiAgY29ubmVjdDogMSxcbiAgY29ubmVjdF9lcnJvcjogMSxcbiAgY29ubmVjdF90aW1lb3V0OiAxLFxuICBjb25uZWN0aW5nOiAxLFxuICBkaXNjb25uZWN0OiAxLFxuICBlcnJvcjogMSxcbiAgcmVjb25uZWN0OiAxLFxuICByZWNvbm5lY3RfYXR0ZW1wdDogMSxcbiAgcmVjb25uZWN0X2ZhaWxlZDogMSxcbiAgcmVjb25uZWN0X2Vycm9yOiAxLFxuICByZWNvbm5lY3Rpbmc6IDEsXG4gIHBpbmc6IDEsXG4gIHBvbmc6IDFcbn07XG5cbi8qKlxuICogU2hvcnRjdXQgdG8gYEVtaXR0ZXIjZW1pdGAuXG4gKi9cblxudmFyIGVtaXQgPSBFbWl0dGVyLnByb3RvdHlwZS5lbWl0O1xuXG4vKipcbiAqIGBTb2NrZXRgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0IChpbywgbnNwLCBvcHRzKSB7XG4gIHRoaXMuaW8gPSBpbztcbiAgdGhpcy5uc3AgPSBuc3A7XG4gIHRoaXMuanNvbiA9IHRoaXM7IC8vIGNvbXBhdFxuICB0aGlzLmlkcyA9IDA7XG4gIHRoaXMuYWNrcyA9IHt9O1xuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgdGhpcy5mbGFncyA9IHt9O1xuICBpZiAob3B0cyAmJiBvcHRzLnF1ZXJ5KSB7XG4gICAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIH1cbiAgaWYgKHRoaXMuaW8uYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihTb2NrZXQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gb3BlbiwgY2xvc2UgYW5kIHBhY2tldCBldmVudHNcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnN1YkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc3VicykgcmV0dXJuO1xuXG4gIHZhciBpbyA9IHRoaXMuaW87XG4gIHRoaXMuc3VicyA9IFtcbiAgICBvbihpbywgJ29wZW4nLCBiaW5kKHRoaXMsICdvbm9wZW4nKSksXG4gICAgb24oaW8sICdwYWNrZXQnLCBiaW5kKHRoaXMsICdvbnBhY2tldCcpKSxcbiAgICBvbihpbywgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKVxuICBdO1xufTtcblxuLyoqXG4gKiBcIk9wZW5zXCIgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUub3BlbiA9XG5Tb2NrZXQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkgcmV0dXJuIHRoaXM7XG5cbiAgdGhpcy5zdWJFdmVudHMoKTtcbiAgdGhpcy5pby5vcGVuKCk7IC8vIGVuc3VyZSBvcGVuXG4gIGlmICgnb3BlbicgPT09IHRoaXMuaW8ucmVhZHlTdGF0ZSkgdGhpcy5vbm9wZW4oKTtcbiAgdGhpcy5lbWl0KCdjb25uZWN0aW5nJyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIGBtZXNzYWdlYCBldmVudC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgYXJncy51bnNoaWZ0KCdtZXNzYWdlJyk7XG4gIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlIGBlbWl0YC5cbiAqIElmIHRoZSBldmVudCBpcyBpbiBgZXZlbnRzYCwgaXQncyBlbWl0dGVkIG5vcm1hbGx5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBuYW1lXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKGV2KSB7XG4gIGlmIChldmVudHMuaGFzT3duUHJvcGVydHkoZXYpKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogKHRoaXMuZmxhZ3MuYmluYXJ5ICE9PSB1bmRlZmluZWQgPyB0aGlzLmZsYWdzLmJpbmFyeSA6IGhhc0JpbihhcmdzKSkgPyBwYXJzZXIuQklOQVJZX0VWRU5UIDogcGFyc2VyLkVWRU5ULFxuICAgIGRhdGE6IGFyZ3NcbiAgfTtcblxuICBwYWNrZXQub3B0aW9ucyA9IHt9O1xuICBwYWNrZXQub3B0aW9ucy5jb21wcmVzcyA9ICF0aGlzLmZsYWdzIHx8IGZhbHNlICE9PSB0aGlzLmZsYWdzLmNvbXByZXNzO1xuXG4gIC8vIGV2ZW50IGFjayBjYWxsYmFja1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSkge1xuICAgIGRlYnVnKCdlbWl0dGluZyBwYWNrZXQgd2l0aCBhY2sgaWQgJWQnLCB0aGlzLmlkcyk7XG4gICAgdGhpcy5hY2tzW3RoaXMuaWRzXSA9IGFyZ3MucG9wKCk7XG4gICAgcGFja2V0LmlkID0gdGhpcy5pZHMrKztcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZW5kQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgfVxuXG4gIHRoaXMuZmxhZ3MgPSB7fTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHBhY2tldC5uc3AgPSB0aGlzLm5zcDtcbiAgdGhpcy5pby5wYWNrZXQocGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBvcGVuYC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3RyYW5zcG9ydCBpcyBvcGVuIC0gY29ubmVjdGluZycpO1xuXG4gIC8vIHdyaXRlIGNvbm5lY3QgcGFja2V0IGlmIG5lY2Vzc2FyeVxuICBpZiAoJy8nICE9PSB0aGlzLm5zcCkge1xuICAgIGlmICh0aGlzLnF1ZXJ5KSB7XG4gICAgICB2YXIgcXVlcnkgPSB0eXBlb2YgdGhpcy5xdWVyeSA9PT0gJ29iamVjdCcgPyBwYXJzZXFzLmVuY29kZSh0aGlzLnF1ZXJ5KSA6IHRoaXMucXVlcnk7XG4gICAgICBkZWJ1Zygnc2VuZGluZyBjb25uZWN0IHBhY2tldCB3aXRoIHF1ZXJ5ICVzJywgcXVlcnkpO1xuICAgICAgdGhpcy5wYWNrZXQoe3R5cGU6IHBhcnNlci5DT05ORUNULCBxdWVyeTogcXVlcnl9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYWNrZXQoe3R5cGU6IHBhcnNlci5DT05ORUNUfSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBgY2xvc2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb25cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgZGVidWcoJ2Nsb3NlICglcyknLCByZWFzb24pO1xuICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gIGRlbGV0ZSB0aGlzLmlkO1xuICB0aGlzLmVtaXQoJ2Rpc2Nvbm5lY3QnLCByZWFzb24pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBzb2NrZXQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gcGFja2V0Lm5zcCA9PT0gdGhpcy5uc3A7XG4gIHZhciByb290TmFtZXNwYWNlRXJyb3IgPSBwYWNrZXQudHlwZSA9PT0gcGFyc2VyLkVSUk9SICYmIHBhY2tldC5uc3AgPT09ICcvJztcblxuICBpZiAoIXNhbWVOYW1lc3BhY2UgJiYgIXJvb3ROYW1lc3BhY2VFcnJvcikgcmV0dXJuO1xuXG4gIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICBjYXNlIHBhcnNlci5DT05ORUNUOlxuICAgICAgdGhpcy5vbmNvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQklOQVJZX0VWRU5UOlxuICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkFDSzpcbiAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQklOQVJZX0FDSzpcbiAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRElTQ09OTkVDVDpcbiAgICAgIHRoaXMub25kaXNjb25uZWN0KCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkVSUk9SOlxuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHBhY2tldC5kYXRhKTtcbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25ldmVudCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIGFyZ3MgPSBwYWNrZXQuZGF0YSB8fCBbXTtcbiAgZGVidWcoJ2VtaXR0aW5nIGV2ZW50ICVqJywgYXJncyk7XG5cbiAgaWYgKG51bGwgIT0gcGFja2V0LmlkKSB7XG4gICAgZGVidWcoJ2F0dGFjaGluZyBhY2sgY2FsbGJhY2sgdG8gZXZlbnQnKTtcbiAgICBhcmdzLnB1c2godGhpcy5hY2socGFja2V0LmlkKSk7XG4gIH1cblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5wdXNoKGFyZ3MpO1xuICB9XG59O1xuXG4vKipcbiAqIFByb2R1Y2VzIGFuIGFjayBjYWxsYmFjayB0byBlbWl0IHdpdGggYW4gZXZlbnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5hY2sgPSBmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2VudCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIC8vIHByZXZlbnQgZG91YmxlIGNhbGxiYWNrc1xuICAgIGlmIChzZW50KSByZXR1cm47XG4gICAgc2VudCA9IHRydWU7XG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgZGVidWcoJ3NlbmRpbmcgYWNrICVqJywgYXJncyk7XG5cbiAgICBzZWxmLnBhY2tldCh7XG4gICAgICB0eXBlOiBoYXNCaW4oYXJncykgPyBwYXJzZXIuQklOQVJZX0FDSyA6IHBhcnNlci5BQ0ssXG4gICAgICBpZDogaWQsXG4gICAgICBkYXRhOiBhcmdzXG4gICAgfSk7XG4gIH07XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGFja25vd2xlZ2VtZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25hY2sgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhY2spIHtcbiAgICBkZWJ1ZygnY2FsbGluZyBhY2sgJXMgd2l0aCAlaicsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgIGFjay5hcHBseSh0aGlzLCBwYWNrZXQuZGF0YSk7XG4gICAgZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICB9IGVsc2Uge1xuICAgIGRlYnVnKCdiYWQgYWNrICVzJywgcGFja2V0LmlkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3QnKTtcbiAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbn07XG5cbi8qKlxuICogRW1pdCBidWZmZXJlZCBldmVudHMgKHJlY2VpdmVkIGFuZCBlbWl0dGVkKS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXRCdWZmZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnJlY2VpdmVCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIHRoaXMucmVjZWl2ZUJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucGFja2V0KHRoaXMuc2VuZEJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnc2VydmVyIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgdGhpcy5kZXN0cm95KCk7XG4gIHRoaXMub25jbG9zZSgnaW8gc2VydmVyIGRpc2Nvbm5lY3QnKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZm9yY2VkIGNsaWVudC9zZXJ2ZXIgc2lkZSBkaXNjb25uZWN0aW9ucyxcbiAqIHRoaXMgbWV0aG9kIGVuc3VyZXMgdGhlIG1hbmFnZXIgc3RvcHMgdHJhY2tpbmcgdXMgYW5kXG4gKiB0aGF0IHJlY29ubmVjdGlvbnMgZG9uJ3QgZ2V0IHRyaWdnZXJlZCBmb3IgdGhpcy5cbiAqXG4gKiBAYXBpIHByaXZhdGUuXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSB7XG4gICAgLy8gY2xlYW4gc3Vic2NyaXB0aW9ucyB0byBhdm9pZCByZWNvbm5lY3Rpb25zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc3Vic1tpXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuc3VicyA9IG51bGw7XG4gIH1cblxuICB0aGlzLmlvLmRlc3Ryb3kodGhpcyk7XG59O1xuXG4vKipcbiAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXQgbWFudWFsbHkuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY2xvc2UgPVxuU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBkZWJ1ZygncGVyZm9ybWluZyBkaXNjb25uZWN0ICglcyknLCB0aGlzLm5zcCk7XG4gICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBwYXJzZXIuRElTQ09OTkVDVCB9KTtcbiAgfVxuXG4gIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gIHRoaXMuZGVzdHJveSgpO1xuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgdGhpcy5vbmNsb3NlKCdpbyBjbGllbnQgZGlzY29ubmVjdCcpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb21wcmVzcyBmbGFnLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaWYgYHRydWVgLCBjb21wcmVzc2VzIHRoZSBzZW5kaW5nIGRhdGFcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNvbXByZXNzID0gZnVuY3Rpb24gKGNvbXByZXNzKSB7XG4gIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSBjb21wcmVzcztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGJpbmFyeSBmbGFnXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB3aGV0aGVyIHRoZSBlbWl0dGVkIGRhdGEgY29udGFpbnMgYmluYXJ5XG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5iaW5hcnkgPSBmdW5jdGlvbiAoYmluYXJ5KSB7XG4gIHRoaXMuZmxhZ3MuYmluYXJ5ID0gYmluYXJ5O1xuICByZXR1cm4gdGhpcztcbn07XG4iLCJcbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXycuc3BsaXQoJycpXG4gICwgbGVuZ3RoID0gNjRcbiAgLCBtYXAgPSB7fVxuICAsIHNlZWQgPSAwXG4gICwgaSA9IDBcbiAgLCBwcmV2O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBlbmNvZGUobnVtKSB7XG4gIHZhciBlbmNvZGVkID0gJyc7XG5cbiAgZG8ge1xuICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcbiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIGxlbmd0aCk7XG4gIH0gd2hpbGUgKG51bSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50ZWdlciB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBpbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIHZhciBkZWNvZGVkID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XG4gIH1cblxuICByZXR1cm4gZGVjb2RlZDtcbn1cblxuLyoqXG4gKiBZZWFzdDogQSB0aW55IGdyb3dpbmcgaWQgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24geWVhc3QoKSB7XG4gIHZhciBub3cgPSBlbmNvZGUoK25ldyBEYXRlKCkpO1xuXG4gIGlmIChub3cgIT09IHByZXYpIHJldHVybiBzZWVkID0gMCwgcHJldiA9IG5vdztcbiAgcmV0dXJuIG5vdyArJy4nKyBlbmNvZGUoc2VlZCsrKTtcbn1cblxuLy9cbi8vIE1hcCBlYWNoIGNoYXJhY3RlciB0byBpdHMgaW5kZXguXG4vL1xuZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgbWFwW2FscGhhYmV0W2ldXSA9IGk7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIGB5ZWFzdGAsIGBlbmNvZGVgIGFuZCBgZGVjb2RlYCBmdW5jdGlvbnMuXG4vL1xueWVhc3QuZW5jb2RlID0gZW5jb2RlO1xueWVhc3QuZGVjb2RlID0gZGVjb2RlO1xubW9kdWxlLmV4cG9ydHMgPSB5ZWFzdDtcbiIsIi8qIGdsb2JhbCBCbG9iIEZpbGUgKi9cblxuLypcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJztcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0JpbmFyeTtcblxuLyoqXG4gKiBDaGVja3MgZm9yIGJpbmFyeSBkYXRhLlxuICpcbiAqIFN1cHBvcnRzIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEJsb2IgYW5kIEZpbGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFueXRoaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGhhc0JpbmFyeSAob2JqKSB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgQnVmZmVyLmlzQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8XG4gICAgKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpXG4gICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9oYXMtYmluYXJ5L3B1bGwvNFxuICBpZiAob2JqLnRvSlNPTiAmJiB0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGhhc0JpbmFyeShvYmoudG9KU09OKCksIHRydWUpO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG4vKipcbiAqIElzIFhIUjIgc3VwcG9ydGVkP1xuICovXG5cbnZhciBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbi8qKlxuICogUG9sbGluZyBpbnRlcmZhY2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmICghaGFzWEhSMiB8fCBmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFBvbGxpbmcsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucG9sbCgpO1xufTtcblxuLyoqXG4gKiBQYXVzZXMgcG9sbGluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9uUGF1c2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdwYXVzaW5nJztcblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgZGVidWcoJ3BhdXNlZCcpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdwYXVzZWQnO1xuICAgIG9uUGF1c2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ3BvbGxDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhdXNlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygncG9sbGluZycpO1xuICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICB0aGlzLmRvUG9sbCgpO1xuICB0aGlzLmVtaXQoJ3BvbGwnKTtcbn07XG5cbi8qKlxuICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkZWJ1ZygncG9sbGluZyBnb3QgZGF0YSAlcycsIGRhdGEpO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgaWYgKCdvcGVuaW5nJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICBzZWxmLm9uT3BlbigpO1xuICAgIH1cblxuICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICBpZiAoJ2Nsb3NlJyA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH07XG5cbiAgLy8gZGVjb2RlIHBheWxvYWRcbiAgcGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuXG4gIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BvbGxDb21wbGV0ZScpO1xuXG4gICAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnBvbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGNsb3NlICgpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBjbG9zZSBwYWNrZXQnKTtcbiAgICBzZWxmLndyaXRlKFt7IHR5cGU6ICdjbG9zZScgfV0pO1xuICB9XG5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBvcGVuIC0gY2xvc2luZycpO1xuICAgIGNsb3NlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgIGRlYnVnKCd0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2UnKTtcbiAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHZhciBjYWxsYmFja2ZuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfTtcblxuICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gIGlmIChmYWxzZSAhPT0gdGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnaHR0cHMnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgKCdodHRwJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBYSFIgPSByZXF1aXJlKCcuL3BvbGxpbmcteGhyJyk7XG52YXIgSlNPTlAgPSByZXF1aXJlKCcuL3BvbGxpbmctanNvbnAnKTtcbnZhciB3ZWJzb2NrZXQgPSByZXF1aXJlKCcuL3dlYnNvY2tldCcpO1xuXG4vKipcbiAqIEV4cG9ydCB0cmFuc3BvcnRzLlxuICovXG5cbmV4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7XG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcblxuLyoqXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqIERlY2lkZXMgb24geGhyIHZzIGpzb25wIGJhc2VkIG9uIGZlYXR1cmUgZGV0ZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIHhocjtcbiAgdmFyIHhkID0gZmFsc2U7XG4gIHZhciB4cyA9IGZhbHNlO1xuICB2YXIganNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtcblxuICBpZiAoZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHhkID0gb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG5cbiAgb3B0cy54ZG9tYWluID0geGQ7XG4gIG9wdHMueHNjaGVtZSA9IHhzO1xuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG5cbiAgaWYgKCdvcGVuJyBpbiB4aHIgJiYgIW9wdHMuZm9yY2VKU09OUCkge1xuICAgIHJldHVybiBuZXcgWEhSKG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghanNvbnApIHRocm93IG5ldyBFcnJvcignSlNPTlAgZGlzYWJsZWQnKTtcbiAgICByZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICB9XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZWlvID0gcmVxdWlyZSgnZW5naW5lLmlvLWNsaWVudCcpO1xudmFyIFNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDptYW5hZ2VyJyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBCYWNrb2ZmID0gcmVxdWlyZSgnYmFja28yJyk7XG5cbi8qKlxuICogSUU2KyBoYXNPd25Qcm9wZXJ0eVxuICovXG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNYW5hZ2VyO1xuXG4vKipcbiAqIGBNYW5hZ2VyYCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5naW5lIGluc3RhbmNlIG9yIGVuZ2luZSB1cmkvb3B0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWFuYWdlciAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYW5hZ2VyKSkgcmV0dXJuIG5ldyBNYW5hZ2VyKHVyaSwgb3B0cyk7XG4gIGlmICh1cmkgJiYgKCdvYmplY3QnID09PSB0eXBlb2YgdXJpKSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCAnL3NvY2tldC5pbyc7XG4gIHRoaXMubnNwcyA9IHt9O1xuICB0aGlzLnN1YnMgPSBbXTtcbiAgdGhpcy5vcHRzID0gb3B0cztcbiAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgIG1pbjogdGhpcy5yZWNvbm5lY3Rpb25EZWxheSgpLFxuICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKClcbiAgfSk7XG4gIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMudXJpID0gdXJpO1xuICB0aGlzLmNvbm5lY3RpbmcgPSBbXTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdmFyIF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gIHRoaXMuZW5jb2RlciA9IG5ldyBfcGFyc2VyLkVuY29kZXIoKTtcbiAgdGhpcy5kZWNvZGVyID0gbmV3IF9wYXJzZXIuRGVjb2RlcigpO1xuICB0aGlzLmF1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBQcm9wYWdhdGUgZ2l2ZW4gZXZlbnQgdG8gc29ja2V0cyBhbmQgZW1pdCBvbiBgdGhpc2BcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5lbWl0QWxsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmVtaXQuYXBwbHkodGhpcy5uc3BzW25zcF0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBgc29ja2V0LmlkYCBvZiBhbGwgc29ja2V0c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVNvY2tldElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmlkID0gdGhpcy5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGdlbmVyYXRlIGBzb2NrZXQuaWRgIGZvciB0aGUgZ2l2ZW4gYG5zcGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbnNwXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKG5zcCkge1xuICByZXR1cm4gKG5zcCA9PT0gJy8nID8gJycgOiAobnNwICsgJyMnKSkgKyB0aGlzLmVuZ2luZS5pZDtcbn07XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKE1hbmFnZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgcmVjb25uZWN0aW9uYCBjb25maWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB0cnVlL2ZhbHNlIGlmIGl0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHJlY29ubmVjdFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb24gPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBjb25maWcuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYmVmb3JlIGdpdmluZyB1cFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xuICB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNaW4odik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuTWFuYWdlci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3RvciA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldEppdHRlcih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1heGltdW0gZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWF4KHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29ubmVjdGlvbiB0aW1lb3V0LiBgZmFsc2VgIHRvIGRpc2FibGVcbiAqXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUubWF5YmVSZWNvbm5lY3RPbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgaWYgKCF0aGlzLnJlY29ubmVjdGluZyAmJiB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9uYWwsIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9wZW4gPVxuTWFuYWdlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChmbiwgb3B0cykge1xuICBkZWJ1ZygncmVhZHlTdGF0ZSAlcycsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIGlmICh+dGhpcy5yZWFkeVN0YXRlLmluZGV4T2YoJ29wZW4nKSkgcmV0dXJuIHRoaXM7XG5cbiAgZGVidWcoJ29wZW5pbmcgJXMnLCB0aGlzLnVyaSk7XG4gIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSBmYWxzZTtcblxuICAvLyBlbWl0IGBvcGVuYFxuICB2YXIgb3BlblN1YiA9IG9uKHNvY2tldCwgJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbm9wZW4oKTtcbiAgICBmbiAmJiBmbigpO1xuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X2Vycm9yYFxuICB2YXIgZXJyb3JTdWIgPSBvbihzb2NrZXQsICdlcnJvcicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGVidWcoJ2Nvbm5lY3RfZXJyb3InKTtcbiAgICBzZWxmLmNsZWFudXAoKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfZXJyb3InLCBkYXRhKTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gZXJyb3InKTtcbiAgICAgIGVyci5kYXRhID0gZGF0YTtcbiAgICAgIGZuKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICBzZWxmLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X3RpbWVvdXRgXG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuXG4gICAgLy8gc2V0IHRpbWVyXG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7XG4gICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsICd0aW1lb3V0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfdGltZW91dCcsIHRpbWVvdXQpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5zdWJzLnB1c2gob3BlblN1Yik7XG4gIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnb3BlbicpO1xuXG4gIC8vIGNsZWFyIG9sZCBzdWJzXG4gIHRoaXMuY2xlYW51cCgpO1xuXG4gIC8vIG1hcmsgYXMgb3BlblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuXG4gIC8vIGFkZCBuZXcgc3Vic1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2RhdGEnLCBiaW5kKHRoaXMsICdvbmRhdGEnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwaW5nJywgYmluZCh0aGlzLCAnb25waW5nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncG9uZycsIGJpbmQodGhpcywgJ29ucG9uZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Vycm9yJywgYmluZCh0aGlzLCAnb25lcnJvcicpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgJ2RlY29kZWQnLCBiaW5kKHRoaXMsICdvbmRlY29kZWQnKSkpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTtcbiAgdGhpcy5lbWl0QWxsKCdwaW5nJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0QWxsKCdwb25nJywgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5lbWl0QWxsKCdlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAobnNwLCBvcHRzKSB7XG4gIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNvY2tldC5vbignY29ubmVjdGluZycsIG9uQ29ubmVjdGluZyk7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc29ja2V0LmlkID0gc2VsZi5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvQ29ubmVjdCkge1xuICAgICAgLy8gbWFudWFsbHkgY2FsbCBoZXJlIHNpbmNlIGNvbm5lY3RpbmcgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGxpc3RlbmluZ1xuICAgICAgb25Db25uZWN0aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBpZiAoIX5pbmRleE9mKHNlbGYuY29ubmVjdGluZywgc29ja2V0KSkge1xuICAgICAgc2VsZi5jb25uZWN0aW5nLnB1c2goc29ja2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ja2V0O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgdmFyIGluZGV4ID0gaW5kZXhPZih0aGlzLmNvbm5lY3RpbmcsIHNvY2tldCk7XG4gIGlmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO1xuICBpZiAodGhpcy5jb25uZWN0aW5nLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHRoaXMuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAocGFja2V0LnF1ZXJ5ICYmIHBhY2tldC50eXBlID09PSAwKSBwYWNrZXQubnNwICs9ICc/JyArIHBhY2tldC5xdWVyeTtcblxuICBpZiAoIXNlbGYuZW5jb2RpbmcpIHtcbiAgICAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgdG8gZW5naW5lIHdpdGggcmVzdWx0XG4gICAgc2VsZi5lbmNvZGluZyA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2VsZi5lbmNvZGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5wcm9jZXNzUGFja2V0UXVldWUoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHsgLy8gYWRkIHBhY2tldCB0byB0aGUgcXVldWVcbiAgICBzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cbn07XG5cbi8qKlxuICogSWYgcGFja2V0IGJ1ZmZlciBpcyBub24tZW1wdHksIGJlZ2lucyBlbmNvZGluZyB0aGVcbiAqIG5leHQgcGFja2V0IGluIGxpbmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1BhY2tldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRCdWZmZXIubGVuZ3RoID4gMCAmJiAhdGhpcy5lbmNvZGluZykge1xuICAgIHZhciBwYWNrID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTtcbiAgICB0aGlzLnBhY2tldChwYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuXG4gIHZhciBzdWJzTGVuZ3RoID0gdGhpcy5zdWJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzLnNoaWZ0KCk7XG4gICAgc3ViLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG5cbiAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlID1cbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdkaXNjb25uZWN0Jyk7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGBvbmNsb3NlYCB3aWxsIG5vdCBmaXJlIGJlY2F1c2VcbiAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICBpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1Zygnb25jbG9zZScpO1xuXG4gIHRoaXMuY2xlYW51cCgpO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24pO1xuXG4gIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgZGVidWcoJ3JlY29ubmVjdCBmYWlsZWQnKTtcbiAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdF9mYWlsZWQnKTtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgIGRlYnVnKCd3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQnLCBkZWxheSk7XG5cbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfYXR0ZW1wdCcsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdGluZycsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG5cbiAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBzZWxmLm9wZW4oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBhdHRlbXB0IGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2Vycm9yJywgZXJyLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3Qgc3VjY2VzcycpO1xuICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVsYXkpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMudXBkYXRlU29ja2V0SWRzKCk7XG4gIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0JywgYXR0ZW1wdCk7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG52YXIgd2l0aE5hdGl2ZUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nO1xudmFyIHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc1ZpZXcgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5BcnJheUJ1ZmZlci5pc1ZpZXc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iai5idWZmZXIgaW5zdGFuY2VvZiBnbG9iYWwuQXJyYXlCdWZmZXI7IH07XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAgICAgICAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBnbG9iYWwuQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKTtcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXHJcbiAqIFBhcnNlcyBhbiBVUklcclxuICpcclxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcclxuXHJcbnZhciBwYXJ0cyA9IFtcclxuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xyXG5dO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcclxuICAgIHZhciBzcmMgPSBzdHIsXHJcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXHJcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXHJcbiAgICAgICAgdXJpID0ge30sXHJcbiAgICAgICAgaSA9IDE0O1xyXG5cclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcclxuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVyaTtcclxufTtcclxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBcbiAgICB2YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICAgICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICAgICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgICAgIG1peGluczogdHJ1ZSxcbiAgICAgICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgICAgICB0eXBlOiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgbGVuZ3RoOiB0cnVlLFxuICAgICAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgICAgIGNhbGxlcjogdHJ1ZSxcbiAgICAgICAgY2FsbGVlOiB0cnVlLFxuICAgICAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgICAgIGFyaXR5OiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gICAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgdmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG4gICAgXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH07XG59KSkpO1xuIiwiaW1wb3J0IHtcbiAgSU5QVVRfQ0hBTkdFLFxuICBTRU5EX01FU1NBR0UsXG4gIFJFQ0VJVkVfTUVTU0FHRSxcbiAgUkVUUklFVkVfQ09OVkVSU0FUSU9OLFxuICBSRUNFSVZFX0NPTlZFUlNBVElPTixcbiAgTUVTU0FHRV9TRU5UXG59IGZyb20gJy4uL2FjdGlvbnMvYWN0aW9ucyc7XG5pbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5cbmZ1bmN0aW9uIGN1cnJlbnRJbnB1dChzdGF0ZSA9IHtcbiAgdXNlcm5hbWU6ICcnLFxuICBjdXJyZW50TWVzc2FnZTogJydcbn0sIGFjdGlvbikge1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIElOUFVUX0NIQU5HRTpcbiAgICAgIHJldHVybiB7Li4uc3RhdGUsIFthY3Rpb24ubmFtZV06IGFjdGlvbi52YWx1ZX07XG4gICAgY2FzZSBTRU5EX01FU1NBR0U6XG4gICAgICBpZihhY3Rpb24uc3RhdHVzICYmIGFjdGlvbi5zdGF0dXMgPT09ICdTdWNjZXNzJyl7XG4gICAgICAgIHJldHVybiB7Li4uc3RhdGUsIGN1cnJlbnRNZXNzYWdlOiAnJ307XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVzc2FnZXMoc3RhdGUgPSBbXSwgYWN0aW9uKSB7XG4gIHN3aXRjaChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgUkVDRUlWRV9NRVNTQUdFOlxuICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgYWN0aW9uLm1lc3NhZ2VdO1xuICAgIGNhc2UgUkVDRUlWRV9DT05WRVJTQVRJT046XG4gICAgICByZXR1cm4gYWN0aW9uLm1lc3NhZ2VzO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNSZXRyaWV2aW5nQ29udmVyc2F0aW9uKHN0YXRlID0gZmFsc2UsIGFjdGlvbikge1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFJFVFJJRVZFX0NPTlZFUlNBVElPTjpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgUkVDRUlWRV9DT05WRVJTQVRJT046XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5jb25zdCBjaGF0QXBwID0gY29tYmluZVJlZHVjZXJzKHtcbiAgY3VycmVudElucHV0LFxuICBtZXNzYWdlcyxcbiAgaXNSZXRyaWV2aW5nQ29udmVyc2F0aW9uXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY2hhdEFwcDsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5mdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHRodW5rOyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiI21lc3NhZ2UtbGlzdCB7XFxuICBmbGV4OiAxO1xcbiAgb3ZlcmZsb3c6IHNjcm9sbDsgfVxcbiAgI21lc3NhZ2UtbGlzdCBwIHtcXG4gICAgbWFyZ2luOiAyMHB4OyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vTWVzc2FnZUxpc3Quc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9NZXNzYWdlTGlzdC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9NZXNzYWdlTGlzdC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgJy4vTWVzc2FnZUxpc3Quc2Nzcyc7XG5pbXBvcnQgU29ja2V0IGZyb20gJy4uL1NvY2tldCc7XG5cbmNvbnN0IE1lc3NhZ2UgPSAoe3RleHQsIHVzZXJuYW1lLCBkYXRlfSkgPT4gKFxuICA8cD5be2RhdGV9XSA8c3Ryb25nPnt1c2VybmFtZX08L3N0cm9uZz46IHt0ZXh0fTwvcD5cbik7XG5cbmNsYXNzIE1lc3NhZ2VMaXN0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaXNSZXRyaWV2aW5nQ29udmVyc2F0aW9uIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBpZD0nbWVzc2FnZS1saXN0Jz5cbiAgICAgICAgPHA+e2lzUmV0cmlldmluZ0NvbnZlcnNhdGlvbiA/ICdSZXRyaWV2aW5nIGNvbnZlcnNhdGlvbi4uLicgOiAnTWVzc2FnZSBsaXN0J308L3A+XG4gICAgICAgIHt0aGlzLnByb3BzLm1lc3NhZ2VzLm1hcChtID0+IDxNZXNzYWdlIHsuLi5tfSAvPil9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+IHtcbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlczogc3RhdGUubWVzc2FnZXMsXG4gICAgaXNSZXRyaWV2aW5nQ29udmVyc2F0aW9uOiBzdGF0ZS5pc1JldHJpZXZpbmdDb252ZXJzYXRpb25cbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShNZXNzYWdlTGlzdCk7IiwiXG4vKipcbiAqIEV4cG9zZSBgQmFja29mZmAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBCYWNrb2ZmO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYmFja29mZiB0aW1lciB3aXRoIGBvcHRzYC5cbiAqXG4gKiAtIGBtaW5gIGluaXRpYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgWzEwMF1cbiAqIC0gYG1heGAgbWF4IHRpbWVvdXQgWzEwMDAwXVxuICogLSBgaml0dGVyYCBbMF1cbiAqIC0gYGZhY3RvcmAgWzJdXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQmFja29mZihvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLm1zID0gb3B0cy5taW4gfHwgMTAwO1xuICB0aGlzLm1heCA9IG9wdHMubWF4IHx8IDEwMDAwO1xuICB0aGlzLmZhY3RvciA9IG9wdHMuZmFjdG9yIHx8IDI7XG4gIHRoaXMuaml0dGVyID0gb3B0cy5qaXR0ZXIgPiAwICYmIG9wdHMuaml0dGVyIDw9IDEgPyBvcHRzLmppdHRlciA6IDA7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgYmFja29mZiBkdXJhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24oKXtcbiAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xuICBpZiAodGhpcy5qaXR0ZXIpIHtcbiAgICB2YXIgcmFuZCA9ICBNYXRoLnJhbmRvbSgpO1xuICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTtcbiAgICBtcyA9IChNYXRoLmZsb29yKHJhbmQgKiAxMCkgJiAxKSA9PSAwICA/IG1zIC0gZGV2aWF0aW9uIDogbXMgKyBkZXZpYXRpb247XG4gIH1cbiAgcmV0dXJuIE1hdGgubWluKG1zLCB0aGlzLm1heCkgfCAwO1xufTtcblxuLyoqXG4gKiBSZXNldCB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpe1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtaW5pbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbihtaW4pe1xuICB0aGlzLm1zID0gbWluO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1heGltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1heCA9IGZ1bmN0aW9uKG1heCl7XG4gIHRoaXMubWF4ID0gbWF4O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGppdHRlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24oaml0dGVyKXtcbiAgdGhpcy5qaXR0ZXIgPSBqaXR0ZXI7XG59O1xuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXlcblxuZnVuY3Rpb24gdG9BcnJheShsaXN0LCBpbmRleCkge1xuICAgIHZhciBhcnJheSA9IFtdXG5cbiAgICBpbmRleCA9IGluZGV4IHx8IDBcblxuICAgIGZvciAodmFyIGkgPSBpbmRleCB8fCAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJheVtpIC0gaW5kZXhdID0gbGlzdFtpXVxuICAgIH1cblxuICAgIHJldHVybiBhcnJheVxufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi90cmFuc3BvcnQnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciB5ZWFzdCA9IHJlcXVpcmUoJ3llYXN0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OndlYnNvY2tldCcpO1xudmFyIEJyb3dzZXJXZWJTb2NrZXQgPSBnbG9iYWwuV2ViU29ja2V0IHx8IGdsb2JhbC5Nb3pXZWJTb2NrZXQ7XG52YXIgTm9kZVdlYlNvY2tldDtcbmlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICB0cnkge1xuICAgIE5vZGVXZWJTb2NrZXQgPSByZXF1aXJlKCd3cycpO1xuICB9IGNhdGNoIChlKSB7IH1cbn1cblxuLyoqXG4gKiBHZXQgZWl0aGVyIHRoZSBgV2ViU29ja2V0YCBvciBgTW96V2ViU29ja2V0YCBnbG9iYWxzXG4gKiBpbiB0aGUgYnJvd3NlciBvciB0cnkgdG8gcmVzb2x2ZSBXZWJTb2NrZXQtY29tcGF0aWJsZVxuICogaW50ZXJmYWNlIGV4cG9zZWQgYnkgYHdzYCBmb3IgTm9kZS1saWtlIGVudmlyb25tZW50LlxuICovXG5cbnZhciBXZWJTb2NrZXQgPSBCcm93c2VyV2ViU29ja2V0O1xuaWYgKCFXZWJTb2NrZXQgJiYgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgV2ViU29ja2V0ID0gTm9kZVdlYlNvY2tldDtcbn1cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdTO1xuXG4vKipcbiAqIFdlYlNvY2tldCB0cmFuc3BvcnQgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSB7T2JqZWN0fSBjb25uZWN0aW9uIG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gV1MgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmIChmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gb3B0cy5wZXJNZXNzYWdlRGVmbGF0ZTtcbiAgdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQgPSBCcm93c2VyV2ViU29ja2V0ICYmICFvcHRzLmZvcmNlTm9kZTtcbiAgdGhpcy5wcm90b2NvbHMgPSBvcHRzLnByb3RvY29scztcbiAgaWYgKCF0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgIFdlYlNvY2tldCA9IE5vZGVXZWJTb2NrZXQ7XG4gIH1cbiAgVHJhbnNwb3J0LmNhbGwodGhpcywgb3B0cyk7XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBUcmFuc3BvcnQuXG4gKi9cblxuaW5oZXJpdChXUywgVHJhbnNwb3J0KTtcblxuLyoqXG4gKiBUcmFuc3BvcnQgbmFtZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbldTLnByb3RvdHlwZS5uYW1lID0gJ3dlYnNvY2tldCc7XG5cbi8qXG4gKiBXZWJTb2NrZXRzIHN1cHBvcnQgYmluYXJ5XG4gKi9cblxuV1MucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcblxuLyoqXG4gKiBPcGVucyBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmRvT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmNoZWNrKCkpIHtcbiAgICAvLyBsZXQgcHJvYmUgdGltZW91dFxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB1cmkgPSB0aGlzLnVyaSgpO1xuICB2YXIgcHJvdG9jb2xzID0gdGhpcy5wcm90b2NvbHM7XG4gIHZhciBvcHRzID0ge1xuICAgIGFnZW50OiB0aGlzLmFnZW50LFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlXG4gIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICBvcHRzLmhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVycztcbiAgfVxuICBpZiAodGhpcy5sb2NhbEFkZHJlc3MpIHtcbiAgICBvcHRzLmxvY2FsQWRkcmVzcyA9IHRoaXMubG9jYWxBZGRyZXNzO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB0aGlzLndzID0gdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQgPyAocHJvdG9jb2xzID8gbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scykgOiBuZXcgV2ViU29ja2V0KHVyaSkpIDogbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scywgb3B0cyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLmJpbmFyeVR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLnN1cHBvcnRzICYmIHRoaXMud3Muc3VwcG9ydHMuYmluYXJ5KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ25vZGVidWZmZXInO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gIH1cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG59O1xuXG4vKipcbiAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzb2NrZXRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uT3BlbigpO1xuICB9O1xuICB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCk7XG4gIH07XG4gIHRoaXMud3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgc2VsZi5vbkRhdGEoZXYuZGF0YSk7XG4gIH07XG4gIHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCd3ZWJzb2NrZXQgZXJyb3InLCBlKTtcbiAgfTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGRhdGEgdG8gc29ja2V0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IG9mIHBhY2tldHMuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICAvLyBlbmNvZGVQYWNrZXQgZWZmaWNpZW50IGFzIGl0IHVzZXMgV1MgZnJhbWluZ1xuICAvLyBubyBuZWVkIGZvciBlbmNvZGVQYXlsb2FkXG4gIHZhciB0b3RhbCA9IHBhY2tldHMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHRvdGFsOyBpIDwgbDsgaSsrKSB7XG4gICAgKGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgIHBhcnNlci5lbmNvZGVQYWNrZXQocGFja2V0LCBzZWxmLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoIXNlbGYudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgLy8gYWx3YXlzIGNyZWF0ZSBhIG5ldyBvYmplY3QgKEdILTQzNylcbiAgICAgICAgICB2YXIgb3B0cyA9IHt9O1xuICAgICAgICAgIGlmIChwYWNrZXQub3B0aW9ucykge1xuICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IHBhY2tldC5vcHRpb25zLmNvbXByZXNzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWxmLnBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gJ3N0cmluZycgPT09IHR5cGVvZiBkYXRhID8gZ2xvYmFsLkJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpIDogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobGVuIDwgc2VsZi5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgd2Vic29ja2V0IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkIGJ1dCB0aGUgYnJvd3NlciBkaWRuJ3RcbiAgICAgICAgLy8gaGF2ZSBhIGNoYW5jZSBvZiBpbmZvcm1pbmcgdXMgYWJvdXQgaXQgeWV0LCBpbiB0aGF0IGNhc2Ugc2VuZCB3aWxsXG4gICAgICAgIC8vIHRocm93IGFuIGVycm9yXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHNlbGYudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgICAvLyBUeXBlRXJyb3IgaXMgdGhyb3duIHdoZW4gcGFzc2luZyB0aGUgc2Vjb25kIGFyZ3VtZW50IG9uIFNhZmFyaVxuICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSwgb3B0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVidWcoJ3dlYnNvY2tldCBjbG9zZWQgYmVmb3JlIG9uY2xvc2UgZXZlbnQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC0tdG90YWwgfHwgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfSkocGFja2V0c1tpXSk7XG4gIH1cblxuICBmdW5jdGlvbiBkb25lICgpIHtcbiAgICBzZWxmLmVtaXQoJ2ZsdXNoJyk7XG5cbiAgICAvLyBmYWtlIGRyYWluXG4gICAgLy8gZGVmZXIgdG8gbmV4dCB0aWNrIHRvIGFsbG93IFNvY2tldCB0byBjbGVhciB3cml0ZUJ1ZmZlclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi53cml0YWJsZSA9IHRydWU7XG4gICAgICBzZWxmLmVtaXQoJ2RyYWluJyk7XG4gICAgfSwgMCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2VcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIENsb3NlcyBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgdGhpcy53cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLndzLmNsb3NlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnd3NzJyA6ICd3cyc7XG4gIHZhciBwb3J0ID0gJyc7XG5cbiAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgaWYgKHRoaXMucG9ydCAmJiAoKCd3c3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAoJ3dzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIGFwcGVuZCB0aW1lc3RhbXAgdG8gVVJJXG4gIGlmICh0aGlzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgcXVlcnlbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICB9XG5cbiAgLy8gY29tbXVuaWNhdGUgYmluYXJ5IHN1cHBvcnQgY2FwYWJpbGl0aWVzXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSkge1xuICAgIHF1ZXJ5LmI2NCA9IDE7XG4gIH1cblxuICBxdWVyeSA9IHBhcnNlcXMuZW5jb2RlKHF1ZXJ5KTtcblxuICAvLyBwcmVwZW5kID8gdG8gcXVlcnlcbiAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gJz8nICsgcXVlcnk7XG4gIH1cblxuICB2YXIgaXB2NiA9IHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpICE9PSAtMTtcbiAgcmV0dXJuIHNjaGVtYSArICc6Ly8nICsgKGlwdjYgPyAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nIDogdGhpcy5ob3N0bmFtZSkgKyBwb3J0ICsgdGhpcy5wYXRoICsgcXVlcnk7XG59O1xuXG4vKipcbiAqIEZlYXR1cmUgZGV0ZWN0aW9uIGZvciBXZWJTb2NrZXQuXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciB0aGlzIHRyYW5zcG9ydCBpcyBhdmFpbGFibGUuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbldTLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhV2ViU29ja2V0ICYmICEoJ19faW5pdGlhbGl6ZScgaW4gV2ViU29ja2V0ICYmIHRoaXMubmFtZSA9PT0gV1MucHJvdG90eXBlLm5hbWUpO1xufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBKU09OUFBvbGxpbmc7XG5cbi8qKlxuICogQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gKi9cblxudmFyIHJOZXdsaW5lID0gL1xcbi9nO1xudmFyIHJFc2NhcGVkTmV3bGluZSA9IC9cXFxcbi9nO1xuXG4vKipcbiAqIEdsb2JhbCBKU09OUCBjYWxsYmFja3MuXG4gKi9cblxudmFyIGNhbGxiYWNrcztcblxuLyoqXG4gKiBOb29wLlxuICovXG5cbmZ1bmN0aW9uIGVtcHR5ICgpIHsgfVxuXG4vKipcbiAqIEpTT05QIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEpTT05QUG9sbGluZyAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgdGhpcy5xdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG5cbiAgLy8gZGVmaW5lIGdsb2JhbCBjYWxsYmFja3MgYXJyYXkgaWYgbm90IHByZXNlbnRcbiAgLy8gd2UgZG8gdGhpcyBoZXJlIChsYXppbHkpIHRvIGF2b2lkIHVubmVlZGVkIGdsb2JhbCBwb2xsdXRpb25cbiAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAvLyB3ZSBuZWVkIHRvIGNvbnNpZGVyIG11bHRpcGxlIGVuZ2luZXMgaW4gdGhlIHNhbWUgcGFnZVxuICAgIGlmICghZ2xvYmFsLl9fX2VpbykgZ2xvYmFsLl9fX2VpbyA9IFtdO1xuICAgIGNhbGxiYWNrcyA9IGdsb2JhbC5fX19laW87XG4gIH1cblxuICAvLyBjYWxsYmFjayBpZGVudGlmaWVyXG4gIHRoaXMuaW5kZXggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gIC8vIGFkZCBjYWxsYmFjayB0byBqc29ucCBnbG9iYWxcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAobXNnKSB7XG4gICAgc2VsZi5vbkRhdGEobXNnKTtcbiAgfSk7XG5cbiAgLy8gYXBwZW5kIHRvIHF1ZXJ5IHN0cmluZ1xuICB0aGlzLnF1ZXJ5LmogPSB0aGlzLmluZGV4O1xuXG4gIC8vIHByZXZlbnQgc3B1cmlvdXMgZXJyb3JzIGZyb20gYmVpbmcgZW1pdHRlZCB3aGVuIHRoZSB3aW5kb3cgaXMgdW5sb2FkZWRcbiAgaWYgKGdsb2JhbC5kb2N1bWVudCAmJiBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5zY3JpcHQpIHNlbGYuc2NyaXB0Lm9uZXJyb3IgPSBlbXB0eTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxuaW5oZXJpdChKU09OUFBvbGxpbmcsIFBvbGxpbmcpO1xuXG4vKlxuICogSlNPTlAgb25seSBzdXBwb3J0cyBiaW5hcnkgYXMgYmFzZTY0IGVuY29kZWQgc3RyaW5nc1xuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLmZvcm0pIHtcbiAgICB0aGlzLmZvcm0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZvcm0pO1xuICAgIHRoaXMuZm9ybSA9IG51bGw7XG4gICAgdGhpcy5pZnJhbWUgPSBudWxsO1xuICB9XG5cbiAgUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Qb2xsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gIH1cblxuICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICBzY3JpcHQuc3JjID0gdGhpcy51cmkoKTtcbiAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbCBlcnJvcicsIGUpO1xuICB9O1xuXG4gIHZhciBpbnNlcnRBdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgaWYgKGluc2VydEF0KSB7XG4gICAgaW5zZXJ0QXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBpbnNlcnRBdCk7XG4gIH0gZWxzZSB7XG4gICAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgfVxuICB0aGlzLnNjcmlwdCA9IHNjcmlwdDtcblxuICB2YXIgaXNVQWdlY2tvID0gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgL2dlY2tvL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICBpZiAoaXNVQWdlY2tvKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgfSwgMTAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXcml0ZXMgd2l0aCBhIGhpZGRlbiBpZnJhbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghdGhpcy5mb3JtKSB7XG4gICAgdmFyIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgdmFyIGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIHZhciBpZCA9IHRoaXMuaWZyYW1lSWQgPSAnZWlvX2lmcmFtZV8nICsgdGhpcy5pbmRleDtcbiAgICB2YXIgaWZyYW1lO1xuXG4gICAgZm9ybS5jbGFzc05hbWUgPSAnc29ja2V0aW8nO1xuICAgIGZvcm0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGZvcm0uc3R5bGUudG9wID0gJy0xMDAwcHgnO1xuICAgIGZvcm0uc3R5bGUubGVmdCA9ICctMTAwMHB4JztcbiAgICBmb3JtLnRhcmdldCA9IGlkO1xuICAgIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xuICAgIGZvcm0uc2V0QXR0cmlidXRlKCdhY2NlcHQtY2hhcnNldCcsICd1dGYtOCcpO1xuICAgIGFyZWEubmFtZSA9ICdkJztcbiAgICBmb3JtLmFwcGVuZENoaWxkKGFyZWEpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgIHRoaXMuYXJlYSA9IGFyZWE7XG4gIH1cblxuICB0aGlzLmZvcm0uYWN0aW9uID0gdGhpcy51cmkoKTtcblxuICBmdW5jdGlvbiBjb21wbGV0ZSAoKSB7XG4gICAgaW5pdElmcmFtZSgpO1xuICAgIGZuKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0SWZyYW1lICgpIHtcbiAgICBpZiAoc2VsZi5pZnJhbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNlbGYuZm9ybS5yZW1vdmVDaGlsZChzZWxmLmlmcmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbGluZyBpZnJhbWUgcmVtb3ZhbCBlcnJvcicsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBpZTYgZHluYW1pYyBpZnJhbWVzIHdpdGggdGFyZ2V0PVwiXCIgc3VwcG9ydCAodGhhbmtzIENocmlzIExhbWJhY2hlcilcbiAgICAgIHZhciBodG1sID0gJzxpZnJhbWUgc3JjPVwiamF2YXNjcmlwdDowXCIgbmFtZT1cIicgKyBzZWxmLmlmcmFtZUlkICsgJ1wiPic7XG4gICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGh0bWwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgaWZyYW1lLm5hbWUgPSBzZWxmLmlmcmFtZUlkO1xuICAgICAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0OjAnO1xuICAgIH1cblxuICAgIGlmcmFtZS5pZCA9IHNlbGYuaWZyYW1lSWQ7XG5cbiAgICBzZWxmLmZvcm0uYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBzZWxmLmlmcmFtZSA9IGlmcmFtZTtcbiAgfVxuXG4gIGluaXRJZnJhbWUoKTtcblxuICAvLyBlc2NhcGUgXFxuIHRvIHByZXZlbnQgaXQgZnJvbSBiZWluZyBjb252ZXJ0ZWQgaW50byBcXHJcXG4gYnkgc29tZSBVQXNcbiAgLy8gZG91YmxlIGVzY2FwaW5nIGlzIHJlcXVpcmVkIGZvciBlc2NhcGVkIG5ldyBsaW5lcyBiZWNhdXNlIHVuZXNjYXBpbmcgb2YgbmV3IGxpbmVzIGNhbiBiZSBkb25lIHNhZmVseSBvbiBzZXJ2ZXItc2lkZVxuICBkYXRhID0gZGF0YS5yZXBsYWNlKHJFc2NhcGVkTmV3bGluZSwgJ1xcXFxcXG4nKTtcbiAgdGhpcy5hcmVhLnZhbHVlID0gZGF0YS5yZXBsYWNlKHJOZXdsaW5lLCAnXFxcXG4nKTtcblxuICB0cnkge1xuICAgIHRoaXMuZm9ybS5zdWJtaXQoKTtcbiAgfSBjYXRjaCAoZSkge31cblxuICBpZiAodGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQpIHtcbiAgICB0aGlzLmlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5pZnJhbWUucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pZnJhbWUub25sb2FkID0gY29tcGxldGU7XG4gIH1cbn07XG4iLCIvKipcbiAqIENyZWF0ZSBhIGJsb2IgYnVpbGRlciBldmVuIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XG4gKi9cblxudmFyIEJsb2JCdWlsZGVyID0gZ2xvYmFsLkJsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5XZWJLaXRCbG9iQnVpbGRlclxuICB8fCBnbG9iYWwuTVNCbG9iQnVpbGRlclxuICB8fCBnbG9iYWwuTW96QmxvYkJ1aWxkZXI7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBpcyBzdXBwb3J0ZWRcbiAqL1xuXG52YXIgYmxvYlN1cHBvcnRlZCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYSA9IG5ldyBCbG9iKFsnaGknXSk7XG4gICAgcmV0dXJuIGEuc2l6ZSA9PT0gMjtcbiAgfSBjYXRjaChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KSgpO1xuXG4vKipcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3Igc3VwcG9ydHMgQXJyYXlCdWZmZXJWaWV3c1xuICogRmFpbHMgaW4gU2FmYXJpIDYsIHNvIHdlIG5lZWQgdG8gbWFwIHRvIEFycmF5QnVmZmVycyB0aGVyZS5cbiAqL1xuXG52YXIgYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID0gYmxvYlN1cHBvcnRlZCAmJiAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7XG4gICAgcmV0dXJuIGIuc2l6ZSA9PT0gMjtcbiAgfSBjYXRjaChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KSgpO1xuXG4vKipcbiAqIENoZWNrIGlmIEJsb2JCdWlsZGVyIGlzIHN1cHBvcnRlZFxuICovXG5cbnZhciBibG9iQnVpbGRlclN1cHBvcnRlZCA9IEJsb2JCdWlsZGVyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmdldEJsb2I7XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgbWFwcyBBcnJheUJ1ZmZlclZpZXdzIHRvIEFycmF5QnVmZmVyc1xuICogVXNlZCBieSBCbG9iQnVpbGRlciBjb25zdHJ1Y3RvciBhbmQgb2xkIGJyb3dzZXJzIHRoYXQgZGlkbid0XG4gKiBzdXBwb3J0IGl0IGluIHRoZSBCbG9iIGNvbnN0cnVjdG9yLlxuICovXG5cbmZ1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNodW5rID0gYXJ5W2ldO1xuICAgIGlmIChjaHVuay5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIGJ1ZiA9IGNodW5rLmJ1ZmZlcjtcblxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHN1YmFycmF5LCBtYWtlIGEgY29weSBzbyB3ZSBvbmx5XG4gICAgICAvLyBpbmNsdWRlIHRoZSBzdWJhcnJheSByZWdpb24gZnJvbSB0aGUgdW5kZXJseWluZyBidWZmZXJcbiAgICAgIGlmIChjaHVuay5ieXRlTGVuZ3RoICE9PSBidWYuYnl0ZUxlbmd0aCkge1xuICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO1xuICAgICAgICBjb3B5LnNldChuZXcgVWludDhBcnJheShidWYsIGNodW5rLmJ5dGVPZmZzZXQsIGNodW5rLmJ5dGVMZW5ndGgpKTtcbiAgICAgICAgYnVmID0gY29weS5idWZmZXI7XG4gICAgICB9XG5cbiAgICAgIGFyeVtpXSA9IGJ1ZjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7XG4gIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkrKykge1xuICAgIGJiLmFwcGVuZChhcnlbaV0pO1xuICB9XG5cbiAgcmV0dXJuIChvcHRpb25zLnR5cGUpID8gYmIuZ2V0QmxvYihvcHRpb25zLnR5cGUpIDogYmIuZ2V0QmxvYigpO1xufTtcblxuZnVuY3Rpb24gQmxvYkNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xuICBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSk7XG4gIHJldHVybiBuZXcgQmxvYihhcnksIG9wdGlvbnMgfHwge30pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIGlmIChibG9iU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA/IGdsb2JhbC5CbG9iIDogQmxvYkNvbnN0cnVjdG9yO1xuICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuIEJsb2JCdWlsZGVyQ29uc3RydWN0b3I7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufSkoKTtcbiIsIi8qXG4gKiBiYXNlNjQtYXJyYXlidWZmZXJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uaWtsYXN2aC9iYXNlNjQtYXJyYXlidWZmZXJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgTmlrbGFzIHZvbiBIZXJ0emVuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cbihmdW5jdGlvbigpe1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgY2hhcnMgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcblxuICAvLyBVc2UgYSBsb29rdXAgdGFibGUgdG8gZmluZCB0aGUgaW5kZXguXG4gIHZhciBsb29rdXAgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgbG9va3VwW2NoYXJzLmNoYXJDb2RlQXQoaSldID0gaTtcbiAgfVxuXG4gIGV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24oYXJyYXlidWZmZXIpIHtcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlciksXG4gICAgaSwgbGVuID0gYnl0ZXMubGVuZ3RoLCBiYXNlNjQgPSBcIlwiO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9Mykge1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2ldID4+IDJdO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaV0gJiAzKSA8PCA0KSB8IChieXRlc1tpICsgMV0gPj4gNCldO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaSArIDFdICYgMTUpIDw8IDIpIHwgKGJ5dGVzW2kgKyAyXSA+PiA2KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgIH1cblxuICAgIGlmICgobGVuICUgMykgPT09IDIpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDEpICsgXCI9XCI7XG4gICAgfSBlbHNlIGlmIChsZW4gJSAzID09PSAxKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArIFwiPT1cIjtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTY0O1xuICB9O1xuXG4gIGV4cG9ydHMuZGVjb2RlID0gIGZ1bmN0aW9uKGJhc2U2NCkge1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBiYXNlNjQubGVuZ3RoICogMC43NSxcbiAgICBsZW4gPSBiYXNlNjQubGVuZ3RoLCBpLCBwID0gMCxcbiAgICBlbmNvZGVkMSwgZW5jb2RlZDIsIGVuY29kZWQzLCBlbmNvZGVkNDtcblxuICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDFdID09PSBcIj1cIikge1xuICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAyXSA9PT0gXCI9XCIpIHtcbiAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFycmF5YnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlckxlbmd0aCksXG4gICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz00KSB7XG4gICAgICBlbmNvZGVkMSA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKV07XG4gICAgICBlbmNvZGVkMiA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzEpXTtcbiAgICAgIGVuY29kZWQzID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMildO1xuICAgICAgZW5jb2RlZDQgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSszKV07XG5cbiAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDEgPDwgMikgfCAoZW5jb2RlZDIgPj4gNCk7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5YnVmZmVyO1xuICB9O1xufSkoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgYGV4cG9ydHNgXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHM7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWBcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzICYmIG1vZHVsZTtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCwgZnJvbSBOb2RlLmpzIG9yIEJyb3dzZXJpZmllZCBjb2RlLFxuXHQvLyBhbmQgdXNlIGl0IGFzIGByb290YFxuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdHZhciBjb3VudGVyID0gMDtcblx0XHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0XHR2YXIgdmFsdWU7XG5cdFx0dmFyIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciB2YWx1ZTtcblx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdHRocm93IEVycm9yKFxuXHRcdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHRcdCcgaXMgbm90IGEgc2NhbGFyIHZhbHVlJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHtcblx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IHNoaWZ0KSAmIDB4M0YpIHwgMHg4MCk7XG5cdH1cblxuXHRmdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkZGODApID09IDApIHsgLy8gMS1ieXRlIHNlcXVlbmNlXG5cdFx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG5cdFx0fVxuXHRcdHZhciBzeW1ib2wgPSAnJztcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkY4MDApID09IDApIHsgLy8gMi1ieXRlIHNlcXVlbmNlXG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkZGMDAwMCkgPT0gMCkgeyAvLyAzLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdGlmICghY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkpIHtcblx0XHRcdFx0Y29kZVBvaW50ID0gMHhGRkZEO1xuXHRcdFx0fVxuXHRcdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxOCkgJiAweDA3KSB8IDB4RjApO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCAxMik7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRzeW1ib2wgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKChjb2RlUG9pbnQgJiAweDNGKSB8IDB4ODApO1xuXHRcdHJldHVybiBzeW1ib2w7XG5cdH1cblxuXHRmdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cmluZywgb3B0cykge1xuXHRcdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHRcdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0XHR2YXIgY29kZVBvaW50cyA9IHVjczJkZWNvZGUoc3RyaW5nKTtcblx0XHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIGNvZGVQb2ludDtcblx0XHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRjb2RlUG9pbnQgPSBjb2RlUG9pbnRzW2luZGV4XTtcblx0XHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGJ5dGVTdHJpbmc7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiByZWFkQ29udGludWF0aW9uQnl0ZSgpIHtcblx0XHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRcdGJ5dGVJbmRleCsrO1xuXG5cdFx0aWYgKChjb250aW51YXRpb25CeXRlICYgMHhDMCkgPT0gMHg4MCkge1xuXHRcdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGVuZCB1cCBoZXJlLCBpdOKAmXMgbm90IGEgY29udGludWF0aW9uIGJ5dGVcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlU3ltYm9sKHN0cmljdCkge1xuXHRcdHZhciBieXRlMTtcblx0XHR2YXIgYnl0ZTI7XG5cdFx0dmFyIGJ5dGUzO1xuXHRcdHZhciBieXRlNDtcblx0XHR2YXIgY29kZVBvaW50O1xuXG5cdFx0aWYgKGJ5dGVJbmRleCA+IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdGlmIChieXRlSW5kZXggPT0gYnl0ZUNvdW50KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gUmVhZCBmaXJzdCBieXRlXG5cdFx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdFx0Ynl0ZUluZGV4Kys7XG5cblx0XHQvLyAxLWJ5dGUgc2VxdWVuY2UgKG5vIGNvbnRpbnVhdGlvbiBieXRlcylcblx0XHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdFx0cmV0dXJuIGJ5dGUxO1xuXHRcdH1cblxuXHRcdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICgoYnl0ZTEgJiAweEUwKSA9PSAweEMwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHg4MCkge1xuXHRcdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyAzLWJ5dGUgc2VxdWVuY2UgKG1heSBpbmNsdWRlIHVucGFpcmVkIHN1cnJvZ2F0ZXMpXG5cdFx0aWYgKChieXRlMSAmIDB4RjApID09IDB4RTApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDBGKSA8PCAxMikgfCAoYnl0ZTIgPDwgNikgfCBieXRlMztcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRcdHJldHVybiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSA/IGNvZGVQb2ludCA6IDB4RkZGRDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0aWYgKChieXRlMSAmIDB4RjgpID09IDB4RjApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGU0ID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDA3KSA8PCAweDEyKSB8IChieXRlMiA8PCAweDBDKSB8XG5cdFx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdFx0aWYgKGNvZGVQb2ludCA+PSAweDAxMDAwMCAmJiBjb2RlUG9pbnQgPD0gMHgxMEZGRkYpIHtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBVVEYtOCBkZXRlY3RlZCcpO1xuXHR9XG5cblx0dmFyIGJ5dGVBcnJheTtcblx0dmFyIGJ5dGVDb3VudDtcblx0dmFyIGJ5dGVJbmRleDtcblx0ZnVuY3Rpb24gdXRmOGRlY29kZShieXRlU3RyaW5nLCBvcHRzKSB7XG5cdFx0b3B0cyA9IG9wdHMgfHwge307XG5cdFx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRcdGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7XG5cdFx0Ynl0ZUNvdW50ID0gYnl0ZUFycmF5Lmxlbmd0aDtcblx0XHRieXRlSW5kZXggPSAwO1xuXHRcdHZhciBjb2RlUG9pbnRzID0gW107XG5cdFx0dmFyIHRtcDtcblx0XHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbChzdHJpY3QpKSAhPT0gZmFsc2UpIHtcblx0XHRcdGNvZGVQb2ludHMucHVzaCh0bXApO1xuXHRcdH1cblx0XHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciB1dGY4ID0ge1xuXHRcdCd2ZXJzaW9uJzogJzIuMS4yJyxcblx0XHQnZW5jb2RlJzogdXRmOGVuY29kZSxcblx0XHQnZGVjb2RlJzogdXRmOGRlY29kZVxuXHR9O1xuXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHV0Zjg7XG5cdFx0fSk7XG5cdH1cdGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmICFmcmVlRXhwb3J0cy5ub2RlVHlwZSkge1xuXHRcdGlmIChmcmVlTW9kdWxlKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSB1dGY4O1xuXHRcdH0gZWxzZSB7IC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0XHR2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3QuaGFzT3duUHJvcGVydHk7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gdXRmOCkge1xuXHRcdFx0XHRoYXNPd25Qcm9wZXJ0eS5jYWxsKHV0ZjgsIGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSB1dGY4W2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QudXRmOCA9IHV0Zjg7XG5cdH1cblxufSh0aGlzKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFmdGVyXG5cbmZ1bmN0aW9uIGFmdGVyKGNvdW50LCBjYWxsYmFjaywgZXJyX2NiKSB7XG4gICAgdmFyIGJhaWwgPSBmYWxzZVxuICAgIGVycl9jYiA9IGVycl9jYiB8fCBub29wXG4gICAgcHJveHkuY291bnQgPSBjb3VudFxuXG4gICAgcmV0dXJuIChjb3VudCA9PT0gMCkgPyBjYWxsYmFjaygpIDogcHJveHlcblxuICAgIGZ1bmN0aW9uIHByb3h5KGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChwcm94eS5jb3VudCA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FmdGVyIGNhbGxlZCB0b28gbWFueSB0aW1lcycpXG4gICAgICAgIH1cbiAgICAgICAgLS1wcm94eS5jb3VudFxuXG4gICAgICAgIC8vIGFmdGVyIGZpcnN0IGVycm9yLCByZXN0IGFyZSBwYXNzZWQgdG8gZXJyX2NiXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGJhaWwgPSB0cnVlXG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpXG4gICAgICAgICAgICAvLyBmdXR1cmUgZXJyb3IgY2FsbGJhY2tzIHdpbGwgZ28gdG8gZXJyb3IgaGFuZGxlclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBlcnJfY2JcbiAgICAgICAgfSBlbHNlIGlmIChwcm94eS5jb3VudCA9PT0gMCAmJiAhYmFpbCkge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBub29wKCkge31cbiIsIi8qKlxuICogQW4gYWJzdHJhY3Rpb24gZm9yIHNsaWNpbmcgYW4gYXJyYXlidWZmZXIgZXZlbiB3aGVuXG4gKiBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgaXMgbm90IHN1cHBvcnRlZFxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheWJ1ZmZlciwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBhcnJheWJ1ZmZlci5ieXRlTGVuZ3RoO1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIGVuZCA9IGVuZCB8fCBieXRlcztcblxuICBpZiAoYXJyYXlidWZmZXIuc2xpY2UpIHsgcmV0dXJuIGFycmF5YnVmZmVyLnNsaWNlKHN0YXJ0LCBlbmQpOyB9XG5cbiAgaWYgKHN0YXJ0IDwgMCkgeyBzdGFydCArPSBieXRlczsgfVxuICBpZiAoZW5kIDwgMCkgeyBlbmQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA+IGJ5dGVzKSB7IGVuZCA9IGJ5dGVzOyB9XG5cbiAgaWYgKHN0YXJ0ID49IGJ5dGVzIHx8IHN0YXJ0ID49IGVuZCB8fCBieXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gIH1cblxuICB2YXIgYWJ2ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoZW5kIC0gc3RhcnQpO1xuICBmb3IgKHZhciBpID0gc3RhcnQsIGlpID0gMDsgaSA8IGVuZDsgaSsrLCBpaSsrKSB7XG4gICAgcmVzdWx0W2lpXSA9IGFidltpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmJ1ZmZlcjtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCJcbi8qKlxuICogR2V0cyB0aGUga2V5cyBmb3IgYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge0FycmF5fSBrZXlzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iail7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBpKSkge1xuICAgICAgYXJyLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6cG9sbGluZy14aHInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUjtcbm1vZHVsZS5leHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuXG4vKipcbiAqIEVtcHR5IGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkgKCkge31cblxuLyoqXG4gKiBYSFIgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBYSFIgKG9wdHMpIHtcbiAgUG9sbGluZy5jYWxsKHRoaXMsIG9wdHMpO1xuICB0aGlzLnJlcXVlc3RUaW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dDtcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcblxuICBpZiAoZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHRoaXMueGQgPSBvcHRzLmhvc3RuYW1lICE9PSBnbG9iYWwubG9jYXRpb24uaG9zdG5hbWUgfHxcbiAgICAgIHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICB0aGlzLnhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbmluaGVyaXQoWEhSLCBQb2xsaW5nKTtcblxuLyoqXG4gKiBYSFIgc3VwcG9ydHMgYmluYXJ5XG4gKi9cblxuWEhSLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIG9wdHMudXJpID0gdGhpcy51cmkoKTtcbiAgb3B0cy54ZCA9IHRoaXMueGQ7XG4gIG9wdHMueHMgPSB0aGlzLnhzO1xuICBvcHRzLmFnZW50ID0gdGhpcy5hZ2VudCB8fCBmYWxzZTtcbiAgb3B0cy5zdXBwb3J0c0JpbmFyeSA9IHRoaXMuc3VwcG9ydHNCaW5hcnk7XG4gIG9wdHMuZW5hYmxlc1hEUiA9IHRoaXMuZW5hYmxlc1hEUjtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIG9wdHMucmVxdWVzdFRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMuZXh0cmFIZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KG9wdHMpO1xufTtcblxuLyoqXG4gKiBTZW5kcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgaXNCaW5hcnkgPSB0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycgJiYgZGF0YSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiAnUE9TVCcsIGRhdGE6IGRhdGEsIGlzQmluYXJ5OiBpc0JpbmFyeSB9KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ3N1Y2Nlc3MnLCBmbik7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9zdCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnNlbmRYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd4aHIgcG9sbCcpO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzZWxmLm9uRGF0YShkYXRhKTtcbiAgfSk7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9sbCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnBvbGxYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFJlcXVlc3QgY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXF1ZXN0IChvcHRzKSB7XG4gIHRoaXMubWV0aG9kID0gb3B0cy5tZXRob2QgfHwgJ0dFVCc7XG4gIHRoaXMudXJpID0gb3B0cy51cmk7XG4gIHRoaXMueGQgPSAhIW9wdHMueGQ7XG4gIHRoaXMueHMgPSAhIW9wdHMueHM7XG4gIHRoaXMuYXN5bmMgPSBmYWxzZSAhPT0gb3B0cy5hc3luYztcbiAgdGhpcy5kYXRhID0gdW5kZWZpbmVkICE9PSBvcHRzLmRhdGEgPyBvcHRzLmRhdGEgOiBudWxsO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudDtcbiAgdGhpcy5pc0JpbmFyeSA9IG9wdHMuaXNCaW5hcnk7XG4gIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBvcHRzLnN1cHBvcnRzQmluYXJ5O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIHRoaXMuY3JlYXRlKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFJlcXVlc3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBYSFIgb2JqZWN0IGFuZCBzZW5kcyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvcHRzID0geyBhZ2VudDogdGhpcy5hZ2VudCwgeGRvbWFpbjogdGhpcy54ZCwgeHNjaGVtZTogdGhpcy54cywgZW5hYmxlc1hEUjogdGhpcy5lbmFibGVzWERSIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIHZhciB4aHIgPSB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRyeSB7XG4gICAgZGVidWcoJ3hociBvcGVuICVzOiAlcycsIHRoaXMubWV0aG9kLCB0aGlzLnVyaSk7XG4gICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sgJiYgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayh0cnVlKTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaSwgdGhpcy5leHRyYUhlYWRlcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAoJ1BPU1QnID09PSB0aGlzLm1ldGhvZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuaXNCaW5hcnkpIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnKi8qJyk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIC8vIGllNiBjaGVja1xuICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlcXVlc3RUaW1lb3V0KSB7XG4gICAgICB4aHIudGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICB9O1xuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gMikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgICAgICAgaWYgKHNlbGYuc3VwcG9ydHNCaW5hcnkgJiYgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSB7XG4gICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDQgIT09IHhoci5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMgfHwgMTIyMyA9PT0geGhyLnN0YXR1cykge1xuICAgICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBgZXJyb3JgIGV2ZW50IGhhbmRsZXIgdGhhdCdzIHVzZXItc2V0XG4gICAgICAgICAgLy8gZG9lcyBub3QgdGhyb3cgaW4gdGhlIHNhbWUgdGljayBhbmQgZ2V0cyBjYXVnaHQgaGVyZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbkVycm9yKHhoci5zdGF0dXMpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGRlYnVnKCd4aHIgZGF0YSAlcycsIHRoaXMuZGF0YSk7XG4gICAgeGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmaHJvbSB0aGUgY29uc3RydWN0b3JcbiAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYub25FcnJvcihlKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgdGhpcy5pbmRleCA9IFJlcXVlc3QucmVxdWVzdHNDb3VudCsrO1xuICAgIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF0gPSB0aGlzO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVzcG9uc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25TdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ3N1Y2Nlc3MnKTtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCBpZiB3ZSBoYXZlIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5lbWl0KCdkYXRhJywgZGF0YSk7XG4gIHRoaXMub25TdWNjZXNzKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVycm9yLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLmNsZWFudXAodHJ1ZSk7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBob3VzZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKGZyb21FcnJvcikge1xuICBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB0aGlzLnhociB8fCBudWxsID09PSB0aGlzLnhocikge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB4bWxodHRwcmVxdWVzdFxuICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgIHRoaXMueGhyLm9ubG9hZCA9IHRoaXMueGhyLm9uZXJyb3IgPSBlbXB0eTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcbiAgfVxuXG4gIGlmIChmcm9tRXJyb3IpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG5cbiAgaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICAgIGRlbGV0ZSBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdO1xuICB9XG5cbiAgdGhpcy54aHIgPSBudWxsO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBsb2FkLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRhdGE7XG4gIHRyeSB7XG4gICAgdmFyIGNvbnRlbnRUeXBlO1xuICAgIHRyeSB7XG4gICAgICBjb250ZW50VHlwZSA9IHRoaXMueGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIGlmIChjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZSB8fCB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5vbkVycm9yKGUpO1xuICB9XG4gIGlmIChudWxsICE9IGRhdGEpIHtcbiAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBpdCBoYXMgWERvbWFpblJlcXVlc3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuaGFzWERSID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBnbG9iYWwuWERvbWFpblJlcXVlc3QgJiYgIXRoaXMueHMgJiYgdGhpcy5lbmFibGVzWERSO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgdGhlIHJlcXVlc3QuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIEFib3J0cyBwZW5kaW5nIHJlcXVlc3RzIHdoZW4gdW5sb2FkaW5nIHRoZSB3aW5kb3cuIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnRcbiAqIG1lbW9yeSBsZWFrcyAoZS5nLiB3aGVuIHVzaW5nIElFKSBhbmQgdG8gZW5zdXJlIHRoYXQgbm8gc3B1cmlvdXMgZXJyb3IgaXNcbiAqIGVtaXR0ZWQuXG4gKi9cblxuUmVxdWVzdC5yZXF1ZXN0c0NvdW50ID0gMDtcblJlcXVlc3QucmVxdWVzdHMgPSB7fTtcblxuaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICBpZiAoZ2xvYmFsLmF0dGFjaEV2ZW50KSB7XG4gICAgZ2xvYmFsLmF0dGFjaEV2ZW50KCdvbnVubG9hZCcsIHVubG9hZEhhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmxvYWRIYW5kbGVyICgpIHtcbiAgZm9yICh2YXIgaSBpbiBSZXF1ZXN0LnJlcXVlc3RzKSB7XG4gICAgaWYgKFJlcXVlc3QucmVxdWVzdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIFJlcXVlc3QucmVxdWVzdHNbaV0uYWJvcnQoKTtcbiAgICB9XG4gIH1cbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqXG4gKiBMb2dpYyBib3Jyb3dlZCBmcm9tIE1vZGVybml6cjpcbiAqXG4gKiAgIC0gaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2NvcnMuanNcbiAqL1xuXG50cnkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbn0gY2F0Y2ggKGVycikge1xuICAvLyBpZiBYTUxIdHRwIHN1cHBvcnQgaXMgZGlzYWJsZWQgaW4gSUUgdGhlbiBpdCB3aWxsIHRocm93XG4gIC8vIHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB0cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIGluZGV4ID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmkgb3Igb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0ICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNvY2tldCkpIHJldHVybiBuZXcgU29ja2V0KHVyaSwgb3B0cyk7XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgaWYgKHVyaSAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gbnVsbDtcbiAgfVxuXG4gIGlmICh1cmkpIHtcbiAgICB1cmkgPSBwYXJzZXVyaSh1cmkpO1xuICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICBvcHRzLnNlY3VyZSA9IHVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzJyB8fCB1cmkucHJvdG9jb2wgPT09ICd3c3MnO1xuICAgIG9wdHMucG9ydCA9IHVyaS5wb3J0O1xuICAgIGlmICh1cmkucXVlcnkpIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHBhcnNldXJpKG9wdHMuaG9zdCkuaG9zdDtcbiAgfVxuXG4gIHRoaXMuc2VjdXJlID0gbnVsbCAhPSBvcHRzLnNlY3VyZSA/IG9wdHMuc2VjdXJlXG4gICAgOiAoZ2xvYmFsLmxvY2F0aW9uICYmICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbCk7XG5cbiAgaWYgKG9wdHMuaG9zdG5hbWUgJiYgIW9wdHMucG9ydCkge1xuICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICBvcHRzLnBvcnQgPSB0aGlzLnNlY3VyZSA/ICc0NDMnIDogJzgwJztcbiAgfVxuXG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZSB8fFxuICAgIChnbG9iYWwubG9jYXRpb24gPyBsb2NhdGlvbi5ob3N0bmFtZSA6ICdsb2NhbGhvc3QnKTtcbiAgdGhpcy5wb3J0ID0gb3B0cy5wb3J0IHx8IChnbG9iYWwubG9jYXRpb24gJiYgbG9jYXRpb24ucG9ydFxuICAgICAgPyBsb2NhdGlvbi5wb3J0XG4gICAgICA6ICh0aGlzLnNlY3VyZSA/IDQ0MyA6IDgwKSk7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5IHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB0aGlzLnF1ZXJ5KSB0aGlzLnF1ZXJ5ID0gcGFyc2Vxcy5kZWNvZGUodGhpcy5xdWVyeSk7XG4gIHRoaXMudXBncmFkZSA9IGZhbHNlICE9PSBvcHRzLnVwZ3JhZGU7XG4gIHRoaXMucGF0aCA9IChvcHRzLnBhdGggfHwgJy9lbmdpbmUuaW8nKS5yZXBsYWNlKC9cXC8kLywgJycpICsgJy8nO1xuICB0aGlzLmZvcmNlSlNPTlAgPSAhIW9wdHMuZm9yY2VKU09OUDtcbiAgdGhpcy5qc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuICB0aGlzLmZvcmNlQmFzZTY0ID0gISFvcHRzLmZvcmNlQmFzZTY0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSAhIW9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW0gfHwgJ3QnO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFsncG9sbGluZycsICd3ZWJzb2NrZXQnXTtcbiAgdGhpcy50cmFuc3BvcnRPcHRpb25zID0gb3B0cy50cmFuc3BvcnRPcHRpb25zIHx8IHt9O1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICB0aGlzLnBvbGljeVBvcnQgPSBvcHRzLnBvbGljeVBvcnQgfHwgODQzO1xuICB0aGlzLnJlbWVtYmVyVXBncmFkZSA9IG9wdHMucmVtZW1iZXJVcGdyYWRlIHx8IGZhbHNlO1xuICB0aGlzLmJpbmFyeVR5cGUgPSBudWxsO1xuICB0aGlzLm9ubHlCaW5hcnlVcGdyYWRlcyA9IG9wdHMub25seUJpbmFyeVVwZ3JhZGVzO1xuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gZmFsc2UgIT09IG9wdHMucGVyTWVzc2FnZURlZmxhdGUgPyAob3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB7fSkgOiBmYWxzZTtcblxuICBpZiAodHJ1ZSA9PT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSkgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IHt9O1xuICBpZiAodGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSAmJiBudWxsID09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQgPSAxMDI0O1xuICB9XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZnggfHwgbnVsbDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleSB8fCBudWxsO1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2UgfHwgbnVsbDtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0IHx8IG51bGw7XG4gIHRoaXMuY2EgPSBvcHRzLmNhIHx8IG51bGw7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycyB8fCBudWxsO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gISFvcHRzLmZvcmNlTm9kZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT09ICdvYmplY3QnICYmIGdsb2JhbDtcbiAgaWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsKSB7XG4gICAgaWYgKG9wdHMuZXh0cmFIZWFkZXJzICYmIE9iamVjdC5rZXlzKG9wdHMuZXh0cmFIZWFkZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmxvY2FsQWRkcmVzcykge1xuICAgICAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgb24gaGFuZHNoYWtlXG4gIHRoaXMuaWQgPSBudWxsO1xuICB0aGlzLnVwZ3JhZGVzID0gbnVsbDtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcblxuICAvLyBzZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucGluZ0ludGVydmFsVGltZXIgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuXG4gIHRoaXMub3BlbigpO1xufVxuXG5Tb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5cbi8qKlxuICogRXhwb3NlIGRlcHMgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5XG4gKiBhbmQgc3RhbmRhbG9uZSBicm93c2VyIGFjY2Vzcy5cbiAqL1xuXG5Tb2NrZXQuU29ja2V0ID0gU29ja2V0O1xuU29ja2V0LlRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0Jyk7XG5Tb2NrZXQudHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9pbmRleCcpO1xuU29ja2V0LnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRyYW5zcG9ydCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHF1ZXJ5ID0gY2xvbmUodGhpcy5xdWVyeSk7XG5cbiAgLy8gYXBwZW5kIGVuZ2luZS5pbyBwcm90b2NvbCBpZGVudGlmaWVyXG4gIHF1ZXJ5LkVJTyA9IHBhcnNlci5wcm90b2NvbDtcblxuICAvLyB0cmFuc3BvcnQgbmFtZVxuICBxdWVyeS50cmFuc3BvcnQgPSBuYW1lO1xuXG4gIC8vIHBlci10cmFuc3BvcnQgb3B0aW9uc1xuICB2YXIgb3B0aW9ucyA9IHRoaXMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSB8fCB7fTtcblxuICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKHRoaXMuaWQpIHF1ZXJ5LnNpZCA9IHRoaXMuaWQ7XG5cbiAgdmFyIHRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzW25hbWVdKHtcbiAgICBxdWVyeTogcXVlcnksXG4gICAgc29ja2V0OiB0aGlzLFxuICAgIGFnZW50OiBvcHRpb25zLmFnZW50IHx8IHRoaXMuYWdlbnQsXG4gICAgaG9zdG5hbWU6IG9wdGlvbnMuaG9zdG5hbWUgfHwgdGhpcy5ob3N0bmFtZSxcbiAgICBwb3J0OiBvcHRpb25zLnBvcnQgfHwgdGhpcy5wb3J0LFxuICAgIHNlY3VyZTogb3B0aW9ucy5zZWN1cmUgfHwgdGhpcy5zZWN1cmUsXG4gICAgcGF0aDogb3B0aW9ucy5wYXRoIHx8IHRoaXMucGF0aCxcbiAgICBmb3JjZUpTT05QOiBvcHRpb25zLmZvcmNlSlNPTlAgfHwgdGhpcy5mb3JjZUpTT05QLFxuICAgIGpzb25wOiBvcHRpb25zLmpzb25wIHx8IHRoaXMuanNvbnAsXG4gICAgZm9yY2VCYXNlNjQ6IG9wdGlvbnMuZm9yY2VCYXNlNjQgfHwgdGhpcy5mb3JjZUJhc2U2NCxcbiAgICBlbmFibGVzWERSOiBvcHRpb25zLmVuYWJsZXNYRFIgfHwgdGhpcy5lbmFibGVzWERSLFxuICAgIHRpbWVzdGFtcFJlcXVlc3RzOiBvcHRpb25zLnRpbWVzdGFtcFJlcXVlc3RzIHx8IHRoaXMudGltZXN0YW1wUmVxdWVzdHMsXG4gICAgdGltZXN0YW1wUGFyYW06IG9wdGlvbnMudGltZXN0YW1wUGFyYW0gfHwgdGhpcy50aW1lc3RhbXBQYXJhbSxcbiAgICBwb2xpY3lQb3J0OiBvcHRpb25zLnBvbGljeVBvcnQgfHwgdGhpcy5wb2xpY3lQb3J0LFxuICAgIHBmeDogb3B0aW9ucy5wZnggfHwgdGhpcy5wZngsXG4gICAga2V5OiBvcHRpb25zLmtleSB8fCB0aGlzLmtleSxcbiAgICBwYXNzcGhyYXNlOiBvcHRpb25zLnBhc3NwaHJhc2UgfHwgdGhpcy5wYXNzcGhyYXNlLFxuICAgIGNlcnQ6IG9wdGlvbnMuY2VydCB8fCB0aGlzLmNlcnQsXG4gICAgY2E6IG9wdGlvbnMuY2EgfHwgdGhpcy5jYSxcbiAgICBjaXBoZXJzOiBvcHRpb25zLmNpcGhlcnMgfHwgdGhpcy5jaXBoZXJzLFxuICAgIHJlamVjdFVuYXV0aG9yaXplZDogb3B0aW9ucy5yZWplY3RVbmF1dGhvcml6ZWQgfHwgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQsXG4gICAgcGVyTWVzc2FnZURlZmxhdGU6IG9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUgfHwgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSxcbiAgICBleHRyYUhlYWRlcnM6IG9wdGlvbnMuZXh0cmFIZWFkZXJzIHx8IHRoaXMuZXh0cmFIZWFkZXJzLFxuICAgIGZvcmNlTm9kZTogb3B0aW9ucy5mb3JjZU5vZGUgfHwgdGhpcy5mb3JjZU5vZGUsXG4gICAgbG9jYWxBZGRyZXNzOiBvcHRpb25zLmxvY2FsQWRkcmVzcyB8fCB0aGlzLmxvY2FsQWRkcmVzcyxcbiAgICByZXF1ZXN0VGltZW91dDogb3B0aW9ucy5yZXF1ZXN0VGltZW91dCB8fCB0aGlzLnJlcXVlc3RUaW1lb3V0LFxuICAgIHByb3RvY29sczogb3B0aW9ucy5wcm90b2NvbHMgfHwgdm9pZCAoMClcbiAgfSk7XG5cbiAgcmV0dXJuIHRyYW5zcG9ydDtcbn07XG5cbmZ1bmN0aW9uIGNsb25lIChvYmopIHtcbiAgdmFyIG8gPSB7fTtcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBvW2ldID0gb2JqW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbztcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblNvY2tldC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRyYW5zcG9ydDtcbiAgaWYgKHRoaXMucmVtZW1iZXJVcGdyYWRlICYmIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiYgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoJ3dlYnNvY2tldCcpICE9PSAtMSkge1xuICAgIHRyYW5zcG9ydCA9ICd3ZWJzb2NrZXQnO1xuICB9IGVsc2UgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAvLyBFbWl0IGVycm9yIG9uIG5leHQgdGljayBzbyBpdCBjYW4gYmUgbGlzdGVuZWQgdG9cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgJ05vIHRyYW5zcG9ydHMgYXZhaWxhYmxlJyk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgfVxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG5cbiAgLy8gUmV0cnkgd2l0aCB0aGUgbmV4dCB0cmFuc3BvcnQgaWYgdGhlIHRyYW5zcG9ydCBpcyBkaXNhYmxlZCAoanNvbnA6IGZhbHNlKVxuICB0cnkge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICB0aGlzLm9wZW4oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cmFuc3BvcnQub3BlbigpO1xuICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgZGVidWcoJ3NldHRpbmcgdHJhbnNwb3J0ICVzJywgdHJhbnNwb3J0Lm5hbWUpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgZGVidWcoJ2NsZWFyaW5nIGV4aXN0aW5nIHRyYW5zcG9ydCAlcycsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG5cbiAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICB0cmFuc3BvcnRcbiAgLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uRHJhaW4oKTtcbiAgfSlcbiAgLm9uKCdwYWNrZXQnLCBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9KVxuICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoZSk7XG4gIH0pXG4gIC5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCd0cmFuc3BvcnQgY2xvc2UnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFByb2JlcyBhIHRyYW5zcG9ydC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucHJvYmUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygncHJvYmluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLCB7IHByb2JlOiAxIH0pO1xuICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRPcGVuICgpIHtcbiAgICBpZiAoc2VsZi5vbmx5QmluYXJ5VXBncmFkZXMpIHtcbiAgICAgIHZhciB1cGdyYWRlTG9zZXNCaW5hcnkgPSAhdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiBzZWxmLnRyYW5zcG9ydC5zdXBwb3J0c0JpbmFyeTtcbiAgICAgIGZhaWxlZCA9IGZhaWxlZCB8fCB1cGdyYWRlTG9zZXNCaW5hcnk7XG4gICAgfVxuICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIG9wZW5lZCcsIG5hbWUpO1xuICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICdwaW5nJywgZGF0YTogJ3Byb2JlJyB9XSk7XG4gICAgdHJhbnNwb3J0Lm9uY2UoJ3BhY2tldCcsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgIGlmICgncG9uZycgPT09IG1zZy50eXBlICYmICdwcm9iZScgPT09IG1zZy5kYXRhKSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIHBvbmcnLCBuYW1lKTtcbiAgICAgICAgc2VsZi51cGdyYWRpbmcgPSB0cnVlO1xuICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGluZycsIHRyYW5zcG9ydCk7XG4gICAgICAgIGlmICghdHJhbnNwb3J0KSByZXR1cm47XG4gICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgICAgZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgc2VsZi50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgICBkZWJ1ZygnY2hhbmdpbmcgdHJhbnNwb3J0IGFuZCBzZW5kaW5nIHVwZ3JhZGUgcGFja2V0Jyk7XG5cbiAgICAgICAgICBjbGVhbnVwKCk7XG5cbiAgICAgICAgICBzZWxmLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICd1cGdyYWRlJyB9XSk7XG4gICAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlJywgdHJhbnNwb3J0KTtcbiAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgIHNlbGYudXBncmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5mbHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcicpO1xuICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCAoKSB7XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgZmFpbGVkID0gdHJ1ZTtcblxuICAgIGNsZWFudXAoKTtcblxuICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gIH1cblxuICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9uZXJyb3IgKGVycikge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3I6ICcgKyBlcnIpO1xuICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgZnJlZXplVHJhbnNwb3J0KCk7XG5cbiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLCBuYW1lLCBlcnIpO1xuXG4gICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydENsb3NlICgpIHtcbiAgICBvbmVycm9yKCd0cmFuc3BvcnQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25jbG9zZSAoKSB7XG4gICAgb25lcnJvcignc29ja2V0IGNsb3NlZCcpO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb251cGdyYWRlICh0bykge1xuICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgIGRlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7XG4gIH1cblxuICB0cmFuc3BvcnQub25jZSgnb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gIHRyYW5zcG9ydC5vbmNlKCdlcnJvcicsIG9uZXJyb3IpO1xuICB0cmFuc3BvcnQub25jZSgnY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICB0aGlzLm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHRoaXMub25jZSgndXBncmFkaW5nJywgb251cGdyYWRlKTtcblxuICB0cmFuc3BvcnQub3BlbigpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzb2NrZXQgb3BlbicpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG4gIHRoaXMuZmx1c2goKTtcblxuICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudXBncmFkZSAmJiB0aGlzLnRyYW5zcG9ydC5wYXVzZSkge1xuICAgIGRlYnVnKCdzdGFydGluZyB1cGdyYWRlIHByb2JlcycpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJywgcGFja2V0LnR5cGUsIHBhY2tldC5kYXRhKTtcblxuICAgIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcblxuICAgIC8vIFNvY2tldCBpcyBsaXZlIC0gYW55IHBhY2tldCBjb3VudHNcbiAgICB0aGlzLmVtaXQoJ2hlYXJ0YmVhdCcpO1xuXG4gICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIHRoaXMub25IYW5kc2hha2UoSlNPTi5wYXJzZShwYWNrZXQuZGF0YSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncG9uZyc6XG4gICAgICAgIHRoaXMuc2V0UGluZygpO1xuICAgICAgICB0aGlzLmVtaXQoJ3BvbmcnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignc2VydmVyIGVycm9yJyk7XG4gICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbWVzc2FnZSc6XG4gICAgICAgIHRoaXMuZW1pdCgnZGF0YScsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgcGFja2V0LmRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlIGNvbXBsZXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhhbmRzaGFrZSBvYmpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IYW5kc2hha2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmVtaXQoJ2hhbmRzaGFrZScsIGRhdGEpO1xuICB0aGlzLmlkID0gZGF0YS5zaWQ7XG4gIHRoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IGRhdGEuc2lkO1xuICB0aGlzLnVwZ3JhZGVzID0gdGhpcy5maWx0ZXJVcGdyYWRlcyhkYXRhLnVwZ3JhZGVzKTtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBkYXRhLnBpbmdJbnRlcnZhbDtcbiAgdGhpcy5waW5nVGltZW91dCA9IGRhdGEucGluZ1RpbWVvdXQ7XG4gIHRoaXMub25PcGVuKCk7XG4gIC8vIEluIGNhc2Ugb3BlbiBoYW5kbGVyIGNsb3NlcyBzb2NrZXRcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgdGhpcy5zZXRQaW5nKCk7XG5cbiAgLy8gUHJvbG9uZyBsaXZlbmVzcyBvZiBzb2NrZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xuICB0aGlzLm9uKCdoZWFydGJlYXQnLCB0aGlzLm9uSGVhcnRiZWF0KTtcbn07XG5cbi8qKlxuICogUmVzZXRzIHBpbmcgdGltZW91dC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uSGVhcnRiZWF0ID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2VsZi5waW5nVGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICBzZWxmLm9uQ2xvc2UoJ3BpbmcgdGltZW91dCcpO1xuICB9LCB0aW1lb3V0IHx8IChzZWxmLnBpbmdJbnRlcnZhbCArIHNlbGYucGluZ1RpbWVvdXQpKTtcbn07XG5cbi8qKlxuICogUGluZ3Mgc2VydmVyIGV2ZXJ5IGB0aGlzLnBpbmdJbnRlcnZhbGAgYW5kIGV4cGVjdHMgcmVzcG9uc2VcbiAqIHdpdGhpbiBgdGhpcy5waW5nVGltZW91dGAgb3IgY2xvc2VzIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZXRQaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNsZWFyVGltZW91dChzZWxmLnBpbmdJbnRlcnZhbFRpbWVyKTtcbiAgc2VsZi5waW5nSW50ZXJ2YWxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIHBpbmcgcGFja2V0IC0gZXhwZWN0aW5nIHBvbmcgd2l0aGluICVzbXMnLCBzZWxmLnBpbmdUaW1lb3V0KTtcbiAgICBzZWxmLnBpbmcoKTtcbiAgICBzZWxmLm9uSGVhcnRiZWF0KHNlbGYucGluZ1RpbWVvdXQpO1xuICB9LCBzZWxmLnBpbmdJbnRlcnZhbCk7XG59O1xuXG4vKipcbiogU2VuZHMgYSBwaW5nIHBhY2tldC5cbipcbiogQGFwaSBwcml2YXRlXG4qL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZW5kUGFja2V0KCdwaW5nJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuZW1pdCgncGluZycpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG5cbiAgLy8gc2V0dGluZyBwcmV2QnVmZmVyTGVuID0gMCBpcyB2ZXJ5IGltcG9ydGFudFxuICAvLyBmb3IgZXhhbXBsZSwgd2hlbiB1cGdyYWRpbmcsIHVwZ3JhZGUgcGFja2V0IGlzIHNlbnQgb3ZlcixcbiAgLy8gYW5kIGEgbm9uemVybyBwcmV2QnVmZmVyTGVuIGNvdWxkIGNhdXNlIHByb2JsZW1zIG9uIGBkcmFpbmBcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcblxuICBpZiAoMCA9PT0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICB0aGlzLmVtaXQoJ2RyYWluJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5mbHVzaCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEZsdXNoIHdyaXRlIGJ1ZmZlcnMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiZcbiAgICAhdGhpcy51cGdyYWRpbmcgJiYgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICBkZWJ1ZygnZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXQnLCB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCk7XG4gICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIGN1cnJlbnQgbGVuZ3RoIG9mIHdyaXRlQnVmZmVyXG4gICAgLy8gc3BsaWNlIHdyaXRlQnVmZmVyIGFuZCBjYWxsYmFja0J1ZmZlciBvbiBgZHJhaW5gXG4gICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgdGhpcy5lbWl0KCdmbHVzaCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS53cml0ZSA9XG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobXNnLCBvcHRpb25zLCBmbikge1xuICB0aGlzLnNlbmRQYWNrZXQoJ21lc3NhZ2UnLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWNrZXQgdHlwZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZFBhY2tldCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICBmbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgIGZuID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuXG4gIGlmICgnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuY29tcHJlc3MgPSBmYWxzZSAhPT0gb3B0aW9ucy5jb21wcmVzcztcblxuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgZGF0YTogZGF0YSxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH07XG4gIHRoaXMuZW1pdCgncGFja2V0Q3JlYXRlJywgcGFja2V0KTtcbiAgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIGlmIChmbikgdGhpcy5vbmNlKCdmbHVzaCcsIGZuKTtcbiAgdGhpcy5mbHVzaCgpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NpbmcnO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIHNlbGYub25DbG9zZSgnZm9yY2VkIGNsb3NlJyk7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zaW5nIC0gdGVsbGluZyB0cmFuc3BvcnQgdG8gY2xvc2UnKTtcbiAgICBzZWxmLnRyYW5zcG9ydC5jbG9zZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cEFuZENsb3NlICgpIHtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlJywgY2xlYW51cEFuZENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIGNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiB3YWl0Rm9yVXBncmFkZSAoKSB7XG4gICAgLy8gd2FpdCBmb3IgdXBncmFkZSB0byBmaW5pc2ggc2luY2Ugd2UgY2FuJ3Qgc2VuZCBwYWNrZXRzIHdoaWxlIHBhdXNpbmcgYSB0cmFuc3BvcnRcbiAgICBzZWxmLm9uY2UoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYub25jZSgndXBncmFkZUVycm9yJywgY2xlYW51cEFuZENsb3NlKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIGRlYnVnKCdzb2NrZXQgZXJyb3IgJWonLCBlcnIpO1xuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLm9uQ2xvc2UoJ3RyYW5zcG9ydCBlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAocmVhc29uLCBkZXNjKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gY2xlYXIgdGltZXJzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ0ludGVydmFsVGltZXIpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuXG4gICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCdjbG9zZScpO1xuXG4gICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuXG4gICAgLy8gaWdub3JlIGZ1cnRoZXIgdHJhbnNwb3J0IGNvbW11bmljYXRpb25cbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblxuICAgIC8vIHNldCByZWFkeSBzdGF0ZVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuXG4gICAgLy8gY2xlYXIgc2Vzc2lvbiBpZFxuICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgLy8gZW1pdCBjbG9zZSBldmVudFxuICAgIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24sIGRlc2MpO1xuXG4gICAgLy8gY2xlYW4gYnVmZmVycyBhZnRlciwgc28gdXNlcnMgY2FuIHN0aWxsXG4gICAgLy8gZ3JhYiB0aGUgYnVmZmVycyBvbiBgY2xvc2VgIGV2ZW50XG4gICAgc2VsZi53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIHNlbGYucHJldkJ1ZmZlckxlbiA9IDA7XG4gIH1cbn07XG5cbi8qKlxuICogRmlsdGVycyB1cGdyYWRlcywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgbWF0Y2hpbmcgY2xpZW50IHRyYW5zcG9ydHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2VydmVyIHVwZ3JhZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5maWx0ZXJVcGdyYWRlcyA9IGZ1bmN0aW9uICh1cGdyYWRlcykge1xuICB2YXIgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgaiA9IHVwZ3JhZGVzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmICh+aW5kZXgodGhpcy50cmFuc3BvcnRzLCB1cGdyYWRlc1tpXSkpIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0cyBwYXJzZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuIiwiLypnbG9iYWwgQmxvYixGaWxlKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBnbG9iYWwuQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fCB0b1N0cmluZy5jYWxsKGdsb2JhbC5CbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXSc7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgZ2xvYmFsLkZpbGUgPT09ICdmdW5jdGlvbicgfHwgdG9TdHJpbmcuY2FsbChnbG9iYWwuRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nO1xuXG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXG4gKiBBbnl0aGluZyB3aXRoIGJsb2JzIG9yIGZpbGVzIHNob3VsZCBiZSBmZWQgdGhyb3VnaCByZW1vdmVCbG9icyBiZWZvcmUgY29taW5nXG4gKiBoZXJlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBwYWNrZXREYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBwYWNrID0gcGFja2V0O1xuICBwYWNrLmRhdGEgPSBfZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0RGF0YSwgYnVmZmVycyk7XG4gIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gIHJldHVybiB7cGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzfTtcbn07XG5cbmZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGlzQnVmKGRhdGEpKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICBidWZmZXJzLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdEYXRhW2ldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBuZXdEYXRhW2tleV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnJlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBidWZmZXJzKSB7XG4gIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gIHJldHVybiBwYWNrZXQ7XG59O1xuXG5mdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcnNbZGF0YS5udW1dOyAvLyBhcHByb3ByaWF0ZSBidWZmZXIgKHNob3VsZCBiZSBuYXR1cmFsIG9yZGVyIGFueXdheSlcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgcmVtb3ZlcyBCbG9icyBvciBGaWxlcyBmcm9tIGRhdGEgdmlhXG4gKiBGaWxlUmVhZGVyJ3MgcmVhZEFzQXJyYXlCdWZmZXIgbWV0aG9kLiBVc2VkIGJlZm9yZSBlbmNvZGluZ1xuICogZGF0YSBhcyBtc2dwYWNrLiBDYWxscyBjYWxsYmFjayB3aXRoIHRoZSBibG9ibGVzcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5yZW1vdmVCbG9icyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIF9yZW1vdmVCbG9icyhvYmosIGN1cktleSwgY29udGFpbmluZ09iamVjdCkge1xuICAgIGlmICghb2JqKSByZXR1cm4gb2JqO1xuXG4gICAgLy8gY29udmVydCBhbnkgYmxvYlxuICAgIGlmICgod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKSB7XG4gICAgICBwZW5kaW5nQmxvYnMrKztcblxuICAgICAgLy8gYXN5bmMgZmlsZXJlYWRlclxuICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgLy8gdGhpcy5yZXN1bHQgPT0gYXJyYXlidWZmZXJcbiAgICAgICAgaWYgKGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICAgICAgICBjb250YWluaW5nT2JqZWN0W2N1cktleV0gPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBibG9ibGVzc0RhdGEgPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdGhpbmcgcGVuZGluZyBpdHMgY2FsbGJhY2sgdGltZVxuICAgICAgICBpZighIC0tcGVuZGluZ0Jsb2JzKSB7XG4gICAgICAgICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihvYmopOyAvLyBibG9iIC0+IGFycmF5YnVmZmVyXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikpIHsgLy8gaGFuZGxlIGFycmF5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWlzQnVmKG9iaikpIHsgLy8gYW5kIG9iamVjdFxuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcGVuZGluZ0Jsb2JzID0gMDtcbiAgdmFyIGJsb2JsZXNzRGF0YSA9IGRhdGE7XG4gIF9yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpO1xuICBpZiAoIXBlbmRpbmdCbG9icykge1xuICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gIH1cbn07XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydHMuaW5zdGFuY2VzID0gW107XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIHZhciBwcmV2VGltZTtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgZXhwb3J0cy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdmFyIGluZGV4ID0gZXhwb3J0cy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGV4cG9ydHMuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIGk7XG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBleHBvcnRzLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnN0YW5jZSA9IGV4cG9ydHMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG5cbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybCAodXJpLCBsb2MpIHtcbiAgdmFyIG9iaiA9IHVyaTtcblxuICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICBsb2MgPSBsb2MgfHwgZ2xvYmFsLmxvY2F0aW9uO1xuICBpZiAobnVsbCA9PSB1cmkpIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyBsb2MuaG9zdDtcblxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZVxuICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7XG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICBpZiAoIW9iai5wb3J0KSB7XG4gICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc4MCc7XG4gICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7XG4gICAgfVxuICB9XG5cbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XG5cbiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xO1xuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xuXG4gIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XG4gIC8vIGRlZmluZSBocmVmXG4gIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpO1xuXG4gIHJldHVybiBvYmo7XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXJsID0gcmVxdWlyZSgnLi91cmwnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcblxuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuXG52YXIgY2FjaGUgPSBleHBvcnRzLm1hbmFnZXJzID0ge307XG5cbi8qKlxuICogTG9va3MgdXAgYW4gZXhpc3RpbmcgYE1hbmFnZXJgIGZvciBtdWx0aXBsZXhpbmcuXG4gKiBJZiB0aGUgdXNlciBzdW1tb25zOlxuICpcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2EnKTtgXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9iJyk7YFxuICpcbiAqIFdlIHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZSBiYXNlZCBvbiBzYW1lIHNjaGVtZS9wb3J0L2hvc3QsXG4gKiBhbmQgd2UgaW5pdGlhbGl6ZSBzb2NrZXRzIGZvciBlYWNoIG5hbWVzcGFjZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAodXJpLCBvcHRzKSB7XG4gIGlmICh0eXBlb2YgdXJpID09PSAnb2JqZWN0Jykge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgdmFyIHBhcnNlZCA9IHVybCh1cmkpO1xuICB2YXIgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgdmFyIGlkID0gcGFyc2VkLmlkO1xuICB2YXIgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXS5uc3BzO1xuICB2YXIgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHwgb3B0c1snZm9yY2UgbmV3IGNvbm5lY3Rpb24nXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fCBzYW1lTmFtZXNwYWNlO1xuXG4gIHZhciBpbztcblxuICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgIGRlYnVnKCdpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzJywgc291cmNlKTtcbiAgICBpbyA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgZGVidWcoJ25ldyBpbyBpbnN0YW5jZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgICAgY2FjaGVbaWRdID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgIH1cbiAgICBpbyA9IGNhY2hlW2lkXTtcbiAgfVxuICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgb3B0cy5xdWVyeSA9IHBhcnNlZC5xdWVyeTtcbiAgfVxuICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDtcblxuLyoqXG4gKiBgY29ubmVjdGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XG5cbi8qKlxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xuZXhwb3J0cy5Tb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xyXG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWVcclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhMjc4NDYwOGFmMGE1MjBlMGU4ZWQ2MzNhYmU2OTdlOS5wbmdcIjsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIiNpbnB1dC1jb21wb25lbnQge1xcbiAgaGVpZ2h0OiAyMDBweDtcXG4gIGZsZXg6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTdDMEI3O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgfVxcbiAgI2lucHV0LWNvbXBvbmVudCBmb3JtIHtcXG4gICAgZm9udC1mYW1pbHk6IFZlcmRhbmE7XFxuICAgIHBhZGRpbmc6IDIwcHg7IH1cXG4gICAgI2lucHV0LWNvbXBvbmVudCBmb3JtIGJ1dHRvbiB7XFxuICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZWZlZmU7XFxuICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICBoZWlnaHQ6IDUwcHg7XFxuICAgICAgYm9yZGVyOiAycHggc29saWQgd2hpdGU7XFxuICAgICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgIC1tb3otYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgICAtbXMtYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgIGNvbG9yOiAjNzJBN0EzO1xcbiAgICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OyB9XFxuICAgICAgI2lucHV0LWNvbXBvbmVudCBmb3JtIGJ1dHRvbiBpbWcge1xcbiAgICAgICAgd2lkdGg6IDMwcHg7XFxuICAgICAgICBoZWlnaHQ6IDMwcHg7XFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4O1xcbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfVxcbiAgICAjaW5wdXQtY29tcG9uZW50IGZvcm0gYnV0dG9uOmhvdmVyIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsgfVxcbiAgICAjaW5wdXQtY29tcG9uZW50IGZvcm0gYnV0dG9uOmhvdmVyOmRpc2FibGVkIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmVmZWZlOyB9XFxuICAgICNpbnB1dC1jb21wb25lbnQgZm9ybSBidXR0b246ZGlzYWJsZWQge1xcbiAgICAgIG9wYWNpdHk6IDAuNTsgfVxcbiAgICAjaW5wdXQtY29tcG9uZW50IGZvcm0gdGV4dGFyZWEge1xcbiAgICAgIGhlaWdodDogMTUwcHg7IH1cXG4gICAgI2lucHV0LWNvbXBvbmVudCBmb3JtIGlucHV0W3R5cGU9dGV4dF0sICNpbnB1dC1jb21wb25lbnQgZm9ybSB0ZXh0YXJlYSB7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcXG4gICAgICBib3JkZXI6IDJweCBzb2xpZCB3aGl0ZTtcXG4gICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgLW1vei1ib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgIC1tcy1ib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICBjb2xvcjogIzcyQTdBMztcXG4gICAgICB3aWR0aDogNDAwcHg7XFxuICAgICAgZm9udC1zaXplOiAyMHB4OyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vSW5wdXRDb21wb25lbnQuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9JbnB1dENvbXBvbmVudC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9JbnB1dENvbXBvbmVudC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9JbnB1dENvbXBvbmVudC5zY3NzJztcbmltcG9ydCBzZW5kSW1nIGZyb20gJy4vaW1nL3NlbmQucG5nJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBpbnB1dENoYW5nZSwgc2VuZE1lc3NhZ2UgfSBmcm9tICcuLi9hY3Rpb25zL2FjdGlvbnMnO1xuXG5jbGFzcyBJbnB1dENvbXBvbmVudCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHN1Ym1pdE1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB1c2VybmFtZSxcbiAgICAgIGN1cnJlbnRNZXNzYWdlLFxuICAgICAgaGFuZGxlU3VibWl0XG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYoIWN1cnJlbnRNZXNzYWdlIHx8ICFjdXJyZW50TWVzc2FnZS5sZW5ndGggfHwgY3VycmVudE1lc3NhZ2UubGVuZ3RoID4gNTAwKSB7XG4gICAgICBjb25zb2xlLmxvZygnTWVzc2FnZSBub3QgdmFsaWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBoYW5kbGVTdWJtaXQoXG4gICAgICBjdXJyZW50TWVzc2FnZSxcbiAgICAgICh1c2VybmFtZS5sZW5ndGggPyB1c2VybmFtZSA6ICdBbm9ueW1vdXMnKSxcbiAgICAgIG5ldyBEYXRlKERhdGUubm93KCkpLnRvTG9jYWxlVGltZVN0cmluZygpXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB1c2VybmFtZSxcbiAgICAgIGN1cnJlbnRNZXNzYWdlLFxuICAgICAgaGFuZGxlQ2hhbmdlLFxuICAgICAgaGFuZGxlU3VibWl0LFxuICAgICAgaXNSZXRyaWV2aW5nQ29udmVyc2F0aW9uXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGlkPSdpbnB1dC1jb21wb25lbnQnPlxuICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5zdWJtaXRNZXNzYWdlfSA+XG4gICAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIHZhbHVlPXt1c2VybmFtZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IGhhbmRsZUNoYW5nZSgndXNlcm5hbWUnLCBlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nWW91ciB1c2VybmFtZScgLz5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICA8dGV4dGFyZWEgbmFtZT0nY3VycmVudE1lc3NhZ2UnIHZhbHVlPXtjdXJyZW50TWVzc2FnZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IGhhbmRsZUNoYW5nZSgnY3VycmVudE1lc3NhZ2UnLCBlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nWW91ciBtZXNzYWdlJyAvPlxuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIDxidXR0b24gZGlzYWJsZWQ9e2lzUmV0cmlldmluZ0NvbnZlcnNhdGlvbn0gPjxpbWcgc3JjPXtzZW5kSW1nfSBhbHQ9J1NlbmQnIC8+U2VuZDwvYnV0dG9uPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+IHtcbiAgcmV0dXJuIHtcbiAgICB1c2VybmFtZTogc3RhdGUuY3VycmVudElucHV0LnVzZXJuYW1lLFxuICAgIGN1cnJlbnRNZXNzYWdlOiBzdGF0ZS5jdXJyZW50SW5wdXQuY3VycmVudE1lc3NhZ2UsXG4gICAgaXNSZXRyaWV2aW5nQ29udmVyc2F0aW9uOiBzdGF0ZS5pc1JldHJpZXZpbmdDb252ZXJzYXRpb25cbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IGRpc3BhdGNoID0+IHtcbiAgcmV0dXJuIHtcbiAgICBoYW5kbGVDaGFuZ2U6IChuYW1lLCB2YWx1ZSkgPT4gZGlzcGF0Y2goaW5wdXRDaGFuZ2UobmFtZSwgdmFsdWUpKSxcbiAgICBoYW5kbGVTdWJtaXQ6ICh0ZXh0LCB1c2VybmFtZSwgZGF0ZSkgPT4gZGlzcGF0Y2goc2VuZE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdGV4dCxcbiAgICAgIHVzZXJuYW1lLFxuICAgICAgZGF0ZVxuICAgIH0pKSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzKVxuICAoSW5wdXRDb21wb25lbnQpOyIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIGZvbnQtZmFtaWx5OiBWZXJkYW5hO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDsgfVxcblxcbiNjb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBoZWlnaHQ6IDEwMHZoOyB9XFxuXFxuaDEge1xcbiAgY29sb3I6ICMwQTU1NUM7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9BcHAuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9BcHAuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vQXBwLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICcuL0FwcC5zY3NzJztcbmltcG9ydCBJbnB1dENvbXBvbmVudCBmcm9tICcuL0lucHV0Q29tcG9uZW50JztcbmltcG9ydCBNZXNzYWdlTGlzdCBmcm9tICcuL01lc3NhZ2VMaXN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBpZD0nY29udGFpbmVyJz5cbiAgICAgICAgPE1lc3NhZ2VMaXN0IC8+XG4gICAgICAgIDxJbnB1dENvbXBvbmVudCAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgZG9jID0gb2JqZWN0ID8gb2JqZWN0Lm93bmVyRG9jdW1lbnQgfHwgb2JqZWN0IDogZG9jdW1lbnQ7XG4gIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBkZWZhdWx0Vmlldy5Ob2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgZGVmYXVsdFZpZXcuTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL2lzTm9kZScpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGJhPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksZWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLEE9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksQz1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudFwiKSxoYT1yZXF1aXJlKFwiZmJqcy9saWIvc2hhbGxvd0VxdWFsXCIpLGphPXJlcXVpcmUoXCJmYmpzL2xpYi9jb250YWluc05vZGVcIiksa2E9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpO1xuZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50XFx4M2RcIithLGQ9MDtkPGI7ZCsrKWMrPVwiXFx4MjZhcmdzW11cXHgzZFwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YmEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1lYT92b2lkIDA6RChcIjIyN1wiKTtcbmZ1bmN0aW9uIG1hKGEsYixjLGQsZSxmLGgsZyxrKXt0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMTt0aGlzLl9jYXVnaHRFcnJvcj1udWxsO3ZhciB2PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLHYpfWNhdGNoKGwpe3RoaXMuX2NhdWdodEVycm9yPWwsdGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITB9fVxudmFyIEU9e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbnZva2VHdWFyZGVkQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsaCxnLGspe21hLmFwcGx5KEUsYXJndW1lbnRzKX0saW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXtFLmludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoRS5oYXNDYXVnaHRFcnJvcigpKXt2YXIgdj1FLmNsZWFyQ2F1Z2h0RXJyb3IoKTtFLl9oYXNSZXRocm93RXJyb3J8fChFLl9oYXNSZXRocm93RXJyb3I9ITAsRS5fcmV0aHJvd0Vycm9yPXYpfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIG5hLmFwcGx5KEUsYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gRS5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihFLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9XG5FLl9jYXVnaHRFcnJvcjtFLl9jYXVnaHRFcnJvcj1udWxsO0UuX2hhc0NhdWdodEVycm9yPSExO3JldHVybiBhfUQoXCIxOThcIil9fTtmdW5jdGlvbiBuYSgpe2lmKEUuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9RS5fcmV0aHJvd0Vycm9yO0UuX3JldGhyb3dFcnJvcj1udWxsO0UuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIG9hPW51bGwscGE9e307XG5mdW5jdGlvbiBxYSgpe2lmKG9hKWZvcih2YXIgYSBpbiBwYSl7dmFyIGI9cGFbYV0sYz1vYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkQoXCI5NlwiLGEpO2lmKCFyYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpEKFwiOTdcIixhKTtyYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxoPWIsZz1kO3NhLmhhc093blByb3BlcnR5KGcpP0QoXCI5OVwiLGcpOnZvaWQgMDtzYVtnXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ0YShrW2VdLGgsZyk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odGEoZi5yZWdpc3RyYXRpb25OYW1lLGgsZyksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpEKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gdGEoYSxiLGMpe3VhW2FdP0QoXCIxMDBcIixhKTp2b2lkIDA7dWFbYV09Yjt2YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciByYT1bXSxzYT17fSx1YT17fSx2YT17fTtmdW5jdGlvbiB3YShhKXtvYT9EKFwiMTAxXCIpOnZvaWQgMDtvYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtxYSgpfWZ1bmN0aW9uIHhhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO3BhLmhhc093blByb3BlcnR5KGMpJiZwYVtjXT09PWR8fChwYVtjXT9EKFwiMTAyXCIsYyk6dm9pZCAwLHBhW2NdPWQsYj0hMCl9YiYmcWEoKX1cbnZhciBDYT1PYmplY3QuZnJlZXplKHtwbHVnaW5zOnJhLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpzYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczp1YSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOnZhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOndhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp4YX0pLERhPW51bGwsRWE9bnVsbCxGYT1udWxsO2Z1bmN0aW9uIEdhKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9RmEoZCk7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIEhhKGEsYil7bnVsbD09Yj9EKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBJYShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgSmE9bnVsbDtcbmZ1bmN0aW9uIEthKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKUdhKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmR2EoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gTGEoYSl7cmV0dXJuIEthKGEsITApfWZ1bmN0aW9uIE1hKGEpe3JldHVybiBLYShhLCExKX12YXIgTmE9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6d2EsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnhhfTtcbmZ1bmN0aW9uIE9hKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9RGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIFBhKGEsYil7bnVsbCE9PWEmJihKYT1IYShKYSxhKSk7YT1KYTtKYT1udWxsO2EmJihiP0lhKGEsTGEpOklhKGEsTWEpLEphP0QoXCI5NVwiKTp2b2lkIDAsRS5yZXRocm93Q2F1Z2h0RXJyb3IoKSl9ZnVuY3Rpb24gUWEoYSxiLGMsZCl7Zm9yKHZhciBlPW51bGwsZj0wO2Y8cmEubGVuZ3RoO2YrKyl7dmFyIGg9cmFbZl07aCYmKGg9aC5leHRyYWN0RXZlbnRzKGEsYixjLGQpKSYmKGU9SGEoZSxoKSl9UGEoZSwhMSl9dmFyIFJhPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpOYSxnZXRMaXN0ZW5lcjpPYSxydW5FdmVudHNJbkJhdGNoOlBhLHJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2g6UWF9KSxTYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrU2EsVGE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitTYTtcbmZ1bmN0aW9uIFVhKGEpe2lmKGFbRl0pcmV0dXJuIGFbRl07Zm9yKDshYVtGXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0ZdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gVmEoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0QoXCIzM1wiKX1mdW5jdGlvbiBYYShhKXtyZXR1cm4gYVtUYV18fG51bGx9dmFyIGJiPU9iamVjdC5mcmVlemUoe3ByZWNhY2hlRmliZXJOb2RlOmZ1bmN0aW9uKGEsYil7YltGXT1hfSxnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTpVYSxnZXRJbnN0YW5jZUZyb21Ob2RlOmZ1bmN0aW9uKGEpe2E9YVtGXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfSxnZXROb2RlRnJvbUluc3RhbmNlOlZhLGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU6WGEsdXBkYXRlRmliZXJQcm9wczpmdW5jdGlvbihhLGIpe2FbVGFdPWJ9fSk7XG5mdW5jdGlvbiBMKGEpe2RvIGE9YVtcInJldHVyblwiXTt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBjYihhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPUwoYSk7Zm9yKGE9ZC5sZW5ndGg7MDxhLS07KWIoZFthXSxcImNhcHR1cmVkXCIsYyk7Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyliKGRbYV0sXCJidWJibGVkXCIsYyl9ZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGI9T2EoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1IYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1IYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBlYihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZjYihhLl90YXJnZXRJbnN0LGRiLGEpfVxuZnVuY3Rpb24gZmIoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7dmFyIGI9YS5fdGFyZ2V0SW5zdDtiPWI/TChiKTpudWxsO2NiKGIsZGIsYSl9fWZ1bmN0aW9uIGdiKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPU9hKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1IYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1IYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gaGIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZnYihhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gaWIoYSl7SWEoYSxlYil9XG5mdW5jdGlvbiBqYihhLGIsYyxkKXtpZihjJiZkKWE6e3ZhciBlPWM7Zm9yKHZhciBmPWQsaD0wLGc9ZTtnO2c9TChnKSloKys7Zz0wO2Zvcih2YXIgaz1mO2s7az1MKGspKWcrKztmb3IoOzA8aC1nOyllPUwoZSksaC0tO2Zvcig7MDxnLWg7KWY9TChmKSxnLS07Zm9yKDtoLS07KXtpZihlPT09Znx8ZT09PWYuYWx0ZXJuYXRlKWJyZWFrIGE7ZT1MKGUpO2Y9TChmKX1lPW51bGx9ZWxzZSBlPW51bGw7Zj1lO2ZvcihlPVtdO2MmJmMhPT1mOyl7aD1jLmFsdGVybmF0ZTtpZihudWxsIT09aCYmaD09PWYpYnJlYWs7ZS5wdXNoKGMpO2M9TChjKX1mb3IoYz1bXTtkJiZkIT09Zjspe2g9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2MucHVzaChkKTtkPUwoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKylnYihlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOylnYihjW2FdLFwiY2FwdHVyZWRcIixiKX1cbnZhciBrYj1PYmplY3QuZnJlZXplKHthY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOmliLGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OmZ1bmN0aW9uKGEpe0lhKGEsZmIpfSxhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6amIsYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6ZnVuY3Rpb24oYSl7SWEoYSxoYil9fSksbGI9bnVsbDtmdW5jdGlvbiBtYigpeyFsYiYmbS5jYW5Vc2VET00mJihsYj1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiBsYn12YXIgTT17X3Jvb3Q6bnVsbCxfc3RhcnRUZXh0Om51bGwsX2ZhbGxiYWNrVGV4dDpudWxsfTtcbmZ1bmN0aW9uIG5iKCl7aWYoTS5fZmFsbGJhY2tUZXh0KXJldHVybiBNLl9mYWxsYmFja1RleHQ7dmFyIGEsYj1NLl9zdGFydFRleHQsYz1iLmxlbmd0aCxkLGU9b2IoKSxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBoPWMtYTtmb3IoZD0xO2Q8PWgmJmJbYy1kXT09PWVbZi1kXTtkKyspO00uX2ZhbGxiYWNrVGV4dD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApO3JldHVybiBNLl9mYWxsYmFja1RleHR9ZnVuY3Rpb24gb2IoKXtyZXR1cm5cInZhbHVlXCJpbiBNLl9yb290P00uX3Jvb3QudmFsdWU6TS5fcm9vdFttYigpXX1cbnZhciBwYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLHFiPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpDLnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gTihhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Qy50aGF0UmV0dXJuc1RydWU6Qy50aGF0UmV0dXJuc0ZhbHNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxuQShOLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPUMudGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNUcnVlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PUMudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6Qy50aGF0UmV0dXJuc0ZhbHNlLFxuZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPHBiLmxlbmd0aDthKyspdGhpc1twYlthXV09bnVsbH19KTtOLkludGVyZmFjZT1xYjtOLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtBKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1BKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO3JiKGMpO3JldHVybiBjfTtyYihOKTtcbmZ1bmN0aW9uIHNiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIHRiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDpEKFwiMjIzXCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiByYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1zYjthLnJlbGVhc2U9dGJ9dmFyIHViPU4uZXh0ZW5kKHtkYXRhOm51bGx9KSx2Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksd2I9WzksMTMsMjcsMzJdLHhiPW0uY2FuVXNlRE9NJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyx5Yj1udWxsO20uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJih5Yj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHpiPW0uY2FuVXNlRE9NJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYheWIsQWI9bS5jYW5Vc2VET00mJigheGJ8fHliJiY4PHliJiYxMT49eWIpLEJiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLEtiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1widG9wQ29tcG9zaXRpb25FbmRcIixcInRvcEtleVByZXNzXCIsXCJ0b3BUZXh0SW5wdXRcIixcInRvcFBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uRW5kIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25TdGFydCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblVwZGF0ZSB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX19LExiPSExO1xuZnVuY3Rpb24gTWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuLTEhPT13Yi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcInRvcEtleURvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wQmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIE5iKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIE9iPSExO2Z1bmN0aW9uIFBiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBOYihiKTtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7TGI9ITA7cmV0dXJuIEJiO2Nhc2UgXCJ0b3BUZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PUJiJiZMYj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBRYihhLGIpe2lmKE9iKXJldHVyblwidG9wQ29tcG9zaXRpb25FbmRcIj09PWF8fCF4YiYmTWIoYSxiKT8oYT1uYigpLE0uX3Jvb3Q9bnVsbCxNLl9zdGFydFRleHQ9bnVsbCxNLl9mYWxsYmFja1RleHQ9bnVsbCxPYj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wUGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5UHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gQWI/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgUmI9e2V2ZW50VHlwZXM6S2IsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHhiKWI6e3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25TdGFydFwiOmU9S2IuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOmU9S2IuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25VcGRhdGVcIjplPUtiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSBPYj9NYihhLGMpJiYoZT1LYi5jb21wb3NpdGlvbkVuZCk6XCJ0b3BLZXlEb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPUtiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KEFiJiYoT2J8fGUhPT1LYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1LYi5jb21wb3NpdGlvbkVuZCYmT2ImJihmPW5iKCkpOihNLl9yb290PWQsTS5fc3RhcnRUZXh0PW9iKCksT2I9ITApKSxlPXViLmdldFBvb2xlZChlLFxuYixjLGQpLGY/ZS5kYXRhPWY6KGY9TmIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLGliKGUpLGY9ZSk6Zj1udWxsOyhhPXpiP1BiKGEsYyk6UWIoYSxjKSk/KGI9dmIuZ2V0UG9vbGVkKEtiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxpYihiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxTYj1udWxsLFRiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe1NiPWF9fSxVYj1udWxsLFZiPW51bGw7ZnVuY3Rpb24gV2IoYSl7aWYoYT1FYShhKSl7U2ImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBTYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpEKFwiMTk0XCIpO3ZhciBiPURhKGEuc3RhdGVOb2RlKTtTYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gWGIoYSl7VWI/VmI/VmIucHVzaChhKTpWYj1bYV06VWI9YX1cbmZ1bmN0aW9uIFliKCl7cmV0dXJuIG51bGwhPT1VYnx8bnVsbCE9PVZifWZ1bmN0aW9uIFpiKCl7aWYoVWIpe3ZhciBhPVViLGI9VmI7VmI9VWI9bnVsbDtXYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspV2IoYlthXSl9fXZhciAkYj1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246VGIsZW5xdWV1ZVN0YXRlUmVzdG9yZTpYYixuZWVkc1N0YXRlUmVzdG9yZTpZYixyZXN0b3JlU3RhdGVJZk5lZWRlZDpaYn0pO2Z1bmN0aW9uIGFjKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gYmMoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gY2MoKXt9dmFyIGRjPSExO2Z1bmN0aW9uIGVjKGEsYil7aWYoZGMpcmV0dXJuIGEoYik7ZGM9ITA7dHJ5e3JldHVybiBhYyhhLGIpfWZpbmFsbHl7ZGM9ITEsWWIoKSYmKGNjKCksWmIoKSl9fVxudmFyIGZjPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIGdjKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhZmNbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIGhjKGEpe2E9YS50YXJnZXR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKCFtLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTthPVwib25cIithO2I9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIGpjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBrYyhhKXt2YXIgYj1qYyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldClyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjLmdldC5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Yy5zZXQuY2FsbCh0aGlzLGEpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSkse2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9bnVsbDtkZWxldGUgYVtiXX19fVxuZnVuY3Rpb24gbGMoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPWtjKGEpKX1mdW5jdGlvbiBtYyhhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9amMoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBuYz1lYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixPPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSxvYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jYWxsXCIpOjYwMTA0LHFjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucmV0dXJuXCIpOjYwMTA1LHJjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHNjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHZjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx3Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsXG54Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHljPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiB6YyhhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eWMmJmFbeWNdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBBYyhhKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBzYzpyZXR1cm5cIlJlYWN0RnJhZ21lbnRcIjtjYXNlIHJjOnJldHVyblwiUmVhY3RQb3J0YWxcIjtjYXNlIHBjOnJldHVyblwiUmVhY3RDYWxsXCI7Y2FzZSBxYzpyZXR1cm5cIlJlYWN0UmV0dXJuXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB4YzpyZXR1cm4gYT1hLnJlbmRlci5kaXNwbGF5TmFtZXx8YS5yZW5kZXIubmFtZXx8XCJcIixcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIn1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEJjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDE6Y2FzZSAyOmNhc2UgNTp2YXIgYz1hLl9kZWJ1Z093bmVyLGQ9YS5fZGVidWdTb3VyY2U7dmFyIGU9QWMoYSk7dmFyIGY9bnVsbDtjJiYoZj1BYyhjKSk7Yz1kO2U9XCJcXG4gICAgaW4gXCIrKGV8fFwiVW5rbm93blwiKSsoYz9cIiAoYXQgXCIrYy5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLFwiXCIpK1wiOlwiK2MubGluZU51bWJlcitcIilcIjpmP1wiIChjcmVhdGVkIGJ5IFwiK2YrXCIpXCI6XCJcIik7YnJlYWsgYTtkZWZhdWx0OmU9XCJcIn1iKz1lO2E9YVtcInJldHVyblwiXX13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBDYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sRGM9e30sRWM9e307ZnVuY3Rpb24gRmMoYSl7aWYoRWMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoRGMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITE7aWYoQ2MudGVzdChhKSlyZXR1cm4gRWNbYV09ITA7RGNbYV09ITA7cmV0dXJuITF9XG5mdW5jdGlvbiBHYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBIYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxHYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1cbmZ1bmN0aW9uIFUoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBWPXt9O1wiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDAsITEsYSxudWxsKX0pO1xuW1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO1ZbYl09bmV3IFUoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwyLCExLGEsbnVsbCl9KTtcblwiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCEwLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDQsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDYsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgU2M9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBUYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxcblRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxUYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxUYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO1YudGFiSW5kZXg9bmV3IFUoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24gVWMoYSxiLGMsZCl7dmFyIGU9Vi5oYXNPd25Qcm9wZXJ0eShiKT9WW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoSGMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP0ZjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiBWYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gV2MoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9WGMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBZYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlVjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBaYyhhLGIpe1ljKGEsYik7dmFyIGM9WGMoYi52YWx1ZSk7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2IuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT8kYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiYkYyhhLGIudHlwZSxYYyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGFkKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKVwiXCI9PT1hLnZhbHVlJiYoYS52YWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpLGEuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtiPWEubmFtZTtcIlwiIT09YiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9ZnVuY3Rpb24gJGMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfVxuZnVuY3Rpb24gWGMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fXZhciBiZD17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDaGFuZ2UgdG9wQ2xpY2sgdG9wRm9jdXMgdG9wSW5wdXQgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBjZChhLGIsYyl7YT1OLmdldFBvb2xlZChiZC5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO1hiKGMpO2liKGEpO3JldHVybiBhfXZhciBkZD1udWxsLGVkPW51bGw7ZnVuY3Rpb24gZmQoYSl7UGEoYSwhMSl9XG5mdW5jdGlvbiBnZChhKXt2YXIgYj1WYShhKTtpZihtYyhiKSlyZXR1cm4gYX1mdW5jdGlvbiBoZChhLGIpe2lmKFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBpZD0hMTttLmNhblVzZURPTSYmKGlkPWljKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIGpkKCl7ZGQmJihkZC5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixrZCksZWQ9ZGQ9bnVsbCl9ZnVuY3Rpb24ga2QoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJmdkKGVkKSYmKGE9Y2QoZWQsYSxoYyhhKSksZWMoZmQsYSkpfWZ1bmN0aW9uIGxkKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhqZCgpLGRkPWIsZWQ9YyxkZC5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixrZCkpOlwidG9wQmx1clwiPT09YSYmamQoKX1cbmZ1bmN0aW9uIG1kKGEpe2lmKFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI9PT1hfHxcInRvcEtleVVwXCI9PT1hfHxcInRvcEtleURvd25cIj09PWEpcmV0dXJuIGdkKGVkKX1mdW5jdGlvbiBuZChhLGIpe2lmKFwidG9wQ2xpY2tcIj09PWEpcmV0dXJuIGdkKGIpfWZ1bmN0aW9uIG9kKGEsYil7aWYoXCJ0b3BJbnB1dFwiPT09YXx8XCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGdkKGIpfVxudmFyIHBkPXtldmVudFR5cGVzOmJkLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6aWQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1ZhKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1oZDpnYyhlKT9pZD9mPW9kOihmPW1kLGg9bGQpOihnPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1nLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPW5kKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBjZChmLGMsZCk7aCYmaChhLGUsYik7XCJ0b3BCbHVyXCI9PT1hJiZudWxsIT1iJiYoYT1iLl93cmFwcGVyU3RhdGV8fGUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmJGMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0scWQ9Ti5leHRlbmQoe3ZpZXc6bnVsbCxcbmRldGFpbDpudWxsfSkscmQ9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIHNkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9cmRbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB0ZCgpe3JldHVybiBzZH1cbnZhciB1ZD1xZC5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGQsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9fSksdmQ9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfX0sd2Q9e2V2ZW50VHlwZXM6dmQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLFxuYixjLGQpe2lmKFwidG9wTW91c2VPdmVyXCI9PT1hJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8XCJ0b3BNb3VzZU91dFwiIT09YSYmXCJ0b3BNb3VzZU92ZXJcIiE9PWEpcmV0dXJuIG51bGw7dmFyIGU9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7XCJ0b3BNb3VzZU91dFwiPT09YT8oYT1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/VWEoYik6bnVsbCk6YT1udWxsO2lmKGE9PT1iKXJldHVybiBudWxsO3ZhciBmPW51bGw9PWE/ZTpWYShhKTtlPW51bGw9PWI/ZTpWYShiKTt2YXIgaD11ZC5nZXRQb29sZWQodmQubW91c2VMZWF2ZSxhLGMsZCk7aC50eXBlPVwibW91c2VsZWF2ZVwiO2gudGFyZ2V0PWY7aC5yZWxhdGVkVGFyZ2V0PWU7Yz11ZC5nZXRQb29sZWQodmQubW91c2VFbnRlcixiLGMsZCk7Yy50eXBlPVwibW91c2VlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PVxuZjtqYihoLGMsYSxiKTtyZXR1cm5baCxjXX19O2Z1bmN0aW9uIHhkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiW1wicmV0dXJuXCJdOyliPWJbXCJyZXR1cm5cIl07ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7YltcInJldHVyblwiXTspaWYoYj1iW1wicmV0dXJuXCJdLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24geWQoYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09eGQoYSk6ITF9ZnVuY3Rpb24gemQoYSl7MiE9PXhkKGEpP0QoXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gQWQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9eGQoYSksMz09PWI/RChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jW1wicmV0dXJuXCJdLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXJldHVybiB6ZChlKSxhO2lmKGg9PT1kKXJldHVybiB6ZChlKSxiO2g9aC5zaWJsaW5nfUQoXCIxODhcIil9aWYoY1tcInJldHVyblwiXSE9PWRbXCJyZXR1cm5cIl0pYz1lLGQ9ZjtlbHNle2g9ITE7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZTtkPWY7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1lO2M9ZjticmVha31nPWcuc2libGluZ31pZighaCl7Zm9yKGc9Zi5jaGlsZDtnOyl7aWYoZz09PWMpe2g9ITA7Yz1mO2Q9ZTticmVha31pZihnPT09ZCl7aD0hMDtkPWY7Yz1lO2JyZWFrfWc9Zy5zaWJsaW5nfWg/XG52b2lkIDA6RChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP0QoXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz9EKFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIEJkKGEpe2E9QWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybiBudWxsO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBDZChhKXthPUFkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQmJjQhPT1iLnRhZyliLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybiBudWxsO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319cmV0dXJuIG51bGx9dmFyIERkPU4uZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxFZD1OLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEZkPXFkLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBHZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBIZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sSWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LEpkPXFkLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1IZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1HZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/SWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP0dkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP0dkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksS2Q9dWQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLExkPXFkLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkfSksTWQ9Ti5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksTmQ9dWQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSxPZD17fSxQZD17fTtmdW5jdGlvbiBRZChhLGIpe3ZhciBjPWFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpLGQ9XCJvblwiK2M7Yz1cInRvcFwiK2M7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07T2RbYV09YjtQZFtjXT1ifVxuXCJibHVyIGNhbmNlbCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkb3VibGVDbGljayBkcmFnRW5kIGRyYWdTdGFydCBkcm9wIGZvY3VzIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBtb3VzZURvd24gbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHJhdGVDaGFuZ2UgcmVzZXQgc2Vla2VkIHN1Ym1pdCB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1FkKGEsITApfSk7XG5cImFib3J0IGFuaW1hdGlvbkVuZCBhbmltYXRpb25JdGVyYXRpb24gYW5pbWF0aW9uU3RhcnQgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBkcmFnIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIHBsYXlpbmcgcHJvZ3Jlc3Mgc2Nyb2xsIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWVVcGRhdGUgdG9nZ2xlIHRvdWNoTW92ZSB0cmFuc2l0aW9uRW5kIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtRZChhLCExKX0pO1xudmFyIFJkPXtldmVudFR5cGVzOk9kLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPVBkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1QZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMD09PUdkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6YT1KZDticmVhaztjYXNlIFwidG9wQmx1clwiOmNhc2UgXCJ0b3BGb2N1c1wiOmE9RmQ7YnJlYWs7Y2FzZSBcInRvcENsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BEb3VibGVDbGlja1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wTW91c2VNb3ZlXCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpjYXNlIFwidG9wTW91c2VPdXRcIjpjYXNlIFwidG9wTW91c2VPdmVyXCI6Y2FzZSBcInRvcENvbnRleHRNZW51XCI6YT1cbnVkO2JyZWFrO2Nhc2UgXCJ0b3BEcmFnXCI6Y2FzZSBcInRvcERyYWdFbmRcIjpjYXNlIFwidG9wRHJhZ0VudGVyXCI6Y2FzZSBcInRvcERyYWdFeGl0XCI6Y2FzZSBcInRvcERyYWdMZWF2ZVwiOmNhc2UgXCJ0b3BEcmFnT3ZlclwiOmNhc2UgXCJ0b3BEcmFnU3RhcnRcIjpjYXNlIFwidG9wRHJvcFwiOmE9S2Q7YnJlYWs7Y2FzZSBcInRvcFRvdWNoQ2FuY2VsXCI6Y2FzZSBcInRvcFRvdWNoRW5kXCI6Y2FzZSBcInRvcFRvdWNoTW92ZVwiOmNhc2UgXCJ0b3BUb3VjaFN0YXJ0XCI6YT1MZDticmVhaztjYXNlIFwidG9wQW5pbWF0aW9uRW5kXCI6Y2FzZSBcInRvcEFuaW1hdGlvbkl0ZXJhdGlvblwiOmNhc2UgXCJ0b3BBbmltYXRpb25TdGFydFwiOmE9RGQ7YnJlYWs7Y2FzZSBcInRvcFRyYW5zaXRpb25FbmRcIjphPU1kO2JyZWFrO2Nhc2UgXCJ0b3BTY3JvbGxcIjphPXFkO2JyZWFrO2Nhc2UgXCJ0b3BXaGVlbFwiOmE9TmQ7YnJlYWs7Y2FzZSBcInRvcENvcHlcIjpjYXNlIFwidG9wQ3V0XCI6Y2FzZSBcInRvcFBhc3RlXCI6YT1FZDticmVhaztkZWZhdWx0OmE9XG5OfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7aWIoYik7cmV0dXJuIGJ9fSxTZD1SZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsVGQ9W107ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YS50YXJnZXRJbnN0O2Rve2lmKCFiKXthLmFuY2VzdG9ycy5wdXNoKGIpO2JyZWFrfXZhciBjO2ZvcihjPWI7Y1tcInJldHVyblwiXTspYz1jW1wicmV0dXJuXCJdO2M9MyE9PWMudGFnP251bGw6Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighYylicmVhazthLmFuY2VzdG9ycy5wdXNoKGIpO2I9VWEoYyl9d2hpbGUoYik7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspYj1hLmFuY2VzdG9yc1tjXSxRYShhLnRvcExldmVsVHlwZSxiLGEubmF0aXZlRXZlbnQsaGMoYS5uYXRpdmVFdmVudCkpfXZhciBWZD0hMDtmdW5jdGlvbiBXZChhKXtWZD0hIWF9XG5mdW5jdGlvbiBXKGEsYixjKXtpZighYylyZXR1cm4gbnVsbDthPShTZChhKT9YZDpZZCkuYmluZChudWxsLGEpO2MuYWRkRXZlbnRMaXN0ZW5lcihiLGEsITEpfWZ1bmN0aW9uIFpkKGEsYixjKXtpZighYylyZXR1cm4gbnVsbDthPShTZChhKT9YZDpZZCkuYmluZChudWxsLGEpO2MuYWRkRXZlbnRMaXN0ZW5lcihiLGEsITApfWZ1bmN0aW9uIFhkKGEsYil7YmMoWWQsYSxiKX1cbmZ1bmN0aW9uIFlkKGEsYil7aWYoVmQpe3ZhciBjPWhjKGIpO2M9VWEoYyk7bnVsbCE9PWMmJlwibnVtYmVyXCI9PT10eXBlb2YgYy50YWcmJjIhPT14ZChjKSYmKGM9bnVsbCk7aWYoVGQubGVuZ3RoKXt2YXIgZD1UZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtlYyhVZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPlRkLmxlbmd0aCYmVGQucHVzaChhKX19fVxudmFyICRkPU9iamVjdC5mcmVlemUoe2dldCBfZW5hYmxlZCgpe3JldHVybiBWZH0sc2V0RW5hYmxlZDpXZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gVmR9LHRyYXBCdWJibGVkRXZlbnQ6Vyx0cmFwQ2FwdHVyZWRFdmVudDpaZCxkaXNwYXRjaEV2ZW50OllkfSk7ZnVuY3Rpb24gYWUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciBiZT17YW5pbWF0aW9uZW5kOmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6YWUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxjZT17fSxkZT17fTttLmNhblVzZURPTSYmKGRlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIGJlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIGJlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIGJlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIGJlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBlZShhKXtpZihjZVthXSlyZXR1cm4gY2VbYV07aWYoIWJlW2FdKXJldHVybiBhO3ZhciBiPWJlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIGRlKXJldHVybiBjZVthXT1iW2NdO3JldHVybiBhfVxudmFyIGZlPXt0b3BBbmltYXRpb25FbmQ6ZWUoXCJhbmltYXRpb25lbmRcIiksdG9wQW5pbWF0aW9uSXRlcmF0aW9uOmVlKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLHRvcEFuaW1hdGlvblN0YXJ0OmVlKFwiYW5pbWF0aW9uc3RhcnRcIiksdG9wQmx1cjpcImJsdXJcIix0b3BDYW5jZWw6XCJjYW5jZWxcIix0b3BDaGFuZ2U6XCJjaGFuZ2VcIix0b3BDbGljazpcImNsaWNrXCIsdG9wQ2xvc2U6XCJjbG9zZVwiLHRvcENvbXBvc2l0aW9uRW5kOlwiY29tcG9zaXRpb25lbmRcIix0b3BDb21wb3NpdGlvblN0YXJ0OlwiY29tcG9zaXRpb25zdGFydFwiLHRvcENvbXBvc2l0aW9uVXBkYXRlOlwiY29tcG9zaXRpb251cGRhdGVcIix0b3BDb250ZXh0TWVudTpcImNvbnRleHRtZW51XCIsdG9wQ29weTpcImNvcHlcIix0b3BDdXQ6XCJjdXRcIix0b3BEb3VibGVDbGljazpcImRibGNsaWNrXCIsdG9wRHJhZzpcImRyYWdcIix0b3BEcmFnRW5kOlwiZHJhZ2VuZFwiLHRvcERyYWdFbnRlcjpcImRyYWdlbnRlclwiLHRvcERyYWdFeGl0OlwiZHJhZ2V4aXRcIix0b3BEcmFnTGVhdmU6XCJkcmFnbGVhdmVcIixcbnRvcERyYWdPdmVyOlwiZHJhZ292ZXJcIix0b3BEcmFnU3RhcnQ6XCJkcmFnc3RhcnRcIix0b3BEcm9wOlwiZHJvcFwiLHRvcEZvY3VzOlwiZm9jdXNcIix0b3BJbnB1dDpcImlucHV0XCIsdG9wS2V5RG93bjpcImtleWRvd25cIix0b3BLZXlQcmVzczpcImtleXByZXNzXCIsdG9wS2V5VXA6XCJrZXl1cFwiLHRvcExvYWQ6XCJsb2FkXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wTW91c2VEb3duOlwibW91c2Vkb3duXCIsdG9wTW91c2VNb3ZlOlwibW91c2Vtb3ZlXCIsdG9wTW91c2VPdXQ6XCJtb3VzZW91dFwiLHRvcE1vdXNlT3ZlcjpcIm1vdXNlb3ZlclwiLHRvcE1vdXNlVXA6XCJtb3VzZXVwXCIsdG9wUGFzdGU6XCJwYXN0ZVwiLHRvcFNjcm9sbDpcInNjcm9sbFwiLHRvcFNlbGVjdGlvbkNoYW5nZTpcInNlbGVjdGlvbmNoYW5nZVwiLHRvcFRleHRJbnB1dDpcInRleHRJbnB1dFwiLHRvcFRvZ2dsZTpcInRvZ2dsZVwiLHRvcFRvdWNoQ2FuY2VsOlwidG91Y2hjYW5jZWxcIix0b3BUb3VjaEVuZDpcInRvdWNoZW5kXCIsdG9wVG91Y2hNb3ZlOlwidG91Y2htb3ZlXCIsXG50b3BUb3VjaFN0YXJ0OlwidG91Y2hzdGFydFwiLHRvcFRyYW5zaXRpb25FbmQ6ZWUoXCJ0cmFuc2l0aW9uZW5kXCIpLHRvcFdoZWVsOlwid2hlZWxcIn0sZ2U9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BDYW5QbGF5OlwiY2FucGxheVwiLHRvcENhblBsYXlUaHJvdWdoOlwiY2FucGxheXRocm91Z2hcIix0b3BEdXJhdGlvbkNoYW5nZTpcImR1cmF0aW9uY2hhbmdlXCIsdG9wRW1wdGllZDpcImVtcHRpZWRcIix0b3BFbmNyeXB0ZWQ6XCJlbmNyeXB0ZWRcIix0b3BFbmRlZDpcImVuZGVkXCIsdG9wRXJyb3I6XCJlcnJvclwiLHRvcExvYWRlZERhdGE6XCJsb2FkZWRkYXRhXCIsdG9wTG9hZGVkTWV0YWRhdGE6XCJsb2FkZWRtZXRhZGF0YVwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIixcbnRvcFN0YWxsZWQ6XCJzdGFsbGVkXCIsdG9wU3VzcGVuZDpcInN1c3BlbmRcIix0b3BUaW1lVXBkYXRlOlwidGltZXVwZGF0ZVwiLHRvcFZvbHVtZUNoYW5nZTpcInZvbHVtZWNoYW5nZVwiLHRvcFdhaXRpbmc6XCJ3YWl0aW5nXCJ9LGhlPXt9LGllPTAsamU9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIGtlKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGplKXx8KGFbamVdPWllKyssaGVbYVtqZV1dPXt9KTtyZXR1cm4gaGVbYVtqZV1dfWZ1bmN0aW9uIGxlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIG1lKGEsYil7dmFyIGM9bGUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9bGUoYyl9fWZ1bmN0aW9uIG5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJlwidGV4dFwiPT09YS50eXBlfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBvZT1tLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLHBlPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbnRleHRNZW51IHRvcEZvY3VzIHRvcEtleURvd24gdG9wS2V5VXAgdG9wTW91c2VEb3duIHRvcE1vdXNlVXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0scWU9bnVsbCxyZT1udWxsLHNlPW51bGwsdGU9ITE7XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHRlfHxudWxsPT1xZXx8cWUhPT1mYSgpKXJldHVybiBudWxsO3ZhciBjPXFlO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJm5lKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gc2UmJmhhKHNlLGMpP251bGw6KHNlPWMsYT1OLmdldFBvb2xlZChwZS5zZWxlY3QscmUsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1xZSxpYihhKSxhKX1cbnZhciB2ZT17ZXZlbnRUeXBlczpwZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1rZShlKTtmPXZhLm9uU2VsZWN0O2Zvcih2YXIgaD0wO2g8Zi5sZW5ndGg7aCsrKXt2YXIgZz1mW2hdO2lmKCFlLmhhc093blByb3BlcnR5KGcpfHwhZVtnXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/VmEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwidG9wRm9jdXNcIjppZihnYyhlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlxZT1lLHJlPWIsc2U9bnVsbDticmVhaztjYXNlIFwidG9wQmx1clwiOnNlPXJlPXFlPW51bGw7YnJlYWs7Y2FzZSBcInRvcE1vdXNlRG93blwiOnRlPSEwO2JyZWFrO2Nhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6cmV0dXJuIHRlPSExLHVlKGMsZCk7Y2FzZSBcInRvcFNlbGVjdGlvbkNoYW5nZVwiOmlmKG9lKWJyZWFrO1xuY2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4gdWUoYyxkKX1yZXR1cm4gbnVsbH19O05hLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7RGE9YmIuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTtFYT1iYi5nZXRJbnN0YW5jZUZyb21Ob2RlO0ZhPWJiLmdldE5vZGVGcm9tSW5zdGFuY2U7TmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpSZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46d2QsQ2hhbmdlRXZlbnRQbHVnaW46cGQsU2VsZWN0RXZlbnRQbHVnaW46dmUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpSYn0pO1xuZnVuY3Rpb24geGUoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT1udWxsO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXNbXCJyZXR1cm5cIl09bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiB6ZShhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IHhlKGEudGFnLGIsYS5rZXksYS5tb2RlKSxkLnR5cGU9YS50eXBlLGQuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGQuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9ZCk6KGQucGVuZGluZ1Byb3BzPWIsZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLmNoaWxkPWEuY2hpbGQ7ZC5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztkLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2QudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtkLnNpYmxpbmc9YS5zaWJsaW5nO2QuaW5kZXg9YS5pbmRleDtkLnJlZj1hLnJlZjtyZXR1cm4gZH1cbmZ1bmN0aW9uIEFlKGEsYixjKXt2YXIgZD1hLnR5cGUsZT1hLmtleTthPWEucHJvcHM7dmFyIGY9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKWY9ZC5wcm90b3R5cGUmJmQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ/MjowO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkKWY9NTtlbHNlIHN3aXRjaChkKXtjYXNlIHNjOnJldHVybiBCZShhLmNoaWxkcmVuLGIsYyxlKTtjYXNlIHdjOmY9MTE7Ynw9MzticmVhaztjYXNlIHRjOmY9MTE7Ynw9MjticmVhaztjYXNlIHBjOmY9NzticmVhaztjYXNlIHFjOmY9OTticmVhaztkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpc3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdWM6Zj0xMzticmVhaztjYXNlIHZjOmY9MTI7YnJlYWs7Y2FzZSB4YzpmPTE0O2JyZWFrO2RlZmF1bHQ6aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnRhZylyZXR1cm4gYj1kLGIucGVuZGluZ1Byb3BzPWEsYi5leHBpcmF0aW9uVGltZT1jLFxuYjtEKFwiMTMwXCIsbnVsbD09ZD9kOnR5cGVvZiBkLFwiXCIpfWVsc2UgRChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1iPW5ldyB4ZShmLGEsZSxiKTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24gQmUoYSxiLGMsZCl7YT1uZXcgeGUoMTAsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBDZShhLGIsYyl7YT1uZXcgeGUoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIERlKGEsYixjKXtiPW5ldyB4ZSg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn12YXIgRWU9bnVsbCxGZT1udWxsO1xuZnVuY3Rpb24gR2UoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1mdW5jdGlvbiBIZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtFZT1HZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7RmU9R2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBJZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRWUmJkVlKGEpfWZ1bmN0aW9uIEplKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBGZSYmRmUoYSl9bmV3IFNldDtcbmZ1bmN0aW9uIEtlKGEpe3JldHVybntiYXNlU3RhdGU6YSxleHBpcmF0aW9uVGltZTowLGZpcnN0Om51bGwsbGFzdDpudWxsLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExLGlzSW5pdGlhbGl6ZWQ6ITEsY2FwdHVyZWRWYWx1ZXM6bnVsbH19ZnVuY3Rpb24gTGUoYSxiKXtudWxsPT09YS5sYXN0P2EuZmlyc3Q9YS5sYXN0PWI6KGEubGFzdC5uZXh0PWIsYS5sYXN0PWIpO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIuZXhwaXJhdGlvblRpbWUpYS5leHBpcmF0aW9uVGltZT1iLmV4cGlyYXRpb25UaW1lfXZhciBNZT12b2lkIDAsTmU9dm9pZCAwO1xuZnVuY3Rpb24gT2UoYSl7TWU9TmU9bnVsbDt2YXIgYj1hLmFsdGVybmF0ZSxjPWEudXBkYXRlUXVldWU7bnVsbD09PWMmJihjPWEudXBkYXRlUXVldWU9S2UobnVsbCkpO251bGwhPT1iPyhhPWIudXBkYXRlUXVldWUsbnVsbD09PWEmJihhPWIudXBkYXRlUXVldWU9S2UobnVsbCkpKTphPW51bGw7TWU9YztOZT1hIT09Yz9hOm51bGx9ZnVuY3Rpb24gUGUoYSxiKXtPZShhKTthPU1lO3ZhciBjPU5lO251bGw9PT1jP0xlKGEsYik6bnVsbD09PWEubGFzdHx8bnVsbD09PWMubGFzdD8oTGUoYSxiKSxMZShjLGIpKTooTGUoYSxiKSxjLmxhc3Q9Yil9ZnVuY3Rpb24gUWUoYSxiLGMsZCl7YT1hLnBhcnRpYWxTdGF0ZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoYixjLGQpOmF9XG5mdW5jdGlvbiBSZShhLGIsYyxkLGUsZil7bnVsbCE9PWEmJmEudXBkYXRlUXVldWU9PT1jJiYoYz1iLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6Yy5iYXNlU3RhdGUsZXhwaXJhdGlvblRpbWU6Yy5leHBpcmF0aW9uVGltZSxmaXJzdDpjLmZpcnN0LGxhc3Q6Yy5sYXN0LGlzSW5pdGlhbGl6ZWQ6Yy5pc0luaXRpYWxpemVkLGNhcHR1cmVkVmFsdWVzOmMuY2FwdHVyZWRWYWx1ZXMsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITF9KTtjLmV4cGlyYXRpb25UaW1lPTA7Yy5pc0luaXRpYWxpemVkP2E9Yy5iYXNlU3RhdGU6KGE9Yy5iYXNlU3RhdGU9Yi5tZW1vaXplZFN0YXRlLGMuaXNJbml0aWFsaXplZD0hMCk7Zm9yKHZhciBoPSEwLGc9Yy5maXJzdCxrPSExO251bGwhPT1nOyl7dmFyIHY9Zy5leHBpcmF0aW9uVGltZTtpZih2PmYpe3ZhciBsPWMuZXhwaXJhdGlvblRpbWU7aWYoMD09PWx8fGw+diljLmV4cGlyYXRpb25UaW1lPXY7a3x8KGs9ITAsYy5iYXNlU3RhdGU9YSl9ZWxzZXtrfHxcbihjLmZpcnN0PWcubmV4dCxudWxsPT09Yy5maXJzdCYmKGMubGFzdD1udWxsKSk7aWYoZy5pc1JlcGxhY2UpYT1RZShnLGQsYSxlKSxoPSEwO2Vsc2UgaWYodj1RZShnLGQsYSxlKSlhPWg/QSh7fSxhLHYpOkEoYSx2KSxoPSExO2cuaXNGb3JjZWQmJihjLmhhc0ZvcmNlVXBkYXRlPSEwKTtudWxsIT09Zy5jYWxsYmFjayYmKHY9Yy5jYWxsYmFja0xpc3QsbnVsbD09PXYmJih2PWMuY2FsbGJhY2tMaXN0PVtdKSx2LnB1c2goZykpO251bGwhPT1nLmNhcHR1cmVkVmFsdWUmJih2PWMuY2FwdHVyZWRWYWx1ZXMsbnVsbD09PXY/Yy5jYXB0dXJlZFZhbHVlcz1bZy5jYXB0dXJlZFZhbHVlXTp2LnB1c2goZy5jYXB0dXJlZFZhbHVlKSl9Zz1nLm5leHR9bnVsbCE9PWMuY2FsbGJhY2tMaXN0P2IuZWZmZWN0VGFnfD0zMjpudWxsIT09Yy5maXJzdHx8Yy5oYXNGb3JjZVVwZGF0ZXx8bnVsbCE9PWMuY2FwdHVyZWRWYWx1ZXN8fChiLnVwZGF0ZVF1ZXVlPW51bGwpO2t8fChjLmJhc2VTdGF0ZT1hKTtcbnJldHVybiBhfWZ1bmN0aW9uIFNlKGEsYil7dmFyIGM9YS5jYWxsYmFja0xpc3Q7aWYobnVsbCE9PWMpZm9yKGEuY2FsbGJhY2tMaXN0PW51bGwsYT0wO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdLGU9ZC5jYWxsYmFjaztkLmNhbGxiYWNrPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGU/RChcIjE5MVwiLGUpOnZvaWQgMDtlLmNhbGwoYil9fVxuZnVuY3Rpb24gVGUoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEsYixjLGQsZSxmKXtpZihudWxsPT09Ynx8bnVsbCE9PWEudXBkYXRlUXVldWUmJmEudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpcmV0dXJuITA7dmFyIG49YS5zdGF0ZU5vZGU7YT1hLnR5cGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uc2hvdWxkQ29tcG9uZW50VXBkYXRlP24uc2hvdWxkQ29tcG9uZW50VXBkYXRlKGMsZSxmKTphLnByb3RvdHlwZSYmYS5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWhhKGIsYyl8fCFoYShkLGUpOiEwfWZ1bmN0aW9uIGgoYSxiKXtiLnVwZGF0ZXI9cjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hfWZ1bmN0aW9uIGcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcbmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1mdW5jdGlvbiBrKGEsYixjLGQpe2E9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcylyZXR1cm4gYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuY2FsbChudWxsLGMsZCl9dmFyIHY9YS5jYWNoZUNvbnRleHQsbD1hLmdldE1hc2tlZENvbnRleHQscD1hLmdldFVubWFza2VkQ29udGV4dCx6PWEuaXNDb250ZXh0Q29uc3VtZXIsQj1hLmhhc0NvbnRleHRDaGFuZ2VkLHI9e2lzTW91bnRlZDp5ZCxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLFxuY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxmKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGQsZSl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZj1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmYscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITAsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxmKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsZCl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZT1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmUscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6ZCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITAsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxlKX19O3JldHVybnthZG9wdENsYXNzSW5zdGFuY2U6aCxjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOmssXG5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9cChhKSxlPXooYSksZj1lP2woYSxkKTprYTtjPW5ldyBjKGIsZik7dmFyIG49bnVsbCE9PWMuc3RhdGUmJnZvaWQgMCE9PWMuc3RhdGU/Yy5zdGF0ZTpudWxsO2goYSxjKTthLm1lbW9pemVkU3RhdGU9bjtiPWsoYSxjLGIsbik7bnVsbCE9PWImJnZvaWQgMCE9PWImJihhLm1lbW9pemVkU3RhdGU9QSh7fSxhLm1lbW9pemVkU3RhdGUsYikpO2UmJnYoYSxkLGYpO3JldHVybiBjfSxtb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1hLmFsdGVybmF0ZSxlPWEuc3RhdGVOb2RlLGY9YS5wZW5kaW5nUHJvcHMsbj1wKGEpO2UucHJvcHM9ZjtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9a2E7ZS5jb250ZXh0PWwoYSxuKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGM9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYyE9PWUuc3RhdGUmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoZS5zdGF0ZT1SZShkLGEsYyxlLGYsYikpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX0scmVzdW1lTW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLG49YS5zdGF0ZU5vZGU7bi5wcm9wcz1hLm1lbW9pemVkUHJvcHM7bi5zdGF0ZT1cbmEubWVtb2l6ZWRTdGF0ZTt2YXIgaD1hLm1lbW9pemVkUHJvcHMscj1hLnBlbmRpbmdQcm9wcyx6PW4uY29udGV4dCxxPXAoYSk7cT1sKGEscSk7KGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXJ8fHohPT1xKSYmZyhhLG4scixxKTt6PWEubWVtb2l6ZWRTdGF0ZTtiPW51bGwhPT1hLnVwZGF0ZVF1ZXVlP1JlKG51bGwsYSxhLnVwZGF0ZVF1ZXVlLG4scixiKTp6O3ZhciB1PXZvaWQgMDtoIT09ciYmKHU9ayhhLG4scixiKSk7aWYobnVsbCE9PXUmJnZvaWQgMCE9PXUpe2I9bnVsbD09PWJ8fHZvaWQgMD09PWI/dTpBKHt9LGIsdSk7dmFyIHQ9YS51cGRhdGVRdWV1ZTtcbm51bGwhPT10JiYodC5iYXNlU3RhdGU9QSh7fSx0LmJhc2VTdGF0ZSx1KSl9aWYoIShoIT09cnx8eiE9PWJ8fEIoKXx8bnVsbCE9PWEudXBkYXRlUXVldWUmJmEudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKXJldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpLCExOyhoPWYoYSxoLHIseixiLHEpKT8oY3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50V2lsbE1vdW50JiZuLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJm4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD1cbjQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksZChhLHIpLGUoYSxiKSk7bi5wcm9wcz1yO24uc3RhdGU9YjtuLmNvbnRleHQ9cTtyZXR1cm4gaH0sdXBkYXRlQ2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7dmFyIG49Yi50eXBlLHg9Yi5zdGF0ZU5vZGU7eC5wcm9wcz1iLm1lbW9pemVkUHJvcHM7eC5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7dmFyIGg9Yi5tZW1vaXplZFByb3BzLHI9Yi5wZW5kaW5nUHJvcHMscT14LmNvbnRleHQsdT1wKGIpO3U9bChiLHUpOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oaCE9PXJ8fHEhPT11KSYmZyhiLHgscix1KTtxPWIubWVtb2l6ZWRTdGF0ZTtjPW51bGwhPT1iLnVwZGF0ZVF1ZXVlP1JlKGEsYixiLnVwZGF0ZVF1ZXVlLHgscixjKTpxO3ZhciB0PXZvaWQgMDtoIT09ciYmKHQ9ayhiLHgscixjKSk7aWYobnVsbCE9PXQmJnZvaWQgMCE9PXQpe2M9bnVsbD09PWN8fHZvaWQgMD09PWM/dDpBKHt9LGMsdCk7dmFyIHk9Yi51cGRhdGVRdWV1ZTtudWxsIT09eSYmKHkuYmFzZVN0YXRlPUEoe30seS5iYXNlU3RhdGUsdCkpfWlmKCEoaCE9PXJ8fHEhPT1jfHxCKCl8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJlxucT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yMDQ4KSwhMTsodD1mKGIsaCxyLHEsYyx1KSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5jb21wb25lbnRXaWxsVXBkYXRlKHIsYyx1KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdSkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yMDQ4KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmXG5xPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTIwNDgpLGQoYixyKSxlKGIsYykpO3gucHJvcHM9cjt4LnN0YXRlPWM7eC5jb250ZXh0PXU7cmV0dXJuIHR9fX12YXIgVWU9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFZlKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZz9EKFwiMTEwXCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDpEKFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PWthP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/RChcIjE0OFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOkQoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIFdlKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBYZShhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXplKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gaChiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBnKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9Q2UoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi50eXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPVZlKGEsYixjKSxkW1wicmV0dXJuXCJdPWEsZDtkPUFlKGMsYS5tb2RlLGQpO2QucmVmPVZlKGEsYixjKTtkW1wicmV0dXJuXCJdPWE7cmV0dXJuIGR9ZnVuY3Rpb24gdihhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5EZShjLGEubW9kZSxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbChhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPUJlKGMsYS5tb2RlLGQsZiksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9Q2UoXCJcIitiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYz1BZShiLGEubW9kZSxjKSxjLnJlZj1WZShhLG51bGwsYiksY1tcInJldHVyblwiXT1hLGM7Y2FzZSByYzpyZXR1cm4gYj1EZShiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYn1pZihVZShiKXx8emMoYikpcmV0dXJuIGI9QmUoYixcbmEubW9kZSxjLG51bGwpLGJbXCJyZXR1cm5cIl09YSxiO1dlKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmcoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXNjP2woYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSByYzpyZXR1cm4gYy5rZXk9PT1lP3YoYSxiLGMsZCk6bnVsbH1pZihVZShjKXx8emMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bChhLGIsYyxkLG51bGwpO1dlKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsZyhiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1zYz9sKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSByYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsdihiLGEsZCxlKX1pZihVZShkKXx8emMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbChiLGEsZCxlLG51bGwpO1dlKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihlLGwsZyxoKXtmb3IodmFyIHI9bnVsbCxrPW51bGwscT1sLHU9bD0wLHQ9bnVsbDtudWxsIT09cSYmdTxnLmxlbmd0aDt1Kyspe3EuaW5kZXg+dT8odD1xLHE9bnVsbCk6dD1xLnNpYmxpbmc7dmFyIG49eihlLHEsZ1t1XSxoKTtpZihudWxsPT09bil7bnVsbD09PXEmJihxPXQpO2JyZWFrfWEmJnEmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUscSk7bD1mKG4sbCx1KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1uO3E9dH1pZih1PT09Zy5sZW5ndGgpcmV0dXJuIGMoZSxxKSxyO2lmKG51bGw9PT1xKXtmb3IoO3U8Zy5sZW5ndGg7dSsrKWlmKHE9cChlLGdbdV0saCkpbD1mKHEsbCx1KSxudWxsPT09az9yPXE6ay5zaWJsaW5nPXEsaz1xO3JldHVybiByfWZvcihxPWQoZSxxKTt1PGcubGVuZ3RoO3UrKylpZih0PUIocSxlLHUsZ1t1XSxoKSl7aWYoYSYmbnVsbCE9PXQuYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PXQua2V5P3U6dC5rZXkpO2w9Zih0LGwsdSk7bnVsbD09PWs/cj10Omsuc2libGluZz10O2s9dH1hJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiByfWZ1bmN0aW9uIFEoZSxsLGcsaCl7dmFyIHI9emMoZyk7XCJmdW5jdGlvblwiIT09dHlwZW9mIHI/RChcIjE1MFwiKTp2b2lkIDA7Zz1yLmNhbGwoZyk7bnVsbD09Zz9EKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIGs9XG5yPW51bGwscT1sLHU9bD0wLHQ9bnVsbCxuPWcubmV4dCgpO251bGwhPT1xJiYhbi5kb25lO3UrKyxuPWcubmV4dCgpKXtxLmluZGV4PnU/KHQ9cSxxPW51bGwpOnQ9cS5zaWJsaW5nO3ZhciBIPXooZSxxLG4udmFsdWUsaCk7aWYobnVsbD09PUgpe3F8fChxPXQpO2JyZWFrfWEmJnEmJm51bGw9PT1ILmFsdGVybmF0ZSYmYihlLHEpO2w9ZihILGwsdSk7bnVsbD09PWs/cj1IOmsuc2libGluZz1IO2s9SDtxPXR9aWYobi5kb25lKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDshbi5kb25lO3UrKyxuPWcubmV4dCgpKW49cChlLG4udmFsdWUsaCksbnVsbCE9PW4mJihsPWYobixsLHUpLG51bGw9PT1rP3I9bjprLnNpYmxpbmc9bixrPW4pO3JldHVybiByfWZvcihxPWQoZSxxKTshbi5kb25lO3UrKyxuPWcubmV4dCgpKWlmKG49QihxLGUsdSxuLnZhbHVlLGgpLG51bGwhPT1uKXtpZihhJiZudWxsIT09bi5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09bi5rZXk/dTpuLmtleSk7XG5sPWYobixsLHUpO251bGw9PT1rP3I9bjprLnNpYmxpbmc9bjtrPW59YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsbCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09c2MmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGc9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihnKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIG9jOmE6e3ZhciBrPWYua2V5O2ZvcihnPWQ7bnVsbCE9PWc7KXtpZihnLmtleT09PWspaWYoMTA9PT1nLnRhZz9mLnR5cGU9PT1zYzpnLnR5cGU9PT1mLnR5cGUpe2MoYSxnLnNpYmxpbmcpO2Q9ZShnLGYudHlwZT09PXNjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxsKTtkLnJlZj1WZShhLGcsZik7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGcpO2JyZWFrfWVsc2UgYihhLGcpO2c9Zy5zaWJsaW5nfWYudHlwZT09PVxuc2M/KGQ9QmUoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsbCxmLmtleSksZFtcInJldHVyblwiXT1hLGE9ZCk6KGw9QWUoZixhLm1vZGUsbCksbC5yZWY9VmUoYSxkLGYpLGxbXCJyZXR1cm5cIl09YSxhPWwpfXJldHVybiBoKGEpO2Nhc2UgcmM6YTp7Zm9yKGc9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWcpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGwpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPURlKGYsYS5tb2RlLGwpO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGgoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiZcbjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixsKSxkW1wicmV0dXJuXCJdPWEsYT1kKTooYyhhLGQpLGQ9Q2UoZixhLm1vZGUsbCksZFtcInJldHVyblwiXT1hLGE9ZCksaChhKTtpZihVZShmKSlyZXR1cm4gcihhLGQsZixsKTtpZih6YyhmKSlyZXR1cm4gUShhLGQsZixsKTtnJiZXZShhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZilzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDE6bD1hLnR5cGUsRChcIjE1MlwiLGwuZGlzcGxheU5hbWV8fGwubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIFllPVhlKCEwKSxaZT1YZSghMSk7XG5mdW5jdGlvbiAkZShhLGIsYyxkLGUsZixoKXtmdW5jdGlvbiBnKGEsYixjKXtrKGEsYixjLGIuZXhwaXJhdGlvblRpbWUpfWZ1bmN0aW9uIGsoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZShiLG51bGwsYyxkKTpZZShiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiB2KGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gbChhLGIsYyxkLGUsZil7dihhLGIpO2lmKCFjJiYhZSlyZXR1cm4gZCYmeShiLCExKSxyKGEsYik7Yz1iLnN0YXRlTm9kZTtuYy5jdXJyZW50PWI7dmFyIGw9ZT9udWxsOmMucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7ZSYmKGsoYSxiLG51bGwsZiksYi5jaGlsZD1udWxsKTtrKGEsYixsLGYpO2IubWVtb2l6ZWRTdGF0ZT1jLnN0YXRlO2IubWVtb2l6ZWRQcm9wcz1jLnByb3BzO2QmJnkoYiwhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcChhKXt2YXIgYj1hLnN0YXRlTm9kZTtcbmIucGVuZGluZ0NvbnRleHQ/dChhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZ0KGEsYi5jb250ZXh0LCExKTtZKGEsYi5jb250YWluZXJJbmZvKX1mdW5jdGlvbiB6KGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7Zm9yKG51bGwhPT1lJiYoZVtcInJldHVyblwiXT1hKTtudWxsIT09ZTspe3N3aXRjaChlLnRhZyl7Y2FzZSAxMjp2YXIgZj1lLnN0YXRlTm9kZXwwO2lmKGUudHlwZT09PWImJjAhPT0oZiZjKSl7Zm9yKGY9ZTtudWxsIT09Zjspe3ZhciBsPWYuYWx0ZXJuYXRlO2lmKDA9PT1mLmV4cGlyYXRpb25UaW1lfHxmLmV4cGlyYXRpb25UaW1lPmQpZi5leHBpcmF0aW9uVGltZT1kLG51bGwhPT1sJiYoMD09PWwuZXhwaXJhdGlvblRpbWV8fGwuZXhwaXJhdGlvblRpbWU+ZCkmJihsLmV4cGlyYXRpb25UaW1lPWQpO2Vsc2UgaWYobnVsbCE9PWwmJigwPT09bC5leHBpcmF0aW9uVGltZXx8bC5leHBpcmF0aW9uVGltZT5kKSlsLmV4cGlyYXRpb25UaW1lPVxuZDtlbHNlIGJyZWFrO2Y9ZltcInJldHVyblwiXX1mPW51bGx9ZWxzZSBmPWUuY2hpbGQ7YnJlYWs7Y2FzZSAxMzpmPWUudHlwZT09PWEudHlwZT9udWxsOmUuY2hpbGQ7YnJlYWs7ZGVmYXVsdDpmPWUuY2hpbGR9aWYobnVsbCE9PWYpZltcInJldHVyblwiXT1lO2Vsc2UgZm9yKGY9ZTtudWxsIT09Zjspe2lmKGY9PT1hKXtmPW51bGw7YnJlYWt9ZT1mLnNpYmxpbmc7aWYobnVsbCE9PWUpe2Y9ZTticmVha31mPWZbXCJyZXR1cm5cIl19ZT1mfX1mdW5jdGlvbiBCKGEsYixjKXt2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRQcm9wcztpZighcSgpJiZmPT09ZSlyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTt2YXIgbD1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO2lmKG51bGw9PT1mKWw9MTA3Mzc0MTgyMztlbHNlIGlmKGYudmFsdWU9PT1lLnZhbHVlKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLFxucihhLGIpO2w9MH1lbHNle3ZhciBoPWYudmFsdWU7aWYoaD09PWwmJigwIT09aHx8MS9oPT09MS9sKXx8aCE9PWgmJmwhPT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTtsPTB9ZWxzZSBpZihsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGwpOjEwNzM3NDE4MjMsbHw9MCwwPT09bCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYil9ZWxzZSB6KGIsZCxsLGMpfWIuc3RhdGVOb2RlPWw7RyhiKTtnKGEsYixlLmNoaWxkcmVuKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0QoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9emUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtcbmIuY2hpbGQ9Yztmb3IoY1tcInJldHVyblwiXT1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXplKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksY1tcInJldHVyblwiXT1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBRPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQsbj1hLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUseD1iLnB1c2hIb3N0Q29udGV4dCxZPWIucHVzaEhvc3RDb250YWluZXIsRz1kLnB1c2hQcm92aWRlcixSPWMuZ2V0TWFza2VkQ29udGV4dCxTPWMuZ2V0VW5tYXNrZWRDb250ZXh0LHE9Yy5oYXNDb250ZXh0Q2hhbmdlZCx1PWMucHVzaENvbnRleHRQcm92aWRlcix0PWMucHVzaFRvcExldmVsQ29udGV4dE9iamVjdCx5PWMuaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcixIPWUuZW50ZXJIeWRyYXRpb25TdGF0ZSxXYT1lLnJlc2V0SHlkcmF0aW9uU3RhdGUsQ2I9ZS50cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcbmE9VGUoYyxmLGgsZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkUHJvcHM9Yn0sZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkU3RhdGU9Yn0pO3ZhciBKYz1hLmFkb3B0Q2xhc3NJbnN0YW5jZSxLYz1hLmNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsTGM9YS5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlLERiPWEubW91bnRDbGFzc0luc3RhbmNlLE1jPWEucmVzdW1lTW91bnRDbGFzc0luc3RhbmNlLEViPWEudXBkYXRlQ2xhc3NJbnN0YW5jZTtyZXR1cm57YmVnaW5Xb3JrOmZ1bmN0aW9uKGEsYixjKXtpZigwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5jKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpwKGIpO2JyZWFrO2Nhc2UgMjp1KGIpO2JyZWFrO2Nhc2UgNDpZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMzpHKGIpfXJldHVybiBudWxsfXN3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP0QoXCIxNTVcIik6dm9pZCAwO3ZhciBkPWIudHlwZSxcbmU9Yi5wZW5kaW5nUHJvcHMsZj1TKGIpO2Y9UihiLGYpO2Q9ZChlLGYpO2IuZWZmZWN0VGFnfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlciYmdm9pZCAwPT09ZC4kJHR5cGVvZj8oZj1iLnR5cGUsYi50YWc9MixiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWQuc3RhdGUmJnZvaWQgMCE9PWQuc3RhdGU/ZC5zdGF0ZTpudWxsLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKGU9S2MoYixkLGUsYi5tZW1vaXplZFN0YXRlKSxudWxsIT09ZSYmdm9pZCAwIT09ZSYmKGIubWVtb2l6ZWRTdGF0ZT1BKHt9LGIubWVtb2l6ZWRTdGF0ZSxlKSkpLGU9dShiKSxKYyhiLGQpLERiKGIsYyksYT1sKGEsYiwhMCxlLCExLGMpKTooYi50YWc9MSxnKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpO3JldHVybiBhO2Nhc2UgMTpyZXR1cm4gZT1iLnR5cGUsYz1iLnBlbmRpbmdQcm9wcyxxKCl8fFxuYi5tZW1vaXplZFByb3BzIT09Yz8oZD1TKGIpLGQ9UihiLGQpLGU9ZShjLGQpLGIuZWZmZWN0VGFnfD0xLGcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDI6ZT11KGIpO251bGw9PT1hP251bGw9PT1iLnN0YXRlTm9kZT8oTGMoYixiLnBlbmRpbmdQcm9wcyksRGIoYixjKSxkPSEwKTpkPU1jKGIsYyk6ZD1FYihhLGIsYyk7Zj0hMTt2YXIgaD1iLnVwZGF0ZVF1ZXVlO251bGwhPT1oJiZudWxsIT09aC5jYXB0dXJlZFZhbHVlcyYmKGY9ZD0hMCk7cmV0dXJuIGwoYSxiLGQsZSxmLGMpO2Nhc2UgMzphOmlmKHAoYiksZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kKXtmPWIubWVtb2l6ZWRTdGF0ZTtlPVJlKGEsYixkLG51bGwsbnVsbCxjKTtiLm1lbW9pemVkU3RhdGU9ZTtkPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWQmJm51bGwhPT1kLmNhcHR1cmVkVmFsdWVzKWQ9bnVsbDtlbHNlIGlmKGY9PT1lKXtXYSgpO2E9cihhLGIpO2JyZWFrIGF9ZWxzZSBkPVxuZS5lbGVtZW50O2Y9Yi5zdGF0ZU5vZGU7KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmYuaHlkcmF0ZSYmSChiKT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1aZShiLG51bGwsZCxjKSk6KFdhKCksZyhhLGIsZCkpO2IubWVtb2l6ZWRTdGF0ZT1lO2E9Yi5jaGlsZH1lbHNlIFdhKCksYT1yKGEsYik7cmV0dXJuIGE7Y2FzZSA1OmE6e3goYik7bnVsbD09PWEmJkNiKGIpO2U9Yi50eXBlO2g9Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbDtpZighcSgpJiZoPT09ZCl7aWYoaD1iLm1vZGUmMSYmbihlLGQpKWIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztpZighaHx8MTA3Mzc0MTgyMyE9PWMpe2E9cihhLGIpO2JyZWFrIGF9fWg9ZC5jaGlsZHJlbjtRKGUsZCk/aD1udWxsOmYmJlEoZSxmKSYmKGIuZWZmZWN0VGFnfD0xNik7dihhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmbihlLGQpPyhiLmV4cGlyYXRpb25UaW1lPVxuMTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZCxhPW51bGwpOihnKGEsYixoKSxiLm1lbW9pemVkUHJvcHM9ZCxhPWIuY2hpbGQpfXJldHVybiBhO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkNiKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxudWxsO2Nhc2UgODpiLnRhZz03O2Nhc2UgNzpyZXR1cm4gZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWV8fChlPWIubWVtb2l6ZWRQcm9wcyksZD1lLmNoaWxkcmVuLGIuc3RhdGVOb2RlPW51bGw9PT1hP1plKGIsYi5zdGF0ZU5vZGUsZCxjKTpZZShiLGEuc3RhdGVOb2RlLGQsYyksYi5tZW1vaXplZFByb3BzPWUsYi5zdGF0ZU5vZGU7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gWShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGU9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1lPyhudWxsPT09YT9iLmNoaWxkPVllKGIsbnVsbCxlLGMpOmcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1cbmUsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTQ6cmV0dXJuIGM9Yi50eXBlLnJlbmRlcixjPWMoYi5wZW5kaW5nUHJvcHMsYi5yZWYpLGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGIuY2hpbGQ7Y2FzZSAxMDpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDExOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLHEoKXx8bnVsbCE9PWMmJmIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDEzOnJldHVybiBCKGEsYixjKTtjYXNlIDEyOmE6e2Q9Yi50eXBlO2Y9Yi5wZW5kaW5nUHJvcHM7aD1iLm1lbW9pemVkUHJvcHM7ZT1kLl9jdXJyZW50VmFsdWU7dmFyIHQ9ZC5fY2hhbmdlZEJpdHM7aWYocSgpfHwwIT09dHx8aCE9PWYpe2IubWVtb2l6ZWRQcm9wcz1cbmY7dmFyIGs9Zi51bnN0YWJsZV9vYnNlcnZlZEJpdHM7aWYodm9pZCAwPT09a3x8bnVsbD09PWspaz0xMDczNzQxODIzO2Iuc3RhdGVOb2RlPWs7aWYoMCE9PSh0JmspKXooYixkLHQsYyk7ZWxzZSBpZihoPT09Zil7YT1yKGEsYik7YnJlYWsgYX1jPWYuY2hpbGRyZW47Yz1jKGUpO2coYSxiLGMpO2E9Yi5jaGlsZH1lbHNlIGE9cihhLGIpfXJldHVybiBhO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXthLmVmZmVjdFRhZ3w9NH12YXIgaD1hLmNyZWF0ZUluc3RhbmNlLGc9YS5jcmVhdGVUZXh0SW5zdGFuY2Usaz1hLmFwcGVuZEluaXRpYWxDaGlsZCx2PWEuZmluYWxpemVJbml0aWFsQ2hpbGRyZW4sbD1hLnByZXBhcmVVcGRhdGUscD1hLnBlcnNpc3RlbmNlLHo9Yi5nZXRSb290SG9zdENvbnRhaW5lcixCPWIucG9wSG9zdENvbnRleHQscj1iLmdldEhvc3RDb250ZXh0LFE9Yi5wb3BIb3N0Q29udGFpbmVyLG49Yy5wb3BDb250ZXh0UHJvdmlkZXIseD1jLnBvcFRvcExldmVsQ29udGV4dE9iamVjdCxZPWQucG9wUHJvdmlkZXIsRz1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UsUj1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlLFM9ZS5wb3BIeWRyYXRpb25TdGF0ZSxxPXZvaWQgMCx1PXZvaWQgMCx0PXZvaWQgMDthLm11dGF0aW9uPyhxPWZ1bmN0aW9uKCl7fSx1PWZ1bmN0aW9uKGEsYixjKXsoYi51cGRhdGVRdWV1ZT1cbmMpJiZmKGIpfSx0PWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZmKGIpfSk6cD9EKFwiMjM1XCIpOkQoXCIyMzZcIik7cmV0dXJue2NvbXBsZXRlV29yazpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIG51bGw7Y2FzZSAyOnJldHVybiBuKGIpLGE9Yi5zdGF0ZU5vZGUsZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiZudWxsIT09ZC5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnJj0tNjUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50RGlkQ2F0Y2g/Yi5lZmZlY3RUYWd8PTI1NjpkLmNhcHR1cmVkVmFsdWVzPW51bGwpLG51bGw7Y2FzZSAzOlEoYik7eChiKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClTKGIpLGIuZWZmZWN0VGFnJj0tMztxKGIpO2E9Yi51cGRhdGVRdWV1ZTtcbm51bGwhPT1hJiZudWxsIT09YS5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnfD0yNTYpO3JldHVybiBudWxsO2Nhc2UgNTpCKGIpO2M9eigpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBwPWEubWVtb2l6ZWRQcm9wcyxIPWIuc3RhdGVOb2RlLHk9cigpO0g9bChILGUscCxkLGMseSk7dShhLGIsSCxlLHAsZCxjLHkpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFkKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXIoKTtpZihTKGIpKUcoYixjLGEpJiZmKGIpO2Vsc2V7cD1oKGUsZCxjLGEsYik7YTpmb3IoeT1iLmNoaWxkO251bGwhPT15Oyl7aWYoNT09PXkudGFnfHw2PT09eS50YWcpayhwLHkuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT15LnRhZyYmbnVsbCE9PXkuY2hpbGQpe3kuY2hpbGRbXCJyZXR1cm5cIl09eTt5PXkuY2hpbGQ7Y29udGludWV9aWYoeT09PWIpYnJlYWs7XG5mb3IoO251bGw9PT15LnNpYmxpbmc7KXtpZihudWxsPT09eVtcInJldHVyblwiXXx8eVtcInJldHVyblwiXT09PWIpYnJlYWsgYTt5PXlbXCJyZXR1cm5cIl19eS5zaWJsaW5nW1wicmV0dXJuXCJdPXlbXCJyZXR1cm5cIl07eT15LnNpYmxpbmd9dihwLGUsZCxjLGEpJiZmKGIpO2Iuc3RhdGVOb2RlPXB9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXQoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT16KCk7Yz1yKCk7UyhiKT9SKGIpJiZmKGIpOmIuc3RhdGVOb2RlPWcoZCxhLGMsYil9cmV0dXJuIG51bGw7Y2FzZSA3OihkPWIubWVtb2l6ZWRQcm9wcyk/dm9pZCAwOkQoXCIxNjVcIik7Yi50YWc9ODtlPVtdO2E6Zm9yKChwPWIuc3RhdGVOb2RlKSYmKHBbXCJyZXR1cm5cIl09Yik7bnVsbCE9PVxucDspe2lmKDU9PT1wLnRhZ3x8Nj09PXAudGFnfHw0PT09cC50YWcpRChcIjI0N1wiKTtlbHNlIGlmKDk9PT1wLnRhZyllLnB1c2gocC5wZW5kaW5nUHJvcHMudmFsdWUpO2Vsc2UgaWYobnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PXBbXCJyZXR1cm5cIl18fHBbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7cD1wW1wicmV0dXJuXCJdfXAuc2libGluZ1tcInJldHVyblwiXT1wW1wicmV0dXJuXCJdO3A9cC5zaWJsaW5nfXA9ZC5oYW5kbGVyO2Q9cChkLnByb3BzLGUpO2IuY2hpbGQ9WWUoYixudWxsIT09YT9hLmNoaWxkOm51bGwsZCxjKTtyZXR1cm4gYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGIudGFnPTcsbnVsbDtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgMTE6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBRKGIpLHEoYiksbnVsbDtcbmNhc2UgMTM6cmV0dXJuIFkoYiksbnVsbDtjYXNlIDEyOnJldHVybiBudWxsO2Nhc2UgMDpEKFwiMTY3XCIpO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uIGJmKGEsYixjLGQsZSl7dmFyIGY9YS5wb3BIb3N0Q29udGFpbmVyLGg9YS5wb3BIb3N0Q29udGV4dCxnPWIucG9wQ29udGV4dFByb3ZpZGVyLGs9Yi5wb3BUb3BMZXZlbENvbnRleHRPYmplY3Qsdj1jLnBvcFByb3ZpZGVyO3JldHVybnt0aHJvd0V4Y2VwdGlvbjpmdW5jdGlvbihhLGIsYyl7Yi5lZmZlY3RUYWd8PTUxMjtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2I9e3ZhbHVlOmMsc291cmNlOmIsc3RhY2s6QmMoYil9O2Rve3N3aXRjaChhLnRhZyl7Y2FzZSAzOk9lKGEpO2EudXBkYXRlUXVldWUuY2FwdHVyZWRWYWx1ZXM9W2JdO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybjtjYXNlIDI6aWYoYz1hLnN0YXRlTm9kZSwwPT09KGEuZWZmZWN0VGFnJjY0KSYmbnVsbCE9PWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudERpZENhdGNoJiYhZShjKSl7T2UoYSk7Yz1hLnVwZGF0ZVF1ZXVlO3ZhciBkPWMuY2FwdHVyZWRWYWx1ZXM7bnVsbD09PWQ/XG5jLmNhcHR1cmVkVmFsdWVzPVtiXTpkLnB1c2goYik7YS5lZmZlY3RUYWd8PTEwMjQ7cmV0dXJufX1hPWFbXCJyZXR1cm5cIl19d2hpbGUobnVsbCE9PWEpfSx1bndpbmRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gZihhKSxrKGEpLGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA1OnJldHVybiBoKGEpLG51bGw7Y2FzZSA0OnJldHVybiBmKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdihhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fSx1bndpbmRJbnRlcnJ1cHRlZFdvcms6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZyhhKTticmVhaztjYXNlIDM6ZihhKTtrKGEpO2JyZWFrO2Nhc2UgNTpoKGEpO2JyZWFrO2Nhc2UgNDpmKGEpO2JyZWFrO2Nhc2UgMTM6dihhKX19fX1cbmZ1bmN0aW9uIGNmKGEsYil7dmFyIGM9Yi5zb3VyY2U7bnVsbD09PWIuc3RhY2smJkJjKGMpO251bGwhPT1jJiZBYyhjKTtiPWIudmFsdWU7bnVsbCE9PWEmJjI9PT1hLnRhZyYmQWMoYSk7dHJ5e2ImJmIuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihiKX1jYXRjaChkKXtkJiZkLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoZCl9fVxuZnVuY3Rpb24gZGYoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKHQpe2IoYSx0KX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIGgoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEplJiZKZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpmKGEpO3ZhciBjPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtjLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxjLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxjLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7YihhLHQpfWJyZWFrO2Nhc2UgNTpmKGEpO2JyZWFrO2Nhc2UgNzpnKGEuc3RhdGVOb2RlKTticmVhaztjYXNlIDQ6cCYmdihhKX19ZnVuY3Rpb24gZyhhKXtmb3IodmFyIGI9YTs7KWlmKGgoYiksbnVsbD09PWIuY2hpbGR8fHAmJjQ9PT1iLnRhZyl7aWYoYj09PVxuYSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ31lbHNlIGIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGR9ZnVuY3Rpb24gayhhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31mdW5jdGlvbiB2KGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9YltcInJldHVyblwiXTthOmZvcig7Oyl7bnVsbD09PWM/RChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWM9ITB9aWYoNT09PVxuYi50YWd8fDY9PT1iLnRhZylnKGIpLGU/UyhkLGIuc3RhdGVOb2RlKTpSKGQsYi5zdGF0ZU5vZGUpO2Vsc2UgaWYoND09PWIudGFnP2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpoKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkW1wicmV0dXJuXCJdPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX12YXIgbD1hLmdldFB1YmxpY0luc3RhbmNlLHA9YS5tdXRhdGlvbjthPWEucGVyc2lzdGVuY2U7cHx8KGE/RChcIjIzNVwiKTpEKFwiMjM2XCIpKTt2YXIgej1wLmNvbW1pdE1vdW50LEI9cC5jb21taXRVcGRhdGUscj1wLnJlc2V0VGV4dENvbnRlbnQsUT1wLmNvbW1pdFRleHRVcGRhdGUsbj1wLmFwcGVuZENoaWxkLFxueD1wLmFwcGVuZENoaWxkVG9Db250YWluZXIsWT1wLmluc2VydEJlZm9yZSxHPXAuaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsUj1wLnJlbW92ZUNoaWxkLFM9cC5yZW1vdmVDaGlsZEZyb21Db250YWluZXI7cmV0dXJue2NvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmlmKGIuZWZmZWN0VGFnJjIwNDgmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTthLnByb3BzPWIubWVtb2l6ZWRQcm9wczthLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYyxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9YnJlYWs7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdFJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7cihhLnN0YXRlTm9kZSl9LFxuY29tbWl0UGxhY2VtZW50OmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj1hW1wicmV0dXJuXCJdO251bGwhPT1iOyl7aWYoayhiKSl7dmFyIGM9YjticmVhayBhfWI9YltcInJldHVyblwiXX1EKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6RChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHIoYiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWNbXCJyZXR1cm5cIl18fGsoY1tcInJldHVyblwiXSkpe2M9bnVsbDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jLnNpYmxpbmdbXCJyZXR1cm5cIl09Y1tcInJldHVyblwiXTtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09XG5jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0coYixlLnN0YXRlTm9kZSxjKTpZKGIsZS5zdGF0ZU5vZGUsYyk6ZD94KGIsZS5zdGF0ZU5vZGUpOm4oYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09YSlyZXR1cm47ZT1lW1wicmV0dXJuXCJdfWUuc2libGluZ1tcInJldHVyblwiXT1lW1wicmV0dXJuXCJdO2U9ZS5zaWJsaW5nfX0sY29tbWl0RGVsZXRpb246ZnVuY3Rpb24oYSl7dihhKTtcbmFbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZCKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO1EoYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmMsYyk7YnJlYWs7Y2FzZSAzOmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdExpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAyOmE9XG5jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEucHJvcHM9Yy5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWIubWVtb2l6ZWRQcm9wcztiPWIubWVtb2l6ZWRTdGF0ZTthLnByb3BzPWMubWVtb2l6ZWRQcm9wczthLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yz1jLnVwZGF0ZVF1ZXVlO251bGwhPT1jJiZTZShjLGEpO2JyZWFrO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWwoYy5jaGlsZC5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgMjphPWMuY2hpbGQuc3RhdGVOb2RlfVNlKGIsYSl9YnJlYWs7Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJlxuNCYmeihhLGMudHlwZSxjLm1lbW9pemVkUHJvcHMsYyk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRFcnJvckxvZ2dpbmc6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjp2YXIgYz1hLnR5cGU7Yj1hLnN0YXRlTm9kZTt2YXIgZD1hLnVwZGF0ZVF1ZXVlO251bGw9PT1kfHxudWxsPT09ZC5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDt2YXIgZj1kLmNhcHR1cmVkVmFsdWVzO2QuY2FwdHVyZWRWYWx1ZXM9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2gmJmUoYik7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHM7Yi5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKyl7ZD1mW2NdO3ZhciBsPWQudmFsdWUsZz1kLnN0YWNrO2NmKGEsZCk7Yi5jb21wb25lbnREaWRDYXRjaChsLHtjb21wb25lbnRTdGFjazpudWxsIT09Zz9nOlwiXCJ9KX1icmVhaztcbmNhc2UgMzpjPWEudXBkYXRlUXVldWU7bnVsbD09PWN8fG51bGw9PT1jLmNhcHR1cmVkVmFsdWVzP0QoXCIyNjRcIik6dm9pZCAwO2Y9Yy5jYXB0dXJlZFZhbHVlcztjLmNhcHR1cmVkVmFsdWVzPW51bGw7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKylkPWZbY10sY2YoYSxkKSxiKGQudmFsdWUpO2JyZWFrO2RlZmF1bHQ6RChcIjI2NVwiKX19LGNvbW1pdEF0dGFjaFJlZjpmdW5jdGlvbihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1sKGMpO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fSxjb21taXREZXRhY2hSZWY6ZnVuY3Rpb24oYSl7YT1hLnJlZjtudWxsIT09YSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EobnVsbCk6YS5jdXJyZW50PW51bGwpfX19dmFyIGVmPXt9O1xuZnVuY3Rpb24gZmYoYSxiKXtmdW5jdGlvbiBjKGEpe2E9PT1lZj9EKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX12YXIgZD1hLmdldENoaWxkSG9zdENvbnRleHQsZT1hLmdldFJvb3RIb3N0Q29udGV4dDthPWIuY3JlYXRlQ3Vyc29yO3ZhciBmPWIucHVzaCxoPWIucG9wLGc9YShlZiksaz1hKGVmKSx2PWEoZWYpO3JldHVybntnZXRIb3N0Q29udGV4dDpmdW5jdGlvbigpe3JldHVybiBjKGcuY3VycmVudCl9LGdldFJvb3RIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKCl7cmV0dXJuIGModi5jdXJyZW50KX0scG9wSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhKXtoKGcsYSk7aChrLGEpO2godixhKX0scG9wSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7ay5jdXJyZW50PT09YSYmKGgoZyxhKSxoKGssYSkpfSxwdXNoSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhLGIpe2YodixiLGEpO2YoayxhLGEpO2YoZyxlZixhKTtiPWUoYik7aChnLGEpO2YoZyxiLGEpfSxwdXNoSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5jKHYuY3VycmVudCksZT1jKGcuY3VycmVudCk7Yj1kKGUsYS50eXBlLGIpO2UhPT1iJiYoZihrLGEsYSksZihnLGIsYSkpfX19XG5mdW5jdGlvbiBnZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IHhlKDUsbnVsbCxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9aChiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3A9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuYT1hLmh5ZHJhdGlvbjtpZighYSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciBmPWEuY2FuSHlkcmF0ZUluc3RhbmNlLGg9YS5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLGc9YS5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsaz1hLmdldEZpcnN0SHlkcmF0YWJsZUNoaWxkLHY9YS5oeWRyYXRlSW5zdGFuY2UsbD1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UscD1udWxsLHo9bnVsbCxCPSExO3JldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe3o9XG5rKGEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3A9YTtyZXR1cm4gQj0hMH0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3o9cD1udWxsO0I9ITF9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKEIpe3ZhciBkPXo7aWYoZCl7aWYoIWMoYSxkKSl7ZD1nKGQpO2lmKCFkfHwhYyhhLGQpKXthLmVmZmVjdFRhZ3w9MjtCPSExO3A9YTtyZXR1cm59YihwLHopfXA9YTt6PWsoZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9MixCPSExLHA9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9dihhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gbChhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe2lmKGEhPT1cbnApcmV0dXJuITE7aWYoIUIpcmV0dXJuIGQoYSksQj0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXo7YzspYihhLGMpLGM9ZyhjKTtkKGEpO3o9cD9nKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5mdW5jdGlvbiBoZihhKXtmdW5jdGlvbiBiKGEsYixjKXthPWEuc3RhdGVOb2RlO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Y31mdW5jdGlvbiBjKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jaGlsZENvbnRleHRUeXBlc31mdW5jdGlvbiBkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGUsZD1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBiO2M9Yy5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gYyllIGluIGQ/dm9pZCAwOkQoXCIxMDhcIixBYyhhKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIEEoe30sYixjKX12YXIgZT1hLmNyZWF0ZUN1cnNvcixmPWEucHVzaCxoPWEucG9wLGc9ZShrYSksaz1lKCExKSx2PWthO3JldHVybntnZXRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGMoYSk/XG52OmcuY3VycmVudH0sY2FjaGVDb250ZXh0OmIsZ2V0TWFza2VkQ29udGV4dDpmdW5jdGlvbihhLGMpe3ZhciBkPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWQpcmV0dXJuIGthO3ZhciBlPWEuc3RhdGVOb2RlO2lmKGUmJmUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWMpcmV0dXJuIGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGY9e30sZztmb3IoZyBpbiBkKWZbZ109Y1tnXTtlJiZiKGEsYyxmKTtyZXR1cm4gZn0saGFzQ29udGV4dENoYW5nZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gay5jdXJyZW50fSxpc0NvbnRleHRDb25zdW1lcjpmdW5jdGlvbihhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY29udGV4dFR5cGVzfSxpc0NvbnRleHRQcm92aWRlcjpjLHBvcENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtjKGEpJiYoaChrLGEpLGgoZyxhKSl9LHBvcFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhKXtoKGssXG5hKTtoKGcsYSl9LHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSxiLGMpe251bGwhPWcuY3Vyc29yP0QoXCIxNjhcIik6dm9pZCAwO2YoZyxiLGEpO2YoayxjLGEpfSxwcm9jZXNzQ2hpbGRDb250ZXh0OmQscHVzaENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtpZighYyhhKSlyZXR1cm4hMTt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fGthO3Y9Zy5jdXJyZW50O2YoZyxiLGEpO2YoayxrLmN1cnJlbnQsYSk7cmV0dXJuITB9LGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtjP3ZvaWQgMDpEKFwiMTY5XCIpO2lmKGIpe3ZhciBlPWQoYSx2KTtjLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWU7aChrLGEpO2goZyxhKTtmKGcsZSxhKX1lbHNlIGgoayxhKTtmKGssYixhKX0sZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7Zm9yKDIhPT1cbnhkKGEpfHwyIT09YS50YWc/RChcIjE3MFwiKTp2b2lkIDA7MyE9PWEudGFnOyl7aWYoYyhhKSlyZXR1cm4gYS5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7KGE9YVtcInJldHVyblwiXSk/dm9pZCAwOkQoXCIxNzFcIil9cmV0dXJuIGEuc3RhdGVOb2RlLmNvbnRleHR9fX1cbmZ1bmN0aW9uIGpmKGEpe3ZhciBiPWEuY3JlYXRlQ3Vyc29yLGM9YS5wdXNoLGQ9YS5wb3AsZT1iKG51bGwpLGY9YihudWxsKSxoPWIoMCk7cmV0dXJue3B1c2hQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1hLnR5cGUuX2NvbnRleHQ7YyhoLGIuX2NoYW5nZWRCaXRzLGEpO2MoZixiLl9jdXJyZW50VmFsdWUsYSk7YyhlLGEsYSk7Yi5fY3VycmVudFZhbHVlPWEucGVuZGluZ1Byb3BzLnZhbHVlO2IuX2NoYW5nZWRCaXRzPWEuc3RhdGVOb2RlfSxwb3BQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1oLmN1cnJlbnQsYz1mLmN1cnJlbnQ7ZChlLGEpO2QoZixhKTtkKGgsYSk7YT1hLnR5cGUuX2NvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn19fVxuZnVuY3Rpb24ga2YoKXt2YXIgYT1bXSxiPS0xO3JldHVybntjcmVhdGVDdXJzb3I6ZnVuY3Rpb24oYSl7cmV0dXJue2N1cnJlbnQ6YX19LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4tMT09PWJ9LHBvcDpmdW5jdGlvbihjKXswPmJ8fChjLmN1cnJlbnQ9YVtiXSxhW2JdPW51bGwsYi0tKX0scHVzaDpmdW5jdGlvbihjLGQpe2IrKzthW2JdPWMuY3VycmVudDtjLmN1cnJlbnQ9ZH0sY2hlY2tUaGF0U3RhY2tJc0VtcHR5OmZ1bmN0aW9uKCl7fSxyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXY6ZnVuY3Rpb24oKXt9fX1cbmZ1bmN0aW9uIGxmKGEpe2Z1bmN0aW9uIGIoKXtpZihudWxsIT09SSlmb3IodmFyIGE9SVtcInJldHVyblwiXTtudWxsIT09YTspTGMoYSksYT1hW1wicmV0dXJuXCJdO1lhPW51bGw7Wj0wO0k9bnVsbDtOYz0hMX1mdW5jdGlvbiBjKGEpe3JldHVybiBudWxsIT09eWEmJnlhLmhhcyhhKX1mdW5jdGlvbiBkKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmNTEyKSl7Yj1DYihiLGEsWik7dmFyIGU9YTtpZigxMDczNzQxODIzPT09Wnx8MTA3Mzc0MTgyMyE9PWUuZXhwaXJhdGlvblRpbWUpe2I6c3dpdGNoKGUudGFnKXtjYXNlIDM6Y2FzZSAyOnZhciBmPWUudXBkYXRlUXVldWU7Zj1udWxsPT09Zj8wOmYuZXhwaXJhdGlvblRpbWU7YnJlYWsgYjtkZWZhdWx0OmY9MH1mb3IodmFyIGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9XG5nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7TmM9ITA7YnJlYWt9fWVsc2V7YT1LYyhhKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTI1NTksYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PVxubnVsbCxjLmVmZmVjdFRhZ3w9NTEyKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha319cmV0dXJuIG51bGx9ZnVuY3Rpb24gZShhKXt2YXIgYj1XYShhLmFsdGVybmF0ZSxhLFopO251bGw9PT1iJiYoYj1kKGEpKTtuYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhLGMsZil7Y2E/RChcIjI0M1wiKTp2b2lkIDA7Y2E9ITA7aWYoYyE9PVp8fGEhPT1ZYXx8bnVsbD09PUkpYigpLFlhPWEsWj1jLEk9emUoWWEuY3VycmVudCxudWxsLFopLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGc9ITE7ZG97dHJ5e2lmKGYpZm9yKDtudWxsIT09SSYmIVMoKTspST1lKEkpO2Vsc2UgZm9yKDtudWxsIT09STspST1lKEkpfWNhdGNoKE9jKXtpZihudWxsPT09SSl7Zz0hMDtxKE9jKTticmVha31mPUk7dmFyIGg9ZltcInJldHVyblwiXTtpZihudWxsPT09aCl7Zz0hMDtxKE9jKTticmVha31KYyhoLGYsT2MpO0k9ZChmKX1icmVha313aGlsZSgxKTtcbmNhPSExO2lmKGd8fG51bGwhPT1JKXJldHVybiBudWxsO2lmKE5jKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuY3VycmVudC5hbHRlcm5hdGU7RChcIjI2MlwiKX1mdW5jdGlvbiBoKGEsYixjLGQpe2E9e3ZhbHVlOmMsc291cmNlOmEsc3RhY2s6QmMoYSl9O1BlKGIse2V4cGlyYXRpb25UaW1lOmQscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6bnVsbCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTphLG5leHQ6bnVsbH0pO3YoYixkKX1mdW5jdGlvbiBnKGEsYil7YTp7Y2EmJiFaYT9EKFwiMjYzXCIpOnZvaWQgMDtmb3IodmFyIGQ9YVtcInJldHVyblwiXTtudWxsIT09ZDspe3N3aXRjaChkLnRhZyl7Y2FzZSAyOnZhciBlPWQuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRDYXRjaCYmIWMoZSkpe2goYSxkLGIsXG4xKTthPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzpoKGEsZCxiLDEpO2E9dm9pZCAwO2JyZWFrIGF9ZD1kW1wicmV0dXJuXCJdfTM9PT1hLnRhZyYmaChhLGEsYiwxKTthPXZvaWQgMH1yZXR1cm4gYX1mdW5jdGlvbiBrKGEpe2E9MCE9PWlhP2lhOmNhP1phPzE6WjphLm1vZGUmMT96YT8xMCooKChsKCkrMTUpLzEwfDApKzEpOjI1KigoKGwoKSs1MDApLzI1fDApKzEpOjE7emEmJigwPT09ZGF8fGE+ZGEpJiYoZGE9YSk7cmV0dXJuIGF9ZnVuY3Rpb24gdihhLGMpe2E6e2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9YztudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmMpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yyk7aWYobnVsbD09PWFbXCJyZXR1cm5cIl0paWYoMz09PWEudGFnKXt2YXIgZD1cbmEuc3RhdGVOb2RlOyFjYSYmMCE9PVomJmM8WiYmYigpO2NhJiYhWmEmJllhPT09ZHx8QihkLGMpO0ZiPnhnJiZEKFwiMTg1XCIpfWVsc2V7Yz12b2lkIDA7YnJlYWsgYX1hPWFbXCJyZXR1cm5cIl19Yz12b2lkIDB9cmV0dXJuIGN9ZnVuY3Rpb24gbCgpe3llPUljKCktUGM7cmV0dXJuIHlnPSh5ZS8xMHwwKSsyfWZ1bmN0aW9uIHAoYSxiLGMsZCxlKXt2YXIgZj1pYTtpYT0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2lhPWZ9fWZ1bmN0aW9uIHooYSl7aWYoMCE9PUdiKXtpZihhPkdiKXJldHVybjttZyhRYyl9dmFyIGI9SWMoKS1QYztHYj1hO1FjPWxnKFEse3RpbWVvdXQ6MTAqKGEtMiktYn0pfWZ1bmN0aW9uIEIoYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PUs/KGxhPUs9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihLPUsubmV4dFNjaGVkdWxlZFJvb3Q9YSxLLm5leHRTY2hlZHVsZWRSb290PWxhKTtcbmVsc2V7dmFyIGM9YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Y3x8YjxjKWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1UfHwoSj9IYiYmKGFhPWEsUD0xLEcoYSwxLCExKSk6MT09PWI/bigpOnooYikpfWZ1bmN0aW9uIHIoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Sylmb3IodmFyIGM9SyxkPWxhO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1LP0QoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsYT1LPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1sYSlsYT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsSy5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1LKXtLPWM7Sy5uZXh0U2NoZWR1bGVkUm9vdD1sYTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PVxuZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1LKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9YWE7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9GYisrOkZiPTA7YWE9YjtQPWF9ZnVuY3Rpb24gUShhKXt4KDAsITAsYSl9ZnVuY3Rpb24gbigpe3goMSwhMSxudWxsKX1mdW5jdGlvbiB4KGEsYixjKXskYT1jO3IoKTtpZihiKWZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKSYmKCFJYnx8bCgpPj1QKTspRyhhYSxQLCFJYikscigpO2Vsc2UgZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApOylHKGFhLFAsITEpLHIoKTtudWxsIT09JGEmJihHYj0wLFFjPS0xKTswIT09UCYmeihQKTskYT1udWxsO0liPSExO1koKX1mdW5jdGlvbiBZKCl7RmI9MDtpZihudWxsIT09QWEpe3ZhciBhPUFhO0FhPW51bGw7Zm9yKHZhciBiPVxuMDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKHdnKXtCYXx8KEJhPSEwLEpiPXdnKX19fWlmKEJhKXRocm93IGE9SmIsSmI9bnVsbCxCYT0hMSxhO31mdW5jdGlvbiBHKGEsYixjKXtUP0QoXCIyNDVcIik6dm9pZCAwO1Q9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCEwKSxudWxsIT09YyYmKFMoKT9hLmZpbmlzaGVkV29yaz1jOlIoYSxjLGIpKSkpOihjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITEpLG51bGwhPT1jJiZSKGEsYyxiKSkpO1Q9ITF9ZnVuY3Rpb24gUihhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1BYT9BYT1bZF06QWEucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1cbjA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7WmE9Y2E9ITA7Yz1iLnN0YXRlTm9kZTtjLmN1cnJlbnQ9PT1iP0QoXCIxNzdcIik6dm9pZCAwO2Q9Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWQ/RChcIjI2MVwiKTp2b2lkIDA7Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT1sKCk7bmMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZj1iLmZpcnN0RWZmZWN0fWVsc2UgZj1iO2Vsc2UgZj1iLmZpcnN0RWZmZWN0O3pnKGMuY29udGFpbmVySW5mbyk7Zm9yKHc9ZjtudWxsIT09dzspe3ZhciBoPSExLGs9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl3LmVmZmVjdFRhZyYyMDQ4JiZEYih3LmFsdGVybmF0ZSx3KSx3PXcubmV4dEVmZmVjdH1jYXRjaChhYil7aD0hMCxrPWFifWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PVxudyYmKHc9dy5uZXh0RWZmZWN0KSl9Zm9yKHc9ZjtudWxsIT09dzspe2g9ITE7az12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXt2YXIgcD13LmVmZmVjdFRhZztwJjE2JiZNYyh3KTtpZihwJjEyOCl7dmFyIG49dy5hbHRlcm5hdGU7bnVsbCE9PW4mJmtnKG4pfXN3aXRjaChwJjE0KXtjYXNlIDI6RWIodyk7dy5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpFYih3KTt3LmVmZmVjdFRhZyY9LTM7d2Uody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA0OndlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgODpnZyh3KX13PXcubmV4dEVmZmVjdH19Y2F0Y2goYWIpe2g9ITAsaz1hYn1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1BZyhjLmNvbnRhaW5lckluZm8pO2MuY3VycmVudD1iO2Zvcih3PWY7bnVsbCE9PXc7KXtwPSExO249dm9pZCAwO3RyeXtmb3IoZj1jLGg9ZSxrPWQ7bnVsbCE9PXc7KXt2YXIgcj13LmVmZmVjdFRhZztcbnImMzYmJmhnKGYsdy5hbHRlcm5hdGUsdyxoLGspO3ImMjU2JiZpZyh3LHEpO3ImMTI4JiZqZyh3KTt2YXIgdD13Lm5leHRFZmZlY3Q7dy5uZXh0RWZmZWN0PW51bGw7dz10fX1jYXRjaChhYil7cD0hMCxuPWFifXAmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsbiksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfWNhPVphPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBJZSYmSWUoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoeWE9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIFMoKXtyZXR1cm4gbnVsbD09PSRhfHwkYS50aW1lUmVtYWluaW5nKCk+Qmc/ITE6SWI9ITB9ZnVuY3Rpb24gcShhKXtudWxsPT09YWE/RChcIjI0NlwiKTp2b2lkIDA7YWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtCYXx8KEJhPSEwLEpiPWEpfXZhciB1PWtmKCksdD1mZihhLHUpLHk9aGYodSk7dT1qZih1KTt2YXIgSD1nZihhKSxcbldhPSRlKGEsdCx5LHUsSCx2LGspLmJlZ2luV29yayxDYj1hZihhLHQseSx1LEgpLmNvbXBsZXRlV29yazt0PWJmKHQseSx1LHYsYyk7dmFyIEpjPXQudGhyb3dFeGNlcHRpb24sS2M9dC51bndpbmRXb3JrLExjPXQudW53aW5kSW50ZXJydXB0ZWRXb3JrO3Q9ZGYoYSxnLHYsayxmdW5jdGlvbihhKXtudWxsPT09eWE/eWE9bmV3IFNldChbYV0pOnlhLmFkZChhKX0sbCk7dmFyIERiPXQuY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzLE1jPXQuY29tbWl0UmVzZXRUZXh0Q29udGVudCxFYj10LmNvbW1pdFBsYWNlbWVudCxnZz10LmNvbW1pdERlbGV0aW9uLHdlPXQuY29tbWl0V29yayxoZz10LmNvbW1pdExpZmVDeWNsZXMsaWc9dC5jb21taXRFcnJvckxvZ2dpbmcsamc9dC5jb21taXRBdHRhY2hSZWYsa2c9dC5jb21taXREZXRhY2hSZWYsSWM9YS5ub3csbGc9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2ssbWc9YS5jYW5jZWxEZWZlcnJlZENhbGxiYWNrLHpnPWEucHJlcGFyZUZvckNvbW1pdCxcbkFnPWEucmVzZXRBZnRlckNvbW1pdCxQYz1JYygpLHlnPTIseWU9UGMsUmM9MCxpYT0wLGNhPSExLEk9bnVsbCxZYT1udWxsLFo9MCx3PW51bGwsWmE9ITEsTmM9ITEseWE9bnVsbCxsYT1udWxsLEs9bnVsbCxHYj0wLFFjPS0xLFQ9ITEsYWE9bnVsbCxQPTAsZGE9MCxJYj0hMSxCYT0hMSxKYj1udWxsLCRhPW51bGwsSj0hMSxIYj0hMSx6YT0hMSxBYT1udWxsLHhnPTFFMyxGYj0wLEJnPTE7cmV0dXJue3JlY2FsY3VsYXRlQ3VycmVudFRpbWU6bCxjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOmssc2NoZWR1bGVXb3JrOnYscmVxdWVzdFdvcms6QixmbHVzaFJvb3Q6ZnVuY3Rpb24oYSxiKXtUP0QoXCIyNTNcIik6dm9pZCAwO2FhPWE7UD1iO0coYSxiLCExKTtuKCk7WSgpfSxiYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoSj1jKXx8VHx8bigpfX0sdW5iYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe2lmKEomJiFIYil7SGI9XG4hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtIYj0hMX19cmV0dXJuIGEoYil9LGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1Q/RChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gcChhLGIpfWZpbmFsbHl7Sj1jLG4oKX19LGZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1KO0o9ITA7dHJ5e3AoYSl9ZmluYWxseXsoSj1iKXx8VHx8eCgxLCExLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPWlhO2lhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7aWE9Yn19LHN5bmNVcGRhdGVzOnAsaW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKGEsYixjKXtpZih6YSlyZXR1cm4gYShiLGMpO0p8fFR8fDA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCk7dmFyIGQ9emEsZT1KO0o9emE9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXt6YT1kLChKPWUpfHxUfHxuKCl9fSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1R8fFxuMD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKX0sY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjpmdW5jdGlvbigpe3ZhciBhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO2E8PVJjJiYoYT1SYysxKTtyZXR1cm4gUmM9YX0sbGVnYWN5Q29udGV4dDp5fX1cbmZ1bmN0aW9uIG1mKGEpe2Z1bmN0aW9uIGIoYSxiLGMsZCxlLGgpe2Q9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBsPWcoYyk7Yz1rKGMpP3YoYyxsKTpsfWVsc2UgYz1rYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWg7UGUoZCx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6dm9pZCAwPT09Yj9udWxsOmIsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtmKGQsZSk7cmV0dXJuIGV9dmFyIGM9YS5nZXRQdWJsaWNJbnN0YW5jZTthPWxmKGEpO3ZhciBkPWEucmVjYWxjdWxhdGVDdXJyZW50VGltZSxlPWEuY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcixmPWEuc2NoZWR1bGVXb3JrLGg9YS5sZWdhY3lDb250ZXh0LGc9aC5maW5kQ3VycmVudFVubWFza2VkQ29udGV4dCxrPWguaXNDb250ZXh0UHJvdmlkZXIsdj1cbmgucHJvY2Vzc0NoaWxkQ29udGV4dDtyZXR1cm57Y3JlYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjKXtiPW5ldyB4ZSgzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMscmVtYWluaW5nRXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07cmV0dXJuIGIuc3RhdGVOb2RlPWF9LHVwZGF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGMsZixoKXt2YXIgZz1jLmN1cnJlbnQsaz1kKCk7Zz1lKGcpO3JldHVybiBiKGEsYyxmLGssZyxoKX0sdXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZTpmdW5jdGlvbihhLGMsZSxmLGcpe3ZhciBoPWQoKTtyZXR1cm4gYihhLGMsZSxoLGYsZyl9LGZsdXNoUm9vdDphLmZsdXNoUm9vdCxcbnJlcXVlc3RXb3JrOmEucmVxdWVzdFdvcmssY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjphLmNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24sYmF0Y2hlZFVwZGF0ZXM6YS5iYXRjaGVkVXBkYXRlcyx1bmJhdGNoZWRVcGRhdGVzOmEudW5iYXRjaGVkVXBkYXRlcyxkZWZlcnJlZFVwZGF0ZXM6YS5kZWZlcnJlZFVwZGF0ZXMsc3luY1VwZGF0ZXM6YS5zeW5jVXBkYXRlcyxpbnRlcmFjdGl2ZVVwZGF0ZXM6YS5pbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6YS5mbHVzaEludGVyYWN0aXZlVXBkYXRlcyxmbHVzaENvbnRyb2xsZWQ6YS5mbHVzaENvbnRyb2xsZWQsZmx1c2hTeW5jOmEuZmx1c2hTeW5jLGdldFB1YmxpY1Jvb3RJbnN0YW5jZTpmdW5jdGlvbihhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYyhhLmNoaWxkLnN0YXRlTm9kZSk7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fSxcbmZpbmRIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RChcIjE4OFwiKTpEKFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPUJkKGIpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFsczpmdW5jdGlvbihhKXthPUNkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxpbmplY3RJbnRvRGV2VG9vbHM6ZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gSGUoQSh7fSxhLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPUJkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfX19XG52YXIgbmY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDptZn0pLG9mPW5mJiZtZnx8bmYscGY9b2ZbXCJkZWZhdWx0XCJdP29mW1wiZGVmYXVsdFwiXTpvZjtmdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnJjLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fXZhciByZj1cIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93LHNmPXZvaWQgMDtzZj1yZj9mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07dmFyIHRmPXZvaWQgMCx1Zj12b2lkIDA7XG5pZihtLmNhblVzZURPTSlpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgcmVxdWVzdElkbGVDYWxsYmFja3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGNhbmNlbElkbGVDYWxsYmFjayl7dmFyIHZmPW51bGwsd2Y9ITEseGY9LTEseWY9ITEsemY9MCxBZj0zMyxCZj0zMyxDZj12b2lkIDA7Q2Y9cmY/e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXpmLXBlcmZvcm1hbmNlLm5vdygpO3JldHVybiAwPGE/YTowfX06e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXpmLURhdGUubm93KCk7cmV0dXJuIDA8YT9hOjB9fTt2YXIgRGY9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGEpe2lmKGEuc291cmNlPT09d2luZG93JiZhLmRhdGE9PT1EZil7d2Y9ITE7YT1zZigpO2lmKDA+PXpmLWEpaWYoLTEhPT1cbnhmJiZ4Zjw9YSlDZi5kaWRUaW1lb3V0PSEwO2Vsc2V7eWZ8fCh5Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRWYpKTtyZXR1cm59ZWxzZSBDZi5kaWRUaW1lb3V0PSExO3hmPS0xO2E9dmY7dmY9bnVsbDtudWxsIT09YSYmYShDZil9fSwhMSk7dmFyIEVmPWZ1bmN0aW9uKGEpe3lmPSExO3ZhciBiPWEtemYrQmY7YjxCZiYmQWY8QmY/KDg+YiYmKGI9OCksQmY9YjxBZj9BZjpiKTpBZj1iO3pmPWErQmY7d2Z8fCh3Zj0hMCx3aW5kb3cucG9zdE1lc3NhZ2UoRGYsXCIqXCIpKX07dGY9ZnVuY3Rpb24oYSxiKXt2Zj1hO251bGwhPWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0JiYoeGY9c2YoKStiLnRpbWVvdXQpO3lmfHwoeWY9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKEVmKSk7cmV0dXJuIDB9O3VmPWZ1bmN0aW9uKCl7dmY9bnVsbDt3Zj0hMTt4Zj0tMX19ZWxzZSB0Zj13aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjayx1Zj13aW5kb3cuY2FuY2VsSWRsZUNhbGxiYWNrO2Vsc2UgdGY9XG5mdW5jdGlvbihhKXtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9LGRpZFRpbWVvdXQ6ITF9KX0pfSx1Zj1mdW5jdGlvbihhKXtjbGVhclRpbWVvdXQoYSl9O2Z1bmN0aW9uIEZmKGEpe3ZhciBiPVwiXCI7ZWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHZihhLGIpe2E9QSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZmKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhmKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBJZihhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19ZnVuY3Rpb24gSmYoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0QoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9EKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6RChcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpcIlwiK2N9fVxuZnVuY3Rpb24gTGYoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gTWYoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIE5mPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE9mKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gUGYoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP09mKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFFmPXZvaWQgMCxSZj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1OZi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtRZj1RZnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtRZi5pbm5lckhUTUw9XCJcXHgzY3N2Z1xceDNlXCIrYitcIlxceDNjL3N2Z1xceDNlXCI7Zm9yKGI9UWYuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gU2YoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBUZj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLFxuc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxVZj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoVGYpLmZvckVhY2goZnVuY3Rpb24oYSl7VWYuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtUZltiXT1UZlthXX0pfSk7XG5mdW5jdGlvbiBWZihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIik7dmFyIGU9Yzt2YXIgZj1iW2NdO2U9bnVsbD09Znx8XCJib29sZWFuXCI9PT10eXBlb2YgZnx8XCJcIj09PWY/XCJcIjpkfHxcIm51bWJlclwiIT09dHlwZW9mIGZ8fDA9PT1mfHxUZi5oYXNPd25Qcm9wZXJ0eShlKSYmVGZbZV0/KFwiXCIrZikudHJpbSgpOmYrXCJweFwiO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgV2Y9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIFhmKGEsYixjKXtiJiYoV2ZbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0QoXCIxMzdcIixhLGMoKSk6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj9EKFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOkQoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP0QoXCI2MlwiLGMoKSk6dm9pZCAwKX1cbmZ1bmN0aW9uIFlmKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgWmY9Qy50aGF0UmV0dXJucyhcIlwiKTtcbmZ1bmN0aW9uICRmKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPWtlKGEpO2I9dmFbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07Yy5oYXNPd25Qcm9wZXJ0eShlKSYmY1tlXXx8KFwidG9wU2Nyb2xsXCI9PT1lP1pkKFwidG9wU2Nyb2xsXCIsXCJzY3JvbGxcIixhKTpcInRvcEZvY3VzXCI9PT1lfHxcInRvcEJsdXJcIj09PWU/KFpkKFwidG9wRm9jdXNcIixcImZvY3VzXCIsYSksWmQoXCJ0b3BCbHVyXCIsXCJibHVyXCIsYSksYy50b3BCbHVyPSEwLGMudG9wRm9jdXM9ITApOlwidG9wQ2FuY2VsXCI9PT1lPyhpYyhcImNhbmNlbFwiLCEwKSYmWmQoXCJ0b3BDYW5jZWxcIixcImNhbmNlbFwiLGEpLGMudG9wQ2FuY2VsPSEwKTpcInRvcENsb3NlXCI9PT1lPyhpYyhcImNsb3NlXCIsITApJiZaZChcInRvcENsb3NlXCIsXCJjbG9zZVwiLGEpLGMudG9wQ2xvc2U9ITApOmZlLmhhc093blByb3BlcnR5KGUpJiZXKGUsZmVbZV0sYSksY1tlXT0hMCl9fVxuZnVuY3Rpb24gYWcoYSxiLGMsZCl7Yz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtkPT09TmYuaHRtbCYmKGQ9T2YoYSkpO2Q9PT1OZi5odG1sP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIlxceDNjc2NyaXB0XFx4M2VcXHgzYy9zY3JpcHRcXHgzZVwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmcoYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gY2coYSxiLGMsZCl7dmFyIGU9WWYoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gZ2UpZ2UuaGFzT3duUHJvcGVydHkoZikmJlcoZixnZVtmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpXYyhhLGMpO2Y9VmMoYSxjKTtXKFwidG9wSW52YWxpZFwiLFxuXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUdmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOklmKGEsYyk7Zj1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktmKGEsYyk7Zj1KZihhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfVhmKGIsZixaZik7dmFyIGg9ZixnO2ZvcihnIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGs9aFtnXTtcInN0eWxlXCI9PT1nP1ZmKGEsayxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZSZihhLGspKTpcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZTZihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmXG5TZihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiZcImF1dG9Gb2N1c1wiIT09ZyYmKHVhLmhhc093blByb3BlcnR5KGcpP251bGwhPWsmJiRmKGQsZyk6bnVsbCE9ayYmVWMoYSxnLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpsYyhhKTthZChhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmxjKGEpO01mKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/SGYoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJkhmKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9fVxuZnVuY3Rpb24gZGcoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPVZjKGEsYyk7ZD1WYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9R2YoYSxjKTtkPUdmKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9SmYoYSxjKTtkPUpmKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9WGYoYixkLFpmKTtiPWE9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgZz1jW2FdO2ZvcihiIGluIGcpZy5oYXNPd25Qcm9wZXJ0eShiKSYmKGh8fFxuKGg9e30pLGhbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJih1YS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtnPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWcmJihudWxsIT1rfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1hKWlmKGcpe2ZvcihiIGluIGcpIWcuaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChofHwoaD17fSksaFtiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmdbYl0hPT1rW2JdJiYoaHx8KGg9e30pLGhbYl09a1tiXSl9ZWxzZSBofHwoZnx8KGY9W10pLGYucHVzaChhLGgpKSxcbmg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmchPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/Zz09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYodWEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJiRmKGUsYSksZnx8Zz09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9aCYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGgpO3JldHVybiBmfVxuZnVuY3Rpb24gZWcoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmWWMoYSxlKTtZZihjLGQpO2Q9WWYoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBoPWJbZl0sZz1iW2YrMV07XCJzdHlsZVwiPT09aD9WZihhLGcsWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/UmYoYSxnKTpcImNoaWxkcmVuXCI9PT1oP1NmKGEsZyk6VWMoYSxoLGcsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlpjKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGYoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9IZihhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG5IZihhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6SGYoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gZmcoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgZiBpbiBnZSlnZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGdlW2ZdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpXYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpJZihhLFxuYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKSxXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpLCRmKGUsXCJvbkNoYW5nZVwiKX1YZihiLGMsWmYpO2Q9bnVsbDtmb3IodmFyIGggaW4gYyljLmhhc093blByb3BlcnR5KGgpJiYoZj1jW2hdLFwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBmP2EudGV4dENvbnRlbnQhPT1mJiYoZD1bXCJjaGlsZHJlblwiLGZdKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJmEudGV4dENvbnRlbnQhPT1cIlwiK2YmJihkPVtcImNoaWxkcmVuXCIsXCJcIitmXSk6dWEuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWYmJiRmKGUsaCkpO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpsYyhhKTthZChhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmxjKGEpO01mKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJlxuKGEub25jbGljaz1DKX1yZXR1cm4gZH1mdW5jdGlvbiBuZyhhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgb2c9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDphZyxjcmVhdGVUZXh0Tm9kZTpiZyxzZXRJbml0aWFsUHJvcGVydGllczpjZyxkaWZmUHJvcGVydGllczpkZyx1cGRhdGVQcm9wZXJ0aWVzOmVnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6ZmcsZGlmZkh5ZHJhdGVkVGV4dDpuZyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpaYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lXFx4M2RcIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGVcXHgzZFwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVhhKGQpO2U/dm9pZCAwOkQoXCI5MFwiKTttYyhkKTtaYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGYoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhmKGEsISFjLm11bHRpcGxlLGIsITEpfX19KTtUYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KG9nKTt2YXIgcGc9bnVsbCxxZz1udWxsO1xuZnVuY3Rpb24gcmcoYSl7dGhpcy5fZXhwaXJhdGlvblRpbWU9WC5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1yZy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpEKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgc2c7WC51cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnJnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnJnLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpEKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0QoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7WC5mbHVzaFJvb3QoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07cmcucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIHNnKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9c2cucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnNnLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIHRnKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9WC5jcmVhdGVDb250YWluZXIoYSxiLGMpfXRnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgc2c7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1gudXBkYXRlQ29udGFpbmVyKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG50Zy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgc2c7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO1gudXBkYXRlQ29udGFpbmVyKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307dGcucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IHNnO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtYLnVwZGF0ZUNvbnRhaW5lcihiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xudGcucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHJnKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gdWcoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gdmcoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxudmFyIFg9cGYoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTpQZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9UGYoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBQZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe3BnPVZkO3ZhciBhPWZhKCk7aWYobmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbmlmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQil7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxoPS0xLGc9LTEsaz0wLHY9MCxsPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHo7Oyl7bCE9PWJ8fDAhPT1kJiYzIT09bC5ub2RlVHlwZXx8KGg9ZitkKTtsIT09ZXx8MCE9PWMmJjMhPT1sLm5vZGVUeXBlfHwoZz1mK2MpOzM9PT1sLm5vZGVUeXBlJiYoZis9bC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHo9bC5maXJzdENoaWxkKSlicmVhaztwPWw7bD16fWZvcig7Oyl7aWYobD09PWEpYnJlYWsgYjtwPT09YiYmKytrPT09ZCYmKGg9Zik7cD09PWUmJisrdj09PWMmJihnPWYpO2lmKG51bGwhPT0oej1sLm5leHRTaWJsaW5nKSlicmVhaztsPXA7cD1sLnBhcmVudE5vZGV9bD16fWI9LTE9PT1ofHwtMT09PWc/bnVsbDpcbntzdGFydDpoLGVuZDpnfX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtxZz17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifTtXZCghMSl9LHJlc2V0QWZ0ZXJDb21taXQ6ZnVuY3Rpb24oKXt2YXIgYT1xZyxiPWZhKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmamEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihuZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2I9d2luZG93LmdldFNlbGVjdGlvbigpO3ZhciBlPWNbbWIoKV0ubGVuZ3RoO2E9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2E6TWF0aC5taW4oZC5lbmQsZSk7IWIuZXh0ZW5kJiZhPlxuZCYmKGU9ZCxkPWEsYT1lKTtlPW1lKGMsYSk7dmFyIGY9bWUoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGg9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtoLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoaCksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGguc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShoKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2MuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsXG5hLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfXFnPW51bGw7V2QocGcpO3BnPW51bGx9LGNyZWF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1hZyhhLGIsYyxkKTthW0ZdPWU7YVtUYV09YjtyZXR1cm4gYX0sYXBwZW5kSW5pdGlhbENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sZmluYWxpemVJbml0aWFsQ2hpbGRyZW46ZnVuY3Rpb24oYSxiLGMsZCl7Y2coYSxiLGMsZCk7cmV0dXJuIHZnKGIsYyl9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZGcoYSxiLGMsZCxlKX0sc2hvdWxkU2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PVxudHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfSxzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuISFiLmhpZGRlbn0sY3JlYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQpe2E9YmcoYSxiKTthW0ZdPWQ7cmV0dXJuIGF9LG5vdzpzZixtdXRhdGlvbjp7Y29tbWl0TW91bnQ6ZnVuY3Rpb24oYSxiLGMpe3ZnKGIsYykmJmEuZm9jdXMoKX0sY29tbWl0VXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YVtUYV09ZTtlZyhhLGIsYyxkLGUpfSxyZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe1NmKGEsXCJcIil9LGNvbW1pdFRleHRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMpe2Eubm9kZVZhbHVlPWN9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixhKTphLmFwcGVuZENoaWxkKGIpfSxcbmluc2VydEJlZm9yZTpmdW5jdGlvbihhLGIsYyl7YS5pbnNlcnRCZWZvcmUoYixjKX0saW5zZXJ0SW5Db250YWluZXJCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixjKTphLmluc2VydEJlZm9yZShiLGMpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbihhLGIpe2EucmVtb3ZlQ2hpbGQoYil9LHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTphLnJlbW92ZUNoaWxkKGIpfX0saHlkcmF0aW9uOntjYW5IeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMSE9PWEubm9kZVR5cGV8fGIudG9Mb3dlckNhc2UoKSE9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmF9LGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cIlwiPT09Ynx8MyE9PWEubm9kZVR5cGU/bnVsbDphfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9XG5hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZDpmdW5jdGlvbihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUsZil7YVtGXT1mO2FbVGFdPWM7cmV0dXJuIGZnKGEsYixjLGUsZCl9LGh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2FbRl09YztyZXR1cm4gbmcoYSxiKX0sZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LFxuZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fX0sc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrOnRmLGNhbmNlbERlZmVycmVkQ2FsbGJhY2s6dWZ9KSxDZz1YO2FjPUNnLmJhdGNoZWRVcGRhdGVzO2JjPUNnLmludGVyYWN0aXZlVXBkYXRlcztjYz1DZy5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIERnKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgdGcoYSwhMSxiKX1cbmZ1bmN0aW9uIEVnKGEsYixjLGQsZSl7dWcoYyk/dm9pZCAwOkQoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPURnKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1YLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBGZyhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO3VnKGIpP3ZvaWQgMDpEKFwiMjAwXCIpO3JldHVybiBxZihhLGIsbnVsbCxjKX1cbnZhciBHZz17Y3JlYXRlUG9ydGFsOkZnLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP251bGw6MT09PWEubm9kZVR5cGU/YTpYLmZpbmRIb3N0SW5zdGFuY2UoYSl9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBFZyhudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9EKFwiMzhcIik6dm9pZCAwO3JldHVybiBFZyhhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXt1ZyhhKT92b2lkIDA6RChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe0VnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPVxubnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gRmcuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOlguYmF0Y2hlZFVwZGF0ZXMsdW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzOlguZGVmZXJyZWRVcGRhdGVzLGZsdXNoU3luYzpYLmZsdXNoU3luYyx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6WC5mbHVzaENvbnRyb2xsZWQsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOlJhLEV2ZW50UGx1Z2luUmVnaXN0cnk6Q2EsRXZlbnRQcm9wYWdhdG9yczprYixSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6JGIsUmVhY3RET01Db21wb25lbnRUcmVlOmJiLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjokZH0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgdGcoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTtcblguaW5qZWN0SW50b0RldlRvb2xzKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpVYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjMuMlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBIZz1PYmplY3QuZnJlZXplKHtkZWZhdWx0OkdnfSksSWc9SGcmJkdnfHxIZzttb2R1bGUuZXhwb3J0cz1JZ1tcImRlZmF1bHRcIl0/SWdbXCJkZWZhdWx0XCJdOklnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxxPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLHQ9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHU9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdj1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHc9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx4PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDkseT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsej1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsQT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZvcndhcmRfcmVmXCIpOlxuNjAxMTIsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50XFx4M2RcIithLGM9MDtjPGI7YysrKWUrPVwiXFx4MjZhcmdzW11cXHgzZFwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7bighMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGUpfXZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtcbmZ1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RH1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9DKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fER9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7bShILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBMKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilKLmNhbGwoYixjKSYmIUsuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaz1BcnJheShmKSxsPTA7bDxmO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOkkuY3VycmVudH19XG5mdW5jdGlvbiBNKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT10fWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCJcXHgzZFwiOlwiXFx4M2QwXCIsXCI6XCI6XCJcXHgzZDJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE49L1xcLysvZyxPPVtdO2Z1bmN0aW9uIFAoYSxiLGUsYyl7aWYoTy5sZW5ndGgpe3ZhciBkPU8ucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1mdW5jdGlvbiBRKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+Ty5sZW5ndGgmJk8ucHVzaChhKX1cbmZ1bmN0aW9uIFIoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHQ6Y2FzZSB1Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1MoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrUyhkLGgpO2crPVIoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLFxuaD0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitTKGQsaCsrKSxnKz1SKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEMoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFMoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFQoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gVShhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsYyxlLHEudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKE0oYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE4sXCIkXFx4MjYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE4sXCIkXFx4MjYvXCIpK1wiL1wiKTtiPVAoYixnLGMsZCk7bnVsbD09YXx8UihhLFwiXCIsVSxiKTtRKGIpfVxudmFyIFc9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VihhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9UChudWxsLG51bGwsYixlKTtudWxsPT1hfHxSKGEsXCJcIixULGIpO1EoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UihhLFwiXCIscS50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxxLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe00oYSk/dm9pZCAwOkMoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp5LFxuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2RlZmF1bHRWYWx1ZTphLF9jdXJyZW50VmFsdWU6YSxfY2hhbmdlZEJpdHM6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOngsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxyZW5kZXI6YX19LEZyYWdtZW50OnYsU3RyaWN0TW9kZTp3LHVuc3RhYmxlX0FzeW5jTW9kZTp6LGNyZWF0ZUVsZW1lbnQ6TCxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe251bGw9PT1hfHx2b2lkIDA9PT1hP0MoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGQ9bSh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1JLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgaz12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiZcbihrPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSi5jYWxsKGIsYykmJiFLLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1rP2tbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtrPUFycmF5KGMpO2Zvcih2YXIgbD0wO2w8YztsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWt9cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TC5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok0sdmVyc2lvbjpcIjE2LjMuMlwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpJLGFzc2lnbjptfX0sWD1PYmplY3QuZnJlZXplKHtkZWZhdWx0Old9KSxcblk9WCYmV3x8WDttb2R1bGUuZXhwb3J0cz1ZW1wiZGVmYXVsdFwiXT9ZW1wiZGVmYXVsdFwiXTpZO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEFwcCBmcm9tICcuL2NvbXBvbmVudHMvQXBwJztcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgY2hhdEFwcCBmcm9tICcuL3JlZHVjZXJzL3JlZHVjZXJzJztcbmltcG9ydCBTb2NrZXQgZnJvbSAnLi9Tb2NrZXQnO1xuaW1wb3J0IHsgcmVjZWl2ZU1lc3NhZ2UsIHJlY2VpdmVDb252ZXJzYXRpb24sIHJldHJpZXZlQ29udmVyc2F0aW9uIH0gZnJvbSAnLi9hY3Rpb25zL2FjdGlvbnMnO1xuXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKGNoYXRBcHAsIGFwcGx5TWlkZGxld2FyZSh0aHVuaykpO1xuXG5Tb2NrZXQub24oJ1JFQ0VJVkVfTUVTU0FHRScsIG1lc3NhZ2UgPT4ge1xuICBzdG9yZS5kaXNwYXRjaChyZWNlaXZlTWVzc2FnZShKU09OLnBhcnNlKG1lc3NhZ2UpKSk7XG59KVxuXG5Tb2NrZXQub24oJ1JFQ0VJVkVfQ09OVkVSU0FUSU9OJywgbWVzc2FnZXMgPT4ge1xuICBzdG9yZS5kaXNwYXRjaChyZWNlaXZlQ29udmVyc2F0aW9uKEpTT04ucGFyc2UobWVzc2FnZXMpKSk7XG59KVxuXG5zdG9yZS5kaXNwYXRjaChyZXRyaWV2ZUNvbnZlcnNhdGlvbigpKTtcblxuUmVhY3RET00ucmVuZGVyKFxuICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfSA+XG4gICAgPEFwcCAvPlxuICA8L1Byb3ZpZGVyPixcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7IiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiJdLCJzb3VyY2VSb290IjoiIn0=